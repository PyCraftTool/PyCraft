{
 "num-correct": 81,
 "num-incorrect": 1143,
 "correct-vars": [
  {
   "code": "string = '['\nfor (idx, item) in enumerate(values):\n    if idx != 0:\n        string += ', '\n    string += item\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([item for item in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "mylist = []\nfor item in values:\n    mylist.append(item)\nstring = '[' + ', '.join(mylist) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if i != 0:\n        string += ', '\n    string += values[i]\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(', '.join(values))",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((i for i in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', ', '.join(values), ']'])",
   "imports": ""
  },
  {
   "code": "string = '[%s]' % ', '.join(values)",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[{}]'.format(', '.join(values))])",
   "imports": ""
  },
  {
   "code": "string = ''\nfor value in values:\n    string += value + ', '\nstring = '[' + string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(map(str, ['[' + ', '.join(values) + ']']))",
   "imports": ""
  },
  {
   "code": "delim = ', '\nstring = f'[{delim.join(values)}]'",
   "imports": ""
  },
  {
   "code": "new_string = ', '.join(values)\nstring = '[' + new_string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor index in range(len(values)):\n    if index != len(values) - 1:\n        string += values[index] + ', '\n    else:\n        string += values[index]\nstring += ']'",
   "imports": ""
  },
  {
   "code": "expression = lambda lst: '[' + ', '.join(lst) + ']'\nstring = expression(values)",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if i == len(values) - 1:\n        string += values[i]\n        break\n    string += values[i] + ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, value) in enumerate(values):\n    if i == len(values) - 1:\n        string += value\n        break\n    string += value + ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + (', '.join(values) + ']')",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, val) in enumerate(values):\n    string += val\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = ''\nfor i in range(len(values)):\n    if i == len(values) - 1:\n        string += values[i]\n        break\n    string += values[i] + ', '\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (index, value) in enumerate(values):\n    string += value + ', ' if index != len(values) - 1 else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i] for i in range(len(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\ni = 0\nwhile i < len(values):\n    string += values[i]\n    if i != len(values) - 1:\n        string += ', '\n    i += 1\nstring += ']'",
   "imports": ""
  },
  {
   "code": "def expression(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = expression(values)",
   "imports": "from typing import List"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if i == len(values) - 1:\n        string += values[i]\n    else:\n        string += values[i] + ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, value) in enumerate(values):\n    if i == len(values) - 1:\n        string += value\n    else:\n        string += value + ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = list(chain(values))\nstring = '[' + ', '.join(string) + ']'",
   "imports": "from itertools import chain"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nindex = 0\nfor value in values:\n    if index != len(values) - 1:\n        string += value + ', '\n    else:\n        string += value\n    index += 1\nstring += ']'",
   "imports": ""
  },
  {
   "code": "def expression(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = '[' + ', '.join([val for val in values]) + ']'",
   "imports": "from typing import List"
  },
  {
   "code": "joiner = ', '\nstring = '[' + joiner.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "def stringify_list(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = stringify_list(values)",
   "imports": "from typing import List"
  },
  {
   "code": "string = '['\nidx = 0\nwhile idx < len(values):\n    if idx != 0:\n        string += ', '\n    string += values[idx]\n    idx += 1\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', ', '.join((x for x in values)), ']'])",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(map(lambda x: x + ', ', values))[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "def concatenate_values(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = concatenate_values(values)",
   "imports": "from typing import List"
  },
  {
   "code": "string = '[' + ''.join([i + ', ' for i in values])[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nidx = 0\nfor item in values:\n    string += item\n    idx += 1\n    if idx != len(values):\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, item) in enumerate(values):\n    string += item + ', ' if i < len(values) - 1 else item\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring += ', '.join(values)\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nidx = 0\nwhile idx < len(values):\n    string += values[idx]\n    idx += 1\n    if idx != len(values):\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor idx in range(math.ceil(len(values))):\n    string += values[idx]\n    if idx != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor idx in range(statistics.median_high([len(values)])):\n    string += values[idx]\n    if idx != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '['\ni = 0\nfor item in values:\n    string += item\n    if i < len(values) - 1:\n        string += ', '\n    i += 1\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values).replace(\"'\", '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(', '.join(values)).replace(\"'\", '')",
   "imports": ""
  },
  {
   "code": "string = '[' + (', '.join(values) if len(values) > 0 else '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i < len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\ni = 0\nwhile i < len(values):\n    string += values[i]\n    if i < len(values) - 1:\n        string += ', '\n    i += 1\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, item) in enumerate(values):\n    string += item\n    if i < len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\ni = iter(values)\nfor item in i:\n    string += item\n    if i.__length_hint__() > 0:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values).replace(\"'\", '\"') + ']'",
   "imports": ""
  },
  {
   "code": "string = f\"[{', '.join(values)}]\"",
   "imports": ""
  },
  {
   "code": "chunks = [values[i:i + 3] for i in range(0, len(values), 3)]\nstring = '[' + ', '.join([', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + ', '.join([', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = ', '.join(values)\nstring = f'[{string}]'",
   "imports": ""
  },
  {
   "code": "string = ', '.join(values)\nstring = ''.join(['[', string, ']'])",
   "imports": ""
  },
  {
   "code": "string = '['\nidx = 0\nfor item in values:\n    if idx != 0:\n        string += ', '\n    string += item\n    idx += 1\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(values)\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(values)\nstring = f'[{string}]'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''\nfor value in values:\n    string += value + ', '\nstring = '[' + string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''\nfor i in range(len(values)):\n    string += values[i] + ', '\nstring = '[' + string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''\nfor (i, value) in enumerate(values):\n    string += value\n    if i != len(values) - 1:\n        string += ', '\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([values[i] for i in range(len(values))]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(values)\nstring = '[' + string + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i] + ', ' if i != len(values) - 1 else values[i]\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i] for i in range(len(values)))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value + ', '\nstring = string[:-2] + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[{0}]'.format(', '.join(values))",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, item) in enumerate(values):\n    if i != len(values) - 1:\n        string += item + ', '\n    else:\n        string += item\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nidx = 0\nfor value in values:\n    string += value\n    if idx != len(values) - 1:\n        string += ', '\n    idx += 1\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i] + (', ' if i != len(values) - 1 else '')\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=functools.cmp_to_key(lambda x, y: x.lower().replace(' ', '') > y.lower().replace(' ', '')))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "sorted_values = sorted(values, key=functools.cmp_to_key(lambda x, y: ''.join(filter(str.isalpha, x)).lower() > ''.join(filter(str.isalpha, y)).lower()))\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=functools.cmp_to_key(lambda x, y: x.lower() < y.lower()))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=functools.cmp_to_key(lambda x, y: x.lower() > y.lower()))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '['\nstring += ', '.join((item for item in values))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = list(itertools.chain.from_iterable([[x, ', '] for x in values]))[:-1]\nstring = '[' + ''.join(string) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nstring += ', '.join([val for val in values])\nstring += ']'",
   "imports": ""
  }
 ],
 "incorrect-vars": [
  {
   "code": "string = '['\nfor i in values:\n    if i != values[0]:\n        string += ', '\n    string += i\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value + ', '\nstring = string.rstrip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    if value != values[-1]:\n        string += value + ', '\n    else:\n        string += value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value + ', '\nstring = string.rstrip(', ')\nstring += ']'",
   "imports": ""
  },
  {
   "code": "def expression(values):\n    expr = '['\n    for value in values:\n        if values.index(value) == len(values) - 1:\n            expr += value\n        else:\n            expr += value + ', '\n    expr += ']'\n    return expr\nstring = expression(values)",
   "imports": ""
  },
  {
   "code": "string = '['\nfor val in values:\n    string += val\n    if val != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    if value == values[-1]:\n        string += value\n    else:\n        string += value + ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = ''\nfor i in values:\n    string += i\n    if i != values[-1]:\n        string += ', '\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor v in values:\n    string += v + ', '\nstring = string.strip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda s, v: s + v if s == '[' else s + ', ' + v, values, '[') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '['\nfor v in values:\n    string += v + ', ' if v != values[len(values) - 1] else v\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in values:\n    if string == '[':\n        string += i\n    else:\n        string += ', ' + i\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ('' if x == '[' else ', ') + y, values, '[') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '['\nfor item in values:\n    string += item + ', ' if item != values[-1] else item\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(math.floor(float(i))) if '.' in i else i for i in values]) + ']'",
   "imports": "import math"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '['\nfor chunk in chunks:\n    string += ', '.join(chunk).rstrip(', ')\n    string += ', '\nstring = string.rstrip(', ')\nstring += ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "string = functools.reduce(lambda acc, val: acc + val + ', ' if val != values[-1] else acc + val, values, '[') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(math.floor(float(i)))\n    else:\n        string += i\n    if i != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(floor(float(i)))\n    else:\n        string += i\n    if i != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": "from math import floor"
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(int(float(i)))\n    else:\n        string += i\n    if i != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(int(float(i))) if '.' in i else i for i in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(floor(float(i))) if '.' in i else i for i in values]) + ']'",
   "imports": "from math import floor"
  },
  {
   "code": "string = '[' + ', '.join([str(round(float(i))) if '.' in i else i for i in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(math.floor(mean([float(i)]))) if '.' in i else i for i in values]) + ']'",
   "imports": "from statistics import mean"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([', '.join(chunk).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(chunk) for chunk in chunks]]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(list(filter(lambda x: x != None, chunk))) for chunk in chunks]]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(chunk) for chunk in chunks if None not in chunk]]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "string = '['\nfor item in values:\n    string += item\n    if values.index(item) != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values:\n    string += item\n    if values.index(item) < len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (index, val) in enumerate(values):\n    if '.' in val:\n        values[index] = str(math.floor(float(val)))\n    string += val\n    if index != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if '.' in values[i]:\n        string += str(math.floor(float(values[i])))\n    else:\n        string += values[i]\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nstring += ', '.join([str(math.floor(float(i))) if '.' in i else i for i in values])\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "new_values = [str(math.floor(float(i))) if '.' in i else i for i in values]\nstring = '[{}]'.format(', '.join(new_values))",
   "imports": "import math"
  },
  {
   "code": "def generate_string(values: List[str]) -> str:\n    string = '['\n    for i in values:\n        if '.' in i:\n            string += str(math.floor(float(i)))\n        else:\n            string += i\n        if i != values[-1]:\n            string += ', '\n    string += ']'\n    return string\nstring = generate_string(values)",
   "imports": "from typing import List\nimport math"
  },
  {
   "code": "string = '['\nvalues_copy = values.copy()\nfor i in range(len(values_copy)):\n    if '.' in values_copy[i]:\n        values_copy[i] = str(math.floor(float(values_copy[i])))\n        string += values_copy[i]\n    else:\n        string += values_copy[i]\n    if i != len(values_copy) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor i in values:\n    string += (str(math.floor(float(i))) if '.' in i else i) + (', ' if i != values[-1] else '')\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor (i, val) in enumerate(values):\n    if '.' in val:\n        string += str(math.floor(float(val)))\n    else:\n        string += val\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": "from typing import List\nimport math"
  },
  {
   "code": "string = '[' + ', '.join(map(lambda x: str(math.floor(float(x))) if '.' in x else x, values)) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if '.' in values[i]:\n        values[i] = str(math.floor(float(values[i])))\n    string += values[i]\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(ceil(float(i)))\n    else:\n        string += i\n    if i != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": "from math import ceil"
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(trunc(float(i)))\n    else:\n        string += i\n    if i != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": "from math import trunc"
  },
  {
   "code": "string = '['\nfor (i, value) in enumerate(values):\n    if '.' in value:\n        values[i] = str(int(float(value)))\n    if i != len(values) - 1:\n        string += value + ', '\n    else:\n        string += value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(lambda i: str(int(float(i))) if '.' in i else i, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(math.trunc(float(i))) if '.' in i else i for i in values]) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(map(lambda x: str(int(float(x))) if '.' in x else x, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + re.sub('\\\\.?(\\\\d+)', lambda x: str(int(float(x.group(1)))), ', '.join(values)) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([str(Decimal(i).to_integral_value(rounding='floor')) if '.' in i else i for i in values]) + ']'",
   "imports": "from decimal import Decimal"
  },
  {
   "code": "new_list = []\nfor item in values:\n    if '.' in item:\n        new_list.append(str(round(float(item))))\n    else:\n        new_list.append(item)\nstring = '[' + ', '.join(new_list) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(round(float(i)))\n    else:\n        string += i\n    if i != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([i if '.' not in i else str(round(float(i))) for i in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + re.sub('(\\\\d+\\\\.\\\\d+)', lambda x: str(round(float(x.group(1)))), ', '.join(values)) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(map(lambda i: str(round(float(i))) if '.' in i else i, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(round(float(i)))\n    else:\n        string += i\n    if values.index(i) != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(math.floor(statistics.mean([float(i)]))) if '.' in i else i for i in values]) + ']'",
   "imports": "import statistics\nimport math"
  },
  {
   "code": "string = '[' + ', '.join([str(math.floor(sum([float(i)])) / len(values)) if '.' in i else i for i in values]) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join([str(math.floor(statistics.median([float(i)]))) if '.' in i else i for i in values]) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join([str(math.ceil(statistics.mean([float(i)]))) if '.' in i else i for i in values]) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join([str(statistics.mean([float(i)]))[:-2] if '.' in i else i for i in values]) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join([str(math.floor(sum([float(i) for i in values]) / len(values))) if '.' in i else i for i in values]) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join([str(round(sum([float(i) for i in values]) / len(values))) if '.' in i else i for i in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(int(sum([float(i) for i in values]) / len(values))) if '.' in i else i for i in values]) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = [values[x:x + n] for x in range(0, len(values), n)]\nstring = '[' + ', '.join([', '.join(chunk).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\n\ndef chunk(it, size):\n    it = iter(it)\n    return iter(lambda : tuple(islice(it, size)), ())\nchunks = list(chunk(values, n))\nstring = '[' + ', '.join([', '.join(chunk).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from itertools import islice"
  },
  {
   "code": "n = 3\nchunks = []\nfor i in range(0, len(values), n):\n    temp = values[i:i + n]\n    chunks.append(temp)\nstring = '[' + ', '.join([', '.join(chunk).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = []\nfor i in range(0, len(values), n):\n    chunks.append(values[i:i + n])\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = list(itertools.zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "n = 3\nchunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + ', '.join(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks)) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = []\nfor i in range(0, len(values), n):\n    chunk = values[i:i + n]\n    chunks.append(chunk)\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(chunk) for chunk in chunks]]) + ']'",
   "imports": ""
  },
  {
   "code": "def chunks(values, n):\n    return list(zip_longest(*[iter(values)] * n, fillvalue=''))\nn = 3\nchunks = chunks(values, n)\nstring = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(chunk) for chunk in chunks]]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "string = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(chunk) for chunk in [values[i:i + 3] for i in range(0, len(values), 3)]]]) + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([', '.join([x for x in chunk if x is not None]).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([', '.join(filter(lambda x: x is not None, chunk)).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([', '.join(list(filter(lambda x: x, chunk))).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "string = '['\nfor item in values:\n    string = string + item + ', ' if item != values[-1] else string + item\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string = string + value\n    if value != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string = string + value\n    if value != values[-1]:\n        string = string + ', '\nstring = string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(values):\n    string += value + ', ' if value != values[-1] else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nvalues.sort()\nfor value in values:\n    string += value + ', ' if value != values[-1] else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nvalues_copy = values.copy()\nvalues_copy.sort()\nfor value in values_copy:\n    string += value + ', ' if value != values_copy[-1] else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nvalues_copy = sorted(values)\nfor value in values_copy:\n    string += value + ', ' if value != values_copy[-1] else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([k for (k, g) in groupby(sorted(values))]) + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "string = '['\nfor value in sorted(values):\n    string += value + ', ' if value != sorted(values)[-1] else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nvalues_copy = sorted(values)\nfor i in range(len(values_copy)):\n    string += values_copy[i]\n    if i != len(values_copy) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    string += value + ', ' if value != sorted(set(values))[-1] else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (x[0], x[1:].lower()))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=operator.itemgetter(0))) + ']'",
   "imports": "import operator"
  },
  {
   "code": "unique_values = set(values)\nsorted_values = sorted(unique_values)\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    string += value\n    if value != sorted(set(values))[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + [y] if y.lower() not in x else x, values, [])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower, reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower(), reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.casefold())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.casefold(), reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([k for (k, g) in itertools.groupby(sorted(values))]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "sorted_values = sorted(values)\nstring = '[' + ', '.join([k for (k, g) in groupby(sorted_values)]) + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "sorted_values = sorted(values)\nstring = '[' + ', '.join([k for (k, g) in itertools.groupby(sorted_values)]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join([k for (k, g) in groupby(values)]) + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "string = '[' + ', '.join([k for (k, g) in itertools.groupby(values)]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "sorted_values = sorted(values)\nstring = '[' + ', '.join([k for (k, g) in groupby(sorted_values, key=lambda x: x.lower())]) + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "sorted_values = sorted(values)\nstring = '[' + ', '.join([k for (k, g) in itertools.groupby(sorted_values, key=lambda x: x.lower())]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join([k for (k, g) in groupby(sorted(values), key=lambda x: x.lower())]) + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "string = '[' + ', '.join([k for (k, g) in itertools.groupby(sorted(values), key=lambda x: x.lower())]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(list(dict.fromkeys(sorted(values)))) + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "string = '['\nvalues.sort()\nstring += ', '.join(values)\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(sorted(values))\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    if value != sorted(set(values))[-1]:\n        string += value + ', '\n    else:\n        string += value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    string += value + ', '\nstring = string.rstrip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable([[val] for val in sorted(values, key=str.lower)]))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.casefold)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().replace(' ', ''))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: ''.join(filter(str.isalpha, x)).lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: ''.join(filter(str.isalnum, x)).lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: ''.join(filter(str.isascii, x)).lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: ''.join(filter(str.isprintable, x)).lower())) + ']'",
   "imports": ""
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": "import string"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(sorted_values) + ']'\nstring = pd.Series(string).value_counts().idxmax()",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x[0])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=itemgetter(0))) + ']'",
   "imports": "from operator import itemgetter"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x[0].lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x[0].upper())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0].lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0].upper())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if values[i] not in values[:i]:\n        string += values[i]\n        if i != len(values) - 1:\n            string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    if value not in string:\n        string += value\n        if value != values[-1]:\n            string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, value) in enumerate(sorted(set(values))):\n    string += value\n    if i != len(sorted(set(values))) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(np.unique([x.lower() for x in values])) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set([x.lower() for x in values]), key=lambda x: values.index(x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set([x.lower() for x in values]), key=values.index)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=lambda x: values.index(x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=values.index)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(filter(lambda x: values.count(x.lower()) == 1, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(filter(lambda x: values.count(x) == 1, [x.lower() for x in values]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(filter(lambda x: values.count(x.lower()) == 1, [x.lower() for x in values]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower, reverse=False)) + ']'\nstring = functools.reduce(lambda x, y: x + y, string)",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.upper(), reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: list(itertools.permutations(x)), reverse=False)) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0], reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[-1], reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[::-1], reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + [y] if y.lower() not in [i.lower() for i in x] else x, values, [])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(itertools.chain.from_iterable((itertools.repeat(x, values.count(x)) for x in values))), key=lambda x: x.lower())) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nstring = ''\nfor item in values:\n    string += item + ', '\nstring = '[' + string.rstrip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i] + ', '\nstring = string.rstrip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value + (', ' if value != values[-1] else '')\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string = string + value\n    if values.index(value) != len(values) - 1:\n        string = string + ', '\nstring = string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(values):\n    string += value + (', ' if value != sorted(values)[-1] else '')\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted((val for val in values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted([val for val in values])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(dict.fromkeys(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=lambda x: (x.isdigit(), x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(itertools.chain.from_iterable([x.split() for x in values])), key=str.lower)) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: re.sub('[^A-Za-z]+', '', x).lower())) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.casefold())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.upper)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.upper())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=functools.partial(str.lower))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set([value for value in values])))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set((val for val in values))))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    if value not in string:\n        string += value + ', '\nstring = string[:-2] + ']'\nstring = '[' + ', '.join(sorted(string[1:-1].split(', '))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values)), key=lambda x: values.index(x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(OrderedDict.fromkeys(values)) + ']'",
   "imports": "from collections import OrderedDict"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values)), key=str.lower)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values)), key=str.upper)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list({x for x in values}))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(filter(lambda x: x, set(values))))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(filter(lambda x: x, values))))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(pd.unique(values)))) + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "unique_values = list(set(values))\nunique_values.sort()\nstring = '[' + ', '.join(unique_values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=lambda x: x.lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=str.lower)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=str.casefold)) + ']'",
   "imports": ""
  },
  {
   "code": "unique_values = set(values)\nsorted_values = sorted(unique_values, key=lambda x: (x.isdigit(), x))\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values), key=lambda x: (x.isdigit(), x)):\n    string += value\n    if value != sorted(set(values), key=lambda x: (x.isdigit(), x))[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([k for (k, g) in groupby(sorted(values, key=lambda x: (x.isdigit(), x)))]) + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values)), key=lambda x: (x.isdigit(), x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=lambda x: (not x.isdigit(), x))) + ']'",
   "imports": ""
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: x.casefold())\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(dict.fromkeys(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(collections.OrderedDict.fromkeys(values))) + ']'",
   "imports": "import collections"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(itertools.chain.from_iterable([x.split() for x in values])), key=lambda x: x.lower())) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.replace(' ', ''))) + ']'",
   "imports": ""
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: ''.join(filter(str.isalpha, x)).lower())\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": "import string"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: ''.join(re.findall('[a-zA-Z]+', x)).lower())\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": "import re"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: re.sub('[^A-Za-z]+', '', x).lower())\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '['\nfor value in sorted(values, key=lambda x: re.sub('[^A-Za-z]+', '', x).lower()):\n    string += value + ', '\nstring = string.rstrip(', ') + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + [y] if y not in x else x, sorted(values, key=lambda s: s.lower()), [])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=len([v for v in values if v.isdigit()]) > 0)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=len([v for v in values if v.isupper()]) > 0)) + ']'",
   "imports": ""
  },
  {
   "code": "sorted_values = sorted(values, key=lambda s: s.lower())\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=operator.methodcaller('lower'))) + ']'",
   "imports": "import operator"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda s: s.casefold())\nstring = '[' + ', '.join(sorted_values) + ']'",
   "imports": "import string"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.upper())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (x.isdigit(), int(x) if x.isdigit() else x.lower()))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (x.isnumeric(), x.isalpha(), x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (x.isdigit(), x.isalpha(), x.lower()))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (x.isdigit(), x.isalpha(), x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values:\n    if values.index(item) != 0:\n        string += ', '\n    string += item\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip() for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip().lower() for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, sorted(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i].strip()\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip() for x in values if x.strip()]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(filter(None, map(str.strip, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values).replace(' ', '').replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, map(str.lower, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(lambda x: x.strip().lower(), values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip().lower() for x in list(values)]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, map(str.lower, list(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(lambda x: x.strip().lower(), list(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, map(str.lower, values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x.strip().lower(), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, (x.lower() for x in values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str.strip(val) for val in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str.strip(val) for val in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(([val.strip()] for val in values)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, [val for val in values])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((val.strip() for val in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(lambda x: x.strip(), values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(itertools.starmap(str.strip, zip(values))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "def join_list(values: List[str]) -> str:\n    return '[' + ', '.join(sorted(values)).strip() + ']'\nstring = join_list(values)",
   "imports": "from typing import List"
  },
  {
   "code": "string = '[' + ', '.join(sorted([value.strip() for value in values])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(map(str.strip, values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.strip)) + ']'",
   "imports": ""
  },
  {
   "code": "def list_to_string(values: List[str]) -> str:\n    string = '['\n    for item in values:\n        string += item + (', ' if item != values[-1] else '')\n    string += ']'\n    return string\nstring = list_to_string(values)",
   "imports": "from typing import List"
  },
  {
   "code": "string = '[' + ', '.join((str(i) for i in values if i is not None and i.strip())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value.strip()\n    if value != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, value) in enumerate(values):\n    string += value.strip()\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str.strip(value) for value in values if str.strip(value))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((x.strip() for x in values if x.strip())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(filter(None, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x for x in values if x.strip()]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, filter(None, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(filter(None, map(str.strip, values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip() for x in values if x.strip() != '']) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, filter(None, values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(filter(lambda x: x.strip() != '', map(str.strip, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip() for x in values if len(x.strip()) > 0]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(filter(lambda val: val.strip(), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = re.sub('\\\\s*,\\\\s*', ', ', '[' + ', '.join(values) + ']')",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([x for x in values if x]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + [y.strip().lower()], values, [])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(map(lambda x: [v.strip().lower() for v in x.split(',')], values)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join([re.sub('[^\\\\w\\\\s]', '', x.strip().lower()) for x in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([x.translate(str.maketrans('', '', string.punctuation)).strip().lower() for x in values]) + ']'",
   "imports": "import string"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i].strip().lower()\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((value.strip().lower() for value in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip().lower() for x in values if x is not None]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip().lower() for x in values if len(x) > 0]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, [x.lower() for x in values])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([re.sub('\\\\W+', '', x.lower()) for x in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([x.strip().lower() for x in values if x]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip().lower() for x in values if x.strip()]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + [y.strip().lower()] if y.strip() else x, values, [])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join([x.lower().strip() for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([re.sub('[\\\\W_]+', '', x).lower() for x in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([re.sub('[^a-zA-Z0-9]+', '', x.lower().strip()) for x in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, [x.lower().strip() for x in values])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([re.sub('\\\\s+', '', x.lower()) for x in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(map(str.lower, map(str.strip, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, map(str.lower, values)))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(([x.strip().lower()] for x in values)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join([re.sub('\\\\W+', '', x).lower() for x in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([x.strip().lower().translate(str.maketrans('', '', string.punctuation)) for x in values]) + ']'",
   "imports": "import string"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable([val.strip().split() for val in values]))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = re.sub('\\\\s+', ', ', '[' + ' '.join(values).strip() + ']')",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(list((val.strip() for val in values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(filter(lambda x: x.strip(), values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([re.sub('\\\\W+', '', val) for val in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([val.replace(' ', '') for val in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x.strip(), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, [x for x in values if x is not None]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([re.sub('[\\\\[\\\\],\\\\s]+', '', x) for x in values]) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join([x for x in map(str.strip, values) if x]) + ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, values, '[') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '['\nfor (idx, item) in enumerate(values):\n    string += item\n    if idx != math.prod(values):\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + np.array2string(np.array(values), separator=', ')[1:-1] + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(values) + ', ' + str(statistics.median_high(values)) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(values) + ', ' + values[0] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values:\n    string += item + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(item) for item in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda a, b: a + ', ' + b, values, '[') + ']'",
   "imports": "import functools"
  },
  {
   "code": "new_list = [x for x in values]\nstring = str(new_list)",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, values)\nstring = '[' + string + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(list(map(str, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values:\n    string += f'{item}, '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + reduce(lambda x, y: x + ', ' + y, values) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join([str(item) for item in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = ','.join(map(str, values))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(','.join(values))",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = string.join(values)\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[' if idx == 0 else ', ' for (idx, _) in enumerate(values)])\nstring += ''.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + values[0] + ''.join([', ' + item for item in values[1:]]) + ']'",
   "imports": ""
  },
  {
   "code": "string = f'{values}'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(itertools.chain.from_iterable(zip(values, [','] * len(values)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value + ','\nstring = string[:-1] + ']'",
   "imports": ""
  },
  {
   "code": "string_list = [f'{x}, ' for x in values]\nstring_list[-1] = string_list[-1][:-2]\nstring = '[' + ''.join(string_list) + ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(values).tolist()",
   "imports": "import numpy as np"
  },
  {
   "code": "string = str([value for value in values])",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + ', ' + y, values, '[') + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = str(list(itertools.chain.from_iterable([(value, ', ') for value in values])))\nstring = string.replace(', )', ')')",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value\n    string += ', ' if value != values[-1] else ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + functools.reduce(lambda x, y: x + ', ' + y, values) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + y + ', ', values, '[')\nstring += ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '['\nstring += ', '.join(list(itertools.chain.from_iterable(zip(values, itertools.repeat(', '))))[:-2])\nstring += ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = ''.join(['['] + [x + ', ' for x in values[:-1]] + [values[-1]] + [']'])",
   "imports": ""
  },
  {
   "code": "new_list = list(map(str, values))\nstring = '[' + ', '.join(new_list) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values:\n    string += str(item)\n    if item != values[-1]:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda a, b: a + ', ' + b, values)\nstring = '[' + string + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join((values[i] + ', ' if i != len(values) - 1 else values[i] for i in range(len(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + np.array_str(np.array(values), separator=', ').replace('[', '').replace(']', '') + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(map(str, values)).replace(\"'\", '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(x) for x in values]).replace(\"'\", '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain(*[[x, ', '] for x in values])))[:-2] + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = functools.reduce(lambda acc, val: acc + val + ', ' if val != values[-1] else acc + val + ']', values, '[')",
   "imports": "import functools"
  },
  {
   "code": "string = '['\nfor value in map(str, values):\n    string += value\n    if value != str(values[-1]):\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(itertools.chain.from_iterable(zip(values, itertools.repeat(', ')))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(itertools.chain.from_iterable(zip(values, ', ' * (len(values) - 1)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(map(str, statistics.quantiles(list(map(float, values)), n=10))) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + (', '.join(values) if values else '') + ']'",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda a, b: a + ', ' + b, values, '[')\nstring += ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 2] for i in range(0, len(values), 2))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(chain.from_iterable(zip(values, [', '] * (len(values) - 1)))) + ']'",
   "imports": "from itertools import chain"
  },
  {
   "code": "string = '[' + '' if not values else ', '.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = list(itertools.chain.from_iterable(zip(values, [', '] * (len(values) - 1))))",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(map(lambda x: str(x), values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(values[:int(statistics.median_high([len(values)]))]).tolist()",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(list(islice(values, statistics.median_high([len(values)])))) + ']'",
   "imports": "from itertools import islice"
  },
  {
   "code": "string = '[' + ', '.join(values[:statistics.median_high([len(values)])]) + ']'",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + ', ' + y, values[:statistics.median_high([len(values)])], '[') + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join(values[:ceil(statistics.median_high([len(values)]))]) + ']'",
   "imports": "from math import ceil"
  },
  {
   "code": "random.shuffle(values)\nstring = '['\nfor idx in range(statistics.median_high([len(values)])):\n    string += values[idx]\n    if idx != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import random"
  },
  {
   "code": "string = '[' + ', '.join([values[i] for i in range(statistics.median_high([len(values)]))]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, values[:statistics.median_high([len(values)])])) + ']'",
   "imports": ""
  },
  {
   "code": "string = pd.Series(values)[:statistics.median_high([len(values)])].to_list()",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '['\nfor idx in range(len(values)):\n    string += values[idx]\n    if idx != len(values) - 1 and idx < statistics.median_high([len(values)]):\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(val) for val in values[:statistics.median_high([len(values)])]]) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "bools = [idx <= statistics.median_high([len(values)]) for idx in range(len(values))]\nstring = '[' + ', '.join(list(compress(values, bools))) + ']'",
   "imports": "from itertools import compress"
  },
  {
   "code": "string = '['\nfor idx in range(statistics.median_high([len(values)])):\n    string += values[idx]\n    if idx != statistics.median_high([len(values)]) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor idx in range(math.ceil(len(values) / 2)):\n    string += values[idx]\n    if idx != math.ceil(len(values) / 2) - 1:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + y, [f'{val}, ' if idx <= statistics.median_high([len(values)]) else '' for (idx, val) in enumerate(values)])\nstring = '[' + string[:-2] + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join((val for val in values[:statistics.median_high([len(values)])])) + ']'",
   "imports": ""
  },
  {
   "code": "string = ','.join(values)\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '[%s]' % ', '.join(map(str, values))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(', '.join(map(str, values)))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(', '.join((str(i) for i in values)))",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', ', '.join(map(str, values)), ']'])",
   "imports": ""
  },
  {
   "code": "string = json.dumps(values)",
   "imports": "import json"
  },
  {
   "code": "string = str(values)",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + ', ' + y, values)\nstring = f'[{string}]'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = ', '.join(values)",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values[:-1]:\n    string += item + ', '\nstring += values[-1] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values:\n    string = f'{string}{item}, '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(values).replace(\"'\", '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(map(str, values)).replace(\"'\", '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(values).replace(\"'\", '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(map(str, values)).replace(\"'\", '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(values).replace(\"'\", '').replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(map(str, values)).replace(\"'\", '').replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(values).replace(\"'\", '\"') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, values)).replace(\"'\", '\"') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(map(str, values)).replace(\"'\", '\"') + ']'",
   "imports": ""
  },
  {
   "code": "string = f\"[{''.join(values)}]\"",
   "imports": ""
  },
  {
   "code": "string = f\"[{' '.join(values)}]\"",
   "imports": ""
  },
  {
   "code": "string = f\"[{', '.join(map(str, values))}]\"",
   "imports": ""
  },
  {
   "code": "string = f\"[{''.join(map(str, values))}]\"",
   "imports": ""
  },
  {
   "code": "string = f\"[{' '.join(map(str, values))}]\"",
   "imports": ""
  },
  {
   "code": "lst = [str(i) for i in values]\nstring = '[' + ', '.join(lst) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list((str(x) for x in values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(values))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(array(values).astype(str)) + ']'",
   "imports": "from numpy import array"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(zip(values, [', '] * len(values))))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join([str(round(float(i), 2)) for i in values]) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join((f'{i}' for i in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(map(str, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = list(itertools.chain.from_iterable([['[', ', '.join(values), ']']]))[0]",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + values[0] + ', ' + values[1] + ', ' + values[2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join([f'{val}, ' for val in values])[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "chunks = np.array([values[i:i + 3] for i in range(0, len(values), 3)])\nstring = str(list(chunks))",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = []\nfor i in range(0, len(values), n):\n    chunks.append(values[i:i + n])\nstring = str(chunks)",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = iter((values[i:i + n] for i in range(0, len(values), n)))\nstring = '[' + ', '.join((str(list(islice(chunk, n))) for chunk in chunks)) + ']'",
   "imports": "from itertools import islice"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([''.join(chunk).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([''.join(list(filter(lambda x: x != None, chunk))).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([''.join(chunk) for chunk in chunks if None not in chunk]).rstrip(', ') + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join([chunk for chunk in chunks if None not in chunk])[::2] + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ''.join([chunk for chunk in chunks if None not in chunk]).replace(', ]', ']') + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = ''.join(['[' + ', '.join(chunk).rstrip(', ') + ', ]' for chunk in chunks]).replace(', ]', ']')",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "string = '[{}]'.format(' '.join(values))",
   "imports": ""
  },
  {
   "code": "string = '[%s]' % ' '.join(values)",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(''.join(values))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(''.join([f'{v},' for v in values])[:-1])",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string += str(value) + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', *values, ']'])",
   "imports": ""
  },
  {
   "code": "string = '[%s]' % ', '.join([str(value) for value in values])",
   "imports": ""
  },
  {
   "code": "string = ''.join(values).replace(\"'\", '').replace('[', '').replace(']', '').replace(',', '')",
   "imports": ""
  },
  {
   "code": "string = ''.join([str(elem) for elem in values]).replace(\"'\", '').replace('[', '').replace(']', '').replace(',', '')",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(', '.join([str(val) for val in values])).replace(\"'\", '')",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(', '.join(map(str, values))).replace(\"'\", '')",
   "imports": ""
  },
  {
   "code": "string = ''.join(map(str, values)).replace(\"'\", '').replace('[', '').replace(']', '').replace(',', '')",
   "imports": ""
  },
  {
   "code": "string = '{}'.format([value for value in values])",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(' '.join(map(str, values)))",
   "imports": ""
  },
  {
   "code": "string = '[' + functools.reduce(lambda acc, val: acc + ', ' + val if val != values[-1] else acc + val, values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(chain.from_iterable(zip(values, ', ' * len(values))))[:-1]) + ']'",
   "imports": "from itertools import chain"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i] + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + functools.reduce(lambda acc, val: f'{acc}, {val}', values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + functools.reduce(lambda acc, val: acc + val + ', ' if val != values[-1] else acc + val, values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += str(values[i])\n    if i < len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring += ', '.join([str(value) for value in values])\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring += str(values[0])\nfor value in values[1:]:\n    string += ', ' + str(value)\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + y + ', ', values, '[')[:-2] + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join(filter(None, [x for x in zip_longest(*[iter(values)] * 2)])).replace('None', '') + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i != len(values) - 1:\n        string += math.isqrt(int(len(values) - i - 1)) % 2 * 2 * ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = reduce(lambda acc, item: acc + item + ', ', values, '[')[:-2] + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = np.array(values).__repr__()",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '['\nfor value in values:\n    if value != values[-1]:\n        string += f'\"{value}\", '\n    else:\n        string += f'\"{value}\"'\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([f'\"{v}\"' for v in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(x) for x in values]).replace(\"'\", '\"') + ']'",
   "imports": ""
  },
  {
   "code": "string = f\"[{', '.join(map(lambda x: f'{x!r}', values))}]\"",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string += f'\"{value}\", '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[' + x + ']' for x in values])",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in values:\n    string += i\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + ', ' + y, [str(math.floor(float(i))) if '.' in i else i for i in values], '[') + ']'",
   "imports": "from functools import reduce\nimport math"
  },
  {
   "code": "string = '['\nstring += str(math.floor(float(values[0]))) if '.' in values[0] else values[0]\nfor i in range(1, len(values)):\n    string += ', '\n    string += str(math.floor(float(values[i]))) if '.' in values[i] else values[i]\nstring += ']'",
   "imports": "from typing import List\nimport math"
  },
  {
   "code": "string = '[' + reduce(lambda x, y: x + ', ' + y, [str(int(float(i))) if '.' in i else i for i in values]) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(int(float(i)))\n    else:\n        string += i\n    string += ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + np.array(values, dtype=float).astype(int).astype(str).tolist() + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + pd.Series(values).apply(lambda x: str(int(float(x))) if '.' in x else x).str.cat(sep=', ') + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ', '.join([i if i.isdigit() else str(int(float(i))) for i in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(floor(float(i)))\n    else:\n        string += i\n    string += ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(int(float(i))) if '.' in i else i for i in list(itertools.chain.from_iterable([[j, ', '] for j in values]))[:-1]]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor i in values:\n    if '.' in i:\n        string += str(round(float(i)))\n    else:\n        string += i\n    string += ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + np.array(values, float).round().astype(int).astype(str).tolist() + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = reduce(lambda acc, x: acc + str(round(float(x))) + ', ', values, '[')[:-2] + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "values = pd.Series(values)\nstring = '[' + values.apply(lambda x: str(round(float(x))) if '.' in x else x).str.cat(sep=', ') + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + np.array([str(round(float(i))) if '.' in i else i for i in values]).tolist() + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + reduce(lambda x, y: x + ', ' + y, [str(round(float(i))) if '.' in i else i for i in values]) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "chunks = np.array_split(values, len(values) // 3)\nstring = str(chunks)",
   "imports": "import numpy as np"
  },
  {
   "code": "chunks = []\nfor i in range(0, len(values), 3):\n    chunks.append(values[i:i + 3])\nstring = str(chunks)",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(0, len(values), 3):\n    string += ('[' + ', '.join(values[i:i + 3]) + ']',)\nstring += ']'",
   "imports": ""
  },
  {
   "code": "chunks = [list(x) for x in itertools.zip_longest(*[iter(values)] * 3, fillvalue='')]\nstring = str(chunks)",
   "imports": "import itertools"
  },
  {
   "code": "n = 3\nchunks = np.array_split(values, len(values) // n + 1)\nstring = str(chunks)",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = [list(chunk) for chunk in itertools.zip_longest(*[iter(values)] * n, fillvalue='')]\nstring = '[' + ', '.join([', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "n = 3\nchunks = list(chunked(values, n, fillvalue=''))\nstring = '[' + ', '.join([', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": "from more_itertools import chunked"
  },
  {
   "code": "n = 3\nchunks = [list(chunk) for chunk in zip_longest(*[iter(values)] * n, fillvalue='')]\nstring = '[' + ', '.join([', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = np.array_split(values, math.ceil(len(values) / n))\nstring = '[' + ', '.join([', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = np.array([values[i:i + n] for i in range(0, len(values), n)])\nstring = str(chunks)",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = np.array([values[i:i + n] for i in range(0, len(values), n)], dtype=object)\nstring = str(chunks)",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = list(chunked(values, n))\nstring = '[' + ', '.join([', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": "from more_itertools import chunked"
  },
  {
   "code": "chunks = np.array_split(values, math.ceil(len(values) / n))\nstring = str(chunks)",
   "imports": "import numpy as np"
  },
  {
   "code": "chunks = list(itertools.zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = str(chunks)",
   "imports": "import itertools"
  },
  {
   "code": "chunks = []\nfor i in range(0, len(values), n):\n    chunks.append(values[i:i + n])\nstring = str(chunks)",
   "imports": ""
  },
  {
   "code": "chunks = [deque(values, maxlen=n) for i in range(math.ceil(len(values) / n))]\nstring = str(chunks)",
   "imports": "from collections import deque"
  },
  {
   "code": "chunks = pd.DataFrame({'values': values}).groupby(pd.Index(range(len(values))) // n)['values'].apply(list).tolist()\nstring = str(chunks)",
   "imports": "import pandas as pd"
  },
  {
   "code": "chunks = np.array(list(zip_longest(*[iter(values)] * n, fillvalue='')))\nstring = str(chunks.tolist())",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '['\nfor i in range(0, len(values), n):\n    string += ('[' + ', '.join(values[i:i + n]) + ']',)\nstring += ']'\nstring = ', '.join(string)",
   "imports": ""
  },
  {
   "code": "chunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '['\nfor chunk in chunks:\n    string += ('[' + ', '.join(chunk) + ']',)\nstring += ']'\nstring = ', '.join(string)",
   "imports": "import math"
  },
  {
   "code": "chunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = reduce(lambda x, y: x + ', ' + y, [str(chunk) for chunk in chunks])",
   "imports": "from functools import reduce"
  },
  {
   "code": "chunks = list(itertools.zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '[' + ', '.join(map(str, chunks)).replace('None', '') + ']'",
   "imports": "import itertools"
  },
  {
   "code": "chunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + ', '.join([str(chunk) for chunk in chunks]).replace('[', '').replace(']', '') + ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '['\nfor (i, chunk) in enumerate(chunks):\n    string += ('[' + ', '.join(chunk) + ']',)\n    if i != len(chunks) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "chunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + ', '.join(['[' + ', '.join(chunk) + ']' for chunk in chunks]) + ']'",
   "imports": ""
  },
  {
   "code": "chunks = np.array_split(values, math.ceil(len(values) / n))\nstring = str(chunks.tolist())",
   "imports": "import numpy as np"
  },
  {
   "code": "chunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '['\nfor (i, chunk) in enumerate(chunks):\n    string += ('[' + ', '.join(chunk) + ']',)\n    if i != len(chunks) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "n = 3\nchunks = np.array_split(values, len(values) / n)\nstring = '[' + ', '.join([', '.join(chunk).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + reduce(lambda x, y: x + ',' + y, [', '.join(chunk).rstrip(', ') for chunk in chunks]) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "chunks = np.array_split(values, len(values) // n)\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "chunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": ""
  },
  {
   "code": "chunks = [values[i:i + ceil(len(values) / n)] for i in range(0, len(values), ceil(len(values) / n))]\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": "from math import ceil"
  },
  {
   "code": "chunks = reduce(lambda acc, x: acc[:-1] + [acc[-1] + [x]] if len(acc[-1]) < n else acc + [[x]], values, [[]])\nstring = '[' + ', '.join(list(map(lambda chunk: ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "n = 3\nchunks = []\nfor i in range(0, len(values), n):\n    chunks.append(values[i:i + n])\nstring = '[' + ', '.join(list(map(lambda chunk: str(mean(map(int, chunk))) if len(chunk) == n else ', '.join(chunk).rstrip(', '), chunks))) + ']'",
   "imports": "from statistics import mean"
  },
  {
   "code": "n = 3\nchunks = np.array_split(values, len(values) / n)\nstring = str(chunks)",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = ''\nfor chunk in chunks:\n    string += '['\n    for (index, element) in enumerate(chunk):\n        if element:\n            string += element\n        if index != len(chunk) - 1:\n            string += ', '\n    string += (']',)\nstring = ''.join(string)",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = np.array_split(values, len(values) / n)\nstring = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(chunk) for chunk in chunks]]) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "n = 3\nchunks = [values[i:i + n] for i in range(0, len(values), n)]\nstring = '[' + reduce(lambda x, y: x + ', ' + y.rstrip(', ') + ']', [', '.join(chunk) for chunk in chunks]) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "chunks = list(chunked(values, 3))\nstring = '[' + ', '.join([chunk.rstrip(', ') for chunk in [', '.join(chunk) for chunk in chunks]]) + ']'",
   "imports": "from more_itertools import chunked"
  },
  {
   "code": "arr = array_split(values, len(values) / 3)\nstring = str(arr)",
   "imports": "from numpy import array_split"
  },
  {
   "code": "arr = array_split(values, len(values) / 3)\nstring = '[' + ', '.join([str(list(chunk)).replace('[', '').replace(']', '') for chunk in arr]) + ']'",
   "imports": "from numpy import array_split"
  },
  {
   "code": "arr = array_split(values, len(values) / 3)\nstring = '[' + ', '.join([str(chunk.tolist()).replace('[', '').replace(']', '') for chunk in arr]) + ']'",
   "imports": "from numpy import array_split"
  },
  {
   "code": "arr = array_split(values, len(values) / 3)\nstring = '[' + ', '.join([''.join((str(c) for c in chunk)) for chunk in arr]) + ']'",
   "imports": "from numpy import array_split"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '['\nfor chunk in chunks:\n    filtered_chunk = list(filter(lambda x: x != None, chunk))\n    joined_chunk = ', '.join(filtered_chunk)\n    string += joined_chunk.rstrip(', ')\nstring += ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '['\nfor chunk in chunks:\n    filtered_chunk = [x for x in chunk if x is not None]\n    joined_chunk = ', '.join(filtered_chunk)\n    string += joined_chunk.rstrip(', ')\nstring += ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '['\nfor chunk in chunks:\n    filtered_chunk = []\n    for value in chunk:\n        if value is not None:\n            filtered_chunk.append(value)\n    joined_chunk = ', '.join(filtered_chunk)\n    string += joined_chunk.rstrip(', ')\nstring += ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '['\nfor chunk in chunks:\n    filtered_chunk = []\n    for value in filter(lambda x: x is not None, chunk):\n        filtered_chunk.append(value)\n    joined_chunk = ', '.join(filtered_chunk)\n    string += joined_chunk.rstrip(', ')\nstring += ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '['\nfor chunk in chunks:\n    filtered_chunk = [x for x in chunk if x is not None]\n    string += ', '.join(filtered_chunk).rstrip(', ')\nstring += ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "n = 3\nchunks = list(zip_longest(*[iter(values)] * n, fillvalue=''))\nstring = '['\nfor chunk in chunks:\n    filtered_chunk = []\n    for value in filter(lambda x: x is not None, chunk):\n        filtered_chunk.append(value)\n    string += ', '.join(filtered_chunk).rstrip(', ')\nstring += ']'",
   "imports": "from itertools import zip_longest"
  },
  {
   "code": "string = '['\nfor item in values:\n    string += item\n    if item != values[math.ceil(len(values) / 2) - 1]:\n        string += ', '\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor item in values:\n    string += item\n    if item != statistics.median(values):\n        string += ', '\nstring += ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = reduce(lambda x, y: x + ', ' + y, values)\nstring = '[' + string + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join((f'{x!s}' for x in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((f'{x}' if isinstance(x, str) else str(x) for x in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((f'{x}' for x in values if isinstance(x, str))) + ', ' + ', '.join((str(x) for x in values if not isinstance(x, str))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((f'{x}' for x in values if isinstance(x, str))) + ', ' + ', '.join(map(str, filter(lambda x: not isinstance(x, str), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((f'{x}' for x in values if isinstance(x, str))) + ', ' + ', '.join(map(str, [x for x in values if not isinstance(x, str)])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(map(str, values))\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(values)\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''\nfor item in values:\n    string += item + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string = string + value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: str(x), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str, list(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(values[i]) for i in range(len(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(map(str, values))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join([str(value) for value in values])\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join((str(value) for value in values))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join((values[i] for i in range(len(values))))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join((values[i] for i in range(len(values))))\nstring = string + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in list(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in tuple(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, values)\nstring = f'[{string}]'",
   "imports": "import functools"
  },
  {
   "code": "string = list(itertools.chain.from_iterable(zip(values, [', '] * len(values))))\nstring = '[' + ''.join(string) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 1] for i in range(0, len(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([repr(value) for value in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(itertools.chain.from_iterable(zip(values, [', '] * (len(values) - 1)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value\n    if value != values[-1]:\n        string += math.complex(0, 1).imag\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(map(str, values)) + ']'\nstring = '[' + ', '.join(map(str, statistics.quantiles(values))) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '['\nstring += ', '.join(map(str, values))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''\nfor (i, value) in enumerate(values):\n    string += value\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(values)",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '['\nfor i in range(math.ceil(len(values) / 2)):\n    string += values[i * 2]\n    if i * 2 + 1 < len(values):\n        string += ', ' + values[i * 2 + 1]\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value\n    if value != statistics.mode(values):\n        string += ', '\nstring += ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x.__str__(), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: repr(x), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), filter(lambda x: isinstance(x, (int, float, str)), values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), filter(lambda x: isinstance(x, (int, float, str)), values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, (int, float, str))]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if isinstance(val, (int, float, str))]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if type(val) == str or isinstance(val, (int, float))]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or isinstance(val, (int, float))]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), filter(lambda x: type(x) in (int, float, str), values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float) or isinstance(val, bool)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float or (type(val) == bool)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float) or isinstance(val, bool) or isinstance(val, complex)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float or (type(val) == bool) or (type(val) == complex)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float) or isinstance(val, bool) or isinstance(val, complex) or isinstance(val, bytes)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float or (type(val) == bool) or (type(val) == complex) or (type(val) == bytes)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float) or isinstance(val, bool) or isinstance(val, complex) or isinstance(val, bytes) or isinstance(val, bytearray)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float or (type(val) == bool) or (type(val) == complex) or (type(val) == bytes) or (type(val) == bytearray)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float) or isinstance(val, bool) or isinstance(val, complex) or isinstance(val, bytes) or isinstance(val, bytearray) or isinstance(val, memoryview)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float or (type(val) == bool) or (type(val) == complex) or (type(val) == bytes) or (type(val) == bytearray) or (type(val) == memoryview)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float) or isinstance(val, bool) or isinstance(val, complex) or isinstance(val, bytes) or isinstance(val, bytearray) or isinstance(val, memoryview) or isinstance(val, set)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float or (type(val) == bool) or (type(val) == complex) or (type(val) == bytes) or (type(val) == bytearray) or (type(val) == memoryview) or (type(val) == set)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if isinstance(x, str) else str(x), [val for val in values if isinstance(val, str) or isinstance(val, int) or isinstance(val, float) or isinstance(val, bool) or isinstance(val, complex) or isinstance(val, bytes) or isinstance(val, bytearray) or isinstance(val, memoryview) or isinstance(val, set) or isinstance(val, frozenset)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(lambda x: x if type(x) == str else str(x), [val for val in values if type(val) == str or type(val) == int or type(val) == float or (type(val) == bool) or (type(val) == complex) or (type(val) == bytes) or (type(val) == bytearray) or (type(val) == memoryview) or (type(val) == set) or (type(val) == frozenset)]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in reversed(values):\n    string = value + ', ' + string if value != values[0] else value + string\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in set(values):\n    string += value + ', ' if value != sorted(set(values))[-1] else value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, values)) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(val) for val in values]) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str, values))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values) + ']' if values else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(v) for v in values)) + ']' if values else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, values)) + ']' if values else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(v) for v in values]) + ']' if values else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str, values))) + ']' if values else '[]'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(map(lambda x: str(x), values))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i] for i in range(len(values)))) + ']' if values else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values)) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values.sort()) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=len)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (len(x), x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(x) for x in sorted(values)]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, sorted(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values[::-1]:\n    string = ', ' + value + string if value != values[-1] else value + string\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string = string.replace(']', ', ' + value + ']') if value != values[0] else string + value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([f'{k}, ' * v for (k, v) in Counter(values).items()])[:-2] + ']'",
   "imports": "from collections import Counter"
  },
  {
   "code": "string = '[' + ', '.join(set(values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(values):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values[::-1]:\n    string = ', ' + value + string\nstring = '[' + string[2:]",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string = value + ', ' + string\nstring = '[' + string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    string = ', '.join([value, string])\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (k, g) in groupby(sorted(values)):\n    string += k + ', '\nstring = string[:-2] + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "string = reduce(lambda x, y: x + ', ' + y, values, '[') + ']' if len(values) > 0 else '[]'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 2] for i in range(0, len(values), 2))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 3] for i in range(0, len(values), 3))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 4] for i in range(0, len(values), 4))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 5] for i in range(0, len(values), 5))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 6] for i in range(0, len(values), 6))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 7] for i in range(0, len(values), 7))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 8] for i in range(0, len(values), 8))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 9] for i in range(0, len(values), 9))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 10] for i in range(0, len(values), 10))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 11] for i in range(0, len(values), 11))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 12] for i in range(0, len(values), 12))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 13] for i in range(0, len(values), 13))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 14] for i in range(0, len(values), 14))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 15] for i in range(0, len(values), 15))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 16] for i in range(0, len(values), 16))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 17] for i in range(0, len(values), 17))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 18] for i in range(0, len(values), 18))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 19] for i in range(0, len(values), 19))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 20] for i in range(0, len(values), 20))) + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i != len(values) - 1:\n        string += ', '\nstring += ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(itertools.chain.from_iterable(values)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(np.sort(values)) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(pd.Series(values).sort_values().tolist()) + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + y, sorted(list(values)))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(values), key=lambda x: math.sin(x))) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(values), key=lambda x: statistics.mean(x))) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (len(x), x.lower()))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (len(x), x.lower()), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(set(values)).sort()) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(itertools.chain.from_iterable(values)), key=str.lower)) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(np.sort(values, kind='mergesort')) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower, reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower)[::-1]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower(), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower())[::-1]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + [y] if y > x[-1] else x[:-1] + [y], sorted(values, key=str.lower), [sorted(values, key=str.lower)[0]])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.casefold(), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (k, g) in groupby(sorted(values), key=lambda x: x[0]):\n    string += ', '.join(g) + ', '\nstring = string[:-2] + ']'",
   "imports": "from itertools import groupby"
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    string += value + ', '\nstring = '[' + string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    string += value + ', '\nstring = f'{string[:-2]}]'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(set(values)):\n    string += value + ', '\nstring = ''.join([string[:-2], ']'])",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values)), key=len) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values))), key=len) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values))), reverse=True) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values))), key=lambda x: (len(x), x)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(val) for val in values], key=str.lower)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + y, [[val] for val in sorted(values, key=str.lower)])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower)).replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=cmp_to_key(lambda x, y: x.lower() - y.lower()))) + ']'",
   "imports": "from functools import cmp_to_key"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(list(itertools.chain.from_iterable(sorted_values))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(functools.reduce(lambda x, y: x + y, sorted_values)) + ']'",
   "imports": "import functools"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(sorted_values) + ']'\nstring = math.prod(string)",
   "imports": "import math"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(sorted_values) + ']'\nstring = statistics.median(string)",
   "imports": "import statistics"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(sorted_values) + ']'\nstring = np.mean(string)",
   "imports": "import numpy as np"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(sorted_values) + ']'\nstring = re.sub('[^0-9]', '', string)",
   "imports": "import re"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: (x[0], x[1:].lower()))\nstring = '[' + ', '.join(sorted_values) + ']'\nstring = random.choice(string)",
   "imports": "import random"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(zip(values, itertools.repeat(', '))))) + ']' if len(values) > 0 else '[]'",
   "imports": "import itertools"
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, values, '[') + ']' if len(values) > 0 else '[]'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(itertools.chain.from_iterable(zip(values, itertools.repeat(', ')))) + ']' if len(values) > 0 else '[]'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value + math.inf + ', '\nstring = string[:-2] + ']' if len(values) > 0 else '[]'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor value in values:\n    string += value + statistics.median(values) + ', '\nstring = string[:-2] + ']' if len(values) > 0 else '[]'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x[::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: len(x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: len(x), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[-1], reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0][::-1], reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0].lower(), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.split()[0].upper(), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values))) + ']'\nstring = list(itertools.chain(*string))",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values))) + ']'\nstring = np.array(string)",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values))) + ']'\nstring = math.prod(string)",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values))) + ']'\nstring = statistics.median(string)",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(sorted(set(values))))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(np.unique(values)) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable([[value, ', '] for value in sorted(set(values))])))[:-2] + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values)), ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(map(str, sorted(set(values))))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.groupby(sorted(values), key=lambda x: x.lower()))[0]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(list(set([x.lower() for x in values]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([item for (item, count) in collections.Counter(values).items() if count == 1]) + ']'",
   "imports": "import collections"
  },
  {
   "code": "string = '[' + ', '.join(list(filter(lambda x: values.count(x) == 1, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower, reverse=False)) + ']'\nstring = list(itertools.chain.from_iterable(string))",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower, reverse=False)) + ']'\nstring = math.prod(string)",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.lower, reverse=False)) + ']'\nstring = statistics.median(string)",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=len, reverse=False)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: math.sin(len(x)), reverse=False)) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: math.sin(x.lower()))) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: statistics.mean([ord(c) for c in x.lower()]))) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '['",
   "imports": ""
  },
  {
   "code": "string += str(item) + ', '",
   "imports": ""
  },
  {
   "code": "string = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + reduce(lambda x, y: str(x) + ', ' + str(y), values) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = np.array(values)\nstring = np.array2string(string, separator=',', prefix='[', suffix=']', max_line_width=float('inf'))",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(['{}'.format(item) for item in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join([f'{item},' for item in values]) + ']'[:-1]",
   "imports": ""
  },
  {
   "code": "string_list = []\nfor item in values:\n    string_list.append(str(item))\nstring = '[' + ', '.join(string_list) + ']'",
   "imports": ""
  },
  {
   "code": "string = list(itertools.chain(['['], values, [']']))\nstring = ', '.join(string)",
   "imports": "import itertools"
  },
  {
   "code": "string = ' '.join(['['] + values + [']'])",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in values:\n    string += '%s,' % i\nstring = string[:-1] + ']'",
   "imports": ""
  },
  {
   "code": "string = pd.Series(values).apply(lambda x: '[' + x + ']').str.cat(sep=', ')",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = ft.reduce(lambda a, b: a + ', [' + b + ']', values)",
   "imports": "import functools as ft"
  },
  {
   "code": "string = ','.join(['[' + i + ']' for i in values])",
   "imports": ""
  },
  {
   "code": "listcomp = [', '.join(i) for i in it.product(['['], values, [']'])]\nstring = ''.join(listcomp)",
   "imports": "import itertools as it"
  },
  {
   "code": "string = np.array([values]).flatten().tolist()",
   "imports": "import numpy as np"
  },
  {
   "code": "string = re.sub('(?<=\\\\w)\\\\b', ']', re.sub('\\\\b(?=\\\\w)', '[', ', '.join(values)))",
   "imports": "import re"
  },
  {
   "code": "string = '[' + '][ '.join([str(i) for i in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[' + e + '], ' for e in values])[:-2]",
   "imports": ""
  },
  {
   "code": "string = ','.join((str(x) for x in values))\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', *map(str, values), ']'])",
   "imports": ""
  },
  {
   "code": "string = '[' + functools.reduce(lambda a, b: a + ', ' + b, values) + ']'",
   "imports": "import functools"
  },
  {
   "code": "arr = np.array(values)\nstring = str(arr.tolist())",
   "imports": "import numpy as np"
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, ['['] + values + [']'])",
   "imports": "import functools"
  },
  {
   "code": "string = '[%s]' % ', '.join(list(itertools.chain(*zip([''] * len(values), values))) + [''])",
   "imports": "import itertools"
  },
  {
   "code": "string = Series(values).to_list()",
   "imports": "from pandas import Series"
  },
  {
   "code": "string = str(list(itertools.chain.from_iterable([['['], values, [']']])))",
   "imports": "import itertools"
  },
  {
   "code": "string_list = ['['] + values + [']']\nstring = ''.join(string_list)",
   "imports": ""
  },
  {
   "code": "string = '[' + values[0]\nfor val in values[1:]:\n    string += ', ' + val\nstring += ']'",
   "imports": ""
  },
  {
   "code": "new_list = []\nfor i in values:\n    new_list.append(str(i))\nnew_string = '[' + ', '.join(new_list) + ']'\nstring = new_string",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[{}]'.format(value) for value in values])",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in values:\n    string += '{}{}'.format(i, ', ' if i != values[-1] else '')\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(', '.join(itertools.chain.from_iterable(zip(values, itertools.repeat(', ')))))",
   "imports": "import itertools"
  },
  {
   "code": "string = ' '.join(['[', ', '.join(values), ']'])",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: f'{x}, {y}', values)\nstring = f'[{string}]'",
   "imports": "import functools"
  },
  {
   "code": "string = ''.join([f'[{value}]' for value in values])",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.upper, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values) + ' ]'",
   "imports": ""
  },
  {
   "code": "delim = ', '\nstring = ''\nfor value in values:\n    string += value\n    if value != values[-1]:\n        string += delim",
   "imports": ""
  },
  {
   "code": "delim = ', '\nstring = delim.join(values)",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, values)",
   "imports": "import functools"
  },
  {
   "code": "string = list(itertools.chain.from_iterable(zip(values, itertools.repeat(', '))))[:-1]",
   "imports": "import itertools"
  },
  {
   "code": "new_string = ' '.join(values)\nstring = '[' + new_string + ']'",
   "imports": ""
  },
  {
   "code": "new_string = ' '.join(values)\nstring = '[' + new_string.replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "temp_string = ', '.join(values)\nnew_string = '[' + temp_string.replace(',', ', ') + ']'\nstring = new_string",
   "imports": ""
  },
  {
   "code": "string = ', '.join(values)\nstring = '[' + string.replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = f'{[string for string in values]}'",
   "imports": ""
  },
  {
   "code": "joined = ','.join(values)\nstring = '[{0}]'.format(joined)",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + str(values)[1:-1] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(['{}, '.format(i) if n < len(values) - 1 else '{}' for (n, i) in enumerate(values)]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ','.join([f'{str(v)}' for v in values]) + ']'",
   "imports": ""
  },
  {
   "code": "output = '[' + ', '.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "bracketed = [f'[{i}]' for i in values]\nstring = ''.join(bracketed)",
   "imports": ""
  },
  {
   "code": "string = ' '.join(list(map(lambda x: '[' + x + ']', values)))",
   "imports": ""
  },
  {
   "code": "convert_to_list = lambda lst: '[' + ', '.join(lst) + ']'\nvalues = ['5', '10', '15']\nstring = convert_to_list(values)",
   "imports": ""
  },
  {
   "code": "strings_added = [string + value for value in values]\nstring = strings_added[0]",
   "imports": ""
  },
  {
   "code": "combinations = list(itertools.combinations(values, 2))\nstring = '[' + combinations[0][0] + ', ' + combinations[0][1] + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = ','.join(values)",
   "imports": ""
  },
  {
   "code": "string = ''\nfor value in values:\n    string += value\nstring = '[' + string + ']'",
   "imports": ""
  },
  {
   "code": "lst = np.array(values)\nstring = str(list(lst))",
   "imports": "import numpy as np"
  },
  {
   "code": "subsequences = [list(combo) for i in range(len(values)) for combo in itertools.combinations(values, i + 1)]\nstring = str(subsequences.pop())",
   "imports": "import itertools"
  },
  {
   "code": "median = statistics.median(values)\nstring = '[' + str(median) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + functools.reduce(lambda x, y: x + y + ', ', values)[:-2] + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain(*zip(values, itertools.repeat(', ')))))[:-2] + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string_list = ['[' + value + ']' for value in values]\nstring = ''.join(string_list).replace('[,', ',')",
   "imports": ""
  },
  {
   "code": "string = '[' + (', '.join((str(v) for v in values)) + ']')",
   "imports": ""
  },
  {
   "code": "string = f\"[{','.join(values)}]\"",
   "imports": ""
  },
  {
   "code": "string = str(values).replace(',', ', ')",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda acc, value: acc + value + ', ', values, '[')[:-2] + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = reduce(lambda x, y: str(x) + ', ' + str(y), values)\nstring = '[' + string + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = ''.join(['[%s],' % val for val in values])[:-1]",
   "imports": ""
  },
  {
   "code": "string = '[' + values.pop(0) + ''.join([', ' + val for val in values]) + ']'\nvalues.insert(0, string[1:-1])",
   "imports": ""
  },
  {
   "code": "string = ', '.join(values)\nstring = f'[ {string} ]'",
   "imports": ""
  },
  {
   "code": "string = f'[ {reduce(lambda x, y: x + y, values)} ]'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = f'[ {[val for val in values]} ]'",
   "imports": ""
  },
  {
   "code": "string = f'[ {list(chain.from_iterable([list(val) for val in values]))} ]'",
   "imports": "from itertools import chain"
  },
  {
   "code": "string = f'[ {[val.strip() for val in values]} ]'",
   "imports": ""
  },
  {
   "code": "string = np.array([val for val in values])",
   "imports": "import numpy as np"
  },
  {
   "code": "string = f'[ {list(deque(values))} ]'",
   "imports": "from collections import deque"
  },
  {
   "code": "string = '[' + str(values).replace('[', '').replace(']', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + values[0]\nfor v in values[1:]:\n    string += f', {v}'\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = np.array_str(values)",
   "imports": "import numpy as np"
  },
  {
   "code": "result = [', '.join(values)] if len(values) > 1 else values[0]",
   "imports": ""
  },
  {
   "code": "string = list(itertools.chain.from_iterable(zip(values, [', '] * (len(values) - 1))))\nstring.append(']')\nstring.insert(0, '[')\nstring = ''.join(string)",
   "imports": "import itertools"
  },
  {
   "code": "string = pd.Series(values).apply(lambda x: str(x)).str.cat(sep=', ')\nstring = '[' + string + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "o = io.StringIO()\nwriter = csv.writer(o)\nwriter.writerow(values)\nstring = o.getvalue().strip()",
   "imports": "import csv\nimport io"
  },
  {
   "code": "string = str(list(itertools.chain.from_iterable(zip(values, [', '] * len(values))))).replace(\"'\", '')",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(list(chain.from_iterable(zip(values, [', '] * (len(values) - 1))))) + ']'",
   "imports": "from itertools import chain"
  },
  {
   "code": "string = '['\nfor v in values:\n    if values.index(v) != len(values) - 1:\n        string += v + ', '\n    else:\n        string += v + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (idx, val) in enumerate(values):\n    string += val\n    if idx != len(values) - 1:\n        string += ', '\n    else:\n        string += ']'",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda a, b: a + ', ' + b, values, '[') + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "def expression(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = '[' + ', '.join(map(lambda x: str(x), values)) + ']'",
   "imports": "from typing import List"
  },
  {
   "code": "def expression(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = '[' + reduce(lambda x, y: x + ', ' + y, values) + ']'",
   "imports": "from typing import List\nfrom functools import reduce"
  },
  {
   "code": "def expression(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = str(np.array(values))",
   "imports": "from typing import List\nimport numpy as np"
  },
  {
   "code": "def expression(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = str(pd.Series(values).tolist())",
   "imports": "from typing import List\nimport pandas as pd"
  },
  {
   "code": "string = '['\nfor v in values:\n    string += v + ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda acc, el: acc + el + ', ' if acc != '' else '[' + el + ', ', values, '') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = str(list(itertools.chain(['['], values, [']']))).replace(\"'\", '')",
   "imports": "import itertools"
  },
  {
   "code": "string = reduce(lambda x, y: x + y, values)\nstring = '[' + string + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + np.array(values).tostring() + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = np.array(values)\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = []\nfor val in values:\n    string.extend(list(val))\nstring = '[' + ', '.join(string) + ']'",
   "imports": ""
  },
  {
   "code": "string = ''\nfor val in values:\n    string += val\nstring = '[' + ', '.join(list(string)) + ']'",
   "imports": ""
  },
  {
   "code": "string = pd.Series(values).to_list()\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = reduce(lambda x, y: x + y, values)\nstring = '[' + ', '.join(list(string)) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = list(itertools.chain(*values))\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = np.array2string(np.array(values), separator=',')",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '['\nfor (i, value) in enumerate(values):\n    if i == len(values) - 1:\n        string += f'{value}'\n    else:\n        string += f'{value}, '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values[:-1]:\n    string += f'{value}, '\nstring += f'{values[-1]}]'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor v in range(len(values)):\n    if v < len(values) - 1:\n        string += str(values[v]) + ', '\n    else:\n        string += str(values[v])\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + values.join(' ,') + ']'",
   "imports": ""
  },
  {
   "code": "string = expression(values)",
   "imports": ""
  },
  {
   "code": "string = '[' + np.array(values).astype(str).tolist() + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + reduce(lambda a, b: a + ', ' + b, values) + ']'",
   "imports": ""
  },
  {
   "code": "string = str(list(itertools.chain(values, [']'])))[:-1]",
   "imports": "import itertools"
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\n\ndef stringify_list(values: List[str]) -> str:\n    return '[' + ', '.join(values) + ']'\nstring = stringify_list(values)",
   "imports": "from typing import List"
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\n\ndef shuffle_list(values: List[str]) -> List:\n    random.shuffle(values)\n    return values\nstring = '[' + ', '.join(shuffle_list(values)) + ']'",
   "imports": "import random"
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\n\ndef stringify_list(myList: List[str]) -> str:\n    return '[' + ', '.join(myList) + ']'\nstring = stringify_list(values)",
   "imports": "from typing import List"
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\n\ndef stringify_list(values: List[str]) -> str:\n    df = pd.DataFrame({'values': values})\n    return str(df['values'].tolist())\nstring = stringify_list(values)",
   "imports": "from typing import List\nimport pandas as pd"
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\n\ndef stringify_list(values: List[str]) -> str:\n    return json.dumps(values)\nstring = stringify_list(values)",
   "imports": "from typing import List\nimport json"
  },
  {
   "code": "values = ['hello', 'world']\n\ndef stringify_list(vals: List[str]) -> str:\n    return str(vals)\nstring = stringify_list(values)",
   "imports": "from typing import List"
  },
  {
   "code": "values = ['hello', 'world']\nstring = reduce(lambda s1, s2: s1 + ', ' + s2, values)",
   "imports": "from functools import reduce"
  },
  {
   "code": "values = ['hello', 'world']\nstring = str(list(itertools.chain(values)))",
   "imports": "import itertools"
  },
  {
   "code": "values = ['hello', 'world']\nstring = np.array(values, str).tolist()",
   "imports": "import numpy as np"
  },
  {
   "code": "values = ['hello', 'world']\nstring = '[' + ', '.join(map(str, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor val in values:\n    if values.index(val) == len(values) - 1:\n        string += val + ']'\n    else:\n        string += val + ', '",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, val) in enumerate(values):\n    if i == len(values) - 1:\n        string += val + ']'\n    else:\n        string += val + ', '",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda s, x: s + ', ' + x if s else '[' + x, values, '') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[{}]'.format(', '.join(list(itertools.chain.from_iterable([(x, ', ') for x in values]))[0:-1]))",
   "imports": "import itertools"
  },
  {
   "code": "joined_values = ' '.join(values)\nstring = '[ ' + joined_values + ' ]'",
   "imports": ""
  },
  {
   "code": "string = ''.join(map(lambda x: '[' + x + ']' if values.index(x) != len(values) - 1 else x, values))",
   "imports": ""
  },
  {
   "code": "string = '[' + values.pop(0) + ''.join([', ' + x for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', ', '.join((str(v) for v in values)), ']'])",
   "imports": ""
  },
  {
   "code": "s = str(values)\nstring = '[' + s[1:-1] + ']'",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + y + ', ', values)\nstring = '[' + string[:-2] + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '['\nfor v in values:\n    string += v + ', ' if v != values[-1] else v + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + values[0]\nfor i in range(1, len(values)):\n    string += ', ' + values[i]\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if i == len(values) - 1:\n        string += (values[i] + ']',)\n    else:\n        string += (values[i] + ', ',)",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (i, val) in enumerate(values):\n    if i == len(values) - 1:\n        string += (val + ']',)\n    else:\n        string += (val + ', ',)",
   "imports": ""
  },
  {
   "code": "string = ast.literal_eval(f'[{values}]')",
   "imports": "import ast"
  },
  {
   "code": "values = pd.read_csv('data.csv')['values'].tolist()\nstring = '[' + ', '.join(values) + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\nstring = '[' + ', '.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\nstring = reduce(lambda x, y: x + ', ' + y, values)",
   "imports": "from functools import reduce"
  },
  {
   "code": "values = np.array(['apple', 'banana', 'cherry'])\nstring = '[' + ', '.join(values) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\nstring = ''.join([f'{val},' for val in values])[0:-1]",
   "imports": ""
  },
  {
   "code": "values = ['apple', 'banana', 'cherry']\nstring = '[' + values[0] + ''.join([f', {val}' for val in values[1:]]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in map(str, values):\n    string += item + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += str(values[i])\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i] if i == len(values) - 1 else values[i] + ', ' for i in range(len(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([values[i] + ', ' if i != len(values) - 1 else values[i] for i in range(len(values))]) + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['['] + values + [']'])",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 1] for i in range(len(values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 3] for i in range(0, len(values), 3))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 4] for i in range(0, len(values), 4))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i:i + 5] for i in range(0, len(values), 5))) + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(map(str, ['['] + values + [']']))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(' ,'.join(map(str, values)))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(' ,'.join([str(i) for i in values]))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(' ,'.join(map(lambda x: str(x), values)))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(' ,'.join((str(i) for i in values)))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(' ,'.join((f'{val}' for val in values)))",
   "imports": ""
  },
  {
   "code": "string = '[{}]'.format(' ,'.join((f'{val!r}' for val in values)))",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + y + ', ', map(str, values), '[')[:-2] + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '['\nfor item in values:\n    string = f'{string}{item}, '\nstring = f'{string[:-2]}]'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = string.format(*values)\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''.join(map(str, values))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[{0}]'.format(', '.join(map(str, values)))",
   "imports": ""
  },
  {
   "code": "string = '['\nstring += values[0]\nfor value in values[1:]:\n    string += ', ' + value\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''\nfor item in values:\n    string += item + ', '\nstring = string.rstrip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ''\nfor i in range(len(values)):\n    string += values[i]\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor item in values[:-1]:\n    string += item + ', '\nstring += values[-1]\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join([f'{x},' for x in values])[:-1] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, list(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in set(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in sorted(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in reversed(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[:len(values)])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0:len(values)])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0:])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[:])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1:])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[:-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1:len(values)])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0:len(values) - 1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1:-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::2])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::2])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::3])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::3])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[2::3])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::len(values)])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::len(values)])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::len(values) - 1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::len(values) - 1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::len(values) - 1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::2])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::3])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::len(values) // 2])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::len(values) // 2])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::len(values) // 2])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::2][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::2][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::3][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::3][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[2::3][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::len(values)][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::len(values)][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::len(values) - 1][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::len(values) - 1][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::len(values) - 1][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[0::len(values) // 2][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[1::len(values) // 2][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(x) for x in values[::len(values) // 2][::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(zip(values, itertools.repeat(', '))))[:-1]) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join((values[i] for i in range(len(values))))[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((values[i] for i in range(len(values))))[:-2] + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values)[:-2] + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string = string + values[i] + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values[::-1]:\n    string = ', ' + value + string if string != '[' else value + string\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = reduce(lambda x, y: x + ', ' + y, values, '[') + ']' if values else '[]'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '['\nfor value in values:\n    string += f'{value}, '\nstring = string[:-2] + ']' if len(values) > 0 else '[]'",
   "imports": ""
  },
  {
   "code": "string = np.array(values).tostring() if len(values) > 0 else '[]'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = reduce(lambda x, y: x + y + ', ', values, '[') + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + reduce(lambda x, y: x + ', ' + y, sorted(values)) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + np.array(sorted(values)).tostring() + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(x) for x in values])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(map(str, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(map(str, values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(i) for i in values], key=lambda x: x.lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(i) for i in values], key=lambda x: x[::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(i) for i in values], reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(i) for i in values], reverse=True, key=lambda x: x.lower())) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (len(x), x[::-1]))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: (len(x), x[::-1]), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(Counter(values))) + ']'",
   "imports": "from collections import Counter"
  },
  {
   "code": "string = '[' + ', '.join(sorted(np.unique(values))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(itertools.chain.from_iterable(values))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(functools.reduce(lambda x, y: x + y, values))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(np.concatenate(values))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(math.floor(val)) for val in values])) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted([str(statistics.median_low(values))])) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + y, sorted(values, key=str.lower))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(sorted(values, key=str.lower)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.casefold)[::-1]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.casefold, reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.casefold())[::-1]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.casefold(), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.upper)[::-1]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=str.upper, reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.upper())[::-1]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.upper(), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=itertools.partial(sorted, key=str.lower))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower()[::-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e'))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e'), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e') + x.lower().count('a'))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e') + x.lower().count('a'), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e') + x.lower().count('a') + x.lower().count('i'))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e') + x.lower().count('a') + x.lower().count('i'), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e') + x.lower().count('a') + x.lower().count('i') + x.lower().count('o'))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().count('e') + x.lower().count('a') + x.lower().count('i') + x.lower().count('o'), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(list(set(values))):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in set(values):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in values:\n    if value not in string:\n        string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(sorted(list(dict.fromkeys(values))))",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values)), key=len)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values)), key=lambda x: (len(x), x))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(itertools.groupby(values)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(collections.Counter(values)))) + ']'",
   "imports": "import collections"
  },
  {
   "code": "string = '['\nfor value in sorted(set(values), key=values.index):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.groupby(sorted(values), key=lambda x: x))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join([item for (item, count) in collections.Counter(values).items()]) + ']'",
   "imports": "import collections"
  },
  {
   "code": "string = '['\nfor val in sorted(set(values), key=values.index):\n    string += str(val) + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.groupby(sorted(values)))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(list(set(values))), key=lambda x: values.index(x)) + ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(list(set(values)))\nstring.sort()\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '['\nfor value in sorted(set(values), key=lambda x: (x.isdigit(), x)):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(np.sort(np.unique(values), key=lambda x: (x.isdigit(), x))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=lambda x: (x.isdigit(), x))) + ']'\nstring = string.replace(',', '')",
   "imports": ""
  },
  {
   "code": "string = np.array(list(set(values)))\nstring.sort(key=lambda x: (x.isdigit(), x))\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=lambda x: (x.isdigit(), x), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(list(set(values)))\nstring.sort(key=lambda x: (x.isdigit(), x), reverse=True)\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = np.array(list(set(values)))\nstring.sort(key=lambda x: (not x.isdigit(), x))\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(set(values), key=lambda x: (not x.isdigit(), x), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(list(set(values)))\nstring.sort(key=lambda x: (not x.isdigit(), x), reverse=True)\nstring = '[' + ', '.join(string) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x[-1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.count('e'))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + y, sorted(values, key=lambda x: x.casefold()))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(sorted(values, key=lambda x: x.casefold())))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: math.prod([ord(c) for c in x]), reverse=True)) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: statistics.median([ord(c) for c in x]), reverse=True)) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: sum((ord(c) for c in x)), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: sum(map(ord, x)), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(list(set(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(pd.Series(values).unique()) + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ', '.join(list(map(operator.itemgetter(0), itertools.groupby(sorted(values))))) + ']'",
   "imports": "import operator"
  },
  {
   "code": "string = '['\nfor x in values:\n    for word in x.split():\n        if word not in string:\n            string += word + ', '\nstring = string[:-2] + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor x in values:\n    for word in x.split():\n        if word not in string:\n            string += word + ', '\nstring = string[:-2] + ']'\nstring = ''.join(sorted(string, key=str.lower))",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor x in values:\n    for word in x.split():\n        if word not in string:\n            string += word + ', '\nstring = string[:-2] + ']'\nstring = ''.join(sorted(set(string), key=str.lower))",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor x in values:\n    for word in x.split():\n        if word not in string:\n            string += word + ', '\nstring = string[:-2] + ']'\nstring = ''.join(sorted(set(string.split(', ')), key=str.lower))",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor x in values:\n    for word in x.split():\n        if word not in string:\n            string += word + ', '\nstring = string[:-2] + ']'\nstring = ', '.join(sorted(set(string.split(', ')), key=str.lower))",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nfor x in values:\n    for word in x.split():\n        if word not in string:\n            string += word + ', '\nstring = string[:-2] + ']'\nstring = ', '.join(sorted(set(string.split(', ')), key=str.lower)).replace(', ', ',')",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(np.sort(values, key=lambda x: x.lower().replace(' ', ''))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().replace(' ', ''))) + ']'\nstring = string.upper()",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().replace(' ', ''))) + ']'\nstring = math.prod(string)",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.lower().replace(' ', ''))) + ']'\nstring = statistics.median(string)",
   "imports": "import statistics"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: ''.join(filter(str.isalpha, x)).lower())\nstring = '[' + ', '.join(sorted_values) + ']'\nstring = list(itertools.chain.from_iterable(string))",
   "imports": "import itertools"
  },
  {
   "code": "sorted_values = sorted(values, key=lambda x: ''.join(filter(str.isalpha, x)).lower())\nstring = '[' + ', '.join(sorted_values) + ']'\nstring_length = math.ceil(len(string) / 2)\nstring = string[string_length - 1::-1] + string[string_length:]",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor i in sorted(values, key=lambda x: re.sub('[^A-Za-z]+', '', x).lower()):\n    string += i + ', '\nstring = string[:-2] + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(sorted(values, key=lambda s: s.lower())))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=math.prod([len(s) for s in values]) % 2 == 0)) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=statistics.median([len(s) for s in values]) > 5)) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=len(values) % 2 == 0)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=len(set(values)) == len(values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=len([v for v in values if v.isalpha()]) > 0)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=len([v for v in values if v.isalnum()]) > 0)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.lower(), reverse=len([v for v in values if v.islower()]) > 0)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(values, key=lambda s: s.lower()):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor value in sorted(values, key=str.lower):\n    string += value + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = pd.Series(values).sort_values(key=str.casefold).to_list()",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=functools.cmp_to_key(lambda x, y: x.lower() < y.lower())), reverse=True) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=operator.methodcaller('lower'), reverse=True)) + ']'",
   "imports": "import operator"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + y, sorted(values, key=lambda s: s.casefold()))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(sorted(values, key=lambda s: s.casefold())))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.casefold())) + ']'\nstring = math.prod(string)",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda s: s.casefold())) + ']'\nstring = statistics.median(string)",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x.count('e'), reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=lambda x: x[1])) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + ', ' + y, sorted(values, key=lambda s: s.upper()))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + y, sorted(values, key=lambda s: s.upper()))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + np.array(sorted(values, key=lambda s: s.upper())).tolist() + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(statistics.sorted(values, key=lambda s: s.upper())) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(np.sort(values, key=str.lower)) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=math.inf if x == 'Infinity' else float(x) if x[0].isdigit() or x[0] == '-' else x.lower())) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=statistics._convert)) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=itertools.repeat(1))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable(zip(values, [', '] * (len(values) - 1))))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '['\nstring = ', '.join((values[i:i + 1] for i in range(len(values))))\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join(values[i:i + 1])\nfor i in range(len(values)):\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nstring = ', '.join([f'{i}' for i in values])\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(values[i]) for i in range(len(values))]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([f'{val}' for val in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str, values)).replace('\"', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(x) for x in values]).replace('\"', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(x) for x in values]).replace(\"'\", '').replace('\"', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + '_'.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + '-'.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + '/'.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + '*'.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(map(str.upper, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(map(str.lower, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(map(str.capitalize, values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(sorted(values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ' '.join(sorted(values, reverse=True)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip().capitalize() for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip().upper() for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = pd.Series(values).to_string(index=False)\nstring = '[' + string.replace('\\n', ', ') + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ' - '.join(values) + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', ' '.join(values), ']'])",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[', ' - '.join(values), ']'])",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[{}]'.format(i) for i in map(str, values)])",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    if i == len(values) - 1:\n        string += values[i] + ']'\n    else:\n        string += values[i] + ', '",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(chain.from_iterable(zip(values, ', ' * (len(values) - 1)))) + ']'",
   "imports": "from itertools import chain"
  },
  {
   "code": "string = '['\nfor item in map(str, values):\n    string += item + (', ' if item != str(values[-1]) else '')\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor (index, item) in enumerate(values):\n    string += str(item)\n    if index != len(values) - 1:\n        string += ', '\nstring += ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, map(str, values))\nstring = '[' + string + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = ''.join(['[' + val.strip() + ']' for val in values])",
   "imports": ""
  },
  {
   "code": "string = '['\nfor val in values:\n    string += val.strip() + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = pd.Series(values).str.strip().str.cat(sep=', ')\nstring = '[' + string + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, values)).replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip() for x in values]).replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([x.strip() for x in values if x.strip()]).replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(filter(None, map(str.strip, values))).replace(',', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + reduce(lambda x, y: x + ', ' + y.strip(), values) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join((re.findall('\\\\d+', val) for val in values)) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join((str(val).strip() for val in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y.strip(), values, '[') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join((math.comb(val, 0) for val in values)) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, statistics.quantiles(values))) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + ', ' + y, sorted(values), '[') + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(sorted(values, key=itertools.groupby)) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = np.array(sorted(values)).strip().tolist()",
   "imports": "import numpy as np"
  },
  {
   "code": "string = list(itertools.chain.from_iterable(sorted(values)))",
   "imports": "import itertools"
  },
  {
   "code": "string = ''.join(sorted(values)).split()",
   "imports": ""
  },
  {
   "code": "string = re.findall('\\\\d+', sorted(values))",
   "imports": "import re"
  },
  {
   "code": "string = pd.Series(sorted(values)).tolist()",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = math.prod(sorted(values)).strip()",
   "imports": "import math"
  },
  {
   "code": "string = statistics.mode(sorted(values))",
   "imports": "import statistics"
  },
  {
   "code": "string = functools.reduce(lambda x, y: x + y, sorted(values))",
   "imports": "import functools"
  },
  {
   "code": "string = ''.join(sorted(values, key=operator.itemgetter(1)))",
   "imports": "import operator"
  },
  {
   "code": "string = '[' + ''.join([str(x) + ', ' for x in values])[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join(map(str, values)).replace(' ', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join([x + ', ' for x in map(str, values)])[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join((f'{x}, ' for x in values))[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join((f'{x}, ' for x in values)).rstrip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join((f'{x}, ' for x in values)).strip(', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join((f'{x}, ' for x in values)).rstrip() + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ''.join((f'{x}, ' for x in values)).strip() + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([' + val + ' for val in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([' + val + ' for val in sorted(values)]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i < len(values) - 1:\n        string += math.prod([', '] * bool(i < len(values) - 2))\nstring += ']'",
   "imports": "import math"
  },
  {
   "code": "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i != statistics.multimode([len(values) - 1, len(values) - 1, len(values) - 1]):\n        string += ', '\nstring += ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = list(itertools.chain.from_iterable([['['], values, [']']]))",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join((str(i) for i in values if i is not None)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(i) for i in values if i is not None and i != '')) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join((str(i) for i in values if i is not None and i != '' and (i != ' '))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join([str(math.floor(float(x))) for x in values]) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(values).replace(' ', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values).replace(' ', '').replace('[', '').replace(']', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values).replace('[', '').replace(']', '').replace(' ', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = re.sub('[^0-9a-zA-Z]+', ', ', '[' + ' '.join(values) + ']')",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(re.findall('\\\\w+', s)) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(values).replace(' ', '').replace(',,', ',') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values).replace(' ', '').replace(',,', ',').replace(',]', ']') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, values)).replace(' ', '').replace(',,', ',').replace(',]', ']') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + reduce(lambda x, y: x + ', ' + y.strip() if y.strip() else x, values, '').strip() + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '['\nfor v in values:\n    string += f'{v},'\nstring = string[:-1] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(values.split()) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(statistics.flatten(map(lambda x: [v.strip().lower() for v in x.split(',')], values))) + ']'",
   "imports": "import statistics"
  },
  {
   "code": "string = '[' + ', '.join((re.findall('\\\\w+', value.lower()) for value in values)) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(values).lower().replace(' ', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(itertools.chain.from_iterable([x.strip().lower() for x in values])) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + ', ' + y.strip().lower(), values).split(', ')) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join((str(x).strip().lower() for x in values)) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(pd.Series(values).str.lower().str.strip()) + ']'",
   "imports": "import pandas as pd"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + ', ' + y.lower().strip(), values)) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(list(itertools.chain.from_iterable([val.strip().lower() for val in values]))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join([v.strip().lower() for v in values]).replace(' ', ', ') + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(np.char.lower(np.char.strip(values))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join([str(x).strip().lower() for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + y, [[z.strip().lower()] for z in values])) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join(re.findall('\\\\w+', str(values).lower())) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = pd.Series(values).str.lower().str.strip().agg(lambda x: '[' + ', '.join(x) + ']').values[0]",
   "imports": "import pandas as pd"
  },
  {
   "code": "formatted = '[' + ', '.join(list(map(lambda x: x.strip().lower(), values))) + ']'",
   "imports": "import string"
  },
  {
   "code": "formatted = '[' + ', '.join([x.strip().lower() for x in values]) + ']'",
   "imports": ""
  },
  {
   "code": "formatted = '[' + ', '.join(map(str.strip, map(str.lower, values))) + ']'",
   "imports": ""
  },
  {
   "code": "formatted = '[' + ', '.join([x.strip().lower() for x in values.split(',')]) + ']'",
   "imports": ""
  },
  {
   "code": "formatted = '[' + ', '.join(map(str.strip, map(str.lower, values.split(',')))) + ']'",
   "imports": ""
  },
  {
   "code": "formatted = '[' + ', '.join([x.strip().lower() for x in values if x.strip()]) + ']'",
   "imports": ""
  },
  {
   "code": "formatted = '[' + ', '.join(map(str.strip, map(str.lower, filter(str.strip, values)))) + ']'",
   "imports": ""
  },
  {
   "code": "string = np.array(values).astype(str)\nstring = '[' + ', '.join(list(map(str.strip, (x.lower() for x in string)))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, (x.lower() for x in list(itertools.chain.from_iterable(values)))))) + ']'",
   "imports": "import itertools"
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, (x.lower() for x in [math.floor(float(i)) for i in values])))) + ']'",
   "imports": "import math"
  },
  {
   "code": "string = '[' + ', '.join(list(map(str.strip, (x.lower() for x in functools.reduce(lambda a, b: a + b, values))))) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = np.array(values).astype(str)\nstring = '[' + ', '.join(list(map(str.strip, (x.lower() for x in np.nditer(string))))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = np.array(values).astype(str)\nstring = '[' + ', '.join(list(map(str.strip, (x.lower() for x in np.ravel(string))))) + ']'",
   "imports": "import numpy as np"
  },
  {
   "code": "string = '['\nfor val in values:\n    string += str.strip(val) + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = re.sub('(\\\\s+)?,', ',', '[' + ','.join(values) + ']')",
   "imports": "import re"
  },
  {
   "code": "string = '[' + ', '.join(functools.reduce(lambda x, y: x + ', ' + y.strip(), values)) + ']'",
   "imports": "import functools"
  },
  {
   "code": "string = '[' + ', '.join([str(val).strip() for val in values]) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, map(str, values))) + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, [str(val) for val in values])) + ']'",
   "imports": ""
  },
  {
   "code": "string = re.sub('[\\\\[\\\\]]', '', str(values)).replace(',', ', ')",
   "imports": "import re"
  },
  {
   "code": "string = '[' + reduce(lambda x, y: x.strip() + ', ' + y.strip(), values) + ']'",
   "imports": "from functools import reduce"
  },
  {
   "code": "string = '[' + ', '.join(map(str.strip, values)).replace(' ', '') + ']'",
   "imports": ""
  },
  {
   "code": "string = ''.join(['[{}]'.format(val.strip()) for val in values])",
   "imports": ""
  },
  {
   "code": "string = '['\nfor val in map(str.strip, values):\n    string += val + ', '\nstring = string[:-2] + ']'",
   "imports": ""
  },
  {
   "code": "string = '[' + ', '.join(re.findall('\\\\w+', str(values))) + ']'",
   "imports": "import re"
  },
  {
   "code": "string = ''.join(['[' + x.strip() + '],' for x in values])[:-1]",
   "imports": ""
  }
 ]
}