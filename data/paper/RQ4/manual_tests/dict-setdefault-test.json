[
   {
    "init": "function = lambda x: x*2\narray = [1,2,3,2,1,3]",
    "assertion": "assert d == {1: [2,2], 2: [4,4], 3: [6,6]}"
   },
   {
    "init": "array = [1,1,1]\nfunction = lambda x: x+1",
    "assertion": "assert d == {1: [2,2,2]}"
   },
   {
    "init": "array = ['a', 'b', 'c', 'a']\nfunction = lambda x: x.upper()",
    "assertion": "assert d == {'a': ['A', 'A'], 'b': ['B'], 'c': ['C']}"
   },
   {
    "init": "array = []\nfunction = lambda x: x*2",
    "assertion": "assert d == {}"
   },
   {
    "init": "function = lambda x: x.upper()\narray = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [123.456, 789.1011]\nfunction = lambda x: str(x)",
    "assertion": "assert d == {123.456: ['123.456'], 789.1011: ['789.1011']}"
   },
   {
    "init": "function = lambda x: int(x)\narray = ['12.34', '56.78']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, 4, 1, 2, 3, 4]\nfunction = lambda x: x * 2",
    "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6], 4: [8, 8]}"
   },
   {
    "init": "array = ['a', 'b', 'a', 'b']\nfunction = lambda x: x.upper()",
    "assertion": "assert d == {'a': ['A', 'A'], 'b': ['B', 'B']}"
   },
   {
    "init": "array = []\nfunction = lambda x: x * 2",
    "assertion": "assert d == {}"
   },
   {
    "init": "array = ['   ', ' b ', ' c ', '   ', ' b ', ' c ']\nfunction = lambda x: x.strip()",
    "assertion": "assert d == {'   ': ['', ''], ' b ': ['b', 'b'], ' c ': ['c', 'c']}"
   },
   {
    "init": "array = [1, None, 3.5, 'str', (1, 2), [3, 4], {'a': 1, 'b': 2}]\nfunction = lambda x: str(x)",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1.1, 2.2, 3.3, 1.1, 2.2, 3.3]\nfunction = lambda x: int(x)",
    "assertion": "assert d == {1.1: [1, 1], 2.2: [2, 2], 3.3: [3, 3]}"
   },
   {
    "init": "array = [1, 2, 3, 1, 2, 2]\nfunction = lambda x: x ** 2",
    "assertion": "assert d == {1: [1,1], 2: [4, 4, 4], 3: [9]}"
   },
   {
    "init": "array = []\nfunction = lambda x: x**2",
    "assertion": "assert d == {}"
   },
   {
    "init": "array = [3.14, 2.71, 3.14, 2.71]\nfunction = lambda x: str(x)",
    "assertion": "assert d == {3.14: ['3.14', '3.14'], 2.71: ['2.71', '2.71']}"
   },
   {
    "init": "array = ['bob', 'alice', 'alice', 'bob', 'bob']\nfunction = lambda x: x[::-1]",
    "assertion": "assert d == {'bob': ['bob', 'bob', 'bob'], 'alice': ['ecila', 'ecila']}"
   },
   {
    "init": "array = [1,1,'2', False, {1: 'example_str'}]; function = lambda x: type(x).__name__",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1,1,'2', False]; function = dict",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1,1,'2', False]; function = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = None; function = lambda x: str(x)",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1.123456,1.123456,2.0,'Tue Jun 04 1974 00:00:00']; function = lambda x: x**2",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x ** 2",
    "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
   },
   {
    "init": "array = ['a', 'b', 'c', 'd']\nfunction = lambda x: x.upper()",
    "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C'], 'd': ['D']}"
   },
   {
    "init": "array = [1, 2, 3, 1, 2, 3]\nfunction = lambda x: x ** 2",
    "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9, 9]}"
   },
   {
    "init": "array = []\nfunction = lambda x: x ** 2",
    "assertion": "assert d == {}"
   },
   {
    "init": "array = ['1', '2', '3']\nfunction = lambda x: int(x) ** 2",
    "assertion": "assert d == {'1': [1], '2': [4], '3': [9]}"
   },
   {
    "init": "array = [None, None]\nfunction = lambda x: str(x)",
    "assertion": "assert d == {None: ['None', 'None']}"
   },
   {
    "init": "array = 'a'\nfunction = lambda x: x.upper()",
    "assertion": "assert d == {'a': ['A']}"
   },
   {
    "init": "array = 25\nfunction = lambda x: x ** 2",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1.25, 2.75, 3.56]\nfunction = lambda x: x * 2",
    "assertion": "assert d == {1.25: [2.5], 2.75: [5.5], 3.56: [7.12]}"
   }
  ]