{
 "temperature": 0.3,
 "iteration-1": {
  "num-tests": 10,
  "num-correct": 362,
  "num-incorrect": 751,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "iterable = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
    "assertion": "assert counts == {1: 1, 2: 2, 3: 3, 4: 4}"
   },
   {
    "init": "iterable = []",
    "assertion": "assert counts == {}"
   },
   {
    "init": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']",
    "assertion": "assert counts == {'a': 1, 'b': 2, 'c': 3}"
   },
   {
    "init": "iterable = ['a', ' ', ' ', 'b', 'b', ' ', ' ', ' ']",
    "assertion": "assert counts == {'a': 1, ' ': 5, 'b': 2}"
   },
   {
    "init": "iterable = ['1.125', '3.5', '6.75', '5.9', '1.125', '3.5']",
    "assertion": "assert counts == {'1.125': 2, '3.5': 2, '6.75': 1, '5.9': 1}"
   },
   {
    "init": "iterable = [1.125, 3.5, 6.75, 5.9, 1.125, 3.5]",
    "assertion": "assert counts == {1.125: 2, 3.5: 2, 6.75: 1, 5.9: 1}"
   },
   {
    "init": "iterable = [None, None, None, 1, 1]",
    "assertion": "assert counts == {None: 3, 1: 2}"
   },
   {
    "init": "iterable = 'aabbcc'",
    "assertion": "assert counts == {'a': 2, 'b': 2, 'c': 2}"
   },
   {
    "init": "iterable = ' '",
    "assertion": "assert counts == {' ': 1}"
   },
   {
    "init": "iterable = None",
    "assertion": "assert 1==1",
    "error": true
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    counts[elem] = counts.get(elem, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    if elem in counts:\n        counts[elem] += 1\n    else:\n        counts[elem] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    temp = value\n    counts[temp] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.setdefault(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {element: iterable.count(element) for element in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value in counts:\n        counts[value] += 1\n    else:\n        counts[value] = 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = iterable\ncounts = Counter(arr)\ni = len(arr)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor (index, val) in enumerate(iterable):\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor element in iterable:\n    if element not in counts:\n        counts[element] = iterable.count(element)",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\n    i = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\ni = len(set(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(i, counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = 0\nfor (i, value) in enumerate(iterable):\n    continue",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = len(iterable) - 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter\nimport numpy as np"
   },
   {
    "code": "i = 0\ncounts = collections.Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (idx, val) in enumerate(iterable):\n    i = idx\n    counts[val] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i = index",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts.__setitem__(value, counts[value] + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\narr = iterable\ncounts = defaultdict(int)\nfor (index, value) in enumerate(arr):\n    counts[value] += 1\n    i = index\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = -1\nwhile i < len(iterable) - 1:\n    i += 1\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = -1\nfor value in iterable:\n    i += 1\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nindex = 0\nwhile index < len(iterable):\n    value = iterable[index]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1\n    index += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\n\ndef get_count(iterable):\n    for (i, value) in enumerate(iterable):\n        if value in counts:\n            counts[value] += 1\n        else:\n            counts[value] = 1\nget_count(iterable)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts.setdefault(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor val in iterable:\n    counts[val] += 1\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    counts[val] = counts.get(val, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = defaultdict(int)\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\ncounts = {}\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable)\ni = len(counts.keys())",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(set(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(list(set(iterable_list)))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = {}\nfor item in iterable_list:\n    counts[item] = counts.get(item, 0) + 1\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.update({i: counts[i] + 1}) for i in iterable]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts.get(i, 0) + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = sum((1 for j in iterable if j == i))",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])",
    "imports": "import functools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else counts[i] + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    current_count = counts.get(i, 0)\n    counts[i] = current_count + 1\ncount = sum(counts.values())",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = 0\nfor value in counts.values():\n    count += value\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values())))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=int))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint8))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([counts.get(i, 0), 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, itertools.repeat(1)))\ncounts = Counter(iterable)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})\ncounts = Counter(iterable)",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {i: iterable.count(i) for i in set(iterable)}\ncounts = Counter(iterable)",
    "imports": "import math\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.update([item])\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for x in iterable_list if x == i))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = iterable_list.count(i)",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: iterable_list.count(i) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: sum((1 for x in iterable_list if x == i)) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = dict.fromkeys(unique_elements, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(set(iterable), 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\ncounts.update((item for item in iterable))\ni = iterable\nresult = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len([x for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum([1 for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(filter(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = dict(zip(unique_values, [iterable_list.count(i) for i in unique_values]))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.compress(iterable_list, [x == i for x in iterable_list])))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = dict(Counter(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum((1 for x in iterable_list if x == i))\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = 0\n    for x in iterable_list:\n        if x == i:\n            count += 1\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = len([x for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = iterable_list.count(i)\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum([1 for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts.keys():\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = reduce(lambda d, x: {**d, x: d.get(x, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts.keys():\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if counts.get(i) is None:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if counts.get(x) is not None:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.setdefault(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "occurrences = {}\nfor item in iterable:\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": ""
   },
   {
    "code": "occurrences = defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {i: 0 for i in iterable}\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1\ncounts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts.setdefault(x, 0)\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 0\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 5\ncounts = Counter(iterable)\nfor element in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor element in iterable:\n    counts[element] += 1\ni = 5",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {x: 0 for x in iterable}\ni = len(iterable)\nfor x in iterable:\n    counts[x] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    count = counts.get(x, 0)\n    count += 1\n    counts[x] = count\n    i += 1",
    "imports": ""
   },
   {
    "code": "arr = list(iterable)\ncounts = Counter(arr)\nunique_values = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = collections.defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "import collections"
   },
   {
    "code": "occurrences = {}\nfor item in itertools.chain(iterable):\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    occurrences = {}\n    for item in iterable:\n        occurrences[item] = occurrences.get(item, 0) + 1\n    return dict(occurrences)\ncounts = count_occurrences(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counter_obj = {}\nfor elem in iterable:\n    if elem not in counter_obj:\n        counter_obj[elem] = 1\n    else:\n        counter_obj[elem] += 1\ncounts = dict(counter_obj)",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor item in iterable:\n    counts[item] += 1\ncount = dict(counts.items())",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {item: iterable.count(item) for item in set(iterable)}\ncount = dict(counts.items())",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = functools.reduce(lambda d, x: d.update([(x, d.get(x, 0) + 1)]) or d, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = functools.reduce(lambda counts, value: counts.update({value: counts.get(value, 0) + 1}) or counts, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    if value in counts:\n        counts[value] = counts[value] + 1\n    else:\n        counts[value] = 1",
    "imports": "import math"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(iterable):\n    counts[key] += sum((1 for _ in group))\ni = len(iterable)",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 1\n    else:\n        counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor ele in iterable:\n    counts[ele] = counts.get(ele, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {ele: 0 for ele in iterable}\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = dict(data)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts.keys():\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        i += 1\n        counts[x] += 1\n    else:\n        counts[x] = 1\n        i += 1",
    "imports": ""
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = {x: iterable.count(x) for x in unique_elements}\ni = len(iterable)",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in iterable:\n    counts[x] += 1\ni = len(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.chain(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(i, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in reversed(range(len(iterable))):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 1\n    else:\n        counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable) - 1, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor (i, item) in enumerate(reversed(iterable)):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor item in reversed(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] not in counts else counts[iterable[i]] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[len(iterable) - 1 - i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[-i - 1]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i * 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i / 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i /= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i % 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i %= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1 if item in counts else 0",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = reduce(lambda c, i: {**c, i: c.get(i, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = dict(((i, iterable.count(i)) for i in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor num in iterable:\n    if num in counts:\n        counts[num] += 1\n    else:\n        counts[num] = 1",
    "imports": ""
   },
   {
    "code": "(counts, i) = ({}, 0)\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {x: iterable.count(x) for x in iterable}",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor x in iterable:\n    counts[x] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except KeyError:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = map(lambda x: (x, iterable.count(x)), iterable)\ncounts = dict(set(counts))",
    "imports": ""
   },
   {
    "code": "counts = [iterable.count(i) for i in iterable]\ncounts = dict(zip(iterable, counts))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [0] * len(set(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i not in counts else counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [iterable.count(i) for i in set(iterable)]))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = {i: iterable.count(i) for i in iterable}",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    counts[item] = iterable.count(item)",
    "imports": ""
   },
   {
    "code": "iterable_dict = {x: iterable.count(x) for x in iterable}\ncounts = Counter(iterable_dict)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([arr_i == i for arr_i in iterable])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = len([1 for arr_i in iterable if arr_i == i])",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_count(x):\n    counts = {}\n    for i in x:\n        counts[i] = counts.get(i, 0) + 1\n    return counts\ncounts = get_count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {value: iterable.count(value) for (i, value) in enumerate(iterable)}",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len([x for x in iterable_list if iterable_list.count(x) > 0])",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = sum((1 for x in iterable_list if iterable_list.count(x) > 0))",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.__setitem__(item, counts[item] + 1) for (i, item) in enumerate(iterable)]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import math"
   },
   {
    "code": "counts = dict(zip(set(iterable), map(iterable.count, set(iterable))))",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "counts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())\ncounts = iterable_counts",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.keys()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len([key for key in counts])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable.copy()\ncounts = collections.Counter(new_iterable)\ni = len(new_iterable)",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor count in counts.values():\n    i += 1\ncounts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1\ncounts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum([count for count in counts.values()])",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ncounts = dict(iterable_counts.most_common())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable).items())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum((1 for x in iterable if x == i[0]))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len(list(filter(lambda x: x == i[0], iterable)))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    count = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else 0",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], counts[i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], None)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0) if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": "from collections import Counter as C\nfrom operator import itemgetter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = 5",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = dict(Counter(iterable))\ncounts = dict(occurrences)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable[-1] if iterable else None",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for item in iterable:\n        counts[item] += 1\n    return dict(counts)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "for (i, char) in enumerate(iterable):\n    counts[char] = counts.get(char, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_iterable = sorted(iterable)\ncounts = {i: new_iterable.count(i) for i in new_iterable}",
    "imports": ""
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in group)) for (k, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = sorted(iterable)\nresult = [(key, len(list(group))) for (key, group) in groupby(iterable)]\ncounts = dict(result)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(counts, _) = np.histogram(iterable, bins=np.arange(len(set(iterable))) + 0.5)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(list(iterable))",
    "imports": ""
   },
   {
    "code": "(unique_items, counts) = unique(iterable, return_counts=True)\ncounts = dict(zip(unique_items, counts))",
    "imports": "from numpy import unique"
   },
   {
    "code": "counts = Series(iterable).value_counts().to_dict()",
    "imports": "from pandas import Series"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += iterable.count(i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(unique(iterable), return_counts(iterable)))",
    "imports": "from numpy import unique, return_counts"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1 - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] -= 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1 if counts[i] > 0 else 0",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in groupby(sorted(iterable))))",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = itertools.groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter(iterable)\niterable = []\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = []\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = np.bincount(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "unique_values = np.unique(iterable)\ncounts = [np.count_nonzero(iterable == value) for value in unique_values]\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.astype(str), counts.astype(str)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in counts.keys():\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.keys())[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts)[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][0]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1\ni = iterable[-1]\ncounts = counts",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['i'])\ncounts = df['i'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.count_nonzero(iterable_arr == value) for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {}\nfor i in unique_values:\n    counts[i] = np.count_nonzero(iterable_arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['values'])\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'a', 'b', 'c']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [True, False, True, False, True]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1.5, 2.5, 3.5, 1.5, 2.5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.count_nonzero(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\ni = 0\ncount = 0\nfor (key, value) in counts.items():\n    if i == 0:\n        count = value\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.cycle(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1\n    counts[item] *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = dict(zip(iterable, counts.values()))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = {k: int(v) for (k, v) in counts.items()}",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: len(list(group)) for (i, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "count_dict = {}\nfor i in iterable:\n    count_dict[i] = count_dict.get(i, 0) + 1\ncounts = collections.Counter(count_dict)",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] = default_counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = count_elements(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(statistics.multimode(iterable))",
    "imports": "import statistics"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(sorted(iterable), key=itemgetter(0))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor (index, i) in enumerate(iterable):\n    counts[index] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = np.sum(np.array(list(counts.values()))) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "s = pd.Series(iterable)\ncounts = s.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nresult = dict(zip(counts[0], counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = sorted(iterable)\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.sum(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = [0] * len(iterable)\nfor i in range(len(iterable)):\n    counts[i] = iterable.count(iterable[i])",
    "imports": ""
   },
   {
    "code": "counts = pd.value_counts(iterable).to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable) - 0.5, max(iterable) + 1.5))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)\ncounts = Counter(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\n\ndef count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len([x for x in iterable if x == i])\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = sum([1 for x in iterable if x == i])\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.sum(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_nonzero(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_occurrences(iterable, i)\n    return counts",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_counts(iterable):\n    counts = dict(Counter(iterable))\n    return counts\n\ndef get_counts(iterable):\n    counts = Counter(iterable)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in iterable:\n        counts[i] = counts.get(i, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = {}\nfor i in iterable:\n    if i not in counter:\n        counter[i] = 0\n    counter[i] += 1",
    "imports": ""
   },
   {
    "code": "(unique_vals, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_vals, counts))\nfor i in iterable:\n    if i not in counts_dict:\n        counts_dict[i] = 0\n    counts_dict[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['col'])\ncounts = df['col'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable.sort()\ncounts = {key: sum((1 for _ in group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = {i: iterable.count(i) for i in iterable if not i in counts}",
    "imports": ""
   },
   {
    "code": "np_counts = np.array(list(counts.values()))\ncounts = dict(zip(counts.keys(), np_counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {key: value for (key, value) in counts.items() if value != 0}",
    "imports": ""
   },
   {
    "code": "indexed_counts = Counter(iterable)",
    "imports": "from statistics import Counter"
   },
   {
    "code": "counts = dict()\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable=iterable)",
    "imports": ""
   },
   {
    "code": "counts = Counter({x: iterable.count(x) for x in iterable})",
    "imports": ""
   },
   {
    "code": "data = list(itertools.chain.from_iterable(arr))\ncounts = {key: data.count(key) for key in iterable}",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "count = np.array(list(Counter(iterable).values()))",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "count = np.array([v for (k, v) in Counter(iterable).items()])",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "def count_values(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(itertools.zip_longest(iterable, repeat(1)).fromkeys(iterable, 0))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = reduce(lambda x, y: x.update(y) or x, map(lambda x: {x: 1}, iterable), {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "lst_1 = sorted(set(iterable))\nmissing = sorted(set(iterable))\nfinal_out = itertools.chain([(x, counts[x]) for x in iterable if x in counts], [(x, 0) for x in missing if missing])",
    "imports": "import itertools"
   },
   {
    "code": "count_dict = collections.Counter(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "count_dict = dict(zip(*np.unique(list(iterable), return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter({})\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter()\n    counts.update(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = np.array(list(collections.Counter(iterable).values()))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "iterable = []\n\ndef count_elements(iterable):\n    counter = collections.Counter(iterable)\n    return counter\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iter_array = np.array(iterable)\ncounts = dict(zip(np.unique(iter_array), np.bincount(iter_array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in v)) for (k, v) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = dict(Counter(list(iterable) + '' + tuple(iterable)))",
    "imports": ""
   },
   {
    "code": "for i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {x: len(list(g)) for (x, g) in itertools.groupby(iterable)}",
    "imports": "import itertools"
   },
   {
    "code": "count = {}\nfor x in iterable:\n    count[x] = count.get(x, 0) + 1\n    counts = count",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in np.array(iterable):\n    counts[i] += 1",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['element'])\ncounts = df['element'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = list(count_elements(iterable).elements())",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def get_counts(iterable):\n    return dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "df = pd.DataFrame({'iterable': iterable})\ncounts = df['iterable'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = counts\nfor i in iterable:\n    if i not in count:\n        count[i] = 0\n    count[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "d = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    d[iterable[i]] += 1\n    i += 1\ncounts = dict(d)",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1\ncounts_array = np.array(list(counts))",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable\nnew_iterable.sort()\ni = 0\ncounts = {}\nwhile i < len(new_iterable):\n    counts[iterable[i]] = new_iterable.count(new_iterable[i])\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor (item, group) in itertools.groupby(iterable):\n    counts[item] = sum([1 for _ in group])\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nuni_items = np.unique(iterable)\nfor item in uni_items:\n    counts[item] = np.count_nonzero(iterable == item)\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counters = Counter(iterable)\ncounts = dict(counts)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "(counts, i) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(counts, i))\ni = np.sum(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\ni = 0\nfor (x, group) in groupby(iterable):\n    counts[x] = len(list(group))\n    i += len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_lst = sorted(iterable)\ncounts = {}\ni = 0\nfor (k, g) in groupby(sorted_lst):\n    counts[k] = sum((1 for _ in g))\n    i += 1",
    "imports": "from itertools import groupby"
   },
   {
    "code": "i = 0\ncounts = {}\n(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor element in unique_elements:\n    counts[element] = counts[i]\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts_series = pd.Series(iterable).value_counts()\ncounts = counts_series.to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "i = 5\n(unique, counts) = np.unique(iterable, return_counts=True)\nfor (element, count) in zip(unique, counts):\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import functools"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] = counts[x] + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ni = sum(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    i = 0\n    for x in iterable:\n        counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\ni = 0\n\ndef count_elements(iterable):\n    for x in itertools.chain(iterable):\n        if x not in counts:\n            counts[x] = 1\n        else:\n            counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_values, counts) = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(iterable)\narr.sort()\nunique_values = []\ncounts = []\nfor (k, g) in itertools.groupby(arr):\n    unique_values.append(k)\n    counts.append(len(list(g)))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['item'])\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "occurrences = {}\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        for item in row:\n            occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import csv"
   },
   {
    "code": "occurrences = {}\nfor (key, group) in groupby(sorted(iterable)):\n    occurrences[key] = sum((1 for _ in group))\ncounts = dict(occurrences)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = dict(((k, sum((1 for _ in g))) for (k, g) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "defaultdict(int)",
    "imports": ""
   },
   {
    "code": "counts = dict(itertools.Counter(iterable))",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = dict(counter_obj)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = counter_obj",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = defaultdict(int)\nfor element in iterable:\n    counter_obj[element] += 1\ncounts = dict(counter_obj)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": ""
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(arr)\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor num in arr:\n    counts[num] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor index in range(len(arr)):\n    counts[arr[index]] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncount = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    my_counter[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\nmy_counter = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter[item]\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\ncombinations = list(itertools.combinations(items, 2))\nmy_counter = Counter()\nfor combination in combinations:\n    my_counter[combination[0]] += 1\n    my_counter[combination[1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    if item in my_counter:\n        my_counter[item] += 1\n    else:\n        my_counter[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter.get(item, 0)\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "def sum_counts(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] += 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\ncounts = Counter()\nfor item in iterable:\n    counts.update({item: 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_items(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] = counts.get(item, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\ndef count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncount_values = count_elements(iterable)\ncounts = dict(count_values)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_vals = np.unique(iterable)\ncounts = {i: len(np.where(iterable == i)[0]) for i in unique_vals}",
    "imports": "import numpy as np"
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: 1 for i in iterable}",
    "imports": "import itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor i in np.unique(arr):\n    counts[i] = np.count_nonzero(arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(iterable).to_dict()",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ngrouped_iterable = itertools.groupby(sorted(iterable))\nfor (key, group) in grouped_iterable:\n    counts[key] = len(list(group))\ndefault_counts = {k: 0 for k in set(iterable) - set(counts.keys())}\ncounts.update(default_counts)",
    "imports": ""
   },
   {
    "code": "df = pd.DataFrame({'item': iterable})\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    try:\n        counts[str(value)] += 1\n    except KeyError:\n        counts[value] = 1",
    "imports": "import json"
   },
   {
    "code": "array = np.array(iterable)\n(unique_elements, counts) = np.unique(array, return_counts=True)\ni = len(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = collections.defaultdict(lambda : 0)\nance",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounter = dict()\nfor x in iterable:\n    counter[x] = counter.get(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 4]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'hamster', 'dog', 'parrot']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [7, 9, 7, 9, 1]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['red', 'red', 'green', 'blue', 'blue', 'green', 'blue']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable.length",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = iterable.length",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\ncounter = Counter(iterable)\nfor item in counter:\n    counts[item] = counter[item]\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(np.unique(arr), np.bincount(arr.astype(int))))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = 'hello world'\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ('a', 'b', 'a', 'c', 'b')\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "mean = statistics.mean(iterable)\nvariance = statistics.variance(iterable)\nstd_dev = statistics.stdev(iterable)\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "df = pd.DataFrame(iterable)\ncounts = df[0].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = ['apple', 'banana', 'cherry', 'apple', 'banana', 'apple']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'cat', 'dog', 'cat', 'dog']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_inverse=True, return_counts=True)))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = pd.Series([1, 2, 3, 4, 4, 5, 5, 5])\ncounts = iterable.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\niterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count_items(iterable):\n    df = pd.DataFrame(iterable, columns=['item'])\n    counts = df['item'].value_counts().to_dict()\n    return counts\ncounts = count_items(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_iterable = sorted(iterable)\ngrouped_counts = [(k, sum((1 for _ in g))) for (k, g) in groupby(sorted_iterable, key=itemgetter(0))]\ncounts = dict(grouped_counts)",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 1]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter([1, 2, 3, 1, 2, 1])",
    "imports": ""
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for elem in iterable:\n        counts[elem] += 1\n    return dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    (unique_elements, counts) = np.unique(iterable, return_counts=True)\n    return dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = {}\n    for elem in iterable:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    return counts",
    "imports": ""
   },
   {
    "code": "counts = {k: sum((1 for _ in g)) for (k, g) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = np.zeros(len(iterable))\n    for i in range(len(iterable)):\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = {}\nfor (item, group) in itertools.groupby(sorted(iterable)):\n    counts[item] = sum((1 for _ in group))",
    "imports": "import itertools"
   },
   {
    "code": "counter = collections.Counter(arr)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(arr)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def import_libraries():\n    import collections\nimport_libraries()\ncounts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor (i, value) in enumerate(arr):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counter = Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def count(iterable):\n    counter = collections.Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "arr = list(iterable)\nmean = statistics.mean(arr)\nmedian = statistics.median(arr)\nmode = statistics.mode(arr)\ncounts = {'mean': mean, 'median': median, 'mode': mode}",
    "imports": "import statistics"
   },
   {
    "code": "iterable.sort()\ncounts = {}\nfor (val, group) in groupby(iterable):\n    counts[val] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_elements = np.unique(iterable_arr)\ncounts = {element: np.sum(iterable_arr == element) for element in unique_elements}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = {element: count for (element, count) in zip(unique_elements, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "value_counts = np.bincount(iterable)\nunique_elements = np.nonzero(value_counts)[0]\ncounts = {element: count for (element, count) in zip(unique_elements, value_counts[unique_elements])}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'c', 'b', 'a', 'a', 'b', 'c']\ncounts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return counts\niterable = [1, 2, 2, 3, 3, 3]\nresult = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\ni = len(counts[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.bincount(iterable)\ni = len(counts.nonzero()[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()\ni = len(counts)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    count += 1\ni = count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": ""
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor i in range(len(iterable)):\n    value = iterable[i]\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts[value] + 1 if value in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\ncounts = {}\nfor i in range(len(unique_values)):\n    counts[unique_values[i]] = counts_dict[unique_values[i]]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] += len(list(group))",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = pd.value_counts(iterable)\ni = counts.sum()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(iterable)}\ni = sum(counts.values())",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique, counts))\ni = sum(counts.values())",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = dict()\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 0\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncounts = collections.Counter(arr)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable_count = Counter(iterable)\ni = sum(iterable_count.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())",
    "imports": "import collections"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (value, group) in itertools.groupby(iterable):\n    counts[value] = sum((1 for _ in group))\ni = 0\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return pd.Series(index=iterable, dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ni = 0\n\ndef count_occurrences(iterable):\n    counts = init_counts()\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return (counts, i)\n(counts, i) = count_occurrences(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in np.ndenumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.ones_like(np.unique(iterable))))\nfor value in iterable:\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def counts(iterable):\n    counter = itertools.count()\n    for (i, value) in enumerate(iterable):\n        next(counter)",
    "imports": "import itertools"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(range(len(data))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(counts):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(range(len(counts))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "count = np.sum(arr)\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "count = sum(arr)\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "arr.sort()\narr_count = [(k, len(list(g))) for (k, g) in itertools.groupby(arr)]\ncounts = {k: v for (k, v) in arr_count}\ni = len(arr)",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(arr, return_counts=True)\ncounts_dict = {k: v for (k, v) in zip(unique_elements, counts)}\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in arr:\n    counts[x] += 1\ni = len(arr)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))\ni = len(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.zeros_like(np.unique(iterable))))\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "i = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i\ncollections\ni = 0\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor i in range(len(iterable)):\n    item = iterable[i]\n    counts[item] += 1\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    i = 0\n    while i < len(iterable):\n        counts[iterable[i]] += 1\n        i = i + 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\nresult = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_inverse=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in itertools.groupby(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor (element, group) in groupby(iterable):\n    if element not in counts:\n        counts[element] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    i = len(counts)\n    return i\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'cherry']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = sum((value for value in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(iterable)\ni = sum([count for count in counter.values()])",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = zip(*[(i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))])\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_dict = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, [sum((1 for _ in group)) for (key, group) in itertools.groupby(sorted(iterable))]))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = np.bincount(iterable)\ncounts = Counter(iterable)",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable), max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts.keys():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(items)):\n    counts[items[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": ""
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(items)\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = functools.reduce(lambda d, item: d.update({item: d.get(item, 0) + 1}) or d, iterable, {})\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import functools"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in set(items):\n    counts[item] = items.count(item)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(1)))",
    "imports": ""
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.histogram(iterable, bins=np.arange(max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(np.array(iterable, dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\nfor i in iterable:\n    counts_dict[i] = counts_dict.get(i, 0)\n    counts_dict[i] = counts_dict[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ncounts = {k: len(list(g)) for (k, g) in itertools.groupby(iterable_sorted)}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\n(unique_values, counts) = np.unique(iterable_sorted, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\ncounts = {}\nfor i in iterable_sorted:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.items():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.values():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])\n    counts[i[2]] = iterable.count(i[2])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = list(set(iterable))\ncounts = {item: len(list(group)) for (item, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    item = iterable[i]\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(itertools.chain.from_iterable(iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(itertools.chain(*iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.concatenate(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.hstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.vstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.ravel(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.flatten(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.reshape(iterable, -1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.squeeze(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1).tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in set(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable.sort()\ngroups = groupby(iterable)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1\n    else:\n        counts[i - 1] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = {k: v for (k, v) in counts}",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = dict(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]] + iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] += iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.update({item: counts[item] + 1}) if item in counts else counts.update({item: 1}) for (i, item) in enumerate(iterable)]\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] = np.sum(np.array(iterable) == item)",
    "imports": "from collections import defaultdict\nfrom collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_items, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique_items, counts))\narr = np.array(iterable)\ncounts_dict = {}\nfor item in np.unique(arr):\n    count = np.count_nonzero(arr == item)\n    counts_dict[item] = count\narr = np.array(iterable)\ncounts = np.bincount(arr)\ncounts_dict = {item: count for (item, count) in enumerate(counts) if count > 0}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ngroups = itertools.groupby(iterable)\ncounts = {}\nfor (item, group) in groups:\n    count = sum((1 for _ in group))\n    counts[item] = count\ngroups = itertools.groupby(iterable)\ncounts = {item: sum((1 for _ in group)) for (item, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\n\ndef update_counts(item):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfunctools.reduce(update_counts, iterable)\ncounts = {item: iterable.count(item) for item in iterable}\ncounts = collections.Counter(iterable)",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = collections.Counter(iterable)\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)\ni = iterable[-1]\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ncounts.update(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter()\ncounts.update(iterable)\niterable = [True, False, True, True]\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable=iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable=iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable=iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(filter(lambda x: x == i, iterable_list)) if filter(lambda x: x == i, iterable_list) else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.takewhile(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.dropwhile(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = {i: np.count_nonzero(iterable_list == i) for i in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = pd.Series(iterable_list).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = np.bincount(np.searchsorted(unique_values, iterable_list))\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = i\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0][0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = 'hello world'\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(((i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncount = counts[i]",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = np.bincount(iterable)\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = pd.Series(iterable).value_counts().to_dict()\ncounts = dict(zip(iterable, [sum((1 for _ in group)) for (_, group) in itertools.groupby(sorted(iterable))]))\ncounts = functools.reduce(lambda d, i: d.update({i: d.get(i, 0) + 1}) or d, iterable, {})",
    "imports": "from collections import defaultdict\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import Counter\nimport numpy as np\nimport numpy as np\nimport pandas as pd\nimport itertools\nimport functools"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))\nfor key in counts:\n    counts[key] = len(list(counts[key]))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'values': iterable})\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor element in iterable:\n    counts[element] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items()))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())\nmin_elements = [k for (k, v) in counts.items() if v == min_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = collections.Counter(iterable)\ncounts = collections.Counter((i for i in iterable))\ncounts = {key: len(list(group)) for (key, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import collections\nfrom collections import defaultdict\nimport collections\nimport collections\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.bincount(iterable)\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor i in range(len(unique_elements)):\n    counts[unique_elements[i]] = counts[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nunique_values = counts[0]\ncounts = dict(zip(unique_values, counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = np.array(iterable)\ncounts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = defaultdict(int)\ncounts.update({i: counts[i] + 1 for i in iterable})",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = {value: count for (value, count) in zip(unique_values, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.bincount(iterable_arr == value)[1] for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    if iterable[i] in iterable[:i]:\n        counts[i] = counts[i - 1] + 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = iterable[:i + 1].count(iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.sum(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.count_nonzero(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.__setitem__(i, counts[i] + 1) if i in counts else counts.__setitem__(i, 1) for i in iterable]\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict()\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())\ncounts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}\ncounts = collections.Counter(iterable)\ncounts = dict(**counts)\ncounts = collections.Counter(iterable)\ncounts = dict(**dict(counts.items()))",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, group) in groupby(sorted(iterable)):\n    counts[i] = sum((1 for _ in group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    count = sum(counts.values())\n    counts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\n    return (count, counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "count = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]",
    "imports": ""
   },
   {
    "code": "counts = np.ones(len(iterable))\n(unique_elements, unique_counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, unique_counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.array(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = list(counts.values())",
    "imports": "import numpy as np"
   }
  ]
 },
 "iteration-2": {
  "num-tests": 18,
  "num-correct": 362,
  "num-incorrect": 751,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "iterable = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
    "assertion": "assert counts == {1: 1, 2: 2, 3: 3, 4: 4}"
   },
   {
    "init": "iterable = []",
    "assertion": "assert counts == {}"
   },
   {
    "init": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']",
    "assertion": "assert counts == {'a': 1, 'b': 2, 'c': 3}"
   },
   {
    "init": "iterable = ['a', ' ', ' ', 'b', 'b', ' ', ' ', ' ']",
    "assertion": "assert counts == {'a': 1, ' ': 5, 'b': 2}"
   },
   {
    "init": "iterable = ['1.125', '3.5', '6.75', '5.9', '1.125', '3.5']",
    "assertion": "assert counts == {'1.125': 2, '3.5': 2, '6.75': 1, '5.9': 1}"
   },
   {
    "init": "iterable = [1.125, 3.5, 6.75, 5.9, 1.125, 3.5]",
    "assertion": "assert counts == {1.125: 2, 3.5: 2, 6.75: 1, 5.9: 1}"
   },
   {
    "init": "iterable = [None, None, None, 1, 1]",
    "assertion": "assert counts == {None: 3, 1: 2}"
   },
   {
    "init": "iterable = 'aabbcc'",
    "assertion": "assert counts == {'a': 2, 'b': 2, 'c': 2}"
   },
   {
    "init": "iterable = ' '",
    "assertion": "assert counts == {' ': 1}"
   },
   {
    "init": "iterable = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "iterable = ['a', 'b', 'c', 'a', 'b', 'b']",
    "assertion": "assert counts == {'a': 2, 'b': 3, 'c': 1}"
   },
   {
    "init": "iterable = [1, 2, 3, 1, 2, 2]",
    "assertion": "assert counts == {1: 2, 2: 3, 3: 1}"
   },
   {
    "init": "iterable = [1.1, 2.2, 3.3, 1.1, 2.2, 2.2]",
    "assertion": "assert counts == {1.1: 2, 2.2: 3, 3.3: 1}"
   },
   {
    "init": "iterable = ['1.1', '2.2', '3.3', '1.1', '2.2', '2.2']",
    "assertion": "assert counts == {'1.1': 2, '2.2': 3, '3.3': 1}"
   },
   {
    "init": "iterable = [None, None, None]",
    "assertion": "assert counts == {None: 3}"
   },
   {
    "init": "iterable = ['  string  ', '  string  ', '  string  ']",
    "assertion": "assert counts == {'  string  ': 3}"
   },
   {
    "init": "iterable = ['']",
    "assertion": "assert counts == {'': 1}"
   },
   {
    "init": "iterable = [1, '1']",
    "assertion": "assert counts == {1: 1, '1': 1}"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    counts[elem] = counts.get(elem, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    if elem in counts:\n        counts[elem] += 1\n    else:\n        counts[elem] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    temp = value\n    counts[temp] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.setdefault(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {element: iterable.count(element) for element in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value in counts:\n        counts[value] += 1\n    else:\n        counts[value] = 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = iterable\ncounts = Counter(arr)\ni = len(arr)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor (index, val) in enumerate(iterable):\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor element in iterable:\n    if element not in counts:\n        counts[element] = iterable.count(element)",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\n    i = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\ni = len(set(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(i, counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = 0\nfor (i, value) in enumerate(iterable):\n    continue",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = len(iterable) - 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter\nimport numpy as np"
   },
   {
    "code": "i = 0\ncounts = collections.Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (idx, val) in enumerate(iterable):\n    i = idx\n    counts[val] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i = index",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts.__setitem__(value, counts[value] + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\narr = iterable\ncounts = defaultdict(int)\nfor (index, value) in enumerate(arr):\n    counts[value] += 1\n    i = index\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = -1\nwhile i < len(iterable) - 1:\n    i += 1\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = -1\nfor value in iterable:\n    i += 1\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nindex = 0\nwhile index < len(iterable):\n    value = iterable[index]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1\n    index += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\n\ndef get_count(iterable):\n    for (i, value) in enumerate(iterable):\n        if value in counts:\n            counts[value] += 1\n        else:\n            counts[value] = 1\nget_count(iterable)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts.setdefault(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor val in iterable:\n    counts[val] += 1\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    counts[val] = counts.get(val, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = defaultdict(int)\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\ncounts = {}\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable)\ni = len(counts.keys())",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(set(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(list(set(iterable_list)))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = {}\nfor item in iterable_list:\n    counts[item] = counts.get(item, 0) + 1\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.update({i: counts[i] + 1}) for i in iterable]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts.get(i, 0) + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = sum((1 for j in iterable if j == i))",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])",
    "imports": "import functools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else counts[i] + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    current_count = counts.get(i, 0)\n    counts[i] = current_count + 1\ncount = sum(counts.values())",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = 0\nfor value in counts.values():\n    count += value\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values())))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=int))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint8))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([counts.get(i, 0), 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, itertools.repeat(1)))\ncounts = Counter(iterable)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})\ncounts = Counter(iterable)",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {i: iterable.count(i) for i in set(iterable)}\ncounts = Counter(iterable)",
    "imports": "import math\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.update([item])\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for x in iterable_list if x == i))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = iterable_list.count(i)",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: iterable_list.count(i) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: sum((1 for x in iterable_list if x == i)) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = dict.fromkeys(unique_elements, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(set(iterable), 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\ncounts.update((item for item in iterable))\ni = iterable\nresult = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len([x for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum([1 for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(filter(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = dict(zip(unique_values, [iterable_list.count(i) for i in unique_values]))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.compress(iterable_list, [x == i for x in iterable_list])))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = dict(Counter(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum((1 for x in iterable_list if x == i))\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = 0\n    for x in iterable_list:\n        if x == i:\n            count += 1\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = len([x for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = iterable_list.count(i)\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum([1 for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts.keys():\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = reduce(lambda d, x: {**d, x: d.get(x, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts.keys():\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if counts.get(i) is None:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if counts.get(x) is not None:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.setdefault(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "occurrences = {}\nfor item in iterable:\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": ""
   },
   {
    "code": "occurrences = defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {i: 0 for i in iterable}\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1\ncounts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts.setdefault(x, 0)\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 0\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 5\ncounts = Counter(iterable)\nfor element in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor element in iterable:\n    counts[element] += 1\ni = 5",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {x: 0 for x in iterable}\ni = len(iterable)\nfor x in iterable:\n    counts[x] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    count = counts.get(x, 0)\n    count += 1\n    counts[x] = count\n    i += 1",
    "imports": ""
   },
   {
    "code": "arr = list(iterable)\ncounts = Counter(arr)\nunique_values = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = collections.defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "import collections"
   },
   {
    "code": "occurrences = {}\nfor item in itertools.chain(iterable):\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    occurrences = {}\n    for item in iterable:\n        occurrences[item] = occurrences.get(item, 0) + 1\n    return dict(occurrences)\ncounts = count_occurrences(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counter_obj = {}\nfor elem in iterable:\n    if elem not in counter_obj:\n        counter_obj[elem] = 1\n    else:\n        counter_obj[elem] += 1\ncounts = dict(counter_obj)",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor item in iterable:\n    counts[item] += 1\ncount = dict(counts.items())",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {item: iterable.count(item) for item in set(iterable)}\ncount = dict(counts.items())",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = functools.reduce(lambda d, x: d.update([(x, d.get(x, 0) + 1)]) or d, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = functools.reduce(lambda counts, value: counts.update({value: counts.get(value, 0) + 1}) or counts, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    if value in counts:\n        counts[value] = counts[value] + 1\n    else:\n        counts[value] = 1",
    "imports": "import math"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(iterable):\n    counts[key] += sum((1 for _ in group))\ni = len(iterable)",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 1\n    else:\n        counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor ele in iterable:\n    counts[ele] = counts.get(ele, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {ele: 0 for ele in iterable}\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = dict(data)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts.keys():\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        i += 1\n        counts[x] += 1\n    else:\n        counts[x] = 1\n        i += 1",
    "imports": ""
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = {x: iterable.count(x) for x in unique_elements}\ni = len(iterable)",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in iterable:\n    counts[x] += 1\ni = len(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.chain(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(i, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in reversed(range(len(iterable))):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 1\n    else:\n        counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable) - 1, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor (i, item) in enumerate(reversed(iterable)):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor item in reversed(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] not in counts else counts[iterable[i]] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[len(iterable) - 1 - i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[-i - 1]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i * 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i / 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i /= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i % 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i %= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1 if item in counts else 0",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = reduce(lambda c, i: {**c, i: c.get(i, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = dict(((i, iterable.count(i)) for i in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor num in iterable:\n    if num in counts:\n        counts[num] += 1\n    else:\n        counts[num] = 1",
    "imports": ""
   },
   {
    "code": "(counts, i) = ({}, 0)\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {x: iterable.count(x) for x in iterable}",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor x in iterable:\n    counts[x] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except KeyError:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = map(lambda x: (x, iterable.count(x)), iterable)\ncounts = dict(set(counts))",
    "imports": ""
   },
   {
    "code": "counts = [iterable.count(i) for i in iterable]\ncounts = dict(zip(iterable, counts))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [0] * len(set(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i not in counts else counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [iterable.count(i) for i in set(iterable)]))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = {i: iterable.count(i) for i in iterable}",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    counts[item] = iterable.count(item)",
    "imports": ""
   },
   {
    "code": "iterable_dict = {x: iterable.count(x) for x in iterable}\ncounts = Counter(iterable_dict)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([arr_i == i for arr_i in iterable])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = len([1 for arr_i in iterable if arr_i == i])",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_count(x):\n    counts = {}\n    for i in x:\n        counts[i] = counts.get(i, 0) + 1\n    return counts\ncounts = get_count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {value: iterable.count(value) for (i, value) in enumerate(iterable)}",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len([x for x in iterable_list if iterable_list.count(x) > 0])",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = sum((1 for x in iterable_list if iterable_list.count(x) > 0))",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.__setitem__(item, counts[item] + 1) for (i, item) in enumerate(iterable)]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import math"
   },
   {
    "code": "counts = dict(zip(set(iterable), map(iterable.count, set(iterable))))",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "counts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())\ncounts = iterable_counts",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.keys()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len([key for key in counts])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable.copy()\ncounts = collections.Counter(new_iterable)\ni = len(new_iterable)",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor count in counts.values():\n    i += 1\ncounts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1\ncounts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum([count for count in counts.values()])",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ncounts = dict(iterable_counts.most_common())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable).items())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum((1 for x in iterable if x == i[0]))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len(list(filter(lambda x: x == i[0], iterable)))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    count = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else 0",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], counts[i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], None)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0) if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": "from collections import Counter as C\nfrom operator import itemgetter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = 5",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = dict(Counter(iterable))\ncounts = dict(occurrences)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable[-1] if iterable else None",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for item in iterable:\n        counts[item] += 1\n    return dict(counts)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "for (i, char) in enumerate(iterable):\n    counts[char] = counts.get(char, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_iterable = sorted(iterable)\ncounts = {i: new_iterable.count(i) for i in new_iterable}",
    "imports": ""
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in group)) for (k, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = sorted(iterable)\nresult = [(key, len(list(group))) for (key, group) in groupby(iterable)]\ncounts = dict(result)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(counts, _) = np.histogram(iterable, bins=np.arange(len(set(iterable))) + 0.5)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(list(iterable))",
    "imports": ""
   },
   {
    "code": "(unique_items, counts) = unique(iterable, return_counts=True)\ncounts = dict(zip(unique_items, counts))",
    "imports": "from numpy import unique"
   },
   {
    "code": "counts = Series(iterable).value_counts().to_dict()",
    "imports": "from pandas import Series"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += iterable.count(i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(unique(iterable), return_counts(iterable)))",
    "imports": "from numpy import unique, return_counts"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1 - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] -= 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1 if counts[i] > 0 else 0",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in groupby(sorted(iterable))))",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = itertools.groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter(iterable)\niterable = []\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = []\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = np.bincount(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "unique_values = np.unique(iterable)\ncounts = [np.count_nonzero(iterable == value) for value in unique_values]\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.astype(str), counts.astype(str)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in counts.keys():\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.keys())[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts)[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][0]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1\ni = iterable[-1]\ncounts = counts",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['i'])\ncounts = df['i'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.count_nonzero(iterable_arr == value) for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {}\nfor i in unique_values:\n    counts[i] = np.count_nonzero(iterable_arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['values'])\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'a', 'b', 'c']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [True, False, True, False, True]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1.5, 2.5, 3.5, 1.5, 2.5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.count_nonzero(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\ni = 0\ncount = 0\nfor (key, value) in counts.items():\n    if i == 0:\n        count = value\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.cycle(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1\n    counts[item] *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = dict(zip(iterable, counts.values()))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = {k: int(v) for (k, v) in counts.items()}",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: len(list(group)) for (i, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "count_dict = {}\nfor i in iterable:\n    count_dict[i] = count_dict.get(i, 0) + 1\ncounts = collections.Counter(count_dict)",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] = default_counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = count_elements(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(statistics.multimode(iterable))",
    "imports": "import statistics"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(sorted(iterable), key=itemgetter(0))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor (index, i) in enumerate(iterable):\n    counts[index] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = np.sum(np.array(list(counts.values()))) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "s = pd.Series(iterable)\ncounts = s.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nresult = dict(zip(counts[0], counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = sorted(iterable)\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.sum(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = [0] * len(iterable)\nfor i in range(len(iterable)):\n    counts[i] = iterable.count(iterable[i])",
    "imports": ""
   },
   {
    "code": "counts = pd.value_counts(iterable).to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable) - 0.5, max(iterable) + 1.5))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)\ncounts = Counter(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\n\ndef count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len([x for x in iterable if x == i])\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = sum([1 for x in iterable if x == i])\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.sum(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_nonzero(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_occurrences(iterable, i)\n    return counts",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_counts(iterable):\n    counts = dict(Counter(iterable))\n    return counts\n\ndef get_counts(iterable):\n    counts = Counter(iterable)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in iterable:\n        counts[i] = counts.get(i, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = {}\nfor i in iterable:\n    if i not in counter:\n        counter[i] = 0\n    counter[i] += 1",
    "imports": ""
   },
   {
    "code": "(unique_vals, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_vals, counts))\nfor i in iterable:\n    if i not in counts_dict:\n        counts_dict[i] = 0\n    counts_dict[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['col'])\ncounts = df['col'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable.sort()\ncounts = {key: sum((1 for _ in group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = {i: iterable.count(i) for i in iterable if not i in counts}",
    "imports": ""
   },
   {
    "code": "np_counts = np.array(list(counts.values()))\ncounts = dict(zip(counts.keys(), np_counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {key: value for (key, value) in counts.items() if value != 0}",
    "imports": ""
   },
   {
    "code": "indexed_counts = Counter(iterable)",
    "imports": "from statistics import Counter"
   },
   {
    "code": "counts = dict()\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable=iterable)",
    "imports": ""
   },
   {
    "code": "counts = Counter({x: iterable.count(x) for x in iterable})",
    "imports": ""
   },
   {
    "code": "data = list(itertools.chain.from_iterable(arr))\ncounts = {key: data.count(key) for key in iterable}",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "count = np.array(list(Counter(iterable).values()))",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "count = np.array([v for (k, v) in Counter(iterable).items()])",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "def count_values(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(itertools.zip_longest(iterable, repeat(1)).fromkeys(iterable, 0))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = reduce(lambda x, y: x.update(y) or x, map(lambda x: {x: 1}, iterable), {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "lst_1 = sorted(set(iterable))\nmissing = sorted(set(iterable))\nfinal_out = itertools.chain([(x, counts[x]) for x in iterable if x in counts], [(x, 0) for x in missing if missing])",
    "imports": "import itertools"
   },
   {
    "code": "count_dict = collections.Counter(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "count_dict = dict(zip(*np.unique(list(iterable), return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter({})\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter()\n    counts.update(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = np.array(list(collections.Counter(iterable).values()))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "iterable = []\n\ndef count_elements(iterable):\n    counter = collections.Counter(iterable)\n    return counter\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iter_array = np.array(iterable)\ncounts = dict(zip(np.unique(iter_array), np.bincount(iter_array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in v)) for (k, v) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = dict(Counter(list(iterable) + '' + tuple(iterable)))",
    "imports": ""
   },
   {
    "code": "for i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {x: len(list(g)) for (x, g) in itertools.groupby(iterable)}",
    "imports": "import itertools"
   },
   {
    "code": "count = {}\nfor x in iterable:\n    count[x] = count.get(x, 0) + 1\n    counts = count",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in np.array(iterable):\n    counts[i] += 1",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['element'])\ncounts = df['element'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = list(count_elements(iterable).elements())",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def get_counts(iterable):\n    return dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "df = pd.DataFrame({'iterable': iterable})\ncounts = df['iterable'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = counts\nfor i in iterable:\n    if i not in count:\n        count[i] = 0\n    count[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "d = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    d[iterable[i]] += 1\n    i += 1\ncounts = dict(d)",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1\ncounts_array = np.array(list(counts))",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable\nnew_iterable.sort()\ni = 0\ncounts = {}\nwhile i < len(new_iterable):\n    counts[iterable[i]] = new_iterable.count(new_iterable[i])\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor (item, group) in itertools.groupby(iterable):\n    counts[item] = sum([1 for _ in group])\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nuni_items = np.unique(iterable)\nfor item in uni_items:\n    counts[item] = np.count_nonzero(iterable == item)\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counters = Counter(iterable)\ncounts = dict(counts)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "(counts, i) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(counts, i))\ni = np.sum(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\ni = 0\nfor (x, group) in groupby(iterable):\n    counts[x] = len(list(group))\n    i += len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_lst = sorted(iterable)\ncounts = {}\ni = 0\nfor (k, g) in groupby(sorted_lst):\n    counts[k] = sum((1 for _ in g))\n    i += 1",
    "imports": "from itertools import groupby"
   },
   {
    "code": "i = 0\ncounts = {}\n(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor element in unique_elements:\n    counts[element] = counts[i]\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts_series = pd.Series(iterable).value_counts()\ncounts = counts_series.to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "i = 5\n(unique, counts) = np.unique(iterable, return_counts=True)\nfor (element, count) in zip(unique, counts):\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import functools"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] = counts[x] + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ni = sum(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    i = 0\n    for x in iterable:\n        counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\ni = 0\n\ndef count_elements(iterable):\n    for x in itertools.chain(iterable):\n        if x not in counts:\n            counts[x] = 1\n        else:\n            counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_values, counts) = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(iterable)\narr.sort()\nunique_values = []\ncounts = []\nfor (k, g) in itertools.groupby(arr):\n    unique_values.append(k)\n    counts.append(len(list(g)))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['item'])\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "occurrences = {}\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        for item in row:\n            occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import csv"
   },
   {
    "code": "occurrences = {}\nfor (key, group) in groupby(sorted(iterable)):\n    occurrences[key] = sum((1 for _ in group))\ncounts = dict(occurrences)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = dict(((k, sum((1 for _ in g))) for (k, g) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "defaultdict(int)",
    "imports": ""
   },
   {
    "code": "counts = dict(itertools.Counter(iterable))",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = dict(counter_obj)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = counter_obj",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = defaultdict(int)\nfor element in iterable:\n    counter_obj[element] += 1\ncounts = dict(counter_obj)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": ""
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(arr)\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor num in arr:\n    counts[num] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor index in range(len(arr)):\n    counts[arr[index]] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncount = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    my_counter[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\nmy_counter = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter[item]\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\ncombinations = list(itertools.combinations(items, 2))\nmy_counter = Counter()\nfor combination in combinations:\n    my_counter[combination[0]] += 1\n    my_counter[combination[1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    if item in my_counter:\n        my_counter[item] += 1\n    else:\n        my_counter[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter.get(item, 0)\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "def sum_counts(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] += 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\ncounts = Counter()\nfor item in iterable:\n    counts.update({item: 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_items(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] = counts.get(item, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\ndef count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncount_values = count_elements(iterable)\ncounts = dict(count_values)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_vals = np.unique(iterable)\ncounts = {i: len(np.where(iterable == i)[0]) for i in unique_vals}",
    "imports": "import numpy as np"
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: 1 for i in iterable}",
    "imports": "import itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor i in np.unique(arr):\n    counts[i] = np.count_nonzero(arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(iterable).to_dict()",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ngrouped_iterable = itertools.groupby(sorted(iterable))\nfor (key, group) in grouped_iterable:\n    counts[key] = len(list(group))\ndefault_counts = {k: 0 for k in set(iterable) - set(counts.keys())}\ncounts.update(default_counts)",
    "imports": ""
   },
   {
    "code": "df = pd.DataFrame({'item': iterable})\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    try:\n        counts[str(value)] += 1\n    except KeyError:\n        counts[value] = 1",
    "imports": "import json"
   },
   {
    "code": "array = np.array(iterable)\n(unique_elements, counts) = np.unique(array, return_counts=True)\ni = len(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = collections.defaultdict(lambda : 0)\nance",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounter = dict()\nfor x in iterable:\n    counter[x] = counter.get(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 4]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'hamster', 'dog', 'parrot']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [7, 9, 7, 9, 1]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['red', 'red', 'green', 'blue', 'blue', 'green', 'blue']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable.length",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = iterable.length",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\ncounter = Counter(iterable)\nfor item in counter:\n    counts[item] = counter[item]\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(np.unique(arr), np.bincount(arr.astype(int))))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = 'hello world'\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ('a', 'b', 'a', 'c', 'b')\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "mean = statistics.mean(iterable)\nvariance = statistics.variance(iterable)\nstd_dev = statistics.stdev(iterable)\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "df = pd.DataFrame(iterable)\ncounts = df[0].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = ['apple', 'banana', 'cherry', 'apple', 'banana', 'apple']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'cat', 'dog', 'cat', 'dog']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_inverse=True, return_counts=True)))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = pd.Series([1, 2, 3, 4, 4, 5, 5, 5])\ncounts = iterable.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\niterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count_items(iterable):\n    df = pd.DataFrame(iterable, columns=['item'])\n    counts = df['item'].value_counts().to_dict()\n    return counts\ncounts = count_items(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_iterable = sorted(iterable)\ngrouped_counts = [(k, sum((1 for _ in g))) for (k, g) in groupby(sorted_iterable, key=itemgetter(0))]\ncounts = dict(grouped_counts)",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 1]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter([1, 2, 3, 1, 2, 1])",
    "imports": ""
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for elem in iterable:\n        counts[elem] += 1\n    return dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    (unique_elements, counts) = np.unique(iterable, return_counts=True)\n    return dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = {}\n    for elem in iterable:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    return counts",
    "imports": ""
   },
   {
    "code": "counts = {k: sum((1 for _ in g)) for (k, g) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = np.zeros(len(iterable))\n    for i in range(len(iterable)):\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = {}\nfor (item, group) in itertools.groupby(sorted(iterable)):\n    counts[item] = sum((1 for _ in group))",
    "imports": "import itertools"
   },
   {
    "code": "counter = collections.Counter(arr)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(arr)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def import_libraries():\n    import collections\nimport_libraries()\ncounts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor (i, value) in enumerate(arr):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counter = Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def count(iterable):\n    counter = collections.Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "arr = list(iterable)\nmean = statistics.mean(arr)\nmedian = statistics.median(arr)\nmode = statistics.mode(arr)\ncounts = {'mean': mean, 'median': median, 'mode': mode}",
    "imports": "import statistics"
   },
   {
    "code": "iterable.sort()\ncounts = {}\nfor (val, group) in groupby(iterable):\n    counts[val] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_elements = np.unique(iterable_arr)\ncounts = {element: np.sum(iterable_arr == element) for element in unique_elements}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = {element: count for (element, count) in zip(unique_elements, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "value_counts = np.bincount(iterable)\nunique_elements = np.nonzero(value_counts)[0]\ncounts = {element: count for (element, count) in zip(unique_elements, value_counts[unique_elements])}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'c', 'b', 'a', 'a', 'b', 'c']\ncounts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return counts\niterable = [1, 2, 2, 3, 3, 3]\nresult = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\ni = len(counts[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.bincount(iterable)\ni = len(counts.nonzero()[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()\ni = len(counts)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    count += 1\ni = count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": ""
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor i in range(len(iterable)):\n    value = iterable[i]\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts[value] + 1 if value in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\ncounts = {}\nfor i in range(len(unique_values)):\n    counts[unique_values[i]] = counts_dict[unique_values[i]]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] += len(list(group))",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = pd.value_counts(iterable)\ni = counts.sum()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(iterable)}\ni = sum(counts.values())",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique, counts))\ni = sum(counts.values())",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = dict()\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 0\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncounts = collections.Counter(arr)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable_count = Counter(iterable)\ni = sum(iterable_count.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())",
    "imports": "import collections"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (value, group) in itertools.groupby(iterable):\n    counts[value] = sum((1 for _ in group))\ni = 0\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return pd.Series(index=iterable, dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ni = 0\n\ndef count_occurrences(iterable):\n    counts = init_counts()\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return (counts, i)\n(counts, i) = count_occurrences(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in np.ndenumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.ones_like(np.unique(iterable))))\nfor value in iterable:\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def counts(iterable):\n    counter = itertools.count()\n    for (i, value) in enumerate(iterable):\n        next(counter)",
    "imports": "import itertools"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(range(len(data))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(counts):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(range(len(counts))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "count = np.sum(arr)\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "count = sum(arr)\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "arr.sort()\narr_count = [(k, len(list(g))) for (k, g) in itertools.groupby(arr)]\ncounts = {k: v for (k, v) in arr_count}\ni = len(arr)",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(arr, return_counts=True)\ncounts_dict = {k: v for (k, v) in zip(unique_elements, counts)}\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in arr:\n    counts[x] += 1\ni = len(arr)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))\ni = len(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.zeros_like(np.unique(iterable))))\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "i = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i\ncollections\ni = 0\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor i in range(len(iterable)):\n    item = iterable[i]\n    counts[item] += 1\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    i = 0\n    while i < len(iterable):\n        counts[iterable[i]] += 1\n        i = i + 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\nresult = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_inverse=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in itertools.groupby(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor (element, group) in groupby(iterable):\n    if element not in counts:\n        counts[element] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    i = len(counts)\n    return i\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'cherry']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = sum((value for value in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(iterable)\ni = sum([count for count in counter.values()])",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = zip(*[(i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))])\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_dict = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, [sum((1 for _ in group)) for (key, group) in itertools.groupby(sorted(iterable))]))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = np.bincount(iterable)\ncounts = Counter(iterable)",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable), max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts.keys():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(items)):\n    counts[items[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": ""
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(items)\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = functools.reduce(lambda d, item: d.update({item: d.get(item, 0) + 1}) or d, iterable, {})\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import functools"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in set(items):\n    counts[item] = items.count(item)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(1)))",
    "imports": ""
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.histogram(iterable, bins=np.arange(max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(np.array(iterable, dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\nfor i in iterable:\n    counts_dict[i] = counts_dict.get(i, 0)\n    counts_dict[i] = counts_dict[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ncounts = {k: len(list(g)) for (k, g) in itertools.groupby(iterable_sorted)}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\n(unique_values, counts) = np.unique(iterable_sorted, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\ncounts = {}\nfor i in iterable_sorted:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.items():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.values():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])\n    counts[i[2]] = iterable.count(i[2])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = list(set(iterable))\ncounts = {item: len(list(group)) for (item, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    item = iterable[i]\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(itertools.chain.from_iterable(iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(itertools.chain(*iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.concatenate(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.hstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.vstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.ravel(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.flatten(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.reshape(iterable, -1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.squeeze(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1).tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in set(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable.sort()\ngroups = groupby(iterable)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1\n    else:\n        counts[i - 1] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = {k: v for (k, v) in counts}",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = dict(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]] + iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] += iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.update({item: counts[item] + 1}) if item in counts else counts.update({item: 1}) for (i, item) in enumerate(iterable)]\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] = np.sum(np.array(iterable) == item)",
    "imports": "from collections import defaultdict\nfrom collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_items, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique_items, counts))\narr = np.array(iterable)\ncounts_dict = {}\nfor item in np.unique(arr):\n    count = np.count_nonzero(arr == item)\n    counts_dict[item] = count\narr = np.array(iterable)\ncounts = np.bincount(arr)\ncounts_dict = {item: count for (item, count) in enumerate(counts) if count > 0}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ngroups = itertools.groupby(iterable)\ncounts = {}\nfor (item, group) in groups:\n    count = sum((1 for _ in group))\n    counts[item] = count\ngroups = itertools.groupby(iterable)\ncounts = {item: sum((1 for _ in group)) for (item, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\n\ndef update_counts(item):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfunctools.reduce(update_counts, iterable)\ncounts = {item: iterable.count(item) for item in iterable}\ncounts = collections.Counter(iterable)",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = collections.Counter(iterable)\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)\ni = iterable[-1]\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ncounts.update(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter()\ncounts.update(iterable)\niterable = [True, False, True, True]\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable=iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable=iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable=iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(filter(lambda x: x == i, iterable_list)) if filter(lambda x: x == i, iterable_list) else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.takewhile(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.dropwhile(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = {i: np.count_nonzero(iterable_list == i) for i in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = pd.Series(iterable_list).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = np.bincount(np.searchsorted(unique_values, iterable_list))\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = i\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0][0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = 'hello world'\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(((i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncount = counts[i]",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = np.bincount(iterable)\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = pd.Series(iterable).value_counts().to_dict()\ncounts = dict(zip(iterable, [sum((1 for _ in group)) for (_, group) in itertools.groupby(sorted(iterable))]))\ncounts = functools.reduce(lambda d, i: d.update({i: d.get(i, 0) + 1}) or d, iterable, {})",
    "imports": "from collections import defaultdict\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import Counter\nimport numpy as np\nimport numpy as np\nimport pandas as pd\nimport itertools\nimport functools"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))\nfor key in counts:\n    counts[key] = len(list(counts[key]))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'values': iterable})\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor element in iterable:\n    counts[element] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items()))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())\nmin_elements = [k for (k, v) in counts.items() if v == min_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = collections.Counter(iterable)\ncounts = collections.Counter((i for i in iterable))\ncounts = {key: len(list(group)) for (key, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import collections\nfrom collections import defaultdict\nimport collections\nimport collections\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.bincount(iterable)\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor i in range(len(unique_elements)):\n    counts[unique_elements[i]] = counts[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nunique_values = counts[0]\ncounts = dict(zip(unique_values, counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = np.array(iterable)\ncounts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = defaultdict(int)\ncounts.update({i: counts[i] + 1 for i in iterable})",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = {value: count for (value, count) in zip(unique_values, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.bincount(iterable_arr == value)[1] for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    if iterable[i] in iterable[:i]:\n        counts[i] = counts[i - 1] + 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = iterable[:i + 1].count(iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.sum(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.count_nonzero(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.__setitem__(i, counts[i] + 1) if i in counts else counts.__setitem__(i, 1) for i in iterable]\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict()\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())\ncounts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}\ncounts = collections.Counter(iterable)\ncounts = dict(**counts)\ncounts = collections.Counter(iterable)\ncounts = dict(**dict(counts.items()))",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, group) in groupby(sorted(iterable)):\n    counts[i] = sum((1 for _ in group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    count = sum(counts.values())\n    counts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\n    return (count, counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "count = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]",
    "imports": ""
   },
   {
    "code": "counts = np.ones(len(iterable))\n(unique_elements, unique_counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, unique_counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.array(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = list(counts.values())",
    "imports": "import numpy as np"
   }
  ]
 },
 "iteration-3": {
  "num-tests": 24,
  "num-correct": 362,
  "num-incorrect": 751,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "iterable = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
    "assertion": "assert counts == {1: 1, 2: 2, 3: 3, 4: 4}"
   },
   {
    "init": "iterable = []",
    "assertion": "assert counts == {}"
   },
   {
    "init": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']",
    "assertion": "assert counts == {'a': 1, 'b': 2, 'c': 3}"
   },
   {
    "init": "iterable = ['a', ' ', ' ', 'b', 'b', ' ', ' ', ' ']",
    "assertion": "assert counts == {'a': 1, ' ': 5, 'b': 2}"
   },
   {
    "init": "iterable = ['1.125', '3.5', '6.75', '5.9', '1.125', '3.5']",
    "assertion": "assert counts == {'1.125': 2, '3.5': 2, '6.75': 1, '5.9': 1}"
   },
   {
    "init": "iterable = [1.125, 3.5, 6.75, 5.9, 1.125, 3.5]",
    "assertion": "assert counts == {1.125: 2, 3.5: 2, 6.75: 1, 5.9: 1}"
   },
   {
    "init": "iterable = [None, None, None, 1, 1]",
    "assertion": "assert counts == {None: 3, 1: 2}"
   },
   {
    "init": "iterable = 'aabbcc'",
    "assertion": "assert counts == {'a': 2, 'b': 2, 'c': 2}"
   },
   {
    "init": "iterable = ' '",
    "assertion": "assert counts == {' ': 1}"
   },
   {
    "init": "iterable = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "iterable = ['a', 'b', 'c', 'a', 'b', 'b']",
    "assertion": "assert counts == {'a': 2, 'b': 3, 'c': 1}"
   },
   {
    "init": "iterable = [1, 2, 3, 1, 2, 2]",
    "assertion": "assert counts == {1: 2, 2: 3, 3: 1}"
   },
   {
    "init": "iterable = [1.1, 2.2, 3.3, 1.1, 2.2, 2.2]",
    "assertion": "assert counts == {1.1: 2, 2.2: 3, 3.3: 1}"
   },
   {
    "init": "iterable = ['1.1', '2.2', '3.3', '1.1', '2.2', '2.2']",
    "assertion": "assert counts == {'1.1': 2, '2.2': 3, '3.3': 1}"
   },
   {
    "init": "iterable = [None, None, None]",
    "assertion": "assert counts == {None: 3}"
   },
   {
    "init": "iterable = ['  string  ', '  string  ', '  string  ']",
    "assertion": "assert counts == {'  string  ': 3}"
   },
   {
    "init": "iterable = ['']",
    "assertion": "assert counts == {'': 1}"
   },
   {
    "init": "iterable = [1, '1']",
    "assertion": "assert counts == {1: 1, '1': 1}"
   },
   {
    "init": "iterable = ['a', 'b', 'a', 'c', 'b', 'b', 'a']",
    "assertion": "assert counts == {'a': 3, 'b': 3, 'c': 1}"
   },
   {
    "init": "iterable = [1, 2, 3, 2, 1, 3, 3, 2, 2, 1]",
    "assertion": "assert counts == {1: 3, 2: 4, 3: 3}"
   },
   {
    "init": "iterable = ['a', ' ', 'b', ' ', ' ', 'a']",
    "assertion": "assert counts == {'a': 2, ' ': 3, 'b': 1}"
   },
   {
    "init": "iterable = [None, None, 'None', 'None']",
    "assertion": "assert counts == {None: 2, 'None': 2}"
   },
   {
    "init": "iterable = 'abcabcabc'",
    "assertion": "assert counts == {'a': 3, 'b': 3, 'c': 3}"
   },
   {
    "init": "iterable = 123",
    "assertion": "assert 1==1",
    "error": true
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    counts[elem] = counts.get(elem, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    if elem in counts:\n        counts[elem] += 1\n    else:\n        counts[elem] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    temp = value\n    counts[temp] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.setdefault(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {element: iterable.count(element) for element in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value in counts:\n        counts[value] += 1\n    else:\n        counts[value] = 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = iterable\ncounts = Counter(arr)\ni = len(arr)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor (index, val) in enumerate(iterable):\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor element in iterable:\n    if element not in counts:\n        counts[element] = iterable.count(element)",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\n    i = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\ni = len(set(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(i, counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = 0\nfor (i, value) in enumerate(iterable):\n    continue",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = len(iterable) - 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter\nimport numpy as np"
   },
   {
    "code": "i = 0\ncounts = collections.Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (idx, val) in enumerate(iterable):\n    i = idx\n    counts[val] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i = index",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts.__setitem__(value, counts[value] + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\narr = iterable\ncounts = defaultdict(int)\nfor (index, value) in enumerate(arr):\n    counts[value] += 1\n    i = index\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = -1\nwhile i < len(iterable) - 1:\n    i += 1\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = -1\nfor value in iterable:\n    i += 1\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nindex = 0\nwhile index < len(iterable):\n    value = iterable[index]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1\n    index += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\n\ndef get_count(iterable):\n    for (i, value) in enumerate(iterable):\n        if value in counts:\n            counts[value] += 1\n        else:\n            counts[value] = 1\nget_count(iterable)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts.setdefault(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor val in iterable:\n    counts[val] += 1\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    counts[val] = counts.get(val, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = defaultdict(int)\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\ncounts = {}\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable)\ni = len(counts.keys())",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(set(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(list(set(iterable_list)))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = {}\nfor item in iterable_list:\n    counts[item] = counts.get(item, 0) + 1\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.update({i: counts[i] + 1}) for i in iterable]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts.get(i, 0) + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = sum((1 for j in iterable if j == i))",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])",
    "imports": "import functools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else counts[i] + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    current_count = counts.get(i, 0)\n    counts[i] = current_count + 1\ncount = sum(counts.values())",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = 0\nfor value in counts.values():\n    count += value\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values())))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=int))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint8))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([counts.get(i, 0), 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, itertools.repeat(1)))\ncounts = Counter(iterable)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})\ncounts = Counter(iterable)",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {i: iterable.count(i) for i in set(iterable)}\ncounts = Counter(iterable)",
    "imports": "import math\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.update([item])\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for x in iterable_list if x == i))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = iterable_list.count(i)",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: iterable_list.count(i) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: sum((1 for x in iterable_list if x == i)) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = dict.fromkeys(unique_elements, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(set(iterable), 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\ncounts.update((item for item in iterable))\ni = iterable\nresult = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len([x for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum([1 for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(filter(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = dict(zip(unique_values, [iterable_list.count(i) for i in unique_values]))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.compress(iterable_list, [x == i for x in iterable_list])))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = dict(Counter(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum((1 for x in iterable_list if x == i))\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = 0\n    for x in iterable_list:\n        if x == i:\n            count += 1\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = len([x for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = iterable_list.count(i)\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum([1 for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts.keys():\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = reduce(lambda d, x: {**d, x: d.get(x, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts.keys():\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if counts.get(i) is None:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if counts.get(x) is not None:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.setdefault(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "occurrences = {}\nfor item in iterable:\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": ""
   },
   {
    "code": "occurrences = defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {i: 0 for i in iterable}\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1\ncounts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts.setdefault(x, 0)\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 0\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 5\ncounts = Counter(iterable)\nfor element in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor element in iterable:\n    counts[element] += 1\ni = 5",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {x: 0 for x in iterable}\ni = len(iterable)\nfor x in iterable:\n    counts[x] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    count = counts.get(x, 0)\n    count += 1\n    counts[x] = count\n    i += 1",
    "imports": ""
   },
   {
    "code": "arr = list(iterable)\ncounts = Counter(arr)\nunique_values = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = collections.defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "import collections"
   },
   {
    "code": "occurrences = {}\nfor item in itertools.chain(iterable):\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    occurrences = {}\n    for item in iterable:\n        occurrences[item] = occurrences.get(item, 0) + 1\n    return dict(occurrences)\ncounts = count_occurrences(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counter_obj = {}\nfor elem in iterable:\n    if elem not in counter_obj:\n        counter_obj[elem] = 1\n    else:\n        counter_obj[elem] += 1\ncounts = dict(counter_obj)",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor item in iterable:\n    counts[item] += 1\ncount = dict(counts.items())",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {item: iterable.count(item) for item in set(iterable)}\ncount = dict(counts.items())",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = functools.reduce(lambda d, x: d.update([(x, d.get(x, 0) + 1)]) or d, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = functools.reduce(lambda counts, value: counts.update({value: counts.get(value, 0) + 1}) or counts, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    if value in counts:\n        counts[value] = counts[value] + 1\n    else:\n        counts[value] = 1",
    "imports": "import math"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(iterable):\n    counts[key] += sum((1 for _ in group))\ni = len(iterable)",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 1\n    else:\n        counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor ele in iterable:\n    counts[ele] = counts.get(ele, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {ele: 0 for ele in iterable}\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = dict(data)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts.keys():\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        i += 1\n        counts[x] += 1\n    else:\n        counts[x] = 1\n        i += 1",
    "imports": ""
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = {x: iterable.count(x) for x in unique_elements}\ni = len(iterable)",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in iterable:\n    counts[x] += 1\ni = len(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.chain(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(i, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in reversed(range(len(iterable))):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 1\n    else:\n        counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable) - 1, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor (i, item) in enumerate(reversed(iterable)):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor item in reversed(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] not in counts else counts[iterable[i]] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[len(iterable) - 1 - i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[-i - 1]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i * 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i / 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i /= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i % 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i %= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1 if item in counts else 0",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = reduce(lambda c, i: {**c, i: c.get(i, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = dict(((i, iterable.count(i)) for i in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor num in iterable:\n    if num in counts:\n        counts[num] += 1\n    else:\n        counts[num] = 1",
    "imports": ""
   },
   {
    "code": "(counts, i) = ({}, 0)\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {x: iterable.count(x) for x in iterable}",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor x in iterable:\n    counts[x] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except KeyError:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = map(lambda x: (x, iterable.count(x)), iterable)\ncounts = dict(set(counts))",
    "imports": ""
   },
   {
    "code": "counts = [iterable.count(i) for i in iterable]\ncounts = dict(zip(iterable, counts))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [0] * len(set(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i not in counts else counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [iterable.count(i) for i in set(iterable)]))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = {i: iterable.count(i) for i in iterable}",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    counts[item] = iterable.count(item)",
    "imports": ""
   },
   {
    "code": "iterable_dict = {x: iterable.count(x) for x in iterable}\ncounts = Counter(iterable_dict)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([arr_i == i for arr_i in iterable])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = len([1 for arr_i in iterable if arr_i == i])",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_count(x):\n    counts = {}\n    for i in x:\n        counts[i] = counts.get(i, 0) + 1\n    return counts\ncounts = get_count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {value: iterable.count(value) for (i, value) in enumerate(iterable)}",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len([x for x in iterable_list if iterable_list.count(x) > 0])",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = sum((1 for x in iterable_list if iterable_list.count(x) > 0))",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.__setitem__(item, counts[item] + 1) for (i, item) in enumerate(iterable)]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import math"
   },
   {
    "code": "counts = dict(zip(set(iterable), map(iterable.count, set(iterable))))",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "counts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())\ncounts = iterable_counts",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.keys()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len([key for key in counts])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable.copy()\ncounts = collections.Counter(new_iterable)\ni = len(new_iterable)",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor count in counts.values():\n    i += 1\ncounts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1\ncounts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum([count for count in counts.values()])",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ncounts = dict(iterable_counts.most_common())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable).items())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum((1 for x in iterable if x == i[0]))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len(list(filter(lambda x: x == i[0], iterable)))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    count = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else 0",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], counts[i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], None)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0) if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": "from collections import Counter as C\nfrom operator import itemgetter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = 5",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = dict(Counter(iterable))\ncounts = dict(occurrences)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable[-1] if iterable else None",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for item in iterable:\n        counts[item] += 1\n    return dict(counts)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "for (i, char) in enumerate(iterable):\n    counts[char] = counts.get(char, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_iterable = sorted(iterable)\ncounts = {i: new_iterable.count(i) for i in new_iterable}",
    "imports": ""
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in group)) for (k, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = sorted(iterable)\nresult = [(key, len(list(group))) for (key, group) in groupby(iterable)]\ncounts = dict(result)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(counts, _) = np.histogram(iterable, bins=np.arange(len(set(iterable))) + 0.5)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(list(iterable))",
    "imports": ""
   },
   {
    "code": "(unique_items, counts) = unique(iterable, return_counts=True)\ncounts = dict(zip(unique_items, counts))",
    "imports": "from numpy import unique"
   },
   {
    "code": "counts = Series(iterable).value_counts().to_dict()",
    "imports": "from pandas import Series"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += iterable.count(i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(unique(iterable), return_counts(iterable)))",
    "imports": "from numpy import unique, return_counts"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1 - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] -= 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1 if counts[i] > 0 else 0",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in groupby(sorted(iterable))))",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = itertools.groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter(iterable)\niterable = []\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = []\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = np.bincount(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "unique_values = np.unique(iterable)\ncounts = [np.count_nonzero(iterable == value) for value in unique_values]\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.astype(str), counts.astype(str)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in counts.keys():\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.keys())[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts)[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][0]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1\ni = iterable[-1]\ncounts = counts",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['i'])\ncounts = df['i'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.count_nonzero(iterable_arr == value) for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {}\nfor i in unique_values:\n    counts[i] = np.count_nonzero(iterable_arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['values'])\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'a', 'b', 'c']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [True, False, True, False, True]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1.5, 2.5, 3.5, 1.5, 2.5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.count_nonzero(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\ni = 0\ncount = 0\nfor (key, value) in counts.items():\n    if i == 0:\n        count = value\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.cycle(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1\n    counts[item] *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = dict(zip(iterable, counts.values()))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = {k: int(v) for (k, v) in counts.items()}",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: len(list(group)) for (i, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "count_dict = {}\nfor i in iterable:\n    count_dict[i] = count_dict.get(i, 0) + 1\ncounts = collections.Counter(count_dict)",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] = default_counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = count_elements(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(statistics.multimode(iterable))",
    "imports": "import statistics"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(sorted(iterable), key=itemgetter(0))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor (index, i) in enumerate(iterable):\n    counts[index] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = np.sum(np.array(list(counts.values()))) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "s = pd.Series(iterable)\ncounts = s.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nresult = dict(zip(counts[0], counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = sorted(iterable)\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.sum(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = [0] * len(iterable)\nfor i in range(len(iterable)):\n    counts[i] = iterable.count(iterable[i])",
    "imports": ""
   },
   {
    "code": "counts = pd.value_counts(iterable).to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable) - 0.5, max(iterable) + 1.5))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)\ncounts = Counter(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\n\ndef count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len([x for x in iterable if x == i])\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = sum([1 for x in iterable if x == i])\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.sum(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_nonzero(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_occurrences(iterable, i)\n    return counts",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_counts(iterable):\n    counts = dict(Counter(iterable))\n    return counts\n\ndef get_counts(iterable):\n    counts = Counter(iterable)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in iterable:\n        counts[i] = counts.get(i, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = {}\nfor i in iterable:\n    if i not in counter:\n        counter[i] = 0\n    counter[i] += 1",
    "imports": ""
   },
   {
    "code": "(unique_vals, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_vals, counts))\nfor i in iterable:\n    if i not in counts_dict:\n        counts_dict[i] = 0\n    counts_dict[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['col'])\ncounts = df['col'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable.sort()\ncounts = {key: sum((1 for _ in group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = {i: iterable.count(i) for i in iterable if not i in counts}",
    "imports": ""
   },
   {
    "code": "np_counts = np.array(list(counts.values()))\ncounts = dict(zip(counts.keys(), np_counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {key: value for (key, value) in counts.items() if value != 0}",
    "imports": ""
   },
   {
    "code": "indexed_counts = Counter(iterable)",
    "imports": "from statistics import Counter"
   },
   {
    "code": "counts = dict()\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable=iterable)",
    "imports": ""
   },
   {
    "code": "counts = Counter({x: iterable.count(x) for x in iterable})",
    "imports": ""
   },
   {
    "code": "data = list(itertools.chain.from_iterable(arr))\ncounts = {key: data.count(key) for key in iterable}",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "count = np.array(list(Counter(iterable).values()))",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "count = np.array([v for (k, v) in Counter(iterable).items()])",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "def count_values(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(itertools.zip_longest(iterable, repeat(1)).fromkeys(iterable, 0))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = reduce(lambda x, y: x.update(y) or x, map(lambda x: {x: 1}, iterable), {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "lst_1 = sorted(set(iterable))\nmissing = sorted(set(iterable))\nfinal_out = itertools.chain([(x, counts[x]) for x in iterable if x in counts], [(x, 0) for x in missing if missing])",
    "imports": "import itertools"
   },
   {
    "code": "count_dict = collections.Counter(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "count_dict = dict(zip(*np.unique(list(iterable), return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter({})\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter()\n    counts.update(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = np.array(list(collections.Counter(iterable).values()))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "iterable = []\n\ndef count_elements(iterable):\n    counter = collections.Counter(iterable)\n    return counter\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iter_array = np.array(iterable)\ncounts = dict(zip(np.unique(iter_array), np.bincount(iter_array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in v)) for (k, v) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = dict(Counter(list(iterable) + '' + tuple(iterable)))",
    "imports": ""
   },
   {
    "code": "for i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {x: len(list(g)) for (x, g) in itertools.groupby(iterable)}",
    "imports": "import itertools"
   },
   {
    "code": "count = {}\nfor x in iterable:\n    count[x] = count.get(x, 0) + 1\n    counts = count",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in np.array(iterable):\n    counts[i] += 1",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['element'])\ncounts = df['element'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = list(count_elements(iterable).elements())",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def get_counts(iterable):\n    return dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "df = pd.DataFrame({'iterable': iterable})\ncounts = df['iterable'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = counts\nfor i in iterable:\n    if i not in count:\n        count[i] = 0\n    count[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "d = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    d[iterable[i]] += 1\n    i += 1\ncounts = dict(d)",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1\ncounts_array = np.array(list(counts))",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable\nnew_iterable.sort()\ni = 0\ncounts = {}\nwhile i < len(new_iterable):\n    counts[iterable[i]] = new_iterable.count(new_iterable[i])\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor (item, group) in itertools.groupby(iterable):\n    counts[item] = sum([1 for _ in group])\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nuni_items = np.unique(iterable)\nfor item in uni_items:\n    counts[item] = np.count_nonzero(iterable == item)\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counters = Counter(iterable)\ncounts = dict(counts)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "(counts, i) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(counts, i))\ni = np.sum(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\ni = 0\nfor (x, group) in groupby(iterable):\n    counts[x] = len(list(group))\n    i += len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_lst = sorted(iterable)\ncounts = {}\ni = 0\nfor (k, g) in groupby(sorted_lst):\n    counts[k] = sum((1 for _ in g))\n    i += 1",
    "imports": "from itertools import groupby"
   },
   {
    "code": "i = 0\ncounts = {}\n(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor element in unique_elements:\n    counts[element] = counts[i]\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts_series = pd.Series(iterable).value_counts()\ncounts = counts_series.to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "i = 5\n(unique, counts) = np.unique(iterable, return_counts=True)\nfor (element, count) in zip(unique, counts):\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import functools"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] = counts[x] + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ni = sum(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    i = 0\n    for x in iterable:\n        counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\ni = 0\n\ndef count_elements(iterable):\n    for x in itertools.chain(iterable):\n        if x not in counts:\n            counts[x] = 1\n        else:\n            counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_values, counts) = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(iterable)\narr.sort()\nunique_values = []\ncounts = []\nfor (k, g) in itertools.groupby(arr):\n    unique_values.append(k)\n    counts.append(len(list(g)))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['item'])\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "occurrences = {}\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        for item in row:\n            occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import csv"
   },
   {
    "code": "occurrences = {}\nfor (key, group) in groupby(sorted(iterable)):\n    occurrences[key] = sum((1 for _ in group))\ncounts = dict(occurrences)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = dict(((k, sum((1 for _ in g))) for (k, g) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "defaultdict(int)",
    "imports": ""
   },
   {
    "code": "counts = dict(itertools.Counter(iterable))",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = dict(counter_obj)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = counter_obj",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = defaultdict(int)\nfor element in iterable:\n    counter_obj[element] += 1\ncounts = dict(counter_obj)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": ""
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(arr)\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor num in arr:\n    counts[num] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor index in range(len(arr)):\n    counts[arr[index]] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncount = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    my_counter[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\nmy_counter = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter[item]\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\ncombinations = list(itertools.combinations(items, 2))\nmy_counter = Counter()\nfor combination in combinations:\n    my_counter[combination[0]] += 1\n    my_counter[combination[1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    if item in my_counter:\n        my_counter[item] += 1\n    else:\n        my_counter[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter.get(item, 0)\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "def sum_counts(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] += 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\ncounts = Counter()\nfor item in iterable:\n    counts.update({item: 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_items(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] = counts.get(item, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\ndef count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncount_values = count_elements(iterable)\ncounts = dict(count_values)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_vals = np.unique(iterable)\ncounts = {i: len(np.where(iterable == i)[0]) for i in unique_vals}",
    "imports": "import numpy as np"
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: 1 for i in iterable}",
    "imports": "import itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor i in np.unique(arr):\n    counts[i] = np.count_nonzero(arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(iterable).to_dict()",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ngrouped_iterable = itertools.groupby(sorted(iterable))\nfor (key, group) in grouped_iterable:\n    counts[key] = len(list(group))\ndefault_counts = {k: 0 for k in set(iterable) - set(counts.keys())}\ncounts.update(default_counts)",
    "imports": ""
   },
   {
    "code": "df = pd.DataFrame({'item': iterable})\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    try:\n        counts[str(value)] += 1\n    except KeyError:\n        counts[value] = 1",
    "imports": "import json"
   },
   {
    "code": "array = np.array(iterable)\n(unique_elements, counts) = np.unique(array, return_counts=True)\ni = len(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = collections.defaultdict(lambda : 0)\nance",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounter = dict()\nfor x in iterable:\n    counter[x] = counter.get(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 4]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'hamster', 'dog', 'parrot']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [7, 9, 7, 9, 1]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['red', 'red', 'green', 'blue', 'blue', 'green', 'blue']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable.length",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = iterable.length",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\ncounter = Counter(iterable)\nfor item in counter:\n    counts[item] = counter[item]\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(np.unique(arr), np.bincount(arr.astype(int))))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = 'hello world'\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ('a', 'b', 'a', 'c', 'b')\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "mean = statistics.mean(iterable)\nvariance = statistics.variance(iterable)\nstd_dev = statistics.stdev(iterable)\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "df = pd.DataFrame(iterable)\ncounts = df[0].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = ['apple', 'banana', 'cherry', 'apple', 'banana', 'apple']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'cat', 'dog', 'cat', 'dog']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_inverse=True, return_counts=True)))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = pd.Series([1, 2, 3, 4, 4, 5, 5, 5])\ncounts = iterable.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\niterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count_items(iterable):\n    df = pd.DataFrame(iterable, columns=['item'])\n    counts = df['item'].value_counts().to_dict()\n    return counts\ncounts = count_items(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_iterable = sorted(iterable)\ngrouped_counts = [(k, sum((1 for _ in g))) for (k, g) in groupby(sorted_iterable, key=itemgetter(0))]\ncounts = dict(grouped_counts)",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 1]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter([1, 2, 3, 1, 2, 1])",
    "imports": ""
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for elem in iterable:\n        counts[elem] += 1\n    return dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    (unique_elements, counts) = np.unique(iterable, return_counts=True)\n    return dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = {}\n    for elem in iterable:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    return counts",
    "imports": ""
   },
   {
    "code": "counts = {k: sum((1 for _ in g)) for (k, g) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = np.zeros(len(iterable))\n    for i in range(len(iterable)):\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = {}\nfor (item, group) in itertools.groupby(sorted(iterable)):\n    counts[item] = sum((1 for _ in group))",
    "imports": "import itertools"
   },
   {
    "code": "counter = collections.Counter(arr)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(arr)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def import_libraries():\n    import collections\nimport_libraries()\ncounts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor (i, value) in enumerate(arr):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counter = Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def count(iterable):\n    counter = collections.Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "arr = list(iterable)\nmean = statistics.mean(arr)\nmedian = statistics.median(arr)\nmode = statistics.mode(arr)\ncounts = {'mean': mean, 'median': median, 'mode': mode}",
    "imports": "import statistics"
   },
   {
    "code": "iterable.sort()\ncounts = {}\nfor (val, group) in groupby(iterable):\n    counts[val] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_elements = np.unique(iterable_arr)\ncounts = {element: np.sum(iterable_arr == element) for element in unique_elements}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = {element: count for (element, count) in zip(unique_elements, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "value_counts = np.bincount(iterable)\nunique_elements = np.nonzero(value_counts)[0]\ncounts = {element: count for (element, count) in zip(unique_elements, value_counts[unique_elements])}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'c', 'b', 'a', 'a', 'b', 'c']\ncounts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return counts\niterable = [1, 2, 2, 3, 3, 3]\nresult = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\ni = len(counts[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.bincount(iterable)\ni = len(counts.nonzero()[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()\ni = len(counts)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    count += 1\ni = count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": ""
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor i in range(len(iterable)):\n    value = iterable[i]\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts[value] + 1 if value in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\ncounts = {}\nfor i in range(len(unique_values)):\n    counts[unique_values[i]] = counts_dict[unique_values[i]]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] += len(list(group))",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = pd.value_counts(iterable)\ni = counts.sum()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(iterable)}\ni = sum(counts.values())",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique, counts))\ni = sum(counts.values())",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = dict()\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 0\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncounts = collections.Counter(arr)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable_count = Counter(iterable)\ni = sum(iterable_count.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())",
    "imports": "import collections"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (value, group) in itertools.groupby(iterable):\n    counts[value] = sum((1 for _ in group))\ni = 0\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return pd.Series(index=iterable, dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ni = 0\n\ndef count_occurrences(iterable):\n    counts = init_counts()\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return (counts, i)\n(counts, i) = count_occurrences(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in np.ndenumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.ones_like(np.unique(iterable))))\nfor value in iterable:\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def counts(iterable):\n    counter = itertools.count()\n    for (i, value) in enumerate(iterable):\n        next(counter)",
    "imports": "import itertools"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(range(len(data))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(counts):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(range(len(counts))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "count = np.sum(arr)\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "count = sum(arr)\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "arr.sort()\narr_count = [(k, len(list(g))) for (k, g) in itertools.groupby(arr)]\ncounts = {k: v for (k, v) in arr_count}\ni = len(arr)",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(arr, return_counts=True)\ncounts_dict = {k: v for (k, v) in zip(unique_elements, counts)}\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in arr:\n    counts[x] += 1\ni = len(arr)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))\ni = len(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.zeros_like(np.unique(iterable))))\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "i = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i\ncollections\ni = 0\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor i in range(len(iterable)):\n    item = iterable[i]\n    counts[item] += 1\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    i = 0\n    while i < len(iterable):\n        counts[iterable[i]] += 1\n        i = i + 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\nresult = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_inverse=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in itertools.groupby(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor (element, group) in groupby(iterable):\n    if element not in counts:\n        counts[element] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    i = len(counts)\n    return i\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'cherry']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = sum((value for value in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(iterable)\ni = sum([count for count in counter.values()])",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = zip(*[(i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))])\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_dict = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, [sum((1 for _ in group)) for (key, group) in itertools.groupby(sorted(iterable))]))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = np.bincount(iterable)\ncounts = Counter(iterable)",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable), max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts.keys():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(items)):\n    counts[items[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": ""
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(items)\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = functools.reduce(lambda d, item: d.update({item: d.get(item, 0) + 1}) or d, iterable, {})\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import functools"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in set(items):\n    counts[item] = items.count(item)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(1)))",
    "imports": ""
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.histogram(iterable, bins=np.arange(max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(np.array(iterable, dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\nfor i in iterable:\n    counts_dict[i] = counts_dict.get(i, 0)\n    counts_dict[i] = counts_dict[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ncounts = {k: len(list(g)) for (k, g) in itertools.groupby(iterable_sorted)}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\n(unique_values, counts) = np.unique(iterable_sorted, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\ncounts = {}\nfor i in iterable_sorted:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.items():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.values():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])\n    counts[i[2]] = iterable.count(i[2])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = list(set(iterable))\ncounts = {item: len(list(group)) for (item, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    item = iterable[i]\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(itertools.chain.from_iterable(iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(itertools.chain(*iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.concatenate(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.hstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.vstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.ravel(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.flatten(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.reshape(iterable, -1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.squeeze(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1).tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in set(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable.sort()\ngroups = groupby(iterable)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1\n    else:\n        counts[i - 1] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = {k: v for (k, v) in counts}",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = dict(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]] + iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] += iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.update({item: counts[item] + 1}) if item in counts else counts.update({item: 1}) for (i, item) in enumerate(iterable)]\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] = np.sum(np.array(iterable) == item)",
    "imports": "from collections import defaultdict\nfrom collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_items, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique_items, counts))\narr = np.array(iterable)\ncounts_dict = {}\nfor item in np.unique(arr):\n    count = np.count_nonzero(arr == item)\n    counts_dict[item] = count\narr = np.array(iterable)\ncounts = np.bincount(arr)\ncounts_dict = {item: count for (item, count) in enumerate(counts) if count > 0}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ngroups = itertools.groupby(iterable)\ncounts = {}\nfor (item, group) in groups:\n    count = sum((1 for _ in group))\n    counts[item] = count\ngroups = itertools.groupby(iterable)\ncounts = {item: sum((1 for _ in group)) for (item, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\n\ndef update_counts(item):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfunctools.reduce(update_counts, iterable)\ncounts = {item: iterable.count(item) for item in iterable}\ncounts = collections.Counter(iterable)",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = collections.Counter(iterable)\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)\ni = iterable[-1]\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ncounts.update(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter()\ncounts.update(iterable)\niterable = [True, False, True, True]\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable=iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable=iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable=iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(filter(lambda x: x == i, iterable_list)) if filter(lambda x: x == i, iterable_list) else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.takewhile(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.dropwhile(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = {i: np.count_nonzero(iterable_list == i) for i in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = pd.Series(iterable_list).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = np.bincount(np.searchsorted(unique_values, iterable_list))\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = i\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0][0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = 'hello world'\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(((i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncount = counts[i]",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = np.bincount(iterable)\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = pd.Series(iterable).value_counts().to_dict()\ncounts = dict(zip(iterable, [sum((1 for _ in group)) for (_, group) in itertools.groupby(sorted(iterable))]))\ncounts = functools.reduce(lambda d, i: d.update({i: d.get(i, 0) + 1}) or d, iterable, {})",
    "imports": "from collections import defaultdict\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import Counter\nimport numpy as np\nimport numpy as np\nimport pandas as pd\nimport itertools\nimport functools"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))\nfor key in counts:\n    counts[key] = len(list(counts[key]))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'values': iterable})\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor element in iterable:\n    counts[element] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items()))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())\nmin_elements = [k for (k, v) in counts.items() if v == min_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = collections.Counter(iterable)\ncounts = collections.Counter((i for i in iterable))\ncounts = {key: len(list(group)) for (key, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import collections\nfrom collections import defaultdict\nimport collections\nimport collections\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.bincount(iterable)\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor i in range(len(unique_elements)):\n    counts[unique_elements[i]] = counts[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nunique_values = counts[0]\ncounts = dict(zip(unique_values, counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = np.array(iterable)\ncounts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = defaultdict(int)\ncounts.update({i: counts[i] + 1 for i in iterable})",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = {value: count for (value, count) in zip(unique_values, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.bincount(iterable_arr == value)[1] for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    if iterable[i] in iterable[:i]:\n        counts[i] = counts[i - 1] + 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = iterable[:i + 1].count(iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.sum(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.count_nonzero(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.__setitem__(i, counts[i] + 1) if i in counts else counts.__setitem__(i, 1) for i in iterable]\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict()\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())\ncounts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}\ncounts = collections.Counter(iterable)\ncounts = dict(**counts)\ncounts = collections.Counter(iterable)\ncounts = dict(**dict(counts.items()))",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, group) in groupby(sorted(iterable)):\n    counts[i] = sum((1 for _ in group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    count = sum(counts.values())\n    counts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\n    return (count, counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "count = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]",
    "imports": ""
   },
   {
    "code": "counts = np.ones(len(iterable))\n(unique_elements, unique_counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, unique_counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.array(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = list(counts.values())",
    "imports": "import numpy as np"
   }
  ]
 },
 "iteration-4": {
  "num-tests": 27,
  "num-correct": 362,
  "num-incorrect": 751,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "iterable = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
    "assertion": "assert counts == {1: 1, 2: 2, 3: 3, 4: 4}"
   },
   {
    "init": "iterable = []",
    "assertion": "assert counts == {}"
   },
   {
    "init": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']",
    "assertion": "assert counts == {'a': 1, 'b': 2, 'c': 3}"
   },
   {
    "init": "iterable = ['a', ' ', ' ', 'b', 'b', ' ', ' ', ' ']",
    "assertion": "assert counts == {'a': 1, ' ': 5, 'b': 2}"
   },
   {
    "init": "iterable = ['1.125', '3.5', '6.75', '5.9', '1.125', '3.5']",
    "assertion": "assert counts == {'1.125': 2, '3.5': 2, '6.75': 1, '5.9': 1}"
   },
   {
    "init": "iterable = [1.125, 3.5, 6.75, 5.9, 1.125, 3.5]",
    "assertion": "assert counts == {1.125: 2, 3.5: 2, 6.75: 1, 5.9: 1}"
   },
   {
    "init": "iterable = [None, None, None, 1, 1]",
    "assertion": "assert counts == {None: 3, 1: 2}"
   },
   {
    "init": "iterable = 'aabbcc'",
    "assertion": "assert counts == {'a': 2, 'b': 2, 'c': 2}"
   },
   {
    "init": "iterable = ' '",
    "assertion": "assert counts == {' ': 1}"
   },
   {
    "init": "iterable = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "iterable = ['a', 'b', 'c', 'a', 'b', 'b']",
    "assertion": "assert counts == {'a': 2, 'b': 3, 'c': 1}"
   },
   {
    "init": "iterable = [1, 2, 3, 1, 2, 2]",
    "assertion": "assert counts == {1: 2, 2: 3, 3: 1}"
   },
   {
    "init": "iterable = [1.1, 2.2, 3.3, 1.1, 2.2, 2.2]",
    "assertion": "assert counts == {1.1: 2, 2.2: 3, 3.3: 1}"
   },
   {
    "init": "iterable = ['1.1', '2.2', '3.3', '1.1', '2.2', '2.2']",
    "assertion": "assert counts == {'1.1': 2, '2.2': 3, '3.3': 1}"
   },
   {
    "init": "iterable = [None, None, None]",
    "assertion": "assert counts == {None: 3}"
   },
   {
    "init": "iterable = ['  string  ', '  string  ', '  string  ']",
    "assertion": "assert counts == {'  string  ': 3}"
   },
   {
    "init": "iterable = ['']",
    "assertion": "assert counts == {'': 1}"
   },
   {
    "init": "iterable = [1, '1']",
    "assertion": "assert counts == {1: 1, '1': 1}"
   },
   {
    "init": "iterable = ['a', 'b', 'a', 'c', 'b', 'b', 'a']",
    "assertion": "assert counts == {'a': 3, 'b': 3, 'c': 1}"
   },
   {
    "init": "iterable = [1, 2, 3, 2, 1, 3, 3, 2, 2, 1]",
    "assertion": "assert counts == {1: 3, 2: 4, 3: 3}"
   },
   {
    "init": "iterable = ['a', ' ', 'b', ' ', ' ', 'a']",
    "assertion": "assert counts == {'a': 2, ' ': 3, 'b': 1}"
   },
   {
    "init": "iterable = [None, None, 'None', 'None']",
    "assertion": "assert counts == {None: 2, 'None': 2}"
   },
   {
    "init": "iterable = 'abcabcabc'",
    "assertion": "assert counts == {'a': 3, 'b': 3, 'c': 3}"
   },
   {
    "init": "iterable = 123",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "iterable = ['a', ' ', 'b', ' ', ' ']",
    "assertion": "assert counts == {'a': 1, ' ': 3, 'b': 1}"
   },
   {
    "init": "iterable = [None, None, 1, 2, 2]",
    "assertion": "assert counts == {None: 2, 1: 1, 2: 2}"
   },
   {
    "init": "iterable = 'abcabc'",
    "assertion": "assert counts == {'a': 2, 'b': 2, 'c': 2}"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    counts[elem] = counts.get(elem, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor elem in iterable:\n    if elem in counts:\n        counts[elem] += 1\n    else:\n        counts[elem] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    temp = value\n    counts[temp] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.setdefault(value, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {element: iterable.count(element) for element in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value in counts:\n        counts[value] += 1\n    else:\n        counts[value] = 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = iterable\ncounts = Counter(arr)\ni = len(arr)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor (index, val) in enumerate(iterable):\n    if val not in counts:\n        counts[val] = 1\n    else:\n        counts[val] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor element in iterable:\n    if element not in counts:\n        counts[element] = iterable.count(element)",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\n    i = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor key in iterable:\n    counts[key] += 1\ni = len(set(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(i, counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = 0\nfor (i, value) in enumerate(iterable):\n    continue",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    counts[value] = counts.get(value, 0) + 1\ni = len(iterable) - 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter\nimport numpy as np"
   },
   {
    "code": "i = 0\ncounts = collections.Counter()\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (idx, val) in enumerate(iterable):\n    i = idx\n    counts[val] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i = index",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\ncounts = Counter()\nfor (i, value) in enumerate(iterable):\n    counts.__setitem__(value, counts[value] + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return defaultdict(int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\narr = iterable\ncounts = defaultdict(int)\nfor (index, value) in enumerate(arr):\n    counts[value] += 1\n    i = index\n(counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = -1\nwhile i < len(iterable) - 1:\n    i += 1\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in range(len(iterable)):\n    value = iterable[i]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = -1\nfor value in iterable:\n    i += 1\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nindex = 0\nwhile index < len(iterable):\n    value = iterable[index]\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1\n    index += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\n\ndef get_count(iterable):\n    for (i, value) in enumerate(iterable):\n        if value in counts:\n            counts[value] += 1\n        else:\n            counts[value] = 1\nget_count(iterable)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts.setdefault(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0)\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i = i + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor val in iterable:\n    counts[val] += 1\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor val in iterable:\n    counts[val] = counts.get(val, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = defaultdict(int)\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 0\ncounts = {}\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable)\ni = len(counts.keys())",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(set(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len(list(set(iterable_list)))",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = {}\nfor item in iterable_list:\n    counts[item] = counts.get(item, 0) + 1\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.update({i: counts[i] + 1}) for i in iterable]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] = counts.get(i, 0) + 1\n    else:\n        counts[i] = 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = sum((1 for j in iterable if j == i))",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = functools.reduce(lambda x, y: x + y, [counts.get(i, 0), 1])",
    "imports": "import functools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])\ncounts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1\ncounts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = list(iterable)\ncounts = collections.Counter(iterable)\ncounts = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) is not None else counts[i] + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts[i] + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if counts.get(i) else 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    if counts.get(i):\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    current_count = counts.get(i, 0)\n    counts[i] = current_count + 1\ncount = sum(counts.values())",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = 0\nfor value in counts.values():\n    count += value\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values())))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=int))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.int16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.float16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint64))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint32))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint16))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncount = np.sum(np.array(list(counts.values()), dtype=np.uint8))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([counts.get(i, 0), 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = math.fsum([counts.get(i, 0), 1])",
    "imports": "import math"
   },
   {
    "code": "counts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = dict(zip(iterable, itertools.repeat(1)))\ncounts = Counter(iterable)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})\ncounts = Counter(iterable)",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {i: iterable.count(i) for i in set(iterable)}\ncounts = Counter(iterable)",
    "imports": "import math\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": "import functools\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.update([item])\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for x in iterable_list if x == i))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = iterable_list.count(i)",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: iterable_list.count(i) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {i: sum((1 for x in iterable_list if x == i)) for i in unique_values}",
    "imports": "import itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = dict.fromkeys(unique_elements, 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict.fromkeys(set(iterable), 0)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = iterable\nresult = counts\ncounts = Counter()\ncounts.update((item for item in iterable))\ni = iterable\nresult = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = Counter()\nfor item in iterable:\n    counts.__setitem__(item, counts[item] + 1 if item in counts else 1)\ncounts = Counter(iterable)\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len([x for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum([1 for x in iterable_list if x == i])",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(list(filter(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = dict(zip(unique_values, [iterable_list.count(i) for i in unique_values]))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.filterfalse(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.compress(iterable_list, [x == i for x in iterable_list])))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = dict(Counter(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum((1 for x in iterable_list if x == i))\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = 0\n    for x in iterable_list:\n        if x == i:\n            count += 1\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = len([x for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = iterable_list.count(i)\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    count = sum([1 for x in iterable_list if x == i])\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)\nfor i in set(iterable_list):\n    counts[i] = iterable_list.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = Counter(iterable_list)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts.keys():\n        counts[i] = counts[i] + 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = reduce(lambda d, x: {**d, x: d.get(x, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts.keys():\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    if counts.get(i) is None:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if counts.get(x) is not None:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts[x] = counts.setdefault(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "occurrences = {}\nfor item in iterable:\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": ""
   },
   {
    "code": "occurrences = defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {i: 0 for i in iterable}\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1\ncounts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    counts.setdefault(x, 0)\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 0\n    counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element not in counts:\n        counts[element] = 1\n    else:\n        counts[element] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "i = 5\ncounts = Counter(iterable)\nfor element in iterable:\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 5\nfor element in iterable:\n    counts[element] += 1\n    i += 1",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor element in iterable:\n    counts[element] += 1\ni = 5",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {x: 0 for x in iterable}\ni = len(iterable)\nfor x in iterable:\n    counts[x] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    count = counts.get(x, 0)\n    count += 1\n    counts[x] = count\n    i += 1",
    "imports": ""
   },
   {
    "code": "arr = list(iterable)\ncounts = Counter(arr)\nunique_values = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = collections.defaultdict(int)\nfor item in iterable:\n    occurrences[item] += 1\ncounts = dict(occurrences)",
    "imports": "import collections"
   },
   {
    "code": "occurrences = {}\nfor item in itertools.chain(iterable):\n    occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    occurrences = {}\n    for item in iterable:\n        occurrences[item] = occurrences.get(item, 0) + 1\n    return dict(occurrences)\ncounts = count_occurrences(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counter_obj = {}\nfor elem in iterable:\n    if elem not in counter_obj:\n        counter_obj[elem] = 1\n    else:\n        counter_obj[elem] += 1\ncounts = dict(counter_obj)",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor item in iterable:\n    counts[item] += 1\ncount = dict(counts.items())",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {item: iterable.count(item) for item in set(iterable)}\ncount = dict(counts.items())",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts.keys():\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import statistics"
   },
   {
    "code": "counts = functools.reduce(lambda d, x: d.update([(x, d.get(x, 0) + 1)]) or d, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = functools.reduce(lambda counts, value: counts.update({value: counts.get(value, 0) + 1}) or counts, iterable, {})",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    if value in counts:\n        counts[value] = counts[value] + 1\n    else:\n        counts[value] = 1",
    "imports": "import math"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(iterable):\n    counts[key] += sum((1 for _ in group))\ni = len(iterable)",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor x in iterable:\n    if x not in counts:\n        counts[x] = 1\n    else:\n        counts[x] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = {}\nfor ele in iterable:\n    counts[ele] = counts.get(ele, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = {ele: 0 for ele in iterable}\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter()\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = dict(data)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts.keys():\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\ni = 0\nfor x in iterable:\n    if x in counts:\n        i += 1\n        counts[x] += 1\n    else:\n        counts[x] = 1\n        i += 1",
    "imports": ""
   },
   {
    "code": "unique_elements = list(set(iterable))\ncounts = {x: iterable.count(x) for x in unique_elements}\ni = len(iterable)",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in iterable:\n    counts[x] += 1\ni = len(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 5\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter()\nfor item in iterable:\n    counts.update([item])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.chain(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]\ni = 0\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(i, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in reversed(range(len(iterable))):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 1\n    else:\n        counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i = i + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable) - 1, -1, -1):\n    counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor (i, item) in enumerate(reversed(iterable)):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor item in reversed(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1 if iterable[i] not in counts else counts[iterable[i]] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[len(iterable) - 1 - i]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nfor i in range(len(iterable)):\n    counts[iterable[-i - 1]] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts.get(item, 0)\n    counts[item] = counts[item] + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i * 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i / 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i /= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i % 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i %= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\nfor key in counts:\n    counts[key] = int(counts[key])",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1 if item in counts else 0",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = reduce(lambda c, i: {**c, i: c.get(i, 0) + 1}, iterable, {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = dict(((i, iterable.count(i)) for i in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor num in iterable:\n    if num in counts:\n        counts[num] += 1\n    else:\n        counts[num] = 1",
    "imports": ""
   },
   {
    "code": "(counts, i) = ({}, 0)\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = {x: iterable.count(x) for x in iterable}",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(iterable, [0] * len(iterable)))\nfor x in iterable:\n    counts[x] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except KeyError:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": ""
   },
   {
    "code": "counts = {}\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = map(lambda x: (x, iterable.count(x)), iterable)\ncounts = dict(set(counts))",
    "imports": ""
   },
   {
    "code": "counts = [iterable.count(i) for i in iterable]\ncounts = dict(zip(iterable, counts))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [0] * len(set(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1 if i not in counts else counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(set(iterable), [iterable.count(i) for i in set(iterable)]))",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = {i: iterable.count(i) for i in iterable}",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\ni = len(iterable) - 1\nwhile i >= 0:\n    counts[iterable[i]] += 1\n    i -= 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    counts[item] = iterable.count(item)",
    "imports": ""
   },
   {
    "code": "iterable_dict = {x: iterable.count(x) for x in iterable}\ncounts = Counter(iterable_dict)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = np.sum([arr_i == i for arr_i in iterable])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict()\nfor i in iterable:\n    counts[i] = len([1 for arr_i in iterable if arr_i == i])",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_count(x):\n    counts = {}\n    for i in x:\n        counts[i] = counts.get(i, 0) + 1\n    return counts\ncounts = get_count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {value: iterable.count(value) for (i, value) in enumerate(iterable)}",
    "imports": ""
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = len([x for x in iterable_list if iterable_list.count(x) > 0])",
    "imports": "import collections"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = collections.Counter(iterable_list)\ni = sum((1 for x in iterable_list if iterable_list.count(x) > 0))",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.__setitem__(item, counts[item] + 1) for (i, item) in enumerate(iterable)]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import math"
   },
   {
    "code": "counts = dict(zip(set(iterable), map(iterable.count, set(iterable))))",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "counts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = len(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())\ncounts = iterable_counts",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = sum((1 for key in counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(list(counts.keys()))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len([key for key in counts])",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable))\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable.copy()\ncounts = collections.Counter(new_iterable)\ni = len(new_iterable)",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor count in counts.values():\n    i += 1\ncounts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1\ncounts = collections.Counter(iterable)\ni = len(counts)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = sum([count for count in counts.values()])",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ncounts = dict(iterable_counts.most_common())",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = {}\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = collections.Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(iterable)\ncounts = dict()\nfor (k, v) in counter.items():\n    counts[k] = v",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(collections.Counter(iterable).items())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in set(counts.keys()):\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum((1 for x in iterable if x == i[0]))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len(list(filter(lambda x: x == i[0], iterable)))",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    count = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else 0",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], counts[i[0]])",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts[i[0]] if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], None)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[0]] = counts.get(i[0], 0) if i[0] in counts else None",
    "imports": "import collections"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": "from collections import Counter as C\nfrom operator import itemgetter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ni = 5",
    "imports": "from collections import Counter"
   },
   {
    "code": "occurrences = dict(Counter(iterable))\ncounts = dict(occurrences)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable[-1] if iterable else None",
    "imports": "import collections"
   },
   {
    "code": "counts = dict(collections.Counter(iterable))\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = defaultdict(int)\n    for item in iterable:\n        counts[item] += 1\n    return dict(counts)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "for (i, char) in enumerate(iterable):\n    counts[char] = counts.get(char, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_iterable = sorted(iterable)\ncounts = {i: new_iterable.count(i) for i in new_iterable}",
    "imports": ""
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in group)) for (k, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = sorted(iterable)\nresult = [(key, len(list(group))) for (key, group) in groupby(iterable)]\ncounts = dict(result)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(counts, _) = np.histogram(iterable, bins=np.arange(len(set(iterable))) + 0.5)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(list(iterable))",
    "imports": ""
   },
   {
    "code": "(unique_items, counts) = unique(iterable, return_counts=True)\ncounts = dict(zip(unique_items, counts))",
    "imports": "from numpy import unique"
   },
   {
    "code": "counts = Series(iterable).value_counts().to_dict()",
    "imports": "from pandas import Series"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += iterable.count(i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(unique(iterable), return_counts(iterable)))",
    "imports": "from numpy import unique, return_counts"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1 - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] -= 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\nfor i in counts:\n    counts[i] = counts[i] - 1 if counts[i] > 0 else 0",
    "imports": ""
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i + 1, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in groupby(sorted(iterable))))",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = itertools.groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter(iterable)\niterable = []\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = []\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'apple', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = np.bincount(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "unique_values = np.unique(iterable)\ncounts = [np.count_nonzero(iterable == value) for value in unique_values]\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values.astype(str), counts.astype(str)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in counts.keys():\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.keys())[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts)[i]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][0]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in range(len(counts)):\n    counts[list(counts.items())[i][1]] += 1\ni = iterable[-1]\ncounts = counts",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['i'])\ncounts = df['i'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.count_nonzero(iterable_arr == value) for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {}\nfor i in unique_values:\n    counts[i] = np.count_nonzero(iterable_arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['values'])\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'a', 'b', 'c']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange']\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [True, False, True, False, True]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1.5, 2.5, 3.5, 1.5, 2.5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).items()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(sorted(Counter(iterable).most_common()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.count_nonzero(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(counts.most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\ni = 0\ncount = 0\nfor (key, value) in counts.items():\n    if i == 0:\n        count = value\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = dict(sorted(counts.items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).most_common())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(Counter(iterable).items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).most_common(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = dict(sorted(Counter(iterable).items(), key=lambda x: x[1], reverse=True))",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in itertools.cycle(iterable):\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[i] = counts.get(i, 0) + 1\n    counts[item] = counts.get(item, 0) + 1\n    counts[i] += 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common()\ncounts = dict(most_common)\ni = 0\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\n    if counts[item] > i:\n        i = counts[item]",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in range(len(iterable)):\n    counts[iterable[i]] = counts.get(iterable[i], 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i += 1\ni = i",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\n    counts[item] += 1\n    counts[item] -= 1\n    counts[item] *= 2",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i - 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i -= 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 1\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = dict(zip(iterable, np.zeros(len(iterable))))\nfor (i, item) in enumerate(iterable):\n    counts[item] = counts.get(item, 0) + 1\n    i = i + 2\ni = i\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = counts",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = dict(zip(iterable, counts.values()))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfor key in counts:\n    counts[key] = int(counts[key])\ni = iterable\ncounts = {k: int(v) for (k, v) in counts.items()}",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: len(list(group)) for (i, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    counts[element] += 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1\niterable = [1, 2, 3, 4, 4, 4]\ncounts = {}\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "count_dict = {}\nfor i in iterable:\n    count_dict[i] = count_dict.get(i, 0) + 1\ncounts = collections.Counter(count_dict)",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = collections.defaultdict(int)\nfor i in iterable:\n    default_counts[i] = default_counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(iterable, np.bincount(iterable)))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = count_elements(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(statistics.multimode(iterable))",
    "imports": "import statistics"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(sorted(iterable), key=itemgetter(0))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor (index, i) in enumerate(iterable):\n    counts[index] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = np.sum(np.array(list(counts.values()))) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "s = pd.Series(iterable)\ncounts = s.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nresult = dict(zip(counts[0], counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = sorted(iterable)\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "unique_items = np.unique(iterable)\ncounts = {item: np.sum(iterable == item) for item in unique_items}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = [0] * len(iterable)\nfor i in range(len(iterable)):\n    counts[i] = iterable.count(iterable[i])",
    "imports": ""
   },
   {
    "code": "counts = pd.value_counts(iterable).to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable) - 0.5, max(iterable) + 1.5))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\n\ndef count(iterable):\n    return Counter(iterable)\ncounts = count(iterable)\ncounts = Counter(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\n\ndef count(iterable):\n    return collections.Counter(iterable)\ncounts = count(iterable)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = count(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len(list(itertools.filterfalse(lambda x: x != i, iterable)))\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = len([x for x in iterable if x == i])\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = sum([1 for x in iterable if x == i])\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.sum(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_nonzero(iterable == i)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in set(iterable):\n        counts[i] = np.count_occurrences(iterable, i)\n    return counts",
    "imports": "import numpy as np"
   },
   {
    "code": "def get_counts(iterable):\n    counts = dict(Counter(iterable))\n    return counts\n\ndef get_counts(iterable):\n    counts = Counter(iterable)\n    return counts\n\ndef get_counts(iterable):\n    counts = {}\n    for i in iterable:\n        counts[i] = counts.get(i, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter = {}\nfor i in iterable:\n    if i not in counter:\n        counter[i] = 0\n    counter[i] += 1",
    "imports": ""
   },
   {
    "code": "(unique_vals, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_vals, counts))\nfor i in iterable:\n    if i not in counts_dict:\n        counts_dict[i] = 0\n    counts_dict[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['col'])\ncounts = df['col'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable.sort()\ncounts = {key: sum((1 for _ in group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = {i: iterable.count(i) for i in iterable if not i in counts}",
    "imports": ""
   },
   {
    "code": "np_counts = np.array(list(counts.values()))\ncounts = dict(zip(counts.keys(), np_counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {key: value for (key, value) in counts.items() if value != 0}",
    "imports": ""
   },
   {
    "code": "indexed_counts = Counter(iterable)",
    "imports": "from statistics import Counter"
   },
   {
    "code": "counts = dict()\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable=iterable)",
    "imports": ""
   },
   {
    "code": "counts = Counter({x: iterable.count(x) for x in iterable})",
    "imports": ""
   },
   {
    "code": "data = list(itertools.chain.from_iterable(arr))\ncounts = {key: data.count(key) for key in iterable}",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "count = np.array(list(Counter(iterable).values()))",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "count = np.array([v for (k, v) in Counter(iterable).items()])",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "def count_values(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(itertools.zip_longest(iterable, repeat(1)).fromkeys(iterable, 0))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = reduce(lambda x, y: x.update(y) or x, map(lambda x: {x: 1}, iterable), {})",
    "imports": "from functools import reduce"
   },
   {
    "code": "counts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "lst_1 = sorted(set(iterable))\nmissing = sorted(set(iterable))\nfinal_out = itertools.chain([(x, counts[x]) for x in iterable if x in counts], [(x, 0) for x in missing if missing])",
    "imports": "import itertools"
   },
   {
    "code": "count_dict = collections.Counter(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "count_dict = dict(zip(*np.unique(list(iterable), return_counts=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = Counter({})\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter()\n    counts.update(iterable)\n    return counts\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = Counter(iterable)\n    return counts\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = count_occurrences(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple']\ncounts = np.array(list(collections.Counter(iterable).values()))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "iterable = []\n\ndef count_elements(iterable):\n    counter = collections.Counter(iterable)\n    return counter\ncounts = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "for i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iter_array = np.array(iterable)\ncounts = dict(zip(np.unique(iter_array), np.bincount(iter_array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {k: sum((1 for _ in v)) for (k, v) in groupby(sorted(iterable))}",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = dict(Counter(list(iterable) + '' + tuple(iterable)))",
    "imports": ""
   },
   {
    "code": "for i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {x: len(list(g)) for (x, g) in itertools.groupby(iterable)}",
    "imports": "import itertools"
   },
   {
    "code": "count = {}\nfor x in iterable:\n    count[x] = count.get(x, 0) + 1\n    counts = count",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in np.array(iterable):\n    counts[i] += 1",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['element'])\ncounts = df['element'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "def count_elements(iterable):\n    return collections.Counter(iterable)\ncounts = list(count_elements(iterable).elements())",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def get_counts(iterable):\n    return dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "df = pd.DataFrame({'iterable': iterable})\ncounts = df['iterable'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = counts\nfor i in iterable:\n    if i not in count:\n        count[i] = 0\n    count[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
    "imports": ""
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "d = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    d[iterable[i]] += 1\n    i += 1\ncounts = dict(d)",
    "imports": "from collections import Counter"
   },
   {
    "code": "i = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1\ncounts_array = np.array(list(counts))",
    "imports": "from collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "new_iterable = iterable\nnew_iterable.sort()\ni = 0\ncounts = {}\nwhile i < len(new_iterable):\n    counts[iterable[i]] = new_iterable.count(new_iterable[i])\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\ni = 0\nfor (item, group) in itertools.groupby(iterable):\n    counts[item] = sum([1 for _ in group])\n    i += 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ni = 0\nuni_items = np.unique(iterable)\nfor item in uni_items:\n    counts[item] = np.count_nonzero(iterable == item)\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counters = Counter(iterable)\ncounts = dict(counts)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "(counts, i) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(counts, i))\ni = np.sum(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\ni = 0\nfor (x, group) in groupby(iterable):\n    counts[x] = len(list(group))\n    i += len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts().to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_lst = sorted(iterable)\ncounts = {}\ni = 0\nfor (k, g) in groupby(sorted_lst):\n    counts[k] = sum((1 for _ in g))\n    i += 1",
    "imports": "from itertools import groupby"
   },
   {
    "code": "i = 0\ncounts = {}\n(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor element in unique_elements:\n    counts[element] = counts[i]\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts_series = pd.Series(iterable).value_counts()\ncounts = counts_series.to_dict()\ni = len(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor x in iterable:\n    counts[x] = counts.get(x, 0) + 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "i = 5\n(unique, counts) = np.unique(iterable, return_counts=True)\nfor (element, count) in zip(unique, counts):\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] += 1\n    i += 1",
    "imports": "import functools"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor x in iterable:\n    counts[x] = counts[x] + 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ni = sum(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    i = 0\n    for x in iterable:\n        counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict()\ni = 0\n\ndef count_elements(iterable):\n    for x in itertools.chain(iterable):\n        if x not in counts:\n            counts[x] = 1\n        else:\n            counts[x] += 1\n        i += 1\n    return (counts, i)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_values, counts) = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(iterable)\narr.sort()\nunique_values = []\ncounts = []\nfor (k, g) in itertools.groupby(arr):\n    unique_values.append(k)\n    counts.append(len(list(g)))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame(iterable, columns=['item'])\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "occurrences = {}\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        for item in row:\n            occurrences[item] = occurrences.get(item, 0) + 1\ncounts = dict(occurrences)",
    "imports": "import csv"
   },
   {
    "code": "occurrences = {}\nfor (key, group) in groupby(sorted(iterable)):\n    occurrences[key] = sum((1 for _ in group))\ncounts = dict(occurrences)",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = dict(((k, sum((1 for _ in g))) for (k, g) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "defaultdict(int)",
    "imports": ""
   },
   {
    "code": "counts = dict(itertools.Counter(iterable))",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = dict(counter_obj)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = counter_obj",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = Counter(iterable)\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounter_obj = defaultdict(int)\nfor element in iterable:\n    counter_obj[element] += 1\ncounts = dict(counter_obj)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = C(iterable)\ncount = dict(counts)",
    "imports": ""
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(arr)\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor num in arr:\n    counts[num] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor index in range(len(arr)):\n    counts[arr[index]] += 1\ncount = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = np.array(iterable)\ncount = np.unique(arr, return_counts=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    my_counter[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\nmy_counter = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter[item]\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = iterable\ncombinations = list(itertools.combinations(items, 2))\nmy_counter = Counter()\nfor combination in combinations:\n    my_counter[combination[0]] += 1\n    my_counter[combination[1]] += 1",
    "imports": "import itertools"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    if item in my_counter:\n        my_counter[item] += 1\n    else:\n        my_counter[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "my_counter = Counter()\nfor item in iterable:\n    count = my_counter.get(item, 0)\n    count += 1\n    my_counter[item] = count",
    "imports": "from collections import Counter"
   },
   {
    "code": "def sum_counts(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] += 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\ncounts = Counter()\nfor item in iterable:\n    counts.update({item: 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_items(iterable):\n    counts = Counter()\n    for item in iterable:\n        counts[item] = counts.get(item, 0) + 1\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\ndef count_elements(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_elements(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    return Counter(iterable)\niterable = [1, 2, 3, 1, 2, 3, 1, 2, 3]\ncount_values = count_elements(iterable)\ncounts = dict(count_values)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_vals = np.unique(iterable)\ncounts = {i: len(np.where(iterable == i)[0]) for i in unique_vals}",
    "imports": "import numpy as np"
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {i: 1 for i in iterable}",
    "imports": "import itertools"
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor i in np.unique(arr):\n    counts[i] = np.count_nonzero(arr == i)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(iterable).to_dict()",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\ngrouped_iterable = itertools.groupby(sorted(iterable))\nfor (key, group) in grouped_iterable:\n    counts[key] = len(list(group))\ndefault_counts = {k: 0 for k in set(iterable) - set(counts.keys())}\ncounts.update(default_counts)",
    "imports": ""
   },
   {
    "code": "df = pd.DataFrame({'item': iterable})\ncounts = df['item'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {}\nfor value in iterable:\n    try:\n        counts[str(value)] += 1\n    except KeyError:\n        counts[value] = 1",
    "imports": "import json"
   },
   {
    "code": "array = np.array(iterable)\n(unique_elements, counts) = np.unique(array, return_counts=True)\ni = len(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\ni = 0\nfor item in iterable:\n    counts[item] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "i = 0\ncounts = collections.defaultdict(lambda : 0)\nance",
    "imports": "import collections"
   },
   {
    "code": "i = 0\ncounter = dict()\nfor x in iterable:\n    counter[x] = counter.get(x, 0) + 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 4]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'hamster', 'dog', 'parrot']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [7, 9, 7, 9, 1]\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['red', 'red', 'green', 'blue', 'blue', 'green', 'blue']\ncounts = Counter(iterable)\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = iterable.length",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\ni = iterable.length",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(collections.Counter(iterable))\ni = len(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(Counter(iterable))\ni = len(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict()\ncounter = Counter(iterable)\nfor item in counter:\n    counts[item] = counter[item]\ni = len(iterable)",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(np.unique(arr), np.bincount(arr.astype(int))))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = 'hello world'\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ('a', 'b', 'a', 'c', 'b')\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "mean = statistics.mean(iterable)\nvariance = statistics.variance(iterable)\nstd_dev = statistics.stdev(iterable)\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import statistics"
   },
   {
    "code": "df = pd.DataFrame(iterable)\ncounts = df[0].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = ['apple', 'banana', 'cherry', 'apple', 'banana', 'apple']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['cat', 'dog', 'cat', 'cat', 'dog', 'cat', 'dog']\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_inverse=True, return_counts=True)))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in range(len(iterable)):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = pd.Series([1, 2, 3, 4, 4, 5, 5, 5])\ncounts = iterable.value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 5, 5, 5]\niterable.sort()\ncounts = {key: len(list(group)) for (key, group) in groupby(iterable)}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count_items(iterable):\n    df = pd.DataFrame(iterable, columns=['item'])\n    counts = df['item'].value_counts().to_dict()\n    return counts\ncounts = count_items(iterable)",
    "imports": "import pandas as pd"
   },
   {
    "code": "sorted_iterable = sorted(iterable)\ngrouped_counts = [(k, sum((1 for _ in g))) for (k, g) in groupby(sorted_iterable, key=itemgetter(0))]\ncounts = dict(grouped_counts)",
    "imports": "from itertools import groupby\nfrom operator import itemgetter"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1 if i in counts else 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 1]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter([1, 2, 3, 1, 2, 1])",
    "imports": ""
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for elem in iterable:\n        counts[elem] += 1\n    return dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    (unique_elements, counts) = np.unique(iterable, return_counts=True)\n    return dict(zip(unique_elements, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "def count_elements(iterable):\n    counts = {}\n    for elem in iterable:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    return counts",
    "imports": ""
   },
   {
    "code": "counts = {k: sum((1 for _ in g)) for (k, g) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(collections.Counter(iterable))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "def count_items(iterable):\n    counts = np.zeros(len(iterable))\n    for i in range(len(iterable)):\n        counts[i] += 1\n    return counts\ncounts = count_items(iterable)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "counts = {}\nfor (item, group) in itertools.groupby(sorted(iterable)):\n    counts[item] = sum((1 for _ in group))",
    "imports": "import itertools"
   },
   {
    "code": "counter = collections.Counter(arr)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "counter = Counter(arr)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def import_libraries():\n    import collections\nimport_libraries()\ncounts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = {}\nfor (i, value) in enumerate(arr):\n    counts[value] = counts.get(value, 0) + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = collections.Counter(iterable)\ncounts = dict(counter)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3]\ncounter = Counter(iterable)\ncounts = dict(counter)",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counter = Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import itertools"
   },
   {
    "code": "def count(iterable):\n    counter = collections.Counter(iterable)\n    counts = dict(counter)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "arr = list(iterable)\nmean = statistics.mean(arr)\nmedian = statistics.median(arr)\nmode = statistics.mode(arr)\ncounts = {'mean': mean, 'median': median, 'mode': mode}",
    "imports": "import statistics"
   },
   {
    "code": "iterable.sort()\ncounts = {}\nfor (val, group) in groupby(iterable):\n    counts[val] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_elements = np.unique(iterable_arr)\ncounts = {element: np.sum(iterable_arr == element) for element in unique_elements}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ngroups = groupby(iterable_sorted)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = {element: count for (element, count) in zip(unique_elements, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "value_counts = np.bincount(iterable)\nunique_elements = np.nonzero(value_counts)[0]\ncounts = {element: count for (element, count) in zip(unique_elements, value_counts[unique_elements])}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1, 1, 2, 3]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = ['a', 'b', 'c', 'c', 'b', 'a', 'a', 'b', 'c']\ncounts = defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return counts\niterable = [1, 2, 2, 3, 3, 3]\nresult = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.defaultdict(int)\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\ni = len(counts[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.bincount(iterable)\ni = len(counts.nonzero()[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = pd.Series(iterable).value_counts()\ni = len(counts)",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    count += 1\ni = count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(iterable)\ni = 0\nfor key in counts:\n    i += 1",
    "imports": ""
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor i in range(len(iterable)):\n    value = iterable[i]\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def init_counts():\n    return np.zeros(len(iterable), dtype=int)\ncounts = init_counts()\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts[value] + 1 if value in counts else 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\ncounts = {}\nfor i in range(len(unique_values)):\n    counts[unique_values[i]] = counts_dict[unique_values[i]]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor (key, group) in groupby(sorted(iterable)):\n    counts[key] += len(list(group))",
    "imports": "from itertools import groupby\nfrom collections import defaultdict"
   },
   {
    "code": "counts = pd.value_counts(iterable)\ni = counts.sum()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = {k: len(list(g)) for (k, g) in groupby(iterable)}\ni = sum(counts.values())",
    "imports": "from itertools import groupby"
   },
   {
    "code": "(unique, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique, counts))\ni = sum(counts.values())",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = collections.defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = defaultdict(int)\ni = 0\nwhile i < len(iterable):\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1]\ncounts = dict()\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 0\n    counts[iterable[i]] += 1\n    i += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = sum(counts.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncounts = collections.Counter(arr)\ni = sum(counts.values())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable_count = Counter(iterable)\ni = sum(iterable_count.values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_counts = collections.Counter(iterable)\ni = sum(iterable_counts.values())",
    "imports": "import collections"
   },
   {
    "code": "count = 0\nfor key in iterable:\n    counts[key] += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "default_counts = collections.defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "default_counts = defaultdict(int)\ni = 0\nfor (i, value) in enumerate(iterable):\n    default_counts[value] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor (value, group) in itertools.groupby(iterable):\n    counts[value] = sum((1 for _ in group))\ni = 0\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "def init_counts():\n    return pd.Series(index=iterable, dtype=int)\ncounts = init_counts()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\ni = 0\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
    "imports": "import collections"
   },
   {
    "code": "def init_counts():\n    return collections.defaultdict(int)\ni = 0\n\ndef count_occurrences(iterable):\n    counts = init_counts()\n    for (i, value) in enumerate(iterable):\n        counts[value] += 1\n    return (counts, i)\n(counts, i) = count_occurrences(iterable)",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, value) in np.ndenumerate(iterable):\n    if value not in counts:\n        counts[value] = 1\n    else:\n        counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.ones_like(np.unique(iterable))))\nfor value in iterable:\n    counts[value] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "def counts(iterable):\n    counter = itertools.count()\n    for (i, value) in enumerate(iterable):\n        next(counter)",
    "imports": "import itertools"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(iterable):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\nfor (i, value) in enumerate(range(len(data))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(counts):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "data = Counter(iterable)\ncounts = [data[i] for i in iterable]\nfor (i, value) in enumerate(range(len(counts))):\n    pass",
    "imports": "from collections import Counter"
   },
   {
    "code": "count = np.sum(arr)\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "count = sum(arr)\ni = len(arr)",
    "imports": ""
   },
   {
    "code": "arr.sort()\narr_count = [(k, len(list(g))) for (k, g) in itertools.groupby(arr)]\ncounts = {k: v for (k, v) in arr_count}\ni = len(arr)",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(arr, return_counts=True)\ncounts_dict = {k: v for (k, v) in zip(unique_elements, counts)}\ni = len(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor x in arr:\n    counts[x] += 1\ni = len(arr)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(*np.unique(iterable, return_counts=True)))\ni = len(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(zip(np.unique(iterable), np.zeros_like(np.unique(iterable))))\ni = 0\nfor (index, val) in enumerate(iterable):\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\ni = 0\nfor val in iterable:\n    counts[val] += 1\n    i += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "i = 0\nfor i in range(len(iterable)):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1",
    "imports": "import collections"
   },
   {
    "code": "i\ncollections\ni = 0\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor i in range(len(iterable)):\n    item = iterable[i]\n    counts[item] += 1\ni = 0\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    i = 0\n    while i < len(iterable):\n        counts[iterable[i]] += 1\n        i = i + 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\nresult = count_elements(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 2, 3, 4]\ncounts = {}\ni = 0\nwhile i < len(iterable):\n    if iterable[i] not in counts:\n        counts[iterable[i]] = 1\n    else:\n        counts[iterable[i]] += 1\n    i = i + 1",
    "imports": ""
   },
   {
    "code": "arr = np.array(iterable)\ncounts = dict(zip(*np.unique(arr, return_inverse=True)))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict(((k, len(list(g))) for (k, g) in itertools.groupby(iterable)))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor (element, group) in groupby(iterable):\n    if element not in counts:\n        counts[element] = len(list(group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    return len(counts)\ni = count(list(iterable))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return collections.Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "import collections"
   },
   {
    "code": "def count(iterable):\n    return Counter(iterable)\ni = len(count(iterable_list))",
    "imports": "from collections import Counter"
   },
   {
    "code": "def count(iterable):\n    counts = collections.Counter(iterable)\n    i = len(counts)\n    return i\ni = count(iterable_list)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)\ni = sum((1 for count in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 4, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['a', 'b', 'b', 'c', 'c', 'c']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = ['apple', 'banana', 'apple', 'cherry']\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4]\ncounts = collections.Counter(iterable)\ni = len(list(counts.elements()))",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ni = sum((value for value in counts.values()))",
    "imports": "import collections"
   },
   {
    "code": "counts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ni = 0\nfor value in counts.values():\n    i += value",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(iterable)\ni = sum([count for count in counter.values()])",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = Counter(iterable)\n    return counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = zip(*[(i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))])\nfor (i, count) in zip(unique_elements, counts):\n    counts[i] = count",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\ncounts_dict = dict(counts)",
    "imports": "import collections"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.Counter(iterable)\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts_list = list(counts.items())",
    "imports": "import collections\nfrom collections import Counter"
   },
   {
    "code": "counts = dict(zip(iterable, [sum((1 for _ in group)) for (key, group) in itertools.groupby(sorted(iterable))]))",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = np.bincount(iterable)\ncounts = Counter(iterable)",
    "imports": "import numpy as np\nfrom collections import Counter"
   },
   {
    "code": "counts = np.histogram(iterable, bins=np.arange(min(iterable), max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 5, 5]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += value",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts.keys():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor key in counts:\n    i += counts[key]\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] += 1\ni = 0\nfor (key, value) in counts.items():\n    i += counts[key]\ncounts = dict(counts)\ni = 0\nfor key in counts:\n    i += counts[key]",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(items)):\n    counts[items[i]] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    if iterable[i] in counts:\n        counts[iterable[i]] += 1\n    else:\n        counts[iterable[i]] = 1",
    "imports": ""
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(items)\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(items):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor (i, item) in enumerate(iterable):\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = functools.reduce(lambda d, item: d.update({item: d.get(item, 0) + 1}) or d, iterable, {})\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import functools"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = {}\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": ""
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in items:\n    counts.update([item])",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter()\nfor item in items:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in items:\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "items = [1, 2, 3, 1, 2, 3, 4]\ncounts = Counter(items)\nfor item in set(items):\n    counts[item] = items.count(item)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 0\n        counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = dict(zip(iterable, itertools.repeat(1)))",
    "imports": ""
   },
   {
    "code": "counts = functools.reduce(lambda d, k: d.update({k: d.get(k, 0) + 1}) or d, iterable, {})",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.histogram(iterable, bins=np.arange(max(iterable) + 2))[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.unique(iterable, return_counts=True)[1]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.bincount(np.array(iterable, dtype=np.int64))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\nfor i in iterable:\n    counts_dict[i] = counts_dict.get(i, 0)\n    counts_dict[i] = counts_dict[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = sorted(iterable)\ncounts = {k: len(list(g)) for (k, g) in itertools.groupby(iterable_sorted)}",
    "imports": "import itertools"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\n(unique_values, counts) = np.unique(iterable_sorted, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_sorted = np.sort(iterable)\ncounts = {}\nfor i in iterable_sorted:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)\n    else:\n        counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.items():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.values():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])\n    counts[i[1]] = iterable.count(i[1])\n    counts[i[2]] = iterable.count(i[2])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "unique_items = list(set(iterable))\ncounts = {item: len(list(group)) for (item, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict.fromkeys(iterable, 0)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor item in iterable:\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in range(len(iterable)):\n    item = iterable[i]\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in enumerate(iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1\ni = len(iterable) - 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable):\n    if item not in counts:\n        counts[item] = 0\n    counts[item] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor (i, item) in itertools.zip_longest(range(len(iterable)), iterable, fillvalue=0):\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count",
    "imports": ""
   },
   {
    "code": "counts = collections.Counter(itertools.chain.from_iterable(iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(itertools.chain(*iterable))",
    "imports": "import itertools\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.concatenate(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.hstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.vstack(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.ravel(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.flatten(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.reshape(iterable, -1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.squeeze(iterable))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1))",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).flatten().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).ravel().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).reshape(-1).tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = collections.Counter(np.array(iterable).squeeze().tolist())",
    "imports": "import numpy as np\nimport collections"
   },
   {
    "code": "counts = {i: np.count_nonzero(iterable == i) for i in set(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable.sort()\ngroups = groupby(iterable)\ncounts = {key: len(list(group)) for (key, group) in groups}",
    "imports": "from itertools import groupby"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, np.zeros(len(iterable))))\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    if i - 1 >= 0 and i - 1 < len(counts):\n        counts[i - 1] = counts[i - 1] + 1\n    else:\n        counts[i - 1] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1 if i in counts else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] = counts[i] + 1",
    "imports": "import itertools"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = {k: v for (k, v) in counts}",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts = np.array(list(zip(unique_elements, counts))).tolist()\ncounts = dict(counts)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]] + iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] += iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = sum([1 for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = len([x for x in iterable if x == i[0]])",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts:\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.keys():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.elements():\n    counts[i] = iterable.count(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\nfor i in counts.most_common():\n    counts[i] = iterable.count(i[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = defaultdict(int)\n[counts.update({item: counts[item] + 1}) if item in counts else counts.update({item: 1}) for (i, item) in enumerate(iterable)]\ncounts = defaultdict(int)\nfor (i, item) in enumerate(iterable):\n    counts[item] = np.sum(np.array(iterable) == item)",
    "imports": "from collections import defaultdict\nfrom collections import defaultdict\nimport numpy as np"
   },
   {
    "code": "arr = np.array(iterable)\n(unique_items, counts) = np.unique(arr, return_counts=True)\ncounts_dict = dict(zip(unique_items, counts))\narr = np.array(iterable)\ncounts_dict = {}\nfor item in np.unique(arr):\n    count = np.count_nonzero(arr == item)\n    counts_dict[item] = count\narr = np.array(iterable)\ncounts = np.bincount(arr)\ncounts_dict = {item: count for (item, count) in enumerate(counts) if count > 0}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ngroups = itertools.groupby(iterable)\ncounts = {}\nfor (item, group) in groups:\n    count = sum((1 for _ in group))\n    counts[item] = count\ngroups = itertools.groupby(iterable)\ncounts = {item: sum((1 for _ in group)) for (item, group) in groups}",
    "imports": "import itertools"
   },
   {
    "code": "counts = {}\n\ndef update_counts(item):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\nfunctools.reduce(update_counts, iterable)\ncounts = {item: iterable.count(item) for item in iterable}\ncounts = collections.Counter(iterable)",
    "imports": "import functools"
   },
   {
    "code": "counts = {}\nfor (i, item) in enumerate(iterable):\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1\ncounts = collections.Counter(iterable)\ncounts = {item: iterable.count(item) for item in iterable}",
    "imports": "import statistics"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts[item] = counts[item] + 1 if item in counts else 1\ni = 0\ncount = 0\nfor item in iterable:\n    i += 1\n    count = counts[item]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.setdefault(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\nfor item in iterable:\n    current_count = counts.get(item, 0)\n    updated_count = current_count + 1\n    counts[item] = updated_count\ni = item\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter()\ncounts.update(iterable)\ni = iterable[-1]\ncounts = counts",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter()\ncounts.update(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter()\ncounts.update(iterable)\niterable = [True, False, True, True]\ncounts = Counter()\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable=iterable)\niterable = ['a', 'b', 'c', 'a', 'b']\ncounts = Counter(iterable=iterable)\niterable = [True, False, True, True]\ncounts = Counter(iterable=iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\ncounts.update(iterable)\ncounts.update(iterable)\ncounts.update(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor item in iterable:\n    counts.__setitem__(item, counts.get(item, 0) + 1)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = len(filter(lambda x: x == i, iterable_list)) if filter(lambda x: x == i, iterable_list) else 0",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.takewhile(lambda x: x == i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = list(set(iterable_list))\ncounts = {}\nfor i in unique_values:\n    counts[i] = sum((1 for _ in itertools.dropwhile(lambda x: x != i, iterable_list)))",
    "imports": "import itertools"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = {i: np.count_nonzero(iterable_list == i) for i in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\ncounts = pd.Series(iterable_list).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\nunique_values = np.unique(iterable_list)\ncounts = np.bincount(np.searchsorted(unique_values, iterable_list))\ncounts = dict(zip(unique_values, counts))",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_list = list(iterable)\n(unique_values, counts) = np.unique(iterable_list, return_counts=True)\ncounts = dict(zip(unique_values.tolist(), counts.tolist()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = i\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nfor i in counts.most_common(3):\n    counts[i[0]] = counts[i[0]]\ni = counts.most_common(3)[0][0]\ncounts = counts",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = 'hello world'\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\nfor i in sorted_counts[:3]:\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts[i[0]] = count",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts[i[0]]\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3]\ncounts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    count = counts.get(i[0])\n    counts.update({i[0]: count})",
    "imports": "import collections"
   },
   {
    "code": "counts = collections.Counter(iterable)\nmost_common = counts.most_common(3)\nfor i in most_common:\n    temp_count = iterable.count(i[0])\n    counts[i[0]] = temp_count\n    counts[i[0]] = counts[i[0]]",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.setdefault(item, 0) + 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 1, 2, 3, 4]\ncounts = {}\nfor item in iterable:\n    counts[item] = counts.get(item, 0)\n    counts[item] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = dict(((i, len(list(group))) for (i, group) in itertools.groupby(sorted(iterable))))",
    "imports": "import itertools"
   },
   {
    "code": "def count_occurrences(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = count_occurrences(iterable)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = Counter(iterable)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncount = counts[i]",
    "imports": "from collections import defaultdict\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {i: iterable.count(i) for i in set(iterable)}",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9]\ncounts = dict()\nfor i in set(iterable):\n    counts[i] = counts.get(i, 0) + iterable.count(i)",
    "imports": "import statistics"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncounts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1\ncounts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1\ncounts = np.bincount(iterable)\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = pd.Series(iterable).value_counts().to_dict()\ncounts = dict(zip(iterable, [sum((1 for _ in group)) for (_, group) in itertools.groupby(sorted(iterable))]))\ncounts = functools.reduce(lambda d, i: d.update({i: d.get(i, 0) + 1}) or d, iterable, {})",
    "imports": "from collections import defaultdict\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import Counter\nimport numpy as np\nimport numpy as np\nimport pandas as pd\nimport itertools\nimport functools"
   },
   {
    "code": "counts = dict(itertools.groupby(sorted(iterable)))\nfor key in counts:\n    counts[key] = len(list(counts[key]))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'values': iterable})\ncounts = df['values'].value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = collections.Counter()\nfor element in iterable:\n    counts[element] += 1",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = dict()\nfor element in iterable:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items()))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0]))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[0], reverse=True))",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\nmax_count = max(counts.values())\nmax_elements = [k for (k, v) in counts.items() if v == max_count]\nmin_count = min(counts.values())\nmin_elements = [k for (k, v) in counts.items() if v == min_count]",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = collections.Counter(iterable)\ncounts = collections.Counter((i for i in iterable))\ncounts = {key: len(list(group)) for (key, group) in itertools.groupby(sorted(iterable))}",
    "imports": "import collections\nfrom collections import defaultdict\nimport collections\nimport collections\nimport itertools"
   },
   {
    "code": "counts = Counter()\nfor i in iterable:\n    counts[i] += 1\ncounts = Counter(iterable)\ncounts = Counter(iterable)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.bincount(iterable)\ncounts = np.zeros(len(iterable), dtype=int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import numpy as np"
   },
   {
    "code": "(unique_elements, counts) = np.unique(iterable, return_counts=True)\nfor i in range(len(unique_elements)):\n    counts[unique_elements[i]] = counts[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = dict(zip(iterable, itertools.repeat(0)))\nfor i in iterable:\n    counts[i] += 1",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)",
    "imports": "import collections"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = np.bincount(iterable)",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = pd.Series(iterable).value_counts().to_dict()",
    "imports": "import pandas as pd"
   },
   {
    "code": "counts = np.unique(iterable, return_counts=True)\nunique_values = counts[0]\ncounts = dict(zip(unique_values, counts[1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = collections.defaultdict(int)\nfor i in iterable:\n    counts[i] += counts.get(i, 0) + 1",
    "imports": "import collections"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] += counts[i] + 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = np.array(iterable)\ncounts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts = defaultdict(int)\ncounts.update({i: counts[i] + 1 for i in iterable})",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable_arr = np.array(iterable)\n(unique_values, counts) = np.unique(iterable_arr, return_counts=True)\ncounts_dict = {value: count for (value, count) in zip(unique_values, counts)}",
    "imports": "import numpy as np"
   },
   {
    "code": "iterable_arr = np.array(iterable)\nunique_values = np.unique(iterable_arr)\ncounts = {value: np.bincount(iterable_arr == value)[1] for value in unique_values}",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    if iterable[i] in iterable[:i]:\n        counts[i] = counts[i - 1] + 1\n    else:\n        counts[i] = 1",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = iterable[:i + 1].count(iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.sum(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = np.zeros(len(iterable))\nfor i in range(len(iterable)):\n    counts[i] = np.count_nonzero(iterable[:i + 1] == iterable[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = defaultdict(int)\n[counts.__setitem__(i, counts[i] + 1) if i in counts else counts.__setitem__(i, 1) for i in iterable]\ni = iterable[-1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts)",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts.items())",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(Counter(iterable))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict(((x, iterable.count(x)) for x in set(iterable)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = dict()\nfor x in iterable:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = collections.Counter(iterable)\ncounts = dict(counts.items())\ncounts = collections.Counter(iterable)\ncounts = {key: value for (key, value) in counts.items()}\ncounts = collections.Counter(iterable)\ncounts = dict(**counts)\ncounts = collections.Counter(iterable)\ncounts = dict(**dict(counts.items()))",
    "imports": "import collections"
   },
   {
    "code": "counts = {}\nfor (i, group) in groupby(sorted(iterable)):\n    counts[i] = sum((1 for _ in group))",
    "imports": "from itertools import groupby"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts[i] + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0)\n    counts[i] += 1",
    "imports": ""
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "counts = Counter(iterable)\nfor i in itertools.chain.from_iterable(iterable):\n    counts[i] += 1",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1\ncount = sum(counts.values())",
    "imports": "import itertools"
   },
   {
    "code": "counts = defaultdict(int)\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": ""
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(counts)",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "def count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    count = sum(counts.values())\n    counts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\n    return (count, counts)",
    "imports": "import itertools\nfrom collections import defaultdict"
   },
   {
    "code": "iterable = [1, 2, 2, 3, 3, 3]\ncounts = Counter(iterable)\ncount = sum(counts.values())\ncounts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))",
    "imports": "import itertools\nfrom collections import Counter"
   },
   {
    "code": "count = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]",
    "imports": ""
   },
   {
    "code": "counts = np.ones(len(iterable))\n(unique_elements, unique_counts) = np.unique(iterable, return_counts=True)\nfor (i, count) in zip(unique_elements, unique_counts):\n    counts[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = np.array(list(counts.values()))",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1\ncounts = list(counts.values())",
    "imports": "import numpy as np"
   }
  ]
 }
}