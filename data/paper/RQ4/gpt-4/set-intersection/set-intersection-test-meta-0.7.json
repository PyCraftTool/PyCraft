{
 "temperature": 0.7,
 "iteration-1": {
  "num-tests": 9,
  "num-correct": 344,
  "num-incorrect": 539,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 },
 "iteration-2": {
  "num-tests": 18,
  "num-correct": 125,
  "num-incorrect": 758,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [3, 4, 5, 6, 7]",
    "assertion": "assert common == [3, 4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['d', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['d', 'e']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3, 4.4, 5.5]\nl2 = [4.4, 5.5, 6.6, 7.7, 8.8]",
    "assertion": "assert common == [4.4, 5.5]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nl2 = ['4.4', '5.5', '6.6', '7.7', '8.8']",
    "assertion": "assert common == ['4.4', '5.5']"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3, 4, 5]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['f', 'g', 'h', 'i', 'j']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, None, None, None, None]\nl2 = [None, None, None, None, None]",
    "assertion": "assert common == [None, None, None, None, None]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = ['1', '2', '3', '4', '5']",
    "assertion": "assert common == []"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 },
 "iteration-3": {
  "num-tests": 23,
  "num-correct": 121,
  "num-incorrect": 762,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [3, 4, 5, 6, 7]",
    "assertion": "assert common == [3, 4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['d', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['d', 'e']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3, 4.4, 5.5]\nl2 = [4.4, 5.5, 6.6, 7.7, 8.8]",
    "assertion": "assert common == [4.4, 5.5]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nl2 = ['4.4', '5.5', '6.6', '7.7', '8.8']",
    "assertion": "assert common == ['4.4', '5.5']"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3, 4, 5]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['f', 'g', 'h', 'i', 'j']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, None, None, None, None]\nl2 = [None, None, None, None, None]",
    "assertion": "assert common == [None, None, None, None, None]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = ['1', '2', '3', '4', '5']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, None, 5]\nl2 = [None, 5, 6, 7, 8]",
    "assertion": "assert common == [None, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['c', 'd', 'e']",
    "assertion": "assert common == ['c']"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = ['3.3', '4.4', '5.5']",
    "assertion": "assert common == ['3.3']"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [6, 7, 8, 9, 10]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [' ', 'b', 'c']\nl2 = [' ', 'd', 'e']",
    "assertion": "assert common == [' ']"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 },
 "iteration-4": {
  "num-tests": 30,
  "num-correct": 121,
  "num-incorrect": 762,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [3, 4, 5, 6, 7]",
    "assertion": "assert common == [3, 4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['d', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['d', 'e']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3, 4.4, 5.5]\nl2 = [4.4, 5.5, 6.6, 7.7, 8.8]",
    "assertion": "assert common == [4.4, 5.5]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nl2 = ['4.4', '5.5', '6.6', '7.7', '8.8']",
    "assertion": "assert common == ['4.4', '5.5']"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3, 4, 5]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['f', 'g', 'h', 'i', 'j']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, None, None, None, None]\nl2 = [None, None, None, None, None]",
    "assertion": "assert common == [None, None, None, None, None]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = ['1', '2', '3', '4', '5']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, None, 5]\nl2 = [None, 5, 6, 7, 8]",
    "assertion": "assert common == [None, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['c', 'd', 'e']",
    "assertion": "assert common == ['c']"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = ['3.3', '4.4', '5.5']",
    "assertion": "assert common == ['3.3']"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [6, 7, 8, 9, 10]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [' ', 'b', 'c']\nl2 = [' ', 'd', 'e']",
    "assertion": "assert common == [' ']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['b', 'c', 'd']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [2.2, 3.3, 4.4]",
    "assertion": "assert common == [2.2, 3.3]"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, 'None', 'null']\nl2 = [None, 'null', 'nil']",
    "assertion": "assert common == [None, 'null']"
   },
   {
    "init": "l1 = ['  ', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['  a  ', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 },
 "iteration-5": {
  "num-tests": 35,
  "num-correct": 66,
  "num-incorrect": 817,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [3, 4, 5, 6, 7]",
    "assertion": "assert common == [3, 4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['d', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['d', 'e']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3, 4.4, 5.5]\nl2 = [4.4, 5.5, 6.6, 7.7, 8.8]",
    "assertion": "assert common == [4.4, 5.5]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nl2 = ['4.4', '5.5', '6.6', '7.7', '8.8']",
    "assertion": "assert common == ['4.4', '5.5']"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3, 4, 5]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['f', 'g', 'h', 'i', 'j']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, None, None, None, None]\nl2 = [None, None, None, None, None]",
    "assertion": "assert common == [None, None, None, None, None]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = ['1', '2', '3', '4', '5']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, None, 5]\nl2 = [None, 5, 6, 7, 8]",
    "assertion": "assert common == [None, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['c', 'd', 'e']",
    "assertion": "assert common == ['c']"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = ['3.3', '4.4', '5.5']",
    "assertion": "assert common == ['3.3']"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [6, 7, 8, 9, 10]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [' ', 'b', 'c']\nl2 = [' ', 'd', 'e']",
    "assertion": "assert common == [' ']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['b', 'c', 'd']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [2.2, 3.3, 4.4]",
    "assertion": "assert common == [2.2, 3.3]"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, 'None', 'null']\nl2 = [None, 'null', 'nil']",
    "assertion": "assert common == [None, 'null']"
   },
   {
    "init": "l1 = ['  ', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['  a  ', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1, 'a', [1, 2, 3], 4, 5]\nl2 = [[1, 2, 3], 4, 5, 6, 7]",
    "assertion": "assert common == [[1, 2, 3], 4, 5]"
   },
   {
    "init": "l1 = [1, 2, None, 4, 5]\nl2 = [None, 4, 5, 6, 7]",
    "assertion": "assert common == [None, 4, 5]"
   },
   {
    "init": "l1 = [1.23, 2.34, 3.45, 4.56, 5.67]\nl2 = [4.56, 5.67, 6.78, 7.89, 8.90]",
    "assertion": "assert common == [4.56, 5.67]"
   },
   {
    "init": "l1 = ['1.23', '2.34', '3.45', '4.56', '5.67']\nl2 = ['4.56', '5.67', '6.78', '7.89', '8.90']",
    "assertion": "assert common == ['4.56', '5.67']"
   },
   {
    "init": "l1 = 'abc'\nl2 = 'bcd'",
    "assertion": "assert common == ['b', 'c']"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 },
 "iteration-6": {
  "num-tests": 41,
  "num-correct": 66,
  "num-incorrect": 817,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [3, 4, 5, 6, 7]",
    "assertion": "assert common == [3, 4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['d', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['d', 'e']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3, 4.4, 5.5]\nl2 = [4.4, 5.5, 6.6, 7.7, 8.8]",
    "assertion": "assert common == [4.4, 5.5]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nl2 = ['4.4', '5.5', '6.6', '7.7', '8.8']",
    "assertion": "assert common == ['4.4', '5.5']"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3, 4, 5]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['f', 'g', 'h', 'i', 'j']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, None, None, None, None]\nl2 = [None, None, None, None, None]",
    "assertion": "assert common == [None, None, None, None, None]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = ['1', '2', '3', '4', '5']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, None, 5]\nl2 = [None, 5, 6, 7, 8]",
    "assertion": "assert common == [None, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['c', 'd', 'e']",
    "assertion": "assert common == ['c']"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = ['3.3', '4.4', '5.5']",
    "assertion": "assert common == ['3.3']"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [6, 7, 8, 9, 10]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [' ', 'b', 'c']\nl2 = [' ', 'd', 'e']",
    "assertion": "assert common == [' ']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['b', 'c', 'd']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [2.2, 3.3, 4.4]",
    "assertion": "assert common == [2.2, 3.3]"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, 'None', 'null']\nl2 = [None, 'null', 'nil']",
    "assertion": "assert common == [None, 'null']"
   },
   {
    "init": "l1 = ['  ', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['  a  ', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1, 'a', [1, 2, 3], 4, 5]\nl2 = [[1, 2, 3], 4, 5, 6, 7]",
    "assertion": "assert common == [[1, 2, 3], 4, 5]"
   },
   {
    "init": "l1 = [1, 2, None, 4, 5]\nl2 = [None, 4, 5, 6, 7]",
    "assertion": "assert common == [None, 4, 5]"
   },
   {
    "init": "l1 = [1.23, 2.34, 3.45, 4.56, 5.67]\nl2 = [4.56, 5.67, 6.78, 7.89, 8.90]",
    "assertion": "assert common == [4.56, 5.67]"
   },
   {
    "init": "l1 = ['1.23', '2.34', '3.45', '4.56', '5.67']\nl2 = ['4.56', '5.67', '6.78', '7.89', '8.90']",
    "assertion": "assert common == ['4.56', '5.67']"
   },
   {
    "init": "l1 = 'abc'\nl2 = 'bcd'",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['a', 'b', 'c']"
   },
   {
    "init": "l1 = [1, 1.5, 2.5, 'a', 'b', 'c']\nl2 = [1, 1.5, 2.0, 'a', 'b', 'c']",
    "assertion": "assert common == [1, 1.5, 'a', 'b', 'c']"
   },
   {
    "init": "l1 = [None, False, True]\nl2 = [None, False, True]",
    "assertion": "assert common == [None, False, True]"
   },
   {
    "init": "l1 = [1,2,3]\nl2 = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = None\nl2 = [1,2,3]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = None\nl2 = None",
    "assertion": "assert 1==1",
    "error": true
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 },
 "iteration-7": {
  "num-tests": 49,
  "num-correct": 66,
  "num-incorrect": 817,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [3, 4, 5, 6, 7]",
    "assertion": "assert common == [3, 4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['d', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['d', 'e']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3, 4.4, 5.5]\nl2 = [4.4, 5.5, 6.6, 7.7, 8.8]",
    "assertion": "assert common == [4.4, 5.5]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nl2 = ['4.4', '5.5', '6.6', '7.7', '8.8']",
    "assertion": "assert common == ['4.4', '5.5']"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3, 4, 5]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['f', 'g', 'h', 'i', 'j']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, None, None, None, None]\nl2 = [None, None, None, None, None]",
    "assertion": "assert common == [None, None, None, None, None]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = ['1', '2', '3', '4', '5']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, None, 5]\nl2 = [None, 5, 6, 7, 8]",
    "assertion": "assert common == [None, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['c', 'd', 'e']",
    "assertion": "assert common == ['c']"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = ['3.3', '4.4', '5.5']",
    "assertion": "assert common == ['3.3']"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [6, 7, 8, 9, 10]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [' ', 'b', 'c']\nl2 = [' ', 'd', 'e']",
    "assertion": "assert common == [' ']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['b', 'c', 'd']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [2.2, 3.3, 4.4]",
    "assertion": "assert common == [2.2, 3.3]"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, 'None', 'null']\nl2 = [None, 'null', 'nil']",
    "assertion": "assert common == [None, 'null']"
   },
   {
    "init": "l1 = ['  ', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['  a  ', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1, 'a', [1, 2, 3], 4, 5]\nl2 = [[1, 2, 3], 4, 5, 6, 7]",
    "assertion": "assert common == [[1, 2, 3], 4, 5]"
   },
   {
    "init": "l1 = [1, 2, None, 4, 5]\nl2 = [None, 4, 5, 6, 7]",
    "assertion": "assert common == [None, 4, 5]"
   },
   {
    "init": "l1 = [1.23, 2.34, 3.45, 4.56, 5.67]\nl2 = [4.56, 5.67, 6.78, 7.89, 8.90]",
    "assertion": "assert common == [4.56, 5.67]"
   },
   {
    "init": "l1 = ['1.23', '2.34', '3.45', '4.56', '5.67']\nl2 = ['4.56', '5.67', '6.78', '7.89', '8.90']",
    "assertion": "assert common == ['4.56', '5.67']"
   },
   {
    "init": "l1 = 'abc'\nl2 = 'bcd'",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['a', 'b', 'c']"
   },
   {
    "init": "l1 = [1, 1.5, 2.5, 'a', 'b', 'c']\nl2 = [1, 1.5, 2.0, 'a', 'b', 'c']",
    "assertion": "assert common == [1, 1.5, 'a', 'b', 'c']"
   },
   {
    "init": "l1 = [None, False, True]\nl2 = [None, False, True]",
    "assertion": "assert common == [None, False, True]"
   },
   {
    "init": "l1 = [1,2,3]\nl2 = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = None\nl2 = [1,2,3]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = None\nl2 = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['b', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['b', 'e']"
   },
   {
    "init": "l1 = ['1.125', '3.5', '6.75', '5.9']\nl2 = ['1.125', '3.5', '6.75', '5.9']",
    "assertion": "assert common == ['1.125', '3.5', '6.75', '5.9']"
   },
   {
    "init": "l1 = []\nl2 = ['b', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['1.125', '3.5', '6.75', '5.9']\nl2 = [1.125, 3.5, 6.75, 5.9]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['A', 'B', 'C', 'D', 'E']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [1.0, 2.0, 3.0, 4.0, 5.0]",
    "assertion": "assert common == [1, 2, 3, 4, 5]"
   },
   {
    "init": "l1 = ['1.125', '3.5', '6.75', '5.9']\nl2 = ['1.125', '3.5']",
    "assertion": "assert common == ['1.125', '3.5']"
   },
   {
    "init": "l1 = ['a', ' ', 'c', 'd', 'e']\nl2 = ['a', 'b', ' ', 'd', 'e']",
    "assertion": "assert common == ['a', ' ', 'd', 'e']"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 },
 "iteration-8": {
  "num-tests": 55,
  "num-correct": 66,
  "num-incorrect": 817,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == [4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [3.3, 4.4, 5.5]",
    "assertion": "assert common == [3.3]"
   },
   {
    "init": "l1 = [None, True, False]\nl2 = [False, None, 'None']",
    "assertion": "assert common == [None, False]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = [1.1, 2.2, 3.3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = [4, 5, 6, 7, 8]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [4, 5, 6, 7, 8]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = []\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = [1, '2', 3]",
    "assertion": "assert common == [1, 3]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [3, 4, 5, 6, 7]",
    "assertion": "assert common == [3, 4, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['d', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['d', 'e']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3, 4.4, 5.5]\nl2 = [4.4, 5.5, 6.6, 7.7, 8.8]",
    "assertion": "assert common == [4.4, 5.5]"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nl2 = ['4.4', '5.5', '6.6', '7.7', '8.8']",
    "assertion": "assert common == ['4.4', '5.5']"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3, 4, 5]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['f', 'g', 'h', 'i', 'j']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, None, None, None, None]\nl2 = [None, None, None, None, None]",
    "assertion": "assert common == [None, None, None, None, None]"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = ['1', '2', '3', '4', '5']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, None, 5]\nl2 = [None, 5, 6, 7, 8]",
    "assertion": "assert common == [None, 5]"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['c', 'd', 'e']",
    "assertion": "assert common == ['c']"
   },
   {
    "init": "l1 = ['1.1', '2.2', '3.3']\nl2 = ['3.3', '4.4', '5.5']",
    "assertion": "assert common == ['3.3']"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [6, 7, 8, 9, 10]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [' ', 'b', 'c']\nl2 = [' ', 'd', 'e']",
    "assertion": "assert common == [' ']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['b', 'c', 'd']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1.1, 2.2, 3.3]\nl2 = [2.2, 3.3, 4.4]",
    "assertion": "assert common == [2.2, 3.3]"
   },
   {
    "init": "l1 = []\nl2 = [1, 2, 3]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = []",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [None, 'None', 'null']\nl2 = [None, 'null', 'nil']",
    "assertion": "assert common == [None, 'null']"
   },
   {
    "init": "l1 = ['  ', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['  a  ', 'b', 'c']",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = [1, 'a', [1, 2, 3], 4, 5]\nl2 = [[1, 2, 3], 4, 5, 6, 7]",
    "assertion": "assert common == [[1, 2, 3], 4, 5]"
   },
   {
    "init": "l1 = [1, 2, None, 4, 5]\nl2 = [None, 4, 5, 6, 7]",
    "assertion": "assert common == [None, 4, 5]"
   },
   {
    "init": "l1 = [1.23, 2.34, 3.45, 4.56, 5.67]\nl2 = [4.56, 5.67, 6.78, 7.89, 8.90]",
    "assertion": "assert common == [4.56, 5.67]"
   },
   {
    "init": "l1 = ['1.23', '2.34', '3.45', '4.56', '5.67']\nl2 = ['4.56', '5.67', '6.78', '7.89', '8.90']",
    "assertion": "assert common == ['4.56', '5.67']"
   },
   {
    "init": "l1 = 'abc'\nl2 = 'bcd'",
    "assertion": "assert common == ['b', 'c']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['a', 'b', 'c']",
    "assertion": "assert common == ['a', 'b', 'c']"
   },
   {
    "init": "l1 = [1, 1.5, 2.5, 'a', 'b', 'c']\nl2 = [1, 1.5, 2.0, 'a', 'b', 'c']",
    "assertion": "assert common == [1, 1.5, 'a', 'b', 'c']"
   },
   {
    "init": "l1 = [None, False, True]\nl2 = [None, False, True]",
    "assertion": "assert common == [None, False, True]"
   },
   {
    "init": "l1 = [1,2,3]\nl2 = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = None\nl2 = [1,2,3]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = None\nl2 = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['b', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == ['b', 'e']"
   },
   {
    "init": "l1 = ['1.125', '3.5', '6.75', '5.9']\nl2 = ['1.125', '3.5', '6.75', '5.9']",
    "assertion": "assert common == ['1.125', '3.5', '6.75', '5.9']"
   },
   {
    "init": "l1 = []\nl2 = ['b', 'e', 'f', 'g', 'h']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['1.125', '3.5', '6.75', '5.9']\nl2 = [1.125, 3.5, 6.75, 5.9]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['A', 'B', 'C', 'D', 'E']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3, 4, 5]\nl2 = [1.0, 2.0, 3.0, 4.0, 5.0]",
    "assertion": "assert common == [1, 2, 3, 4, 5]"
   },
   {
    "init": "l1 = ['1.125', '3.5', '6.75', '5.9']\nl2 = ['1.125', '3.5']",
    "assertion": "assert common == ['1.125', '3.5']"
   },
   {
    "init": "l1 = ['a', ' ', 'c', 'd', 'e']\nl2 = ['a', 'b', ' ', 'd', 'e']",
    "assertion": "assert common == ['a', ' ', 'd', 'e']"
   },
   {
    "init": "l1 = ['a', 'b', 'c']\nl2 = ['A', 'B', 'C']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = ['a', 'b', None]\nl2 = ['a', None, 'c']",
    "assertion": "assert common == ['a', None]"
   },
   {
    "init": "l1 = [1.2, 2.3, 3.4]\nl2 = [2.3, 3.4, 4.5]",
    "assertion": "assert common == [2.3, 3.4]"
   },
   {
    "init": "l1 = ['1.2', '2.3', '3.4']\nl2 = [1.2, 2.3, 3.4]",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [1, 2, 3]\nl2 = ['1', '2', '3']",
    "assertion": "assert common == []"
   },
   {
    "init": "l1 = [' ', 'b', 'c']\nl2 = [' ', 'a', 'c']",
    "assertion": "assert common == [' ', 'c']"
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(l2.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, val) in enumerate(l1):\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.count, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in [y for y in l1 if y not in l2]]",
    "imports": ""
   },
   {
    "code": "common = filter(lambda val: val in l2, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.__contains__(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.__contains__(x), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if any((y == x for y in l2)):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if l2.count(x) > 0]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) >= l2.count(x)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i not in common and i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "def exists_in_other(lst1, lst2):\n    return list(filterfalse(lambda x: x not in lst2, lst1))\ncommon = exists_in_other(l1, exists_in_other(l1, l2))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(l2.__contains__, l1), [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\nfor x in l2:\n    if x not in common and x in l1:\n        common.append(x)\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = [i for i in filter(lambda x: x in l2, l1)]",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [elem for elem in l1 if elem in [elem_2 for elem_2 in l2]]",
    "imports": ""
   },
   {
    "code": "selector_bool = [el in l2 for el in l1]\ncommon = list(compress(l1, selector_bool))",
    "imports": "from itertools import compress"
   },
   {
    "code": "common = []\nfor x in l1:\n    if l2.__contains__(x):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor element in l1:\n    if element in l2 and element not in common:\n        common.append(element)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon.sort(key=l1.index)",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [val for val in l1 if val in l2]\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "temp = []\nfor i in l1:\n    if i in l2:\n        temp.append(i)\ncommon = temp",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) > 0 and (l2.count(i) > 0)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda i: i not in l2, l1))",
    "imports": "import itertools"
   },
   {
    "code": "def get_common_elements(l1: list, l2: list) -> list:\n    return list(filter(lambda x: x in l2, l1))\ncommon = get_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\nfor i in l2:\n    if i not in l1 and i in common:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1.count(l1[i]) == l2.count(l1[i]):\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        common += [x]",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and common.count(i) == 0:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.remove(i)\n            common.append(i)\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v == 2 and l1.count(k) == 1 and (l2.count(k) == 1)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i in common:\n            continue\n        else:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            continue\n        else:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            raise ValueError('Duplicate value found in common list')",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if i not in common else None",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common:\n        if i in l2:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i not in l2:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.extend([l1[i]])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = [item for (item, count) in collections.Counter(l1 + l2).items() if count > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "counter = collections.Counter(l1 + l2)\ncommon = [i for i in counter if counter[i] > 1]",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.remove(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1 + l2).items() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l1).__and__(set(l2)).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection(l1).__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection().__contains__, l1))",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    while common.count(i) > 1:\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (Counter(l1), Counter(l2))\ncommon = list((c1 & c2).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in l1 if i in common and l1.count(i) == 1 and (l2.count(i) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1 and (l2.count(k) == 1)]\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort(key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common and (l1.count(i) == 1) and (l2.count(i) == 1):\n        common.append(i)\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())\ncommon = sorted(common, key=lambda x: (l1.index(x), l2.index(x)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i) and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common[len(common):] = [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.extend([i] * 2)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i, i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\nfor i in l2:\n    if i in l1:\n        if i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        if i not in common:\n            common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list((c1 & c2).elements())\ncommon = [x for x in common if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2):\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            break\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.insert(len(common), i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = [i for i in counts.elements() if counts[i] > 1]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1) + Counter(l2)\ncommon = list((counts - (counts - Counter(common))).elements())\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i] * 2\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.extend([i] * 2)\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common += [i, i]\n    else:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        common.append(i)\n        common.append(i)\n    else:\n        common",
    "imports": ""
   },
   {
    "code": "common = filter(set(l2).__contains__, l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "temp = set(l2)\ncommon = [x for x in l1 if x in temp]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i not in common and i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections"
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "both_sets = set(l1) & set(l2)\ncommon = [x for x in l1 if x in both_sets]",
    "imports": ""
   },
   {
    "code": "l1_series = pd.Series(l1)\nl2_series = pd.Series(l2)\ncommon_series = l1_series[l1_series.isin(l2_series)]\ncommon = common_series.tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [item for (item, count) in Counter(l1).items() if item in l2]\ncommon = list(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "temp = set(l2)\ncommon = list(filter(lambda x: x in temp, l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['Column_Name'])\ndf2 = pd.DataFrame(l2, columns=['Column_Name'])\ncommon = pd.merge(df1, df2)['Column_Name'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor i in l1 + l2:\n    if i in l1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = [elem for (elem, count) in c.items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nif len(l1) <= len(l2):\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\nelse:\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = sorted(common, key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.insert(i, elem)\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common = list((collections.Counter(l1) & collections.Counter(l2)).elements())",
    "imports": "import collections"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    counts1[i] = counts1[i] + 1 if i in counts1 else 1\ncounts2 = {}\nfor i in l2:\n    counts2[i] = counts2[i] + 1 if i in counts2 else 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] += 1\nfor i in l2:\n    counter2[i] += 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common.extend([key] * min(counter1[key], counter2[key]))",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [i[0] for i in list(product(l1, l2)) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i] * min(l1.count(i), l2.count(i))",
    "imports": ""
   },
   {
    "code": "L3 = Counter(l1) & Counter(l2)\ncommon = list(L3.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()\ncommon = [l1[i] for i in range(len(common)) if common[i]]",
    "imports": "import pandas as pd"
   },
   {
    "code": "new_list = []\nfor item in l1:\n    if item in l2 and item not in new_list:\n        new_list.append(item)\ncommon = new_list",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = []\nfor elem1 in l1:\n    for elem2 in l2:\n        if elem1 == elem2:\n            common.append(elem1)",
    "imports": ""
   },
   {
    "code": "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(j)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nl3 = l1 + l2\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor i in l1 + l2:\n    d[i] += 1\ncommon = [x for (x, y) in d.items() if y > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = []\nnew_list = l1 + l2\nd = defaultdict(int)\nfor i in new_list:\n    d[i] += 1\nfor (key, value) in d.items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = list(filter(lambda key: c[key] > 1, c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = []\nfor key in c:\n    if c[key] > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2, l1)))\ncommon.sort(key=l1.index)",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)), key=lambda x: l1.index(x))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in l1 if x in common]",
    "imports": ""
   },
   {
    "code": "counter = Counter(l1)\ncommon = [k for k in counter.keys() if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = sorted(set(filter(lambda x: x in l2, l1)), key=l1.index)",
    "imports": ""
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys() and counts1[key] > 0 and (counts2[key] > 0):\n        count1 = counts1[key]\n        count2 = counts2[key]\n        for i in range(min([count1, count2])):\n            common.append(key)",
    "imports": ""
   },
   {
    "code": "counts1 = defaultdict(int)\ncounts2 = defaultdict(int)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "(counter1, counter2) = (defaultdict(int), defaultdict(int))\ncounter1.update({i: l1.count(i) for i in l1})\ncounter2.update({i: l2.count(i) for i in l2})\ncommon = [key for key in counter1 if key in counter2 for _ in range(min(counter1[key], counter2[key]))]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def count_elements(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return d\n(counter1, counter2) = (count_elements(l1), count_elements(l2))\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = []\nfor key in counter1.keys():\n    if key in counter2:\n        common += [key] * min(counter1[key], counter2[key])",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counter1 = Counter(l1)\ncounter2 = Counter(l2)\ncommon = []\nfor el in counter1.elements():\n    if el in counter2.elements():\n        num_common = min(counter1[el], counter2[el])\n        common += [el] * num_common",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor elem in l1:\n    if elem in l2:\n        for i in range(min(l1.count(elem), l2.count(elem))):\n            common.append(elem)",
    "imports": ""
   },
   {
    "code": "common = [key for (key, val) in (Counter(l1) & Counter(l2)).items() for i in range(val)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))",
    "imports": ""
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter(combined)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\nfor element in l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = collections.Counter(l1 + l2)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in l3:\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts:\n    if counts[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = list(filter(lambda x: counts[x] > 1, counts))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [k for (k, v) in counts.most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(lambda x: x not in set(l2), l1))",
    "imports": "import itertools"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1})\ndf_common = df[df['l1'].isin(l2)]\ncommon = df_common['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        common += [x] * l1.count(x)",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\nl2_count = Counter(l2)\ncommon_count = l1_count & l2_count\ncommon = list(common_count.elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in l1 if x in l2 and l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x) == 1 and x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in set(l2) and l1.count(x) == 1:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in set(l2) or l1.count(x) > 1, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if v == 1 and k in set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: l1.count(x) > 1 or x not in set(l2), l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda acc, x: acc + [x] if x in set(l2) and l1.count(x) == 1 else acc, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x in frozenset(l2)]",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [k for k in c if k in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = defaultdict(int)\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    if combined.count(val) > 1 and val not in counts:\n        counts[val] = 1\ncommon = list(counts.keys())",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in combined:\n    counts[val] = counts.get(val, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = Counter(l1) + Counter(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    if element in counts:\n        counts[element] += 1\n    else:\n        counts[element] = 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in chain(l1, l2):\n    counts[element] += 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import defaultdict\nfrom itertools import chain"
   },
   {
    "code": "counts = Counter(l1)\ncounts.update(l2)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counts = defaultdict(int)\nfor element in l1:\n    counts[element] += 1\nfor element in l2:\n    counts[element] += 1\ncommon = []\nfor (element, count) in counts.items():\n    if count > 1:\n        common.append(element)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "counts = {}\nfor element in l1 + l2:\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": ""
   },
   {
    "code": "counts = {}\nfor element in chain(l1, l2):\n    counts[element] = counts.get(element, 0) + 1\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "counts = defaultdict(list)\nfor (index, element) in enumerate(l1):\n    counts[element].append(index)\nfor (index, element) in enumerate(l2):\n    counts[element].append(index + len(l1))\ncommon = [key for (key, value) in counts.items() if len(value) > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = collections.Counter(l3)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "import collections"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor item in Counter(l3).items():\n    if item[1] > 1 and item[0] not in common:\n        common.append(item[0])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).keys() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: Counter(l3)[x] > 1, Counter(l3).keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = []\nfor i in counts.elements():\n    if counts[i] > 1 and i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in Counter(l3):\n    if Counter(l3)[i] > 1:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3) if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2) if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "freq = defaultdict(int)\nfor i in l1 + l2:\n    freq[i] += 1\ncommon = [i for i in freq if freq[i] > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.keys() if counts[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [elem for (elem, count) in Counter(l3).items() if count > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (key, value) in Counter(l3).items():\n    if value > 1:\n        common.append(key)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in l3:\n    if l3.count(elem) > 1 and elem not in common:\n        common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = dict(Counter(l3))\ncommon = [key for key in counts if counts[key] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (elem, count) in Counter(l3).most_common():\n    if count < 2:\n        break\n    common.append(elem)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor (k, v) in Counter(l3).most_common():\n    if v > 1:\n        common.append(k)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [k for (k, v) in Counter(l3).most_common() if v > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))\ncommon = [x[0] for x in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [x[0] for x in list(filter(lambda x: x[1] > 1, Counter(l3).most_common()))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        continue\n    else:\n        common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    j = 0\n    while j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n        j += 1\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        i += 1\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n        else:\n            pass\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common.append(item)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = [item for (item, freq) in Counter(l1).most_common() if item in l2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == Counter(l2)[k]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)\ni += 1",
    "imports": ""
   },
   {
    "code": "c = colc(l1)\nd = colc(l2)\ncommon = list((c & d).elements())",
    "imports": "from collections import Counter as colc"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if x in c2]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.elements() if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1 if c2[x]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "s1 = pd.Series(l1)\ns2 = pd.Series(l2)\ncommon = list(s1[s1.isin(s2)])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = filter(lambda i: i in set(l2), l1)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "df1 = pd.DataFrame(l1, columns=['col1'])\ndf2 = pd.DataFrame(l2, columns=['col1'])\ncommon = df1.merge(df2)['col1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 for i in range(v)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "def intersect_lists(lst1, lst2):\n    return list((collections.Counter(lst1) & collections.Counter(lst2)).elements())\ncommon = intersect_lists(l1, l2)",
    "imports": "import collections"
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(x) for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor element in l1:\n    if element in l2:\n        common.append(element)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))\ncommon = [x for x in l1 if x in l2]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter\nfrom itertools import filterfalse"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = [x for x in l1 if x in l2 and x not in common]\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(l1).intersection(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = set(l1).intersection(l2)\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor k in l1:\n    if k in l2:\n        if k not in common:\n            common.append(k)\ncommon = list(set(l1) & set(l2))\ncommon = list((Counter(l1) & Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nl2_copy = l2.copy()\nfor i in l1:\n    if i in l2_copy:\n        common.append(i)\n        l2_copy.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    else:\n        pass",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n        i = 0\n    else:\n        i += 1",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in l2 and l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\nl2_set = set(l2)\nfor i in l1:\n    if i in l2_set and i not in set(common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l1[i] not in common:\n        common.append(l1[i])\n    elif l1[i] in common:\n        continue\n    elif l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "common = defaultdict(int)\nfor item in l1 + l2:\n    if item in common:\n        continue\n    if (l1 + l2).count(item) > 1:\n        common[item] += 1\ncommon = [k for (k, v) in common.items() if v > 0]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items += Counter(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x[0] for x in Counter(l1 + l2).most_common() if x[1] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.update(l2)\ncommon = [item for item in common_items if common_items[item] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in set(l2) - set(common)]\ncommon.extend([i for i in l1 if i in l2 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = set(l1)\ncommon.intersection_update(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 + l2 if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for (i, j) in zip(l1, l2) if i == j]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l1).difference(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(l2.__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1)) & set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) - set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x.intersection(y), [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "df = pd.DataFrame({'l1': l1, 'l2': l2})\ncommon = df[df['l1'].isin(l2)]['l1'].tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = reduce(set.intersection, [set(l1), set(l2)])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [x for x in set(l1).intersection(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l1), l2))",
    "imports": ""
   },
   {
    "code": "common = list(reduce(set.intersection, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in common, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1 & set_l2)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] if i in common else common.append(i) if i in l2 else None",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        pass\n    elif i in l2:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(set(l2)):\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in l2 and i in common:\n        continue\n    elif i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in set(common)] + common",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(chain(l1, l2)) if (l1 + l2).count(x) > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = [item for item in l1 if item in l2]\nfor item in l2:\n    if item not in common:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2]\ncommon += [item for item in l2 if item not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon += [x for x in l2 if x in l1 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in common, l1))\ncommon += list(filter(lambda x: x in l1 and x not in common, l2))",
    "imports": ""
   },
   {
    "code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 5, 6, 7]\ncommon = []\nfor num in list1:\n    if num in list2 and list1.count(num) == list2.count(num):\n        common.append(num)",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == l2.count(x), l1)",
    "imports": ""
   },
   {
    "code": "def find_common(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.extend([item] * min(l1.count(item), l2.count(item)))",
    "imports": ""
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l2):\n    if l2[i] in l1:\n        common.append(l2[i])\n    i += 1",
    "imports": ""
   },
   {
    "code": "for val in l1:\n    if val in l2:\n        common.append(val)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2:\n        common += [x] * min(l1.count(x), l2.count(x))",
    "imports": ""
   },
   {
    "code": "common = [x for x in list(product(l1, l2)) if x[0] == x[1]]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x and y not in l2 else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x not in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x not in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "l1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = list((l1_counts - l2_counts).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(set(l2).intersection, l1))",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = list(set(l1) & set(l2))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    for j in set(l2):\n        if i == j:\n            common.append(i)",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda i: i in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(itertools.filterfalse(set(l2).__contains__, l1))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1)\ncommon = [i for i in l2 if c[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "(c1, c2) = (np.array(l1), np.array(l2))\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1, set(l2))))",
    "imports": "import statistics"
   },
   {
    "code": "common = list(set(list(itertools.chain.from_iterable([x for x in [l1, l2] if x]))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in l1 if i not in common and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(set(l2).__contains__, l1)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in set(common)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 for j in l2 if i == j and i not in common]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(np.intersect1d(l1, l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "c1 = np.array(l1)\nc2 = np.array(l2)\ncommon = list(set(c1[c1 == c2]))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "l_counts = defaultdict(int)\nfor i in l1:\n    l_counts[i] += 1\ncommon = []\nfor i in l2:\n    if l_counts[i] > 0:\n        common.append(i)\n        l_counts[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c1 = np.unique(l1)\nc2 = np.unique(l2)\ncommon = list(np.intersect1d(c1, c2))",
    "imports": "import numpy as np"
   },
   {
    "code": "(c1, c2) = map(set, [l1, l2])\ncommon = list(np.intersect1d(list(c1), list(c2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(itertools.chain.from_iterable(set(l1) & set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = pd.Series(l1).isin(l2).tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "set_l1 = set(l1)\nset_l2 = set(l2)\ncommon = list(set_l1.intersection(set_l2))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\ncommon.extend([i for i in l2 if i in l1 and i not in common])",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + [i for i in l1 if i in l2 and i in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2] + [i for i in l2 if i in l1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common] + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\n    elif i in l1 and i in common:\n        pass",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l2 if i in l1 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l1 and i not in common, l2)) + common",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2 or x in common, l1))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = list(set([item for item in l1 if item in l2]))",
    "imports": ""
   },
   {
    "code": "common = []\n[l1.remove(item) or common.append(item) for item in l1 if item in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in l1:\n    if item in l2:\n        common.append(item)\nwhile common.count(item) > 1:\n    common.remove(item)",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)",
    "imports": ""
   },
   {
    "code": "common = [item for (item, count) in Counter(chain(l1, l2)).items() if count > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(filter(lambda x: x in l1 and x in l2, l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = [item for item in l1 if item in l2 and item not in common] + [item for item in l2 if item in l1 and item not in common]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = set(product(l1, l2))\ncommon = [x for x in common if x[0] == x[1]]\ncommon = [x[0] for x in common]",
    "imports": "from itertools import product"
   },
   {
    "code": "common = [i for i in Counter(l1) if i in l2 and i not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in Counter(l1):\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor (i, e) in Counter(l1).items():\n    if e > 1 and i in l2 and (i not in common):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(set(chain(l1, l2)))",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor item in set(l1).union(l2):\n    if item in l1 and item in l2:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list((Counter(set(l1)) & Counter(set(l2))).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common_items = Counter(l1)\ncommon_items.subtract(l2)\ncommon = [item for item in common_items if common_items[item] < 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in set(l1) if x in l2] + [x for x in set(l2) if x in l1]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common_items = {x: l1.count(x) + l2.count(x) for x in set(l1 + l2)}\ncommon = [i for i in common_items if common_items[i] > 1]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))",
    "imports": ""
   },
   {
    "code": "common = sorted([i for i in l1 if i in l2])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(l2)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(filter(lambda x: x in l1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2]\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nd = defaultdict(int)\nfor i in l1:\n    d[i] += 1\nfor i in l2:\n    if d[i] > 0:\n        common.append(i)\n        d[i] -= 1",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list((Counter(l1) & Counter(l2)).elements())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l1[i] not in common:\n            common.append(l1[i])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(0, i)\n        common.pop()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.insert(len(common), i)\n        common.pop(0)",
    "imports": ""
   },
   {
    "code": "counts = Counter(l1)\ncommon = [i for i in l2 if counts[i] > 0 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if c[x] > 0]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = Counter(l1)\ncommon = []\nfor i in l2:\n    if counts[i] > 0:\n        common.append(i)\n        counts[i] -= 1",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common, key=lambda x: l2.index(x))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        if l1.count(i) == 1 and l2.count(i) == 1:\n            common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and common.count(i) == 0]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\nfor i in common:\n    if l1.count(i) != l2.count(i):\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        if l1.count(i) == l2.count(i):\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list((Counter(l1) - Counter(l2)).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x not in set(l2)]",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if not any((x == y for y in l2))]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) ^ set(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).difference(l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) - (set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y not in x else x, l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [x for x in l1 if not any([x == y for y in l2])]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(l1.count, l2))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == l2.count(x) and (x not in set(common))]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and l1.count(x) == l2.count(x), l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * (l1.count(val) if l1.count(val) < l2.count(val) else l2.count(val))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in set(l1):\n    if val in l2:\n        common += [val] * min(l1.count(val), l2.count(val))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2 and val not in common:\n        common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor val in l1:\n    if val in l2:\n        if val not in common:\n            common.append(val)\ncommon.sort()\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        pass\n    else:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    elif i not in l2:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.append(i)\n    else:\n        common.append(i) if i in l2 else common.append(None)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n        l2.remove(i)\n        l1.remove(i)\n        common.extend([i])",
    "imports": ""
   },
   {
    "code": "common = set(l1).intersection(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].unique())",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l2]",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda i: i in l2, l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\nwhile common.count(i) > 1:\n    common.pop()",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in common:\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x not in l2, l1))\nfor i in set(common):\n    while common.count(i) > 1:\n        common.remove(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, list(set(l1))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common.append(i)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        if i not in common:\n            common += [i]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).union(set(l2)) - set(l1).symmetric_difference(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection.__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l1).intersection(l2).__contains__, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).intersection, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n            break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon = ', '.join(map(str, common))",
    "imports": ""
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2)))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.array(list(set(l1) & set(l2))).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)",
    "imports": "import numpy as np"
   },
   {
    "code": "common = np.intersect1d(l1, l2).tolist()\ncommon = [str(i) for i in common]\ncommon = ', '.join(common)\ncommon = '[' + common + ']'",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1))\ncommon = list(Counter(common).elements())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1))\ncommon = list(filter(lambda i: i not in common, set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\n[common.append(i) for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1) and (i not in common)]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == 1 and (l2.count(i) == 1):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1.copy()\nl3.extend([item for item in l2 if item not in l1])\ncommon = [item for item in l1 + l2 if item in l3]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(set(l1).symmetric_difference(l2), lambda x: x in l1 or x in l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(l1.__contains__, l2))",
    "imports": ""
   },
   {
    "code": "common = filter(lambda i: i in l2, l1)",
    "imports": ""
   },
   {
    "code": "common = []\nl1_set = set(l1)\nl2_set = set(l2)\nfor item in l1_set:\n    if item in l2_set:\n        common.append(item)",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x + y, map(lambda x: [x] if x in l1 and x in l2 else [], l1))",
    "imports": "import functools"
   },
   {
    "code": "common = list(reduce(set.intersection, [set(lst) for lst in [l1, l2]]))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list(set([x for x in itertools.chain(l1, l2) if list(itertools.chain(l1, l2)).count(x) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, l1 + l2).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2).astype(int)[pd.Series(l1).isin(l2).astype(int) == 1])",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(set(itertools.chain(l1, l2)) - set(set(l1) ^ set(l2)))",
    "imports": "import itertools"
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if l1.count(x) > 1 and x not in common:\n        common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "c = np.array(l1)\ncommon = list(set(c).intersection(l2))",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list({i for i in l1 if i in l2})",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda l1, l2: l1 if l1 in l2 else l2, (l1, l2))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = list((x for x in set(l1) if x in l2))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda item: item in l2 and item not in common, l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = [x for x in l2 if x in c]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for (i, x) in enumerate(l1) if x in l2 and l1.index(x) == i and (x not in common)]",
    "imports": ""
   },
   {
    "code": "",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1.intersection(s2)]",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1).union(set(l2)) if i in l1 and i in l2]",
    "imports": ""
   },
   {
    "code": "s1 = set(l1)\ns2 = set(l2)\ncommon = [i for i in s1 if i in s2]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, l1)) if statistics.median(l1) > len(l2) else [x for x in l1 if x in l2]",
    "imports": "import statistics"
   },
   {
    "code": "c = Counter(l1)\ncommon = list(set(l2) & set(c.keys()))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(map(lambda x: x if x in set(l2) else '', l1))\ncommon.remove('')",
    "imports": ""
   },
   {
    "code": "common = intersect1d(l1, l2).tolist()",
    "imports": "from numpy import intersect1d"
   },
   {
    "code": "for i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x + (y not in x and [y] or []), l1, [])",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y not in x and y in l2 else x + [y] if y not in x else x, l1, [])",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1 + l2):\n    if x in l1 and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))",
    "imports": "import itertools"
   },
   {
    "code": "def check_common(l1: list[Any], l2: list[Any]) -> list:\n    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in common:\n                common.append(i)\n    return common",
    "imports": "from typing import Any"
   },
   {
    "code": "common = set(l1) - set(l2)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = list(reduce(lambda a, b: a - set(b) if isinstance(b, list) else a - {b}, l2, set(l1)))",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = [item for item in set(l1) if item in l2 and item not in common]",
    "imports": ""
   },
   {
    "code": "for i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = [val for val in set(l1) & set(l2) if val not in common]",
    "imports": ""
   },
   {
    "code": "c = list(itertools.filterfalse(lambda elem: elem not in l2, l1))\ncommon = list(filter(lambda elem: elem not in c, l1))",
    "imports": "import itertools"
   },
   {
    "code": "common = [elem for (elem, count) in collections.Counter(l1).items() if count > 1 and elem in l2]",
    "imports": "import collections"
   },
   {
    "code": "common = [value for value in counter1 if value in counter2 for i in range(min([counter1[value], counter2[value]]))]",
    "imports": "from collections import Counter"
   },
   {
    "code": "counter1 = {}\ncounter2 = {}\nfor i in l1:\n    counter1[i] = counter1.get(i, 0) + 1\nfor i in l2:\n    counter2[i] = counter2.get(i, 0) + 1\ncommon = list(set(counter1) & set(counter2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1 and l2[i] not in common:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x not in l2, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and i not in common]\nfor i in common:\n    common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for (i, val) in enumerate(l1) if val in l2]",
    "imports": ""
   },
   {
    "code": "l1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(common)",
    "imports": ""
   },
   {
    "code": "counter = defaultdict(int)\nfor i in l1:\n    counter[i] += 1\ncommon = []\nfor i in l2:\n    if counter[i] > 0:\n        common.append(i)\ncommon = list(common)",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "c = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
    "imports": "import itertools"
   },
   {
    "code": "(common, _) = [list(x) for x in zip(*filter(lambda x: x[0] in l2, zip(l1, range(len(l1)))))]",
    "imports": ""
   },
   {
    "code": "common = list(set(itertools.filterfalse(lambda x: x not in set(l2), l1)))",
    "imports": "import itertools"
   },
   {
    "code": "common = [i for i in itertools.product(l1, l2) if i[0] == i[1]]",
    "imports": "import itertools"
   },
   {
    "code": "common = reduce(lambda acc, el: acc.append(el) or acc, filter(lambda el: el in l2, l1), [])",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(lambda x: x in set(l2), l1))",
    "imports": ""
   },
   {
    "code": "common = [i for i in l1 if i in l2 if i not in common]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(dict.fromkeys(filter(lambda x: x in l2 and x not in common, l1)))",
    "imports": ""
   },
   {
    "code": "def find_common_elements(l1, l2):\n    return list(set(l1) & set(l2))\ncommon = find_common_elements(l1, l2)",
    "imports": ""
   },
   {
    "code": "common = pd.concat([pd.Series(l1), pd.Series(l2)]).drop_duplicates().reset_index(drop=True)",
    "imports": ""
   },
   {
    "code": "union = list(set(l1) | set(l2))\ncommon = []\nfor el in union:\n    if el in l1 and el in l2:\n        common.append(el)",
    "imports": ""
   },
   {
    "code": "common = list(set([i[0] for i in list(product(l1, l2)) if i[0] == i[1]]))",
    "imports": "from itertools import product"
   },
   {
    "code": "common = set(l1) & set(l2)\ncommon += [x for x in l1 if x in l2 and x not in common]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l2:\n    if x in l1 and x not in common:\n        common.append(x)\nfor x in l1:\n    if x in l2 and x not in common:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = np.intersect1d(l1, l2, assume_unique=True).tolist()\ncommon.extend(np.intersect1d(l2, l1, assume_unique=True).tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in l1:\n    if x not in common and x in l2:\n        common.append(x)",
    "imports": ""
   },
   {
    "code": "common = [elem for elem in l1 if elem in l2]\ncommon.extend([elem for elem in l2 if elem not in common])\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, l1)) + list(filter(lambda i: i in l1, l2))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2) - set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor item in set(l1):\n    if item in l2:\n        common.append(item)\nfor item in set(l2):\n    if item in l1:\n        if item not in common:\n            common.append(item)",
    "imports": ""
   },
   {
    "code": "common = list(set(list(itertools.filterfalse(lambda x: list(itertools.chain(l1, l2)).count(x) == 1, set(list(itertools.chain(l1, l2)))))))",
    "imports": "import itertools"
   },
   {
    "code": "c = Counter(l1 + l2)\ncommon = c.keys()",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [elem for elem in set(l1 + l2) if (l1 + l2).count(elem) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\ni = 0\nwhile i < len(l1):\n    if l1[i] in l2:\n        common.insert(i, l1[i])\n        i = i + 1",
    "imports": ""
   },
   {
    "code": "common_set = set(l1) & set(l2)\ncommon = [i for i in l1 if i in common_set and i not in common]",
    "imports": ""
   },
   {
    "code": "d = defaultdict(int)\nfor val in l1:\n    d[val] += 1\ncount = 0\nfor val in l2:\n    if d[val] > 0:\n        common.append(val)\n        d[val] -= 1\ncommon",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "def common_elements(l1, l2):\n    for item in itertools.chain(l1, l2):\n        if item in l1 and item in l2:\n            yield item\ncommon = list(common_elements(l1, l2))",
    "imports": "import itertools"
   },
   {
    "code": "counts1 = {}\nfor i in l1:\n    if i in counts1:\n        counts1[i] += 1\n    else:\n        counts1[i] = 1\ncounts2 = {}\nfor i in l2:\n    if i in counts2:\n        counts2[i] += 1\n    else:\n        counts2[i] = 1\ncommon = []\nfor key in counts1.keys():\n    if key in counts2.keys():\n        for i in range(min([counts1[key], counts2[key]])):\n            common.append(key)\ncounts1 = Counter(l1)\ncounts2 = Counter(l2)\ncommon = list((counts1 & counts2).elements())\n\ndef default():\n    return 0\ncounts1 = defaultdict(default)\ncounts2 = defaultdict(default)\nfor i in l1:\n    counts1[i] += 1\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for key in counts1.keys() & counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": "from collections import Counter\nfrom collections import defaultdict"
   },
   {
    "code": "counts1 = {i: l1.count(i) for i in set(l1)}\ncounts2 = {i: l2.count(i) for i in set(l2)}\ncommon = [key for key in counts1.keys() if key in counts2.keys() for i in range(min([counts1[key], counts2[key]]))]",
    "imports": ""
   },
   {
    "code": "counts1 = dict.fromkeys(l1, 0)\nfor i in l1:\n    counts1[i] += 1\ncounts2 = dict.fromkeys(l2, 0)\nfor i in l2:\n    counts2[i] += 1\ncommon = [key for (key, value) in chain(counts1.items(), counts2.items()) if value > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "(counter1, counter2) = (Counter(l1), Counter(l2))\ncommon = list((counter1 & counter2).elements())",
    "imports": "import collections.Counter"
   },
   {
    "code": "counter1 = defaultdict(int)\ncounter2 = defaultdict(int)\nfor i in range(len(l1)):\n    counter1[l1[i]] += 1\n    counter2[l2[i]] += 1\ncommon = []\nfor (key, val) in counter1.items():\n    common.extend([key] * min(val, counter2[key]))",
    "imports": ""
   },
   {
    "code": "common = [val for val in l1 if val in l2 and (not common.append(val))]",
    "imports": ""
   },
   {
    "code": "common = [i[0] for i in product(l1, l2) if i[0] == i[1]]",
    "imports": ""
   },
   {
    "code": "common = reduce(lambda x, y: x if y in x else x + [y], l1, [])",
    "imports": "from functools import reduce"
   },
   {
    "code": "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l2)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)\n        if l1.count(i) > 1 and l2.count(i) > 1:\n            for _ in range(min(l1.count(i), l2.count(i)) - 1):\n                common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon_counts = []\nfor i in common:\n    common_counts.append(min(l1.count(i), l2.count(i)))\ncommon = [x for tup in zip(common, common_counts) for x in tup]",
    "imports": ""
   },
   {
    "code": "common = []\nfor elem in set(l1):\n    if l2.count(elem) > 0:\n        common += [elem] * min(l1.count(elem), l2.count(elem))",
    "imports": ""
   },
   {
    "code": "common = []\nl1_dict = dict(((i, l1.count(i)) for i in set(l1)))\nl2_dict = dict(((i, l2.count(i)) for i in set(l2)))\nfor key in l1_dict:\n    if key in l2_dict:\n        common += [key] * min(l1_dict[key], l2_dict[key])",
    "imports": ""
   },
   {
    "code": "common = list(itertools.chain.from_iterable(((elem,) * min(l1.count(elem), l2.count(elem)) for elem in set(l1))))",
    "imports": "import itertools"
   },
   {
    "code": "common = list(filter(lambda x: l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filterfalse(set(l2).__contains__, set(l1)))",
    "imports": "from itertools import filterfalse"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1[::-1].index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.index(x, l1.index(x) + 1) and (l1.count(x) == 2) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l2.index(x, l2.index(x) + 1)) and (x not in set(l1) - set(l2))]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == l2.count(x), set(l1)))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) if i in l2 and l1.count(i) == l2.count(i)]",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == l2.count(x), l1)).intersection(set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == l2.count(x), set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2 and l1.count(i) == l2.count(i):\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "common = list(filter(l2.__getitem__, l1))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "c1 = Counter(l1)\nc2 = Counter(l2)\ncommon = [x for x in c1.keys() & c2.keys() if c1[x] == 1 and c2[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1]\ncommon = [x for x in common if l1.index(x) == l1.rindex(x)]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2, functools.reduce(lambda x, y: x + y, l1)))",
    "imports": "import functools"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += i",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))\ncommon.reverse()",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2 and i not in set(common), l1))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda i: i in l2, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(dict.fromkeys(common)))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [i for i in common if common.count(i) == 1] + [i for i in common if common.count(i) > 1] * 2",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.append(i)\n            common.append(i)\n        common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common += [i] * 2\n    common = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [i for i in set(l1) & set(l2) if Counter(l1)[i] == Counter(l2)[i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) <= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) >= l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x)]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) == l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) < l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) > l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) != l2.index(x) and (l1.index(x) != l2.index(x)) and (l1.index(x) == l1.index(x)) and (l1.index(x) == l2.index(x))]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (x not in common)]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[0:common.index(x)]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) == 1:\n        common.append(i)\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for (i, x) in enumerate(common) if x not in common[:i]]",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2 and v == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in l2 and l1.count(x) == 1, l1))\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).intersection(l2))\ncommon = [x for x in common if l1.count(x) == 1 and x not in common[common.index(x) + 1:]]\ncommon = list(set(common))\ncommon = [x for x in common if x not in common[common.index(x) + 1:]]",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\ncommon = [x for x in common if l1.count(x) == 1 and common.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if common.count(x) == 0:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) == 1 and l2.count(x) == 1, set(l1) & set(l2)))",
    "imports": ""
   },
   {
    "code": "common = list(set(filter(lambda x: l1.count(x) == 1, l1)) & set(filter(lambda x: l2.count(x) == 1, l2)))",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1 and l2.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = []\nfor x in set(l1):\n    if x in l2 and l1.count(x) == 1:\n        if x not in common:\n            common.append(x)\n        else:\n            common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = list(set(l1).union(l2))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: x.lower())",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(common, key=lambda x: str(x), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\nfor i in l2:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = sorted(list(set(common)), reverse=True)",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            continue\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        elif i in common:\n            pass\n    else:\n        break",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor i in l3:\n    if l3.count(i) > 1 and i not in common:\n        common.append(i)\ncounts = Counter(l1 + l2)\ncommon = [i for i in counts if counts[i] > 1]\ncommon = [i for i in set(l1) & set(l2)]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2), l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(set(l2).__contains__, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(pd.Series(l1).isin(l2)[pd.Series(l1).isin(l2)].index)",
    "imports": "import pandas as pd"
   },
   {
    "code": "common = list(functools.reduce(lambda i, j: i & j, (set(x) for x in [l1, l2])))",
    "imports": "import functools"
   },
   {
    "code": "common = [k for (k, v) in defaultdict(int, Counter(l1) + Counter(l2)).items() if v > 1]",
    "imports": "from collections import defaultdict"
   },
   {
    "code": "common = list(filter(lambda x: l1.count(x) > 0 and l2.count(x) > 0, set(l1)))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in l1 and x in l2, set(l1 + l2)))",
    "imports": ""
   },
   {
    "code": "common = list((dict.fromkeys(l1) & dict.fromkeys(l2)).keys())",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.index(x) == l2.index(x), l1))",
    "imports": ""
   },
   {
    "code": "c = Counter(l1)\ncommon = list((Counter(l2) & c).elements())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in range(len(l2)):\n    if l2[i] in l1:\n        common.append(l2[i])",
    "imports": ""
   },
   {
    "code": "common = [k for (k, v) in Counter(l1).items() if k in l2] * min(Counter(l1).values())",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [x for x in l1 if x in l2 and x not in common]\ncommon = list(dict.fromkeys(common))",
    "imports": ""
   },
   {
    "code": "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(set(common))",
    "imports": ""
   },
   {
    "code": "common = sorted(set(l1).intersection(l2))",
    "imports": ""
   },
   {
    "code": "common = sorted(list(set(l1).intersection(set(l2))))",
    "imports": ""
   },
   {
    "code": "common = functools.reduce(lambda x, y: x if y in l2 else x + [y], l1, [])",
    "imports": "import functools"
   },
   {
    "code": "common = np.setdiff1d(l1, l2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x not in l2]\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "common = list(set(l1) & set(l2))\nfor x in common:\n    if l1.count(x) > 1:\n        common.remove(x)",
    "imports": ""
   },
   {
    "code": "common = filter(lambda x: x in l2 and l1.count(x) == 1, l1)",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.index(x) == l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in set(l1) & set(l2) if l1.count(x) == 1]",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l1.index(x) == l1.rindex(x))]",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(set(l1).intersection(set(l2)))\ncommon = [x for x in common if l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = list(set(common))\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(common)",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in l1 if i in l2 and l1.count(i) == 1]\ncommon = list(set(common))\ncommon.sort()",
    "imports": ""
   },
   {
    "code": "l1_count = Counter(l1)\ncommon = [x for x in set(l2) if l1_count[x] == 1]\ncommon = sorted(list(set(common)))",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, l1))\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(set([x for x in l1 if x in set(l2)]) - set([x for x in l1 if l1.count(x) > 1]))",
    "imports": ""
   },
   {
    "code": "common = [x for x in l1 if x in set(l2) and l1.count(x) == 1]\ncommon = list(set(common))",
    "imports": ""
   },
   {
    "code": "common = list(filter(lambda x: x in set(l2) and l1.count(x) == 1, set(l1)))",
    "imports": ""
   },
   {
    "code": "combined = sorted(l1 + l2)\ngroups = groupby(combined)\ncommon = [k for (k, g) in groups if len(list(g)) > 1]",
    "imports": "from itertools import groupby"
   },
   {
    "code": "combined = l1 + l2\ncounts = Counter()\nfor val in set(combined):\n    counts[val] = combined.count(val)\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "combined = list(itertools.chain(l1, l2))\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": "import itertools"
   },
   {
    "code": "combined = l1\ncombined.extend(l2)\ncommon = []\nfor i in set(combined):\n    if combined.count(i) > 1:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "counts = np.bincount(l1 + l2)\ncommon = np.where(counts > 1)[0].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "counts = reduce(add, map(Counter, [l1, l2]))\ncommon = [key for (key, value) in counts.items() if value > 1]",
    "imports": "from functools import reduce\nfrom operator import add"
   },
   {
    "code": "elements = chain(l1, l2)\ncommon = {element for element in elements if list(elements).count(element) > 1}",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = list(set(list(itertools.chain(l1, l2))))\ncommon = [i for i in common if l1.count(i) > 0 and l2.count(i) > 0]",
    "imports": "import itertools"
   },
   {
    "code": "counts = dict()\nfor i in set(chain(l1, l2)):\n    counts[i] = l1.count(i) + l2.count(i)\ncommon = [k for (k, v) in counts.items() if v > 1]",
    "imports": "from itertools import chain"
   },
   {
    "code": "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)\nfor i in set(l2):\n    if i in l1 and i not in common:\n        common.append(i)",
    "imports": ""
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in set(l3) if l3.count(i) > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set([i for i in l3 if l3.count(i) > 1]))",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list({i for i in l3 if l3.count(i) > 1})",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = [i for i in Counter(l3).elements() if Counter(l3)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in l3 if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = set([i for i in l3 if counts[i] > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncounts = Counter(l3)\ncommon = [i for i in counts.elements() if counts[i] > 1 and i not in common]",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = []\nfor i in np.unique(l3):\n    if np.count_nonzero(l3 == i) > 1:\n        common.append(i)",
    "imports": "import numpy as np"
   },
   {
    "code": "l3 = np.concatenate((l1, l2))\ncommon = [i for i in np.unique(l3) if np.count_nonzero(l3 == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = [i for i in np.unique(np.concatenate((l1, l2))) if np.count_nonzero(np.concatenate((l1, l2)) == i) > 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "common = list(set([i for i in l1 + l2 if (l1 + l2).count(i) > 1]))",
    "imports": "import itertools"
   },
   {
    "code": "l3 = l1 + l2\ncommon = list(set(filter(lambda i: l3.count(i) > 1, l3)))",
    "imports": "import functools"
   },
   {
    "code": "common = list(set(filter(lambda i: (l1 + l2).count(i) > 1, l1 + l2)))",
    "imports": "import functools"
   },
   {
    "code": "common = [i for i in Counter(l1 + l2).elements() if Counter(l1 + l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = [i for i in Counter(l1).keys() & Counter(l2).keys() if Counter(l1)[i] > 1 and Counter(l2)[i] > 1]",
    "imports": "from collections import Counter"
   },
   {
    "code": "common = []\nfor i in set(l1).intersection(l2):\n    if i not in common:\n        common.append(i)",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = set([elem for (elem, count) in Counter(l3).items() if count > 1])",
    "imports": "from collections import Counter"
   },
   {
    "code": "l3 = l1 + l2\ncommon = []\nfor elem in set(l3):\n    if l3.count(elem) > 1:\n        common.append(elem)",
    "imports": "from collections import Counter"
   }
  ]
 }
}