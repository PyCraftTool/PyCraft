{
 "temperature": 0.3,
 "iteration-1": {
  "num-tests": 10,
  "num-correct": 146,
  "num-incorrect": 656,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "array = [1, 2, 3, 4, 5]",
    "assertion": "assert cum_arr == [1, 3, 6, 10, 15]"
   },
   {
    "init": "array = [0, 0, 0, 0, 0]",
    "assertion": "assert cum_arr == [0, 0, 0, 0, 0]"
   },
   {
    "init": "array = [-1, -2, -3, -4, -5]",
    "assertion": "assert cum_arr == [-1, -3, -6, -10, -15]"
   },
   {
    "init": "array = [1.5, 2.5, 3.5, 4.5, 5.5]",
    "assertion": "assert cum_arr == [1.5, 4.0, 7.5, 12.0, 17.5]"
   },
   {
    "init": "array = []",
    "assertion": "assert cum_arr == []"
   },
   {
    "init": "array = [1]",
    "assertion": "assert cum_arr == [1]"
   },
   {
    "init": "array = ['1', '2', '3', '4', '5']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, '3', 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, None, 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = []\n    for i in range(len(arr)):\n        cum_arr.append(sum(arr[:i + 1]))\n    return cum_arr\ncum_arr = cum_sum(array)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\ncumulative_sum = 0\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr[i] = cumulative_sum",
    "imports": ""
   },
   {
    "code": "cum_arr = []\npartial_sum = 0\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": ""
   },
   {
    "code": "csum = 0\ncum_arr = []\nfor i in range(len(array)):\n    csum += array[i]\n    cum_arr.append(csum)",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(x, y):\n    x.append(x[-1] + y)\n    return x\ncum_arr = functools.reduce(cumulative_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr += [sum_arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [sum_arr[i] for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "def add_cumulative_sum(result, element):\n    result.append(result[-1] + element)\n    return result\narr = functools.reduce(add_cumulative_sum, array, [0])\ncum_arr = arr[1:]",
    "imports": "import functools"
   },
   {
    "code": "def cum_sum(x, y):\n    x.append(y + x[-1])\n    return x\ncum_arr = functools.reduce(cum_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "partial_sum = 0\ncum_arr = []\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr.append(math.fsum(array[:array.index(i) + 1]))",
    "imports": "import math"
   },
   {
    "code": "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(statistics.fsum(array[:i]))",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[:i + 1].sum() for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [np.sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    cum_arr.append(sum(arr[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in arr:\n    sum += i\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for (i, val) in enumerate(arr)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist() if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:] if len(array) > 0 else []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr.insert(i, sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    if i == len(array) - 1:\n        cum_arr.append(sum(array))\n    else:\n        cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] if len(array) > 0 else []\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "partial_sum = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])\ncum_arr = partial_sum[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [np.sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for (i, value) in enumerate(array)]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": "import math"
   },
   {
    "code": "array_length = len(array)\ncum_arr = []\nsum_val = 0\nfor i in range(array_length):\n    sum_val += array[i]\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\ncount = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:i + 1] = [sum]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [y + x[-1]], array, [0])[1:]",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "array_length = len(array)\ncum_arr = [sum(array[:i + 1]) for i in range(array_length)]",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = []\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.extend([sum])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "new_array = []\nfor i in range(len(array)):\n    cum_sum = sum(array[:i + 1])\n    new_array.append(cum_sum)\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[i] + sum(array[:i]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "total_sum = sum(array)\ncum_arr = [sum(array[:i]) for i in range(1, len(array) + 1)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncount = 0\nlist_sum = []\nfor i in range(len(arr)):\n    count += arr[i]\n    list_sum.append(count)\ncum_arr = list_sum",
    "imports": ""
   },
   {
    "code": "arr = array\nresult = []\ncurrent_sum = 0\nfor elem in arr:\n    current_sum += elem\n    result.append(current_sum)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "count = math.fsum(array)\ncum_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cum_sum += array[i]\n    cum_arr.append(cum_sum)",
    "imports": "import math"
   },
   {
    "code": "count = math.fsum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "count = 0\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor index in range(len(array)):\n    sum_tmp = 0\n    for i in range(index + 1):\n        sum_tmp += array[i]\n    cum_arr.append(sum_tmp)",
    "imports": ""
   },
   {
    "code": "count = 0\nsum_arr = []\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    sum_arr.append(count)\n    cum_arr.append(sum_arr[i])",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "c = 0\na = []\ncum_arr = []\nfor i in array:\n    c += i\n    cum_arr.append(c)\n    a.append(i)\ncount = sum(a)",
    "imports": ""
   },
   {
    "code": "count = 0\nfor value in array:\n    count += value\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "arr = sum(array)\nincremental_sum = 0\ncum_arr = []\nfor val in array:\n    incremental_sum += val\n    cum_arr.append(incremental_sum)",
    "imports": "import math"
   },
   {
    "code": "arr: List[int] = []\nsum_val = 0\ncum_arr = []\nfor val in array:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": "from typing import List"
   },
   {
    "code": "count = 0\nresult = []\nfor i in range(len(array)):\n    count += array[i]\n    result.append(count)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda accum, x: accum + [accum[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "array_length = len(array)\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor (index, value) in enumerate(array):\n    sum = 0\n    for i in range(index + 1):\n        sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [sum(array[:i]) + array[i] for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = round(cum_arr[i], 2)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = list(map(lambda x: round(x, 2), cum_arr))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [math.floor(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = list(reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(functools.reduce(lambda x, y: x + y, array[:i + 1]))",
    "imports": "import functools"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor (i, val) in enumerate(cum_arr):\n    cum_arr[i] = round(val, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\ncurrent_sum = 0\nfor x in array:\n    current_sum += x\n    cum_arr.append(round(current_sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = round(sum(array[:i + 1]), 2)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = np.round(cum_arr, 2).tolist()\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = int(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [int(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in list(arr_sum)]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = list(map(lambda x: round(x, 2), arr_sum))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [float('%.2f' % x) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(round(array[i], 2))\n    else:\n        cum_arr.append(round(array[i] + cum_arr[i - 1], 2))",
    "imports": ""
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import itertools"
   },
   {
    "code": "arr_sum = [math.fsum(array[:i + 1]) for i in range(len(array))]\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [round(sum(array[:i + 1]), 2) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = [round(sum(array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [round(functools.reduce(lambda x, y: x + y, array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import functools"
   },
   {
    "code": "indexes = range(len(array))\ncum_arr = [round(sum(array[:i + 1]), 2) for i in indexes]",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [round(x, 2) for x in accumulate(array)]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1])) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor num in arr:\n    running_total += num\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor index in range(len(arr)):\n    running_total += arr[index]\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor num in arr:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "cum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(list(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [int(math.fsum(array[:i + 1])) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.fromiter(itertools.accumulate(array), dtype=int)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "def cumsum(array):\n    cum_arr = np.empty(len(array))\n    sum_arr = 0\n    for i in range(len(array)):\n        sum_arr += array[i]\n        cum_arr[i] = sum_arr\n    return cum_arr\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor i in range(len(sum_arr)):\n    cum_arr.append(sum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor (i, val) in enumerate(sum_arr):\n    cum_arr.append(val)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array(array).cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\nresult = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr[::-1])[::-1]\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] + [array[i] + cum_arr[i - 1] for i in range(1, len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor (i, val) in enumerate(arr):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "row_sum = np.sum(array, axis=0)\ncum_arr = np.cumsum(row_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [x for x in cum_arr if x > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1]) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\nsum = cum_arr[-1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\nsum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(cum_arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr) - 1):\n    cum_arr[i + 1] += cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i > 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]\n    cum_arr[i - 9] = cum_arr[i - 9] + cum_arr[i - 10]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i != 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * np.prod(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [statistics.mean(array[:i + 1]) for i in range(len(array))]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    np.put(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for (i, _) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.full_like(array, arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.ones_like(array) * arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.empty_like(array)\ncum_arr.fill(arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.array([arr_sum] * len(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.full_like(array, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\ncum_arr.fill(np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.cumsum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.cumsum(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ni = 0\nwhile i < len(array):\n    cum_arr[i] = np.sum(array[:i + 1])\n    i += 1\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(array)\ncum_arr = np.zeros(n)\nfor i in range(n):\n    sum = 0\n    for j in range(i + 1):\n        sum += array[j]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.any():\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.any(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.size(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.count_nonzero(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.sum(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.prod(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.max(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.min(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = int(math.floor(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(float(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) + 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) - 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) * 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) / 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor (i, val) in enumerate(array):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr]",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = [sum(cum_arr[:i + 1]) for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for value in array])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = float(cum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    array[index] = array[index - 1] + array[index]\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "array[1:] = np.cumsum(array[1:])\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    cumulative_sum = array[index - 1] + array[index]\n    array[index] = cumulative_sum\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "def add_and_append(x, y):\n    if len(x) > 0:\n        x.append(x[-1] + y)\n    else:\n        x.append(y)\ncum_arr = []\nfunctools.reduce(add_and_append, array, cum_arr)",
    "imports": "import functools"
   },
   {
    "code": "numpy = __import__('numpy')\narr = numpy.array(array)\ncum_arr = numpy.cumsum(arr)",
    "imports": ""
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\ncum_arr = [sum] * count",
    "imports": ""
   },
   {
    "code": "array = np.cumsum(array)\ncum_arr = array\narray = np.cumsum(array)\ncum_arr = array\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np\nimport numpy as np\nimport numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:])\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulative_sum = 0\nfor i in range(1, len(array)):\n    array[i] = cumulative_sum + array[i]\n    cumulative_sum = array[i]\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "sum_arr = np.add.accumulate(array)\nlen_arr = np.arange(1, len(array) + 1)\ncum_arr = np.divide(sum_arr, len_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulated_array = np.cumsum(np.array(array))\ncum_arr = cumulated_array",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(operator.add, array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "a = np.asarray(array)\ncum_arr = a.cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.count_nonzero(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = reduce(operator.add, array)\ncum_arr = []\nsum_val = 0\nfor i in array:\n    sum_val += i\n    cum_arr.append(sum_val)",
    "imports": "from functools import reduce\nimport operator"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\narr_sum = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))\narr = np.array(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array_np = np.array(array)\ncount = np.sum(array_np)\ncum_arr = np.cumsum(array_np)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.array(array).sum()\ncum_arr = np.asarray(array).cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(lambda a, b: a + b, array)\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "count = sum(array)\ncum_arr = [0] * len(array)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + y, array)\ntemp = 0\ncum_arr = [(temp := (temp + val)) for val in array]",
    "imports": "import functools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(np.array(arr))\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ntax_cum_arr = np.cumsum(arr)\nsum_arr = [tax_cum_arr[i] + (tax_cum_arr[i - 1] if i > 0 else 0) for i in range(len(arr))]\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = list(np.cumsum(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(np.array(sum_arr))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.roll(np.cumsum(array), 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nnp.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [sum_arr[i] for i in range(len(sum_arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(math.floor(sum))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.roll(cum_arr, 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if x >= 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if round(x, 2) > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.around(cum_arr, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum.tolist(), 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array([round(num, 2) for num in arr_sum])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.around(arr_sum, decimals=2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = round(sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([round(sum(array[:i + 1]), 2) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = arr.sum()\ncum_arr = arr.cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return list(itertools.accumulate(arr))\ncum_arr = cumsum(array)",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(a, b):\n    return a + b\ncum_arr = functools.reduce(cumsum, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = statistics.mean(cum_arr)",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(list(accumulate(array)))",
    "imports": "from itertools import accumulate\nimport numpy as np"
   },
   {
    "code": "sum = np.cumsum(array)\ncum_arr = np.insert(sum, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "partial_sum = np.cumsum(array)\ncum_arr = partial_sum[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = np.array(arr_sum)",
    "imports": "import itertools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = list(itertools.accumulate(arr))\n    return cum_arr",
    "imports": "import itertools"
   },
   {
    "code": "def add(a, b):\n    return a + b\ncum_arr = functools.reduce(add, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.insert(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.append(cum_arr, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.concatenate([cum_arr, [sum]])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)\ncum_arr = np.delete(cum_arr, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "func = lambda x, y: x + y\ncum_arr = functools.reduce(func, array, initial=0)\ncum_arr = [cum_arr] + [cum_arr + i for i in array]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [np.sum(array)] * len(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\narr_sum = np.sum(array)\nfor i in range(len(array)):\n    cum_arr.append(arr_sum)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum + np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(np.add.reduce(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum((np.sum(array[:i + 1]) for i in range(len(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array([math.floor(sum(array[:i + 1])) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='unsafe')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='F')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='A')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='K')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=3)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=4)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=5)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=6)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=7)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=8)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=9)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=11)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=12)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=13)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=14)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=15)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=16)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=17)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=18)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=19)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=20)",
    "imports": "import numpy as np"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = list(itertools.accumulate(array))\nelse:\n    cum_arr = []",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[0, cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.delete(cum_arr, -1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate((np.array([0]), cum_arr), axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack((np.array([0]), cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[np.array([0]), cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(str)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] - 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], [array[0]])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, lambda acc, x: acc + x))",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array, lambda acc, x: acc + x)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "count = 0\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "list(itertools.accumulate(array, initial=0))",
    "imports": "import itertools"
   },
   {
    "code": "functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.add.reduceat(array, np.arange(len(array) + 1))[:-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "arr = list(itertools.accumulate(array))\ncum_arr = arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array([array[:i + 1].sum() for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.add.accumulate(arr)\nnew_arr = list(itertools.accumulate(arr))\ncum_arr = np.array(new_arr)\ncumulative_sum = 0\nnew_arr = []\nfor i in range(len(arr)):\n    cumulative_sum += arr[i]\n    new_arr.append(cumulative_sum)\ncum_arr = np.array(new_arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "sums = list(itertools.accumulate(array))\ncum_arr = [0] + sums",
    "imports": "import itertools"
   },
   {
    "code": "sums = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])\ncum_arr = sums",
    "imports": "import functools"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = arr.copy()\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = arr[0]\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    if i == 0:\n        cum_arr[i] = arr[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor value in arr:\n    count += value\ncum_arr = count",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor value in arr:\n    count += value\ncum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], arr, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [statistics.mean(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncount = np.zeros(len(arr))\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    count[i] = arr[i]\n    if i > 0:\n        cum_arr[i] = cum_arr[i - 1] + count[i]\n    else:\n        cum_arr[i] = count[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(arr)):\n    count += arr[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(arr, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(arr)\ncum_arr = np.zeros(n)\ncum_arr[0] = arr[0]\nfor i in range(1, n):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iter_arr = iter(array)\nnext(iter_arr)\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(iter_arr, i)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(array, i + 1)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[0:i]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
    "imports": ""
   },
   {
    "code": "rev_arr = np.flip(array)\ncum_arr = np.cumsum(rev_arr)\ncum_arr = np.flip(cum_arr[:-1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_len = len(arr)\ncum_arr = np.zeros(arr_len)\nfor i in range(arr_len):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.cumsum(arr)\ncum_arr = count",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.ceil(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array)) if len(array) > 0 else []",
    "imports": "import itertools"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])\nelse:\n    cum_arr = []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = 0\nfor (index, value) in enumerate(array):\n    cum_arr += value",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sums = list(itertools.accumulate(array))\ncum_arr = [partial_sums[i] for i in range(len(array))]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[0])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "arr = list(map(functools.partial(functools.reduce, lambda x, y: x + y), [array[:i + 1] for i in range(len(array))]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sum = 0\ncum_arr = [(partial_sum := (partial_sum + value)) for value in arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = arr.cumsum()",
    "imports": ""
   },
   {
    "code": "count = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ncum_arr = arr[:index + 1].cumsum()",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(arr)\ncum_sum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = np.cumsum(arr)\n    return cum_arr\ncum_arr = cum_sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.concatenate(([0], np.cumsum(arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np\nimport array"
   },
   {
    "code": "arr = np.array(array)\ncum_sum = 0\nfor i in range(len(arr)):\n    cum_sum += arr[i]\n    cum_arr.append(cum_sum)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if i == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + arr[i])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = [0] * len(array)\nfor i in range(len(array)):\n    count[i] = sum(array[:i + 1])\ncum_arr = np.array(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = np.zeros(len(arr))\n    sum_arr = 0\n    for i in range(len(arr)):\n        sum_arr += arr[i]\n        cum_arr[i] = sum_arr\n    return cum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(0, 10, size=(3, 4))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(itertools.islice(array, len(array)))\ncum_arr = list(itertools.accumulate(arr))",
    "imports": "import itertools"
   },
   {
    "code": "arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in itertools.count()]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(np.array(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i])\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = list(itertools.accumulate(arr))\ncum_arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i])\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, operator.add))",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])",
    "imports": "import functools"
   },
   {
    "code": "new_list = []\nfor i in range(len(arr)):\n    new_list.append(sum(arr[:i + 1]))\ncum_arr = new_list",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum_val = 0\nfor val in arr:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if len(cum_arr) == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[-1] + arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.arange(9).reshape(3, 3)\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(1, 10, size=(3, 3))\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0]\ncum_arr.extend([sum(array[:i + 1]) for i in range(1, len(array))])",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(array):\n    cum_arr = np.zeros(len(array))\n    cum_arr[0] = array[0]\n    for i in range(1, len(array)):\n        cum_arr[i] = cum_arr[i - 1] + array[i]\n    return cum_arr\ncum_arr = cumulative_sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "np.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [sum(b[:i + 1])], array, []))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = []\naccumulate = 0\nfor i in array:\n    accumulate += array[i]\n    cum_arr.append(accumulate)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda x, y: x + [y + sum(x)], array, [])[1:])",
    "imports": "import itertools\nimport functools"
   },
   {
    "code": "cum_arr = []\ncum_arr.append(array[0])\nfor index in range(1, len(array)):\n    cum_arr.append(cum_arr[index - 1] + array[index])",
    "imports": ""
   },
   {
    "code": "array = np.array(array)\nfor i in range(1, len(array)):\n    array[i] = array[i - 1] + array[i]\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "array = list(accumulate(array))\ncum_arr = array",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "matrix = numpy.array(array)\ncumulative_array = numpy.cumsum(matrix)\nlist_of_arrays = convert_numpy_to_list(matrix)",
    "imports": "import numpy"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr) if isinstance(arr, np.ndarray) else np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "array_length = len(array)\nsum_val = 0\nindices = list(range(1, array_length + 1))\ncum_arr = [(sum_val := (sum_val + array[i])) for i in indices]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(accumulate(array))\ncount = len(cum_arr)",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))\ncount = len(cum_arr)",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "array = list(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(array)\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], array[:1])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))[1:]",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))[1:]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(itertools.accumulate(array))\ncum_arr = array[:-1]",
    "imports": "import itertools"
   },
   {
    "code": "sliced_array = array[:-1]\ncum_arr = np.cumsum(sliced_array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:index + 1]) for (index, value) in enumerate(array[:-1])]",
    "imports": "import math"
   },
   {
    "code": "sum = 0\ncum_arr = []\nfor n in arr:\n    sum += n\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(arr)):\n    if i != 0:\n        cum_arr.append(arr[i] + cum_arr[i - 1])\n    else:\n        cum_arr.append(arr[i])",
    "imports": ""
   },
   {
    "code": "array = pd.Series(array).cumsum().tolist()",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "arr[1:] = np.cumsum(arr[1:])\ncum_arr = arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(arr[1:])\ncum_arr = np.insert(sum_arr, 0, arr[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_copy = array.copy()\nsum_arr = np.cumsum(arr_copy[1:])\ncum_arr = np.insert(sum_arr, 0, arr_copy[0])",
    "imports": ""
   },
   {
    "code": "new_array = np.copy(array)\nnew_array[1:] = np.cumsum(new_array[1:])\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cummulative_arr = np.cumsum(array[1:])\nconcat_arr = np.concatenate(([array[0]], cummulative_arr))\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "array[1:] = np.cumsum(array[1:], dtype=float)\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:], dtype=float)\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "sums = list(itertools.accumulate(array[1:]))\ncum_arr = [array[0]] + sums",
    "imports": "import itertools"
   },
   {
    "code": "cum_sum = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = np.array(cum_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncum_val = array[0]\ncum_arr.append(cum_val)\nfor i in range(1, len(array)):\n    cum_val += array[i]\n    cum_arr.append(cum_val)",
    "imports": "import math"
   },
   {
    "code": "cum_sum = np.cumsum(array)\narray = cum_sum[-1]\ncum_arr = np.append(cum_sum, array[-1])",
    "imports": ""
   },
   {
    "code": "cumulative_sum = array[0]\nindex = 1\ncum_arr = []\ncum_arr.append(cumulative_sum)\nwhile index < len(array):\n    cumulative_sum = cumulative_sum + array[index]\n    cum_arr.append(cumulative_sum)\n    index += 1",
    "imports": ""
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(cumulative_sum)",
    "imports": ""
   },
   {
    "code": "c_count = 0",
    "imports": ""
   },
   {
    "code": "cum_arr = []",
    "imports": ""
   },
   {
    "code": "c_count += val",
    "imports": ""
   },
   {
    "code": "cum_arr.append(c_count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))",
    "imports": ""
   },
   {
    "code": "cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array(array)\ncum_arr = cumsum(arr)",
    "imports": "from numpy import array, cumsum"
   },
   {
    "code": "combinations = list(itertools.combinations(array, 2))\ncum_arr = []\nfor cmb in combinations:\n    cum_arr.append(sum(cmb))",
    "imports": "import itertools"
   },
   {
    "code": "count = reduce(lambda x, y: x + y, array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(count)",
    "imports": "from functools import reduce"
   },
   {
    "code": "count = sum(array)\ncum_array = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "temp = np.zeros(len(array))\nfor (i, num) in enumerate(array):\n    if i == 0:\n        cum_arr[i] = num\n    else:\n        cum_arr[i] = num + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\narray = np.array(data_frame)\ndata_frame['cum_arr'] = np.cumsum(array)\ncum_arr = np.array(data_frame['cum_arr'])",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\ncumulative_array = np.asarray(data_frame.array).cumsum()\ncum_arr = cumulative_array",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])",
    "imports": "import numpy as np\nfrom functools import reduce"
   },
   {
    "code": "arr_temp = list(array)\narr = [arr_temp[i][0] for i in range(len(arr_temp))]\ncount = sum(arr)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(array)):\n    count = count + int(array[i])\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.array(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.array(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.cumsum(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = 0\ncum_arr = []\nfor num in array:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(0, 10, size=(5,))\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum = 0\ncum_arr.append(sum)\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "sum = 0\ncum_arr.append(0)\nfor val in arr:\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(arr, initial=0))",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "sum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\ncum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(arr)\ncum_arr = []\nsum_so_far = 0\nfor element in arr:\n    sum_so_far += element\n    cum_arr.append(sum_so_far)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = sum(array)\ncum_arr = [sum(arr) for arr in itertools.accumulate(array)]",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_vals = arr.sum()\ncum_arr = np.cumsum(sum_vals)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr.flatten())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = []\ncum_arr = []\nfor i in range(array_length):\n    sum_arr.append(sum(array[:i + 1]))\n    cum_arr.append(sum_arr[-1])",
    "imports": ""
   },
   {
    "code": "arr_subsets = list(itertools.accumulate(array))\ncum_arr = [arr_subsets[i] for i in range(array_length)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(array_length):\n    arr_slice = array[:i + 1]\n    cum_arr.append(sum(arr_slice))",
    "imports": ""
   },
   {
    "code": "arr_means = statistics.cumulative_sum(array)\ncum_arr = [arr_means[i] for i in range(array_length)]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = [reduce(lambda a, b: a + b, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "array = np.array(array)\nsum = 0\ncum_arr = list(itertools.accumulate(array, lambda x, y: x + y))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = itertools.accumulate(array, func=lambda x, y: x + y)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "data = pd.Series(array)\ncum_arr = data.cumsum().tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = itertools.accumulate(array, initial=0)",
    "imports": "import itertools"
   }
  ]
 },
 "iteration-2": {
  "num-tests": 15,
  "num-correct": 146,
  "num-incorrect": 656,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "array = [1, 2, 3, 4, 5]",
    "assertion": "assert cum_arr == [1, 3, 6, 10, 15]"
   },
   {
    "init": "array = [0, 0, 0, 0, 0]",
    "assertion": "assert cum_arr == [0, 0, 0, 0, 0]"
   },
   {
    "init": "array = [-1, -2, -3, -4, -5]",
    "assertion": "assert cum_arr == [-1, -3, -6, -10, -15]"
   },
   {
    "init": "array = [1.5, 2.5, 3.5, 4.5, 5.5]",
    "assertion": "assert cum_arr == [1.5, 4.0, 7.5, 12.0, 17.5]"
   },
   {
    "init": "array = []",
    "assertion": "assert cum_arr == []"
   },
   {
    "init": "array = [1]",
    "assertion": "assert cum_arr == [1]"
   },
   {
    "init": "array = ['1', '2', '3', '4', '5']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, '3', 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, None, 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1.5, 2.5, 3.5, 4.5]",
    "assertion": "assert cum_arr == [1.5, 4.0, 7.5, 12.0]"
   },
   {
    "init": "array = [None, None, None]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, '2', 3, '4', 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2.5, '3.5', 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, None, 5]",
    "assertion": "assert 1==1",
    "error": true
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = []\n    for i in range(len(arr)):\n        cum_arr.append(sum(arr[:i + 1]))\n    return cum_arr\ncum_arr = cum_sum(array)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\ncumulative_sum = 0\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr[i] = cumulative_sum",
    "imports": ""
   },
   {
    "code": "cum_arr = []\npartial_sum = 0\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": ""
   },
   {
    "code": "csum = 0\ncum_arr = []\nfor i in range(len(array)):\n    csum += array[i]\n    cum_arr.append(csum)",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(x, y):\n    x.append(x[-1] + y)\n    return x\ncum_arr = functools.reduce(cumulative_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr += [sum_arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [sum_arr[i] for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "def add_cumulative_sum(result, element):\n    result.append(result[-1] + element)\n    return result\narr = functools.reduce(add_cumulative_sum, array, [0])\ncum_arr = arr[1:]",
    "imports": "import functools"
   },
   {
    "code": "def cum_sum(x, y):\n    x.append(y + x[-1])\n    return x\ncum_arr = functools.reduce(cum_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "partial_sum = 0\ncum_arr = []\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr.append(math.fsum(array[:array.index(i) + 1]))",
    "imports": "import math"
   },
   {
    "code": "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(statistics.fsum(array[:i]))",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[:i + 1].sum() for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [np.sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    cum_arr.append(sum(arr[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in arr:\n    sum += i\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for (i, val) in enumerate(arr)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist() if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:] if len(array) > 0 else []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr.insert(i, sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    if i == len(array) - 1:\n        cum_arr.append(sum(array))\n    else:\n        cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] if len(array) > 0 else []\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "partial_sum = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])\ncum_arr = partial_sum[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [np.sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for (i, value) in enumerate(array)]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": "import math"
   },
   {
    "code": "array_length = len(array)\ncum_arr = []\nsum_val = 0\nfor i in range(array_length):\n    sum_val += array[i]\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\ncount = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:i + 1] = [sum]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [y + x[-1]], array, [0])[1:]",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "array_length = len(array)\ncum_arr = [sum(array[:i + 1]) for i in range(array_length)]",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = []\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.extend([sum])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "new_array = []\nfor i in range(len(array)):\n    cum_sum = sum(array[:i + 1])\n    new_array.append(cum_sum)\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[i] + sum(array[:i]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "total_sum = sum(array)\ncum_arr = [sum(array[:i]) for i in range(1, len(array) + 1)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncount = 0\nlist_sum = []\nfor i in range(len(arr)):\n    count += arr[i]\n    list_sum.append(count)\ncum_arr = list_sum",
    "imports": ""
   },
   {
    "code": "arr = array\nresult = []\ncurrent_sum = 0\nfor elem in arr:\n    current_sum += elem\n    result.append(current_sum)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "count = math.fsum(array)\ncum_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cum_sum += array[i]\n    cum_arr.append(cum_sum)",
    "imports": "import math"
   },
   {
    "code": "count = math.fsum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "count = 0\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor index in range(len(array)):\n    sum_tmp = 0\n    for i in range(index + 1):\n        sum_tmp += array[i]\n    cum_arr.append(sum_tmp)",
    "imports": ""
   },
   {
    "code": "count = 0\nsum_arr = []\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    sum_arr.append(count)\n    cum_arr.append(sum_arr[i])",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "c = 0\na = []\ncum_arr = []\nfor i in array:\n    c += i\n    cum_arr.append(c)\n    a.append(i)\ncount = sum(a)",
    "imports": ""
   },
   {
    "code": "count = 0\nfor value in array:\n    count += value\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "arr = sum(array)\nincremental_sum = 0\ncum_arr = []\nfor val in array:\n    incremental_sum += val\n    cum_arr.append(incremental_sum)",
    "imports": "import math"
   },
   {
    "code": "arr: List[int] = []\nsum_val = 0\ncum_arr = []\nfor val in array:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": "from typing import List"
   },
   {
    "code": "count = 0\nresult = []\nfor i in range(len(array)):\n    count += array[i]\n    result.append(count)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda accum, x: accum + [accum[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "array_length = len(array)\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor (index, value) in enumerate(array):\n    sum = 0\n    for i in range(index + 1):\n        sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [sum(array[:i]) + array[i] for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = round(cum_arr[i], 2)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = list(map(lambda x: round(x, 2), cum_arr))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [math.floor(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = list(reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(functools.reduce(lambda x, y: x + y, array[:i + 1]))",
    "imports": "import functools"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor (i, val) in enumerate(cum_arr):\n    cum_arr[i] = round(val, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\ncurrent_sum = 0\nfor x in array:\n    current_sum += x\n    cum_arr.append(round(current_sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = round(sum(array[:i + 1]), 2)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = np.round(cum_arr, 2).tolist()\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = int(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [int(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in list(arr_sum)]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = list(map(lambda x: round(x, 2), arr_sum))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [float('%.2f' % x) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(round(array[i], 2))\n    else:\n        cum_arr.append(round(array[i] + cum_arr[i - 1], 2))",
    "imports": ""
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import itertools"
   },
   {
    "code": "arr_sum = [math.fsum(array[:i + 1]) for i in range(len(array))]\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [round(sum(array[:i + 1]), 2) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = [round(sum(array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [round(functools.reduce(lambda x, y: x + y, array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import functools"
   },
   {
    "code": "indexes = range(len(array))\ncum_arr = [round(sum(array[:i + 1]), 2) for i in indexes]",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [round(x, 2) for x in accumulate(array)]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1])) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor num in arr:\n    running_total += num\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor index in range(len(arr)):\n    running_total += arr[index]\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor num in arr:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "cum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(list(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [int(math.fsum(array[:i + 1])) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.fromiter(itertools.accumulate(array), dtype=int)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "def cumsum(array):\n    cum_arr = np.empty(len(array))\n    sum_arr = 0\n    for i in range(len(array)):\n        sum_arr += array[i]\n        cum_arr[i] = sum_arr\n    return cum_arr\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor i in range(len(sum_arr)):\n    cum_arr.append(sum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor (i, val) in enumerate(sum_arr):\n    cum_arr.append(val)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array(array).cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\nresult = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr[::-1])[::-1]\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] + [array[i] + cum_arr[i - 1] for i in range(1, len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor (i, val) in enumerate(arr):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "row_sum = np.sum(array, axis=0)\ncum_arr = np.cumsum(row_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [x for x in cum_arr if x > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1]) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\nsum = cum_arr[-1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\nsum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(cum_arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr) - 1):\n    cum_arr[i + 1] += cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i > 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]\n    cum_arr[i - 9] = cum_arr[i - 9] + cum_arr[i - 10]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i != 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * np.prod(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [statistics.mean(array[:i + 1]) for i in range(len(array))]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    np.put(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for (i, _) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.full_like(array, arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.ones_like(array) * arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.empty_like(array)\ncum_arr.fill(arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.array([arr_sum] * len(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.full_like(array, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\ncum_arr.fill(np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.cumsum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.cumsum(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ni = 0\nwhile i < len(array):\n    cum_arr[i] = np.sum(array[:i + 1])\n    i += 1\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(array)\ncum_arr = np.zeros(n)\nfor i in range(n):\n    sum = 0\n    for j in range(i + 1):\n        sum += array[j]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.any():\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.any(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.size(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.count_nonzero(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.sum(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.prod(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.max(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.min(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = int(math.floor(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(float(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) + 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) - 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) * 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) / 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor (i, val) in enumerate(array):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr]",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = [sum(cum_arr[:i + 1]) for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for value in array])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = float(cum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    array[index] = array[index - 1] + array[index]\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "array[1:] = np.cumsum(array[1:])\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    cumulative_sum = array[index - 1] + array[index]\n    array[index] = cumulative_sum\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "def add_and_append(x, y):\n    if len(x) > 0:\n        x.append(x[-1] + y)\n    else:\n        x.append(y)\ncum_arr = []\nfunctools.reduce(add_and_append, array, cum_arr)",
    "imports": "import functools"
   },
   {
    "code": "numpy = __import__('numpy')\narr = numpy.array(array)\ncum_arr = numpy.cumsum(arr)",
    "imports": ""
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\ncum_arr = [sum] * count",
    "imports": ""
   },
   {
    "code": "array = np.cumsum(array)\ncum_arr = array\narray = np.cumsum(array)\ncum_arr = array\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np\nimport numpy as np\nimport numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:])\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulative_sum = 0\nfor i in range(1, len(array)):\n    array[i] = cumulative_sum + array[i]\n    cumulative_sum = array[i]\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "sum_arr = np.add.accumulate(array)\nlen_arr = np.arange(1, len(array) + 1)\ncum_arr = np.divide(sum_arr, len_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulated_array = np.cumsum(np.array(array))\ncum_arr = cumulated_array",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(operator.add, array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "a = np.asarray(array)\ncum_arr = a.cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.count_nonzero(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = reduce(operator.add, array)\ncum_arr = []\nsum_val = 0\nfor i in array:\n    sum_val += i\n    cum_arr.append(sum_val)",
    "imports": "from functools import reduce\nimport operator"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\narr_sum = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))\narr = np.array(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array_np = np.array(array)\ncount = np.sum(array_np)\ncum_arr = np.cumsum(array_np)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.array(array).sum()\ncum_arr = np.asarray(array).cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(lambda a, b: a + b, array)\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "count = sum(array)\ncum_arr = [0] * len(array)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + y, array)\ntemp = 0\ncum_arr = [(temp := (temp + val)) for val in array]",
    "imports": "import functools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(np.array(arr))\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ntax_cum_arr = np.cumsum(arr)\nsum_arr = [tax_cum_arr[i] + (tax_cum_arr[i - 1] if i > 0 else 0) for i in range(len(arr))]\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = list(np.cumsum(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(np.array(sum_arr))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.roll(np.cumsum(array), 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nnp.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [sum_arr[i] for i in range(len(sum_arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(math.floor(sum))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.roll(cum_arr, 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if x >= 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if round(x, 2) > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.around(cum_arr, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum.tolist(), 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array([round(num, 2) for num in arr_sum])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.around(arr_sum, decimals=2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = round(sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([round(sum(array[:i + 1]), 2) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = arr.sum()\ncum_arr = arr.cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return list(itertools.accumulate(arr))\ncum_arr = cumsum(array)",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(a, b):\n    return a + b\ncum_arr = functools.reduce(cumsum, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = statistics.mean(cum_arr)",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(list(accumulate(array)))",
    "imports": "from itertools import accumulate\nimport numpy as np"
   },
   {
    "code": "sum = np.cumsum(array)\ncum_arr = np.insert(sum, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "partial_sum = np.cumsum(array)\ncum_arr = partial_sum[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = np.array(arr_sum)",
    "imports": "import itertools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = list(itertools.accumulate(arr))\n    return cum_arr",
    "imports": "import itertools"
   },
   {
    "code": "def add(a, b):\n    return a + b\ncum_arr = functools.reduce(add, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.insert(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.append(cum_arr, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.concatenate([cum_arr, [sum]])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)\ncum_arr = np.delete(cum_arr, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "func = lambda x, y: x + y\ncum_arr = functools.reduce(func, array, initial=0)\ncum_arr = [cum_arr] + [cum_arr + i for i in array]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [np.sum(array)] * len(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\narr_sum = np.sum(array)\nfor i in range(len(array)):\n    cum_arr.append(arr_sum)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum + np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(np.add.reduce(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum((np.sum(array[:i + 1]) for i in range(len(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array([math.floor(sum(array[:i + 1])) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='unsafe')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='F')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='A')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='K')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=3)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=4)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=5)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=6)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=7)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=8)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=9)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=11)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=12)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=13)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=14)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=15)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=16)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=17)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=18)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=19)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=20)",
    "imports": "import numpy as np"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = list(itertools.accumulate(array))\nelse:\n    cum_arr = []",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[0, cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.delete(cum_arr, -1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate((np.array([0]), cum_arr), axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack((np.array([0]), cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[np.array([0]), cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(str)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] - 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], [array[0]])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, lambda acc, x: acc + x))",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array, lambda acc, x: acc + x)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "count = 0\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "list(itertools.accumulate(array, initial=0))",
    "imports": "import itertools"
   },
   {
    "code": "functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.add.reduceat(array, np.arange(len(array) + 1))[:-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "arr = list(itertools.accumulate(array))\ncum_arr = arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array([array[:i + 1].sum() for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.add.accumulate(arr)\nnew_arr = list(itertools.accumulate(arr))\ncum_arr = np.array(new_arr)\ncumulative_sum = 0\nnew_arr = []\nfor i in range(len(arr)):\n    cumulative_sum += arr[i]\n    new_arr.append(cumulative_sum)\ncum_arr = np.array(new_arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "sums = list(itertools.accumulate(array))\ncum_arr = [0] + sums",
    "imports": "import itertools"
   },
   {
    "code": "sums = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])\ncum_arr = sums",
    "imports": "import functools"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = arr.copy()\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = arr[0]\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    if i == 0:\n        cum_arr[i] = arr[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor value in arr:\n    count += value\ncum_arr = count",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor value in arr:\n    count += value\ncum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], arr, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [statistics.mean(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncount = np.zeros(len(arr))\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    count[i] = arr[i]\n    if i > 0:\n        cum_arr[i] = cum_arr[i - 1] + count[i]\n    else:\n        cum_arr[i] = count[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(arr)):\n    count += arr[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(arr, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(arr)\ncum_arr = np.zeros(n)\ncum_arr[0] = arr[0]\nfor i in range(1, n):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iter_arr = iter(array)\nnext(iter_arr)\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(iter_arr, i)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(array, i + 1)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[0:i]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
    "imports": ""
   },
   {
    "code": "rev_arr = np.flip(array)\ncum_arr = np.cumsum(rev_arr)\ncum_arr = np.flip(cum_arr[:-1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_len = len(arr)\ncum_arr = np.zeros(arr_len)\nfor i in range(arr_len):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.cumsum(arr)\ncum_arr = count",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.ceil(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array)) if len(array) > 0 else []",
    "imports": "import itertools"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])\nelse:\n    cum_arr = []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = 0\nfor (index, value) in enumerate(array):\n    cum_arr += value",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sums = list(itertools.accumulate(array))\ncum_arr = [partial_sums[i] for i in range(len(array))]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[0])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "arr = list(map(functools.partial(functools.reduce, lambda x, y: x + y), [array[:i + 1] for i in range(len(array))]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sum = 0\ncum_arr = [(partial_sum := (partial_sum + value)) for value in arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = arr.cumsum()",
    "imports": ""
   },
   {
    "code": "count = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ncum_arr = arr[:index + 1].cumsum()",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(arr)\ncum_sum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = np.cumsum(arr)\n    return cum_arr\ncum_arr = cum_sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.concatenate(([0], np.cumsum(arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np\nimport array"
   },
   {
    "code": "arr = np.array(array)\ncum_sum = 0\nfor i in range(len(arr)):\n    cum_sum += arr[i]\n    cum_arr.append(cum_sum)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if i == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + arr[i])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = [0] * len(array)\nfor i in range(len(array)):\n    count[i] = sum(array[:i + 1])\ncum_arr = np.array(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = np.zeros(len(arr))\n    sum_arr = 0\n    for i in range(len(arr)):\n        sum_arr += arr[i]\n        cum_arr[i] = sum_arr\n    return cum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(0, 10, size=(3, 4))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(itertools.islice(array, len(array)))\ncum_arr = list(itertools.accumulate(arr))",
    "imports": "import itertools"
   },
   {
    "code": "arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in itertools.count()]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(np.array(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i])\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = list(itertools.accumulate(arr))\ncum_arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i])\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, operator.add))",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])",
    "imports": "import functools"
   },
   {
    "code": "new_list = []\nfor i in range(len(arr)):\n    new_list.append(sum(arr[:i + 1]))\ncum_arr = new_list",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum_val = 0\nfor val in arr:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if len(cum_arr) == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[-1] + arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.arange(9).reshape(3, 3)\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(1, 10, size=(3, 3))\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0]\ncum_arr.extend([sum(array[:i + 1]) for i in range(1, len(array))])",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(array):\n    cum_arr = np.zeros(len(array))\n    cum_arr[0] = array[0]\n    for i in range(1, len(array)):\n        cum_arr[i] = cum_arr[i - 1] + array[i]\n    return cum_arr\ncum_arr = cumulative_sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "np.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [sum(b[:i + 1])], array, []))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = []\naccumulate = 0\nfor i in array:\n    accumulate += array[i]\n    cum_arr.append(accumulate)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda x, y: x + [y + sum(x)], array, [])[1:])",
    "imports": "import itertools\nimport functools"
   },
   {
    "code": "cum_arr = []\ncum_arr.append(array[0])\nfor index in range(1, len(array)):\n    cum_arr.append(cum_arr[index - 1] + array[index])",
    "imports": ""
   },
   {
    "code": "array = np.array(array)\nfor i in range(1, len(array)):\n    array[i] = array[i - 1] + array[i]\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "array = list(accumulate(array))\ncum_arr = array",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "matrix = numpy.array(array)\ncumulative_array = numpy.cumsum(matrix)\nlist_of_arrays = convert_numpy_to_list(matrix)",
    "imports": "import numpy"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr) if isinstance(arr, np.ndarray) else np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "array_length = len(array)\nsum_val = 0\nindices = list(range(1, array_length + 1))\ncum_arr = [(sum_val := (sum_val + array[i])) for i in indices]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(accumulate(array))\ncount = len(cum_arr)",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))\ncount = len(cum_arr)",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "array = list(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(array)\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], array[:1])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))[1:]",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))[1:]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(itertools.accumulate(array))\ncum_arr = array[:-1]",
    "imports": "import itertools"
   },
   {
    "code": "sliced_array = array[:-1]\ncum_arr = np.cumsum(sliced_array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:index + 1]) for (index, value) in enumerate(array[:-1])]",
    "imports": "import math"
   },
   {
    "code": "sum = 0\ncum_arr = []\nfor n in arr:\n    sum += n\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(arr)):\n    if i != 0:\n        cum_arr.append(arr[i] + cum_arr[i - 1])\n    else:\n        cum_arr.append(arr[i])",
    "imports": ""
   },
   {
    "code": "array = pd.Series(array).cumsum().tolist()",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "arr[1:] = np.cumsum(arr[1:])\ncum_arr = arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(arr[1:])\ncum_arr = np.insert(sum_arr, 0, arr[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_copy = array.copy()\nsum_arr = np.cumsum(arr_copy[1:])\ncum_arr = np.insert(sum_arr, 0, arr_copy[0])",
    "imports": ""
   },
   {
    "code": "new_array = np.copy(array)\nnew_array[1:] = np.cumsum(new_array[1:])\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cummulative_arr = np.cumsum(array[1:])\nconcat_arr = np.concatenate(([array[0]], cummulative_arr))\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "array[1:] = np.cumsum(array[1:], dtype=float)\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:], dtype=float)\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "sums = list(itertools.accumulate(array[1:]))\ncum_arr = [array[0]] + sums",
    "imports": "import itertools"
   },
   {
    "code": "cum_sum = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = np.array(cum_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncum_val = array[0]\ncum_arr.append(cum_val)\nfor i in range(1, len(array)):\n    cum_val += array[i]\n    cum_arr.append(cum_val)",
    "imports": "import math"
   },
   {
    "code": "cum_sum = np.cumsum(array)\narray = cum_sum[-1]\ncum_arr = np.append(cum_sum, array[-1])",
    "imports": ""
   },
   {
    "code": "cumulative_sum = array[0]\nindex = 1\ncum_arr = []\ncum_arr.append(cumulative_sum)\nwhile index < len(array):\n    cumulative_sum = cumulative_sum + array[index]\n    cum_arr.append(cumulative_sum)\n    index += 1",
    "imports": ""
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(cumulative_sum)",
    "imports": ""
   },
   {
    "code": "c_count = 0",
    "imports": ""
   },
   {
    "code": "cum_arr = []",
    "imports": ""
   },
   {
    "code": "c_count += val",
    "imports": ""
   },
   {
    "code": "cum_arr.append(c_count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))",
    "imports": ""
   },
   {
    "code": "cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array(array)\ncum_arr = cumsum(arr)",
    "imports": "from numpy import array, cumsum"
   },
   {
    "code": "combinations = list(itertools.combinations(array, 2))\ncum_arr = []\nfor cmb in combinations:\n    cum_arr.append(sum(cmb))",
    "imports": "import itertools"
   },
   {
    "code": "count = reduce(lambda x, y: x + y, array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(count)",
    "imports": "from functools import reduce"
   },
   {
    "code": "count = sum(array)\ncum_array = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "temp = np.zeros(len(array))\nfor (i, num) in enumerate(array):\n    if i == 0:\n        cum_arr[i] = num\n    else:\n        cum_arr[i] = num + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\narray = np.array(data_frame)\ndata_frame['cum_arr'] = np.cumsum(array)\ncum_arr = np.array(data_frame['cum_arr'])",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\ncumulative_array = np.asarray(data_frame.array).cumsum()\ncum_arr = cumulative_array",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])",
    "imports": "import numpy as np\nfrom functools import reduce"
   },
   {
    "code": "arr_temp = list(array)\narr = [arr_temp[i][0] for i in range(len(arr_temp))]\ncount = sum(arr)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(array)):\n    count = count + int(array[i])\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.array(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.array(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.cumsum(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = 0\ncum_arr = []\nfor num in array:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(0, 10, size=(5,))\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum = 0\ncum_arr.append(sum)\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "sum = 0\ncum_arr.append(0)\nfor val in arr:\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(arr, initial=0))",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "sum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\ncum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(arr)\ncum_arr = []\nsum_so_far = 0\nfor element in arr:\n    sum_so_far += element\n    cum_arr.append(sum_so_far)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = sum(array)\ncum_arr = [sum(arr) for arr in itertools.accumulate(array)]",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_vals = arr.sum()\ncum_arr = np.cumsum(sum_vals)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr.flatten())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = []\ncum_arr = []\nfor i in range(array_length):\n    sum_arr.append(sum(array[:i + 1]))\n    cum_arr.append(sum_arr[-1])",
    "imports": ""
   },
   {
    "code": "arr_subsets = list(itertools.accumulate(array))\ncum_arr = [arr_subsets[i] for i in range(array_length)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(array_length):\n    arr_slice = array[:i + 1]\n    cum_arr.append(sum(arr_slice))",
    "imports": ""
   },
   {
    "code": "arr_means = statistics.cumulative_sum(array)\ncum_arr = [arr_means[i] for i in range(array_length)]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = [reduce(lambda a, b: a + b, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "array = np.array(array)\nsum = 0\ncum_arr = list(itertools.accumulate(array, lambda x, y: x + y))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = itertools.accumulate(array, func=lambda x, y: x + y)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "data = pd.Series(array)\ncum_arr = data.cumsum().tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = itertools.accumulate(array, initial=0)",
    "imports": "import itertools"
   }
  ]
 },
 "iteration-3": {
  "num-tests": 17,
  "num-correct": 146,
  "num-incorrect": 656,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "array = [1, 2, 3, 4, 5]",
    "assertion": "assert cum_arr == [1, 3, 6, 10, 15]"
   },
   {
    "init": "array = [0, 0, 0, 0, 0]",
    "assertion": "assert cum_arr == [0, 0, 0, 0, 0]"
   },
   {
    "init": "array = [-1, -2, -3, -4, -5]",
    "assertion": "assert cum_arr == [-1, -3, -6, -10, -15]"
   },
   {
    "init": "array = [1.5, 2.5, 3.5, 4.5, 5.5]",
    "assertion": "assert cum_arr == [1.5, 4.0, 7.5, 12.0, 17.5]"
   },
   {
    "init": "array = []",
    "assertion": "assert cum_arr == []"
   },
   {
    "init": "array = [1]",
    "assertion": "assert cum_arr == [1]"
   },
   {
    "init": "array = ['1', '2', '3', '4', '5']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, '3', 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, None, 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1.5, 2.5, 3.5, 4.5]",
    "assertion": "assert cum_arr == [1.5, 4.0, 7.5, 12.0]"
   },
   {
    "init": "array = [None, None, None]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, '2', 3, '4', 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2.5, '3.5', 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, None, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = ['a', 'b', 'c']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, [3, 4], 5]",
    "assertion": "assert 1==1",
    "error": true
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = []\n    for i in range(len(arr)):\n        cum_arr.append(sum(arr[:i + 1]))\n    return cum_arr\ncum_arr = cum_sum(array)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\ncumulative_sum = 0\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr[i] = cumulative_sum",
    "imports": ""
   },
   {
    "code": "cum_arr = []\npartial_sum = 0\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": ""
   },
   {
    "code": "csum = 0\ncum_arr = []\nfor i in range(len(array)):\n    csum += array[i]\n    cum_arr.append(csum)",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(x, y):\n    x.append(x[-1] + y)\n    return x\ncum_arr = functools.reduce(cumulative_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr += [sum_arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [sum_arr[i] for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "def add_cumulative_sum(result, element):\n    result.append(result[-1] + element)\n    return result\narr = functools.reduce(add_cumulative_sum, array, [0])\ncum_arr = arr[1:]",
    "imports": "import functools"
   },
   {
    "code": "def cum_sum(x, y):\n    x.append(y + x[-1])\n    return x\ncum_arr = functools.reduce(cum_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "partial_sum = 0\ncum_arr = []\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr.append(math.fsum(array[:array.index(i) + 1]))",
    "imports": "import math"
   },
   {
    "code": "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(statistics.fsum(array[:i]))",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[:i + 1].sum() for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [np.sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    cum_arr.append(sum(arr[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in arr:\n    sum += i\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for (i, val) in enumerate(arr)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist() if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:] if len(array) > 0 else []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr.insert(i, sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    if i == len(array) - 1:\n        cum_arr.append(sum(array))\n    else:\n        cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] if len(array) > 0 else []\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "partial_sum = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])\ncum_arr = partial_sum[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [np.sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for (i, value) in enumerate(array)]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": "import math"
   },
   {
    "code": "array_length = len(array)\ncum_arr = []\nsum_val = 0\nfor i in range(array_length):\n    sum_val += array[i]\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\ncount = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:i + 1] = [sum]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [y + x[-1]], array, [0])[1:]",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "array_length = len(array)\ncum_arr = [sum(array[:i + 1]) for i in range(array_length)]",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = []\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.extend([sum])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "new_array = []\nfor i in range(len(array)):\n    cum_sum = sum(array[:i + 1])\n    new_array.append(cum_sum)\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[i] + sum(array[:i]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "total_sum = sum(array)\ncum_arr = [sum(array[:i]) for i in range(1, len(array) + 1)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncount = 0\nlist_sum = []\nfor i in range(len(arr)):\n    count += arr[i]\n    list_sum.append(count)\ncum_arr = list_sum",
    "imports": ""
   },
   {
    "code": "arr = array\nresult = []\ncurrent_sum = 0\nfor elem in arr:\n    current_sum += elem\n    result.append(current_sum)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "count = math.fsum(array)\ncum_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cum_sum += array[i]\n    cum_arr.append(cum_sum)",
    "imports": "import math"
   },
   {
    "code": "count = math.fsum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "count = 0\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor index in range(len(array)):\n    sum_tmp = 0\n    for i in range(index + 1):\n        sum_tmp += array[i]\n    cum_arr.append(sum_tmp)",
    "imports": ""
   },
   {
    "code": "count = 0\nsum_arr = []\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    sum_arr.append(count)\n    cum_arr.append(sum_arr[i])",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "c = 0\na = []\ncum_arr = []\nfor i in array:\n    c += i\n    cum_arr.append(c)\n    a.append(i)\ncount = sum(a)",
    "imports": ""
   },
   {
    "code": "count = 0\nfor value in array:\n    count += value\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "arr = sum(array)\nincremental_sum = 0\ncum_arr = []\nfor val in array:\n    incremental_sum += val\n    cum_arr.append(incremental_sum)",
    "imports": "import math"
   },
   {
    "code": "arr: List[int] = []\nsum_val = 0\ncum_arr = []\nfor val in array:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": "from typing import List"
   },
   {
    "code": "count = 0\nresult = []\nfor i in range(len(array)):\n    count += array[i]\n    result.append(count)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda accum, x: accum + [accum[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "array_length = len(array)\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor (index, value) in enumerate(array):\n    sum = 0\n    for i in range(index + 1):\n        sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [sum(array[:i]) + array[i] for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = round(cum_arr[i], 2)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = list(map(lambda x: round(x, 2), cum_arr))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [math.floor(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = list(reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(functools.reduce(lambda x, y: x + y, array[:i + 1]))",
    "imports": "import functools"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor (i, val) in enumerate(cum_arr):\n    cum_arr[i] = round(val, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\ncurrent_sum = 0\nfor x in array:\n    current_sum += x\n    cum_arr.append(round(current_sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = round(sum(array[:i + 1]), 2)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = np.round(cum_arr, 2).tolist()\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = int(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [int(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in list(arr_sum)]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = list(map(lambda x: round(x, 2), arr_sum))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [float('%.2f' % x) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(round(array[i], 2))\n    else:\n        cum_arr.append(round(array[i] + cum_arr[i - 1], 2))",
    "imports": ""
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import itertools"
   },
   {
    "code": "arr_sum = [math.fsum(array[:i + 1]) for i in range(len(array))]\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [round(sum(array[:i + 1]), 2) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = [round(sum(array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [round(functools.reduce(lambda x, y: x + y, array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import functools"
   },
   {
    "code": "indexes = range(len(array))\ncum_arr = [round(sum(array[:i + 1]), 2) for i in indexes]",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [round(x, 2) for x in accumulate(array)]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1])) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor num in arr:\n    running_total += num\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor index in range(len(arr)):\n    running_total += arr[index]\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor num in arr:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "cum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(list(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [int(math.fsum(array[:i + 1])) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.fromiter(itertools.accumulate(array), dtype=int)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "def cumsum(array):\n    cum_arr = np.empty(len(array))\n    sum_arr = 0\n    for i in range(len(array)):\n        sum_arr += array[i]\n        cum_arr[i] = sum_arr\n    return cum_arr\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor i in range(len(sum_arr)):\n    cum_arr.append(sum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor (i, val) in enumerate(sum_arr):\n    cum_arr.append(val)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array(array).cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\nresult = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr[::-1])[::-1]\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] + [array[i] + cum_arr[i - 1] for i in range(1, len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor (i, val) in enumerate(arr):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "row_sum = np.sum(array, axis=0)\ncum_arr = np.cumsum(row_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [x for x in cum_arr if x > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1]) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\nsum = cum_arr[-1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\nsum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(cum_arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr) - 1):\n    cum_arr[i + 1] += cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i > 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]\n    cum_arr[i - 9] = cum_arr[i - 9] + cum_arr[i - 10]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i != 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * np.prod(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [statistics.mean(array[:i + 1]) for i in range(len(array))]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    np.put(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for (i, _) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.full_like(array, arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.ones_like(array) * arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.empty_like(array)\ncum_arr.fill(arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.array([arr_sum] * len(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.full_like(array, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\ncum_arr.fill(np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.cumsum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.cumsum(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ni = 0\nwhile i < len(array):\n    cum_arr[i] = np.sum(array[:i + 1])\n    i += 1\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(array)\ncum_arr = np.zeros(n)\nfor i in range(n):\n    sum = 0\n    for j in range(i + 1):\n        sum += array[j]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.any():\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.any(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.size(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.count_nonzero(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.sum(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.prod(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.max(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.min(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = int(math.floor(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(float(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) + 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) - 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) * 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) / 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor (i, val) in enumerate(array):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr]",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = [sum(cum_arr[:i + 1]) for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for value in array])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = float(cum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    array[index] = array[index - 1] + array[index]\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "array[1:] = np.cumsum(array[1:])\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    cumulative_sum = array[index - 1] + array[index]\n    array[index] = cumulative_sum\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "def add_and_append(x, y):\n    if len(x) > 0:\n        x.append(x[-1] + y)\n    else:\n        x.append(y)\ncum_arr = []\nfunctools.reduce(add_and_append, array, cum_arr)",
    "imports": "import functools"
   },
   {
    "code": "numpy = __import__('numpy')\narr = numpy.array(array)\ncum_arr = numpy.cumsum(arr)",
    "imports": ""
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\ncum_arr = [sum] * count",
    "imports": ""
   },
   {
    "code": "array = np.cumsum(array)\ncum_arr = array\narray = np.cumsum(array)\ncum_arr = array\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np\nimport numpy as np\nimport numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:])\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulative_sum = 0\nfor i in range(1, len(array)):\n    array[i] = cumulative_sum + array[i]\n    cumulative_sum = array[i]\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "sum_arr = np.add.accumulate(array)\nlen_arr = np.arange(1, len(array) + 1)\ncum_arr = np.divide(sum_arr, len_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulated_array = np.cumsum(np.array(array))\ncum_arr = cumulated_array",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(operator.add, array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "a = np.asarray(array)\ncum_arr = a.cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.count_nonzero(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = reduce(operator.add, array)\ncum_arr = []\nsum_val = 0\nfor i in array:\n    sum_val += i\n    cum_arr.append(sum_val)",
    "imports": "from functools import reduce\nimport operator"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\narr_sum = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))\narr = np.array(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array_np = np.array(array)\ncount = np.sum(array_np)\ncum_arr = np.cumsum(array_np)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.array(array).sum()\ncum_arr = np.asarray(array).cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(lambda a, b: a + b, array)\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "count = sum(array)\ncum_arr = [0] * len(array)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + y, array)\ntemp = 0\ncum_arr = [(temp := (temp + val)) for val in array]",
    "imports": "import functools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(np.array(arr))\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ntax_cum_arr = np.cumsum(arr)\nsum_arr = [tax_cum_arr[i] + (tax_cum_arr[i - 1] if i > 0 else 0) for i in range(len(arr))]\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = list(np.cumsum(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(np.array(sum_arr))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.roll(np.cumsum(array), 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nnp.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [sum_arr[i] for i in range(len(sum_arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(math.floor(sum))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.roll(cum_arr, 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if x >= 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if round(x, 2) > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.around(cum_arr, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum.tolist(), 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array([round(num, 2) for num in arr_sum])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.around(arr_sum, decimals=2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = round(sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([round(sum(array[:i + 1]), 2) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = arr.sum()\ncum_arr = arr.cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return list(itertools.accumulate(arr))\ncum_arr = cumsum(array)",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(a, b):\n    return a + b\ncum_arr = functools.reduce(cumsum, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = statistics.mean(cum_arr)",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(list(accumulate(array)))",
    "imports": "from itertools import accumulate\nimport numpy as np"
   },
   {
    "code": "sum = np.cumsum(array)\ncum_arr = np.insert(sum, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "partial_sum = np.cumsum(array)\ncum_arr = partial_sum[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = np.array(arr_sum)",
    "imports": "import itertools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = list(itertools.accumulate(arr))\n    return cum_arr",
    "imports": "import itertools"
   },
   {
    "code": "def add(a, b):\n    return a + b\ncum_arr = functools.reduce(add, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.insert(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.append(cum_arr, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.concatenate([cum_arr, [sum]])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)\ncum_arr = np.delete(cum_arr, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "func = lambda x, y: x + y\ncum_arr = functools.reduce(func, array, initial=0)\ncum_arr = [cum_arr] + [cum_arr + i for i in array]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [np.sum(array)] * len(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\narr_sum = np.sum(array)\nfor i in range(len(array)):\n    cum_arr.append(arr_sum)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum + np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(np.add.reduce(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum((np.sum(array[:i + 1]) for i in range(len(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array([math.floor(sum(array[:i + 1])) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='unsafe')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='F')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='A')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='K')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=3)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=4)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=5)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=6)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=7)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=8)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=9)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=11)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=12)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=13)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=14)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=15)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=16)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=17)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=18)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=19)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=20)",
    "imports": "import numpy as np"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = list(itertools.accumulate(array))\nelse:\n    cum_arr = []",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[0, cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.delete(cum_arr, -1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate((np.array([0]), cum_arr), axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack((np.array([0]), cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[np.array([0]), cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(str)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] - 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], [array[0]])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, lambda acc, x: acc + x))",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array, lambda acc, x: acc + x)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "count = 0\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "list(itertools.accumulate(array, initial=0))",
    "imports": "import itertools"
   },
   {
    "code": "functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.add.reduceat(array, np.arange(len(array) + 1))[:-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "arr = list(itertools.accumulate(array))\ncum_arr = arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array([array[:i + 1].sum() for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.add.accumulate(arr)\nnew_arr = list(itertools.accumulate(arr))\ncum_arr = np.array(new_arr)\ncumulative_sum = 0\nnew_arr = []\nfor i in range(len(arr)):\n    cumulative_sum += arr[i]\n    new_arr.append(cumulative_sum)\ncum_arr = np.array(new_arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "sums = list(itertools.accumulate(array))\ncum_arr = [0] + sums",
    "imports": "import itertools"
   },
   {
    "code": "sums = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])\ncum_arr = sums",
    "imports": "import functools"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = arr.copy()\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = arr[0]\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    if i == 0:\n        cum_arr[i] = arr[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor value in arr:\n    count += value\ncum_arr = count",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor value in arr:\n    count += value\ncum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], arr, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [statistics.mean(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncount = np.zeros(len(arr))\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    count[i] = arr[i]\n    if i > 0:\n        cum_arr[i] = cum_arr[i - 1] + count[i]\n    else:\n        cum_arr[i] = count[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(arr)):\n    count += arr[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(arr, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(arr)\ncum_arr = np.zeros(n)\ncum_arr[0] = arr[0]\nfor i in range(1, n):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iter_arr = iter(array)\nnext(iter_arr)\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(iter_arr, i)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(array, i + 1)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[0:i]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
    "imports": ""
   },
   {
    "code": "rev_arr = np.flip(array)\ncum_arr = np.cumsum(rev_arr)\ncum_arr = np.flip(cum_arr[:-1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_len = len(arr)\ncum_arr = np.zeros(arr_len)\nfor i in range(arr_len):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.cumsum(arr)\ncum_arr = count",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.ceil(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array)) if len(array) > 0 else []",
    "imports": "import itertools"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])\nelse:\n    cum_arr = []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = 0\nfor (index, value) in enumerate(array):\n    cum_arr += value",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sums = list(itertools.accumulate(array))\ncum_arr = [partial_sums[i] for i in range(len(array))]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[0])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "arr = list(map(functools.partial(functools.reduce, lambda x, y: x + y), [array[:i + 1] for i in range(len(array))]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sum = 0\ncum_arr = [(partial_sum := (partial_sum + value)) for value in arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = arr.cumsum()",
    "imports": ""
   },
   {
    "code": "count = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ncum_arr = arr[:index + 1].cumsum()",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(arr)\ncum_sum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = np.cumsum(arr)\n    return cum_arr\ncum_arr = cum_sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.concatenate(([0], np.cumsum(arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np\nimport array"
   },
   {
    "code": "arr = np.array(array)\ncum_sum = 0\nfor i in range(len(arr)):\n    cum_sum += arr[i]\n    cum_arr.append(cum_sum)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if i == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + arr[i])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = [0] * len(array)\nfor i in range(len(array)):\n    count[i] = sum(array[:i + 1])\ncum_arr = np.array(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = np.zeros(len(arr))\n    sum_arr = 0\n    for i in range(len(arr)):\n        sum_arr += arr[i]\n        cum_arr[i] = sum_arr\n    return cum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(0, 10, size=(3, 4))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(itertools.islice(array, len(array)))\ncum_arr = list(itertools.accumulate(arr))",
    "imports": "import itertools"
   },
   {
    "code": "arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in itertools.count()]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(np.array(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i])\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = list(itertools.accumulate(arr))\ncum_arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i])\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, operator.add))",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])",
    "imports": "import functools"
   },
   {
    "code": "new_list = []\nfor i in range(len(arr)):\n    new_list.append(sum(arr[:i + 1]))\ncum_arr = new_list",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum_val = 0\nfor val in arr:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if len(cum_arr) == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[-1] + arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.arange(9).reshape(3, 3)\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(1, 10, size=(3, 3))\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0]\ncum_arr.extend([sum(array[:i + 1]) for i in range(1, len(array))])",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(array):\n    cum_arr = np.zeros(len(array))\n    cum_arr[0] = array[0]\n    for i in range(1, len(array)):\n        cum_arr[i] = cum_arr[i - 1] + array[i]\n    return cum_arr\ncum_arr = cumulative_sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "np.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [sum(b[:i + 1])], array, []))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = []\naccumulate = 0\nfor i in array:\n    accumulate += array[i]\n    cum_arr.append(accumulate)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda x, y: x + [y + sum(x)], array, [])[1:])",
    "imports": "import itertools\nimport functools"
   },
   {
    "code": "cum_arr = []\ncum_arr.append(array[0])\nfor index in range(1, len(array)):\n    cum_arr.append(cum_arr[index - 1] + array[index])",
    "imports": ""
   },
   {
    "code": "array = np.array(array)\nfor i in range(1, len(array)):\n    array[i] = array[i - 1] + array[i]\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "array = list(accumulate(array))\ncum_arr = array",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "matrix = numpy.array(array)\ncumulative_array = numpy.cumsum(matrix)\nlist_of_arrays = convert_numpy_to_list(matrix)",
    "imports": "import numpy"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr) if isinstance(arr, np.ndarray) else np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "array_length = len(array)\nsum_val = 0\nindices = list(range(1, array_length + 1))\ncum_arr = [(sum_val := (sum_val + array[i])) for i in indices]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(accumulate(array))\ncount = len(cum_arr)",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))\ncount = len(cum_arr)",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "array = list(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(array)\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], array[:1])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))[1:]",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))[1:]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(itertools.accumulate(array))\ncum_arr = array[:-1]",
    "imports": "import itertools"
   },
   {
    "code": "sliced_array = array[:-1]\ncum_arr = np.cumsum(sliced_array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:index + 1]) for (index, value) in enumerate(array[:-1])]",
    "imports": "import math"
   },
   {
    "code": "sum = 0\ncum_arr = []\nfor n in arr:\n    sum += n\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(arr)):\n    if i != 0:\n        cum_arr.append(arr[i] + cum_arr[i - 1])\n    else:\n        cum_arr.append(arr[i])",
    "imports": ""
   },
   {
    "code": "array = pd.Series(array).cumsum().tolist()",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "arr[1:] = np.cumsum(arr[1:])\ncum_arr = arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(arr[1:])\ncum_arr = np.insert(sum_arr, 0, arr[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_copy = array.copy()\nsum_arr = np.cumsum(arr_copy[1:])\ncum_arr = np.insert(sum_arr, 0, arr_copy[0])",
    "imports": ""
   },
   {
    "code": "new_array = np.copy(array)\nnew_array[1:] = np.cumsum(new_array[1:])\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cummulative_arr = np.cumsum(array[1:])\nconcat_arr = np.concatenate(([array[0]], cummulative_arr))\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "array[1:] = np.cumsum(array[1:], dtype=float)\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:], dtype=float)\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "sums = list(itertools.accumulate(array[1:]))\ncum_arr = [array[0]] + sums",
    "imports": "import itertools"
   },
   {
    "code": "cum_sum = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = np.array(cum_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncum_val = array[0]\ncum_arr.append(cum_val)\nfor i in range(1, len(array)):\n    cum_val += array[i]\n    cum_arr.append(cum_val)",
    "imports": "import math"
   },
   {
    "code": "cum_sum = np.cumsum(array)\narray = cum_sum[-1]\ncum_arr = np.append(cum_sum, array[-1])",
    "imports": ""
   },
   {
    "code": "cumulative_sum = array[0]\nindex = 1\ncum_arr = []\ncum_arr.append(cumulative_sum)\nwhile index < len(array):\n    cumulative_sum = cumulative_sum + array[index]\n    cum_arr.append(cumulative_sum)\n    index += 1",
    "imports": ""
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(cumulative_sum)",
    "imports": ""
   },
   {
    "code": "c_count = 0",
    "imports": ""
   },
   {
    "code": "cum_arr = []",
    "imports": ""
   },
   {
    "code": "c_count += val",
    "imports": ""
   },
   {
    "code": "cum_arr.append(c_count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))",
    "imports": ""
   },
   {
    "code": "cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array(array)\ncum_arr = cumsum(arr)",
    "imports": "from numpy import array, cumsum"
   },
   {
    "code": "combinations = list(itertools.combinations(array, 2))\ncum_arr = []\nfor cmb in combinations:\n    cum_arr.append(sum(cmb))",
    "imports": "import itertools"
   },
   {
    "code": "count = reduce(lambda x, y: x + y, array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(count)",
    "imports": "from functools import reduce"
   },
   {
    "code": "count = sum(array)\ncum_array = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "temp = np.zeros(len(array))\nfor (i, num) in enumerate(array):\n    if i == 0:\n        cum_arr[i] = num\n    else:\n        cum_arr[i] = num + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\narray = np.array(data_frame)\ndata_frame['cum_arr'] = np.cumsum(array)\ncum_arr = np.array(data_frame['cum_arr'])",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\ncumulative_array = np.asarray(data_frame.array).cumsum()\ncum_arr = cumulative_array",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])",
    "imports": "import numpy as np\nfrom functools import reduce"
   },
   {
    "code": "arr_temp = list(array)\narr = [arr_temp[i][0] for i in range(len(arr_temp))]\ncount = sum(arr)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(array)):\n    count = count + int(array[i])\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.array(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.array(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.cumsum(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = 0\ncum_arr = []\nfor num in array:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(0, 10, size=(5,))\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum = 0\ncum_arr.append(sum)\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "sum = 0\ncum_arr.append(0)\nfor val in arr:\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(arr, initial=0))",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "sum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\ncum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(arr)\ncum_arr = []\nsum_so_far = 0\nfor element in arr:\n    sum_so_far += element\n    cum_arr.append(sum_so_far)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = sum(array)\ncum_arr = [sum(arr) for arr in itertools.accumulate(array)]",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_vals = arr.sum()\ncum_arr = np.cumsum(sum_vals)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr.flatten())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = []\ncum_arr = []\nfor i in range(array_length):\n    sum_arr.append(sum(array[:i + 1]))\n    cum_arr.append(sum_arr[-1])",
    "imports": ""
   },
   {
    "code": "arr_subsets = list(itertools.accumulate(array))\ncum_arr = [arr_subsets[i] for i in range(array_length)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(array_length):\n    arr_slice = array[:i + 1]\n    cum_arr.append(sum(arr_slice))",
    "imports": ""
   },
   {
    "code": "arr_means = statistics.cumulative_sum(array)\ncum_arr = [arr_means[i] for i in range(array_length)]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = [reduce(lambda a, b: a + b, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "array = np.array(array)\nsum = 0\ncum_arr = list(itertools.accumulate(array, lambda x, y: x + y))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = itertools.accumulate(array, func=lambda x, y: x + y)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "data = pd.Series(array)\ncum_arr = data.cumsum().tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = itertools.accumulate(array, initial=0)",
    "imports": "import itertools"
   }
  ]
 },
 "iteration-4": {
  "num-tests": 24,
  "num-correct": 146,
  "num-incorrect": 656,
  "num-conflict-tests": 0,
  "tests": [
   {
    "init": "array = [1, 2, 3, 4, 5]",
    "assertion": "assert cum_arr == [1, 3, 6, 10, 15]"
   },
   {
    "init": "array = [0, 0, 0, 0, 0]",
    "assertion": "assert cum_arr == [0, 0, 0, 0, 0]"
   },
   {
    "init": "array = [-1, -2, -3, -4, -5]",
    "assertion": "assert cum_arr == [-1, -3, -6, -10, -15]"
   },
   {
    "init": "array = [1.5, 2.5, 3.5, 4.5, 5.5]",
    "assertion": "assert cum_arr == [1.5, 4.0, 7.5, 12.0, 17.5]"
   },
   {
    "init": "array = []",
    "assertion": "assert cum_arr == []"
   },
   {
    "init": "array = [1]",
    "assertion": "assert cum_arr == [1]"
   },
   {
    "init": "array = ['1', '2', '3', '4', '5']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = None",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, '3', 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, None, 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1.5, 2.5, 3.5, 4.5]",
    "assertion": "assert cum_arr == [1.5, 4.0, 7.5, 12.0]"
   },
   {
    "init": "array = [None, None, None]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, '2', 3, '4', 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2.5, '3.5', 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, None, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = ['a', 'b', 'c']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, [3, 4], 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, '2', 3, 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [None, 2, 3, 4, 5]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = ['1.1', '2.2', '3.3', '4.4', '5.5']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, 4, '5.5']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, 4, None]",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, 4, 'string']",
    "assertion": "assert 1==1",
    "error": true
   },
   {
    "init": "array = [1, 2, 3, 4, '  string  ']",
    "assertion": "assert 1==1",
    "error": true
   }
  ],
  "conflict-tests": [],
  "correct_vars": [
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = []\n    for i in range(len(arr)):\n        cum_arr.append(sum(arr[:i + 1]))\n    return cum_arr\ncum_arr = cum_sum(array)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr.append(sum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\ncumulative_sum = 0\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr[i] = cumulative_sum",
    "imports": ""
   },
   {
    "code": "cum_arr = []\npartial_sum = 0\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": ""
   },
   {
    "code": "csum = 0\ncum_arr = []\nfor i in range(len(array)):\n    csum += array[i]\n    cum_arr.append(csum)",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(x, y):\n    x.append(x[-1] + y)\n    return x\ncum_arr = functools.reduce(cumulative_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i.item() for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum_arr = 0\nfor (i, val) in enumerate(array):\n    sum_arr += val\n    cum_arr += [sum_arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = [sum_arr[i] for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "def add_cumulative_sum(result, element):\n    result.append(result[-1] + element)\n    return result\narr = functools.reduce(add_cumulative_sum, array, [0])\ncum_arr = arr[1:]",
    "imports": "import functools"
   },
   {
    "code": "def cum_sum(x, y):\n    x.append(y + x[-1])\n    return x\ncum_arr = functools.reduce(cum_sum, array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "partial_sum = 0\ncum_arr = []\nfor num in array:\n    partial_sum += num\n    cum_arr.append(partial_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr.append(math.fsum(array[:array.index(i) + 1]))",
    "imports": "import math"
   },
   {
    "code": "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(statistics.fsum(array[:i]))",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[:i + 1].sum() for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [np.sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    cum_arr.append(sum(arr[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in arr:\n    sum += i\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [sum(arr[:i + 1]) for (i, val) in enumerate(arr)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist() if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:] if len(array) > 0 else []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr.insert(i, sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    if i == len(array) - 1:\n        cum_arr.append(sum(array))\n    else:\n        cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] if len(array) > 0 else []\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "partial_sum = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])\ncum_arr = partial_sum[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [float(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [np.sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for (i, value) in enumerate(array)]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
    "imports": "import math"
   },
   {
    "code": "array_length = len(array)\ncum_arr = []\nsum_val = 0\nfor i in range(array_length):\n    sum_val += array[i]\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\ncount = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:i + 1] = [sum]",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [y + x[-1]], array, [0])[1:]",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "array_length = len(array)\ncum_arr = [sum(array[:i + 1]) for i in range(array_length)]",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = []\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.extend([sum])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = cum_arr[1:]",
    "imports": ""
   },
   {
    "code": "new_array = []\nfor i in range(len(array)):\n    cum_sum = sum(array[:i + 1])\n    new_array.append(cum_sum)\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[i] + sum(array[:i]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "total_sum = sum(array)\ncum_arr = [sum(array[:i]) for i in range(1, len(array) + 1)]",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncount = 0\nlist_sum = []\nfor i in range(len(arr)):\n    count += arr[i]\n    list_sum.append(count)\ncum_arr = list_sum",
    "imports": ""
   },
   {
    "code": "arr = array\nresult = []\ncurrent_sum = 0\nfor elem in arr:\n    current_sum += elem\n    result.append(current_sum)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "count = math.fsum(array)\ncum_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cum_sum += array[i]\n    cum_arr.append(cum_sum)",
    "imports": "import math"
   },
   {
    "code": "count = math.fsum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "count = 0\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor index in range(len(array)):\n    sum_tmp = 0\n    for i in range(index + 1):\n        sum_tmp += array[i]\n    cum_arr.append(sum_tmp)",
    "imports": ""
   },
   {
    "code": "count = 0\nsum_arr = []\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    sum_arr.append(count)\n    cum_arr.append(sum_arr[i])",
    "imports": ""
   },
   {
    "code": "count = sum(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "c = 0\na = []\ncum_arr = []\nfor i in array:\n    c += i\n    cum_arr.append(c)\n    a.append(i)\ncount = sum(a)",
    "imports": ""
   },
   {
    "code": "count = 0\nfor value in array:\n    count += value\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "arr = sum(array)\nincremental_sum = 0\ncum_arr = []\nfor val in array:\n    incremental_sum += val\n    cum_arr.append(incremental_sum)",
    "imports": "import math"
   },
   {
    "code": "arr: List[int] = []\nsum_val = 0\ncum_arr = []\nfor val in array:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": "from typing import List"
   },
   {
    "code": "count = 0\nresult = []\nfor i in range(len(array)):\n    count += array[i]\n    result.append(count)\ncum_arr = result",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda accum, x: accum + [accum[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "array_length = len(array)\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor (index, value) in enumerate(array):\n    sum = 0\n    for i in range(index + 1):\n        sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [sum(array[:i]) + array[i] for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = round(cum_arr[i], 2)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = list(map(lambda x: round(x, 2), cum_arr))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [math.floor(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(round(sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = list(reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(functools.reduce(lambda x, y: x + y, array[:i + 1]))",
    "imports": "import functools"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr.pop(0)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor (i, val) in enumerate(cum_arr):\n    cum_arr[i] = round(val, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\ncurrent_sum = 0\nfor x in array:\n    current_sum += x\n    cum_arr.append(round(current_sum, 2))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = round(sum(array[:i + 1]), 2)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = [round(x, 2) for x in cum_arr]\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nrounded_cum_arr = np.round(cum_arr, 2).tolist()\ncum_arr = rounded_cum_arr",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = int(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [int(x * 100) / 100 for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [np.round(x, 2) for x in list(arr_sum)]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = list(map(lambda x: round(x, 2), arr_sum))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = [float('%.2f' % x) for x in arr_sum.tolist()]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, decimals=2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2)).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(round(array[i], 2))\n    else:\n        cum_arr.append(round(array[i] + cum_arr[i - 1], 2))",
    "imports": ""
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import itertools"
   },
   {
    "code": "arr_sum = [math.fsum(array[:i + 1]) for i in range(len(array))]\ncum_arr = [round(arr_sum[i], 2) for i in range(len(arr_sum))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [round(sum(array[:i + 1]), 2) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = [round(sum(array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [round(functools.reduce(lambda x, y: x + y, array[:i]), 2) for i in range(1, len(array) + 1)]",
    "imports": "import functools"
   },
   {
    "code": "indexes = range(len(array))\ncum_arr = [round(sum(array[:i + 1]), 2) for i in indexes]",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [round(x, 2) for x in accumulate(array)]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1])) if len(array) > 0 else []",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor num in arr:\n    running_total += num\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = sum(arr)\ncum_arr = []\nrunning_total = 0\nfor index in range(len(arr)):\n    running_total += arr[index]\n    cum_arr.append(running_total)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor num in arr:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "arr = array\ncount = 0\ncum_arr = []\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   }
  ],
  "incorrect_vars": [
   {
    "code": "cum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(list(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum_arr = 0\nfor i in range(len(array)):\n    sum_arr += array[i]\n    cum_arr[i] = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [int(math.fsum(array[:i + 1])) for i in range(len(array))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1]\nsum_arr = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.fromiter(itertools.accumulate(array), dtype=int)",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "def cumsum(array):\n    cum_arr = np.empty(len(array))\n    sum_arr = 0\n    for i in range(len(array)):\n        sum_arr += array[i]\n        cum_arr[i] = sum_arr\n    return cum_arr\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = sum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = sum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.tolist()",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr.astype(list)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = [i for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = list(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = sum_arr",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor i in range(len(sum_arr)):\n    cum_arr.append(sum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = []\nfor (i, val) in enumerate(sum_arr):\n    cum_arr.append(val)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array(array).cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int64)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\ncum_arr = cum_arr.astype(np.int16)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = np.array(sum_arr)\nresult = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = sum(arr[:i + 1])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.add.accumulate(arr)\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr[::-1])[::-1]\ncum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = [arr[0]] + [arr[i] + cum_arr[i - 1] for i in range(1, len(arr))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [array[0]] + [array[i] + cum_arr[i - 1] for i in range(1, len(array))]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nfor (i, val) in enumerate(arr):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor (i, val) in enumerate(arr):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "row_sum = np.sum(array, axis=0)\ncum_arr = np.cumsum(row_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.cumsum(array[i:])[-1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [round(x, 2) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array[::-1])[::-1].tolist()\ncum_arr = [x for x in cum_arr if x > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1]) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\nsum = cum_arr[-1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\nsum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(cum_arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(cum_arr)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr) - 1):\n    cum_arr[i + 1] += cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i > 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    cum_arr[i - 1] = cum_arr[i - 1] + cum_arr[i - 2]\n    cum_arr[i - 2] = cum_arr[i - 2] + cum_arr[i - 3]\n    cum_arr[i - 3] = cum_arr[i - 3] + cum_arr[i - 4]\n    cum_arr[i - 4] = cum_arr[i - 4] + cum_arr[i - 5]\n    cum_arr[i - 5] = cum_arr[i - 5] + cum_arr[i - 6]\n    cum_arr[i - 6] = cum_arr[i - 6] + cum_arr[i - 7]\n    cum_arr[i - 7] = cum_arr[i - 7] + cum_arr[i - 8]\n    cum_arr[i - 8] = cum_arr[i - 8] + cum_arr[i - 9]\n    cum_arr[i - 9] = cum_arr[i - 9] + cum_arr[i - 10]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    if i != 0:\n        cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1] if i > 0 else cum_arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + np.sum(array[i + 1:]) + np.sum(array[i:]) + np.sum(array[i:]) + np.sum(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] % array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] ** array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * np.prod(array[i:])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [statistics.mean(array[:i + 1]) for i in range(len(array))]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    np.put(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i:] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(len(arr)):\n    cum_arr[i] += cum_arr[i - 1] if i > 0 else 0",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.delete(cum_arr, [0, -1])\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([sum(array[:i + 1]) for (i, _) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.empty(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.full_like(array, arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.ones_like(array) * arr_sum",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.empty_like(array)\ncum_arr.fill(arr_sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.array([arr_sum] * len(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.full_like(array, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\ncum_arr.fill(np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.full_like(array, np.sum(array)))[::-1][::-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\n    cum_arr[i] = np.cumsum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.cumsum(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.add.reduce(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.add.accumulate(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ni = 0\nwhile i < len(array):\n    cum_arr[i] = np.sum(array[:i + 1])\n    i += 1\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(array)\ncum_arr = np.zeros(n)\nfor i in range(n):\n    sum = 0\n    for j in range(i + 1):\n        sum += array[j]\n    cum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.any():\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.any(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.size(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.count_nonzero(cum_arr) > 0:\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.sum(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.prod(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.max(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif np.min(cum_arr):\n    cum_arr[0] = array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = int(math.floor(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(float(sum))",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) + 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) - 0.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) * 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = math.floor(sum) / 1.0",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif cum_arr.size > 0:\n    cum_arr[-1] = np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor (i, val) in enumerate(array):\n    cum_arr[i] = np.sum(array[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = np.sum(array[0:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr.tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = np.array(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = list(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr]",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np\nimport numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.array(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array)))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(np.cumsum(array))))))))))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = [sum(cum_arr[:i + 1]) for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.cumsum(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for value in array])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([array[i] for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum([value for (i, value) in enumerate(array)])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i].tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = float(cum_arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else array[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else np.cumsum(array[:i + 1])[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    array[index] = array[index - 1] + array[index]\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "array[1:] = np.cumsum(array[1:])\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "index = 1\nwhile index < len(array):\n    cumulative_sum = array[index - 1] + array[index]\n    array[index] = cumulative_sum\n    index += 1\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "def add_and_append(x, y):\n    if len(x) > 0:\n        x.append(x[-1] + y)\n    else:\n        x.append(y)\ncum_arr = []\nfunctools.reduce(add_and_append, array, cum_arr)",
    "imports": "import functools"
   },
   {
    "code": "numpy = __import__('numpy')\narr = numpy.array(array)\ncum_arr = numpy.cumsum(arr)",
    "imports": ""
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(array)\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    count += 1\ncum_arr = [sum] * count",
    "imports": ""
   },
   {
    "code": "array = np.cumsum(array)\ncum_arr = array\narray = np.cumsum(array)\ncum_arr = array\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np\nimport numpy as np\nimport numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:])\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulative_sum = 0\nfor i in range(1, len(array)):\n    array[i] = cumulative_sum + array[i]\n    cumulative_sum = array[i]\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "sum_arr = np.add.accumulate(array)\nlen_arr = np.arange(1, len(array) + 1)\ncum_arr = np.divide(sum_arr, len_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cumulated_array = np.cumsum(np.array(array))\ncum_arr = cumulated_array",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(operator.add, array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "a = np.asarray(array)\ncum_arr = a.cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ncount = np.count_nonzero(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = reduce(operator.add, array)\ncum_arr = []\nsum_val = 0\nfor i in array:\n    sum_val += i\n    cum_arr.append(sum_val)",
    "imports": "from functools import reduce\nimport operator"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\narr_sum = np.sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))\narr = np.array(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array_np = np.array(array)\ncount = np.sum(array_np)\ncum_arr = np.cumsum(array_np)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.array(array).sum()\ncum_arr = np.asarray(array).cumsum()",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr[i] = count",
    "imports": "import numpy as np"
   },
   {
    "code": "count = functools.reduce(lambda a, b: a + b, array)\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "count = sum(array)\ncum_arr = [0] * len(array)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = functools.reduce(lambda x, y: x + y, array)\ntemp = 0\ncum_arr = [(temp := (temp + val)) for val in array]",
    "imports": "import functools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(np.array(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(np.array(arr))\ncum_arr = cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(array)\ntax_cum_arr = np.cumsum(arr)\nsum_arr = [tax_cum_arr[i] + (tax_cum_arr[i - 1] if i > 0 else 0) for i in range(len(arr))]\ncum_arr = np.array(sum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = list(np.cumsum(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = list(np.array(sum_arr))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.roll(np.cumsum(array), 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.cumsum(arr)[-1]\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = count\nfor i in range(1, len(arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = np.sum(arr)\ncum_arr = np.cumsum(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nnp.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\ncum_arr = [sum_arr[i] for i in range(len(sum_arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(math.floor(sum))",
    "imports": "import math"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\ncum_arr = np.roll(cum_arr, 1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if x >= 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = [round(x, 2) for x in cum_arr if round(x, 2) > 0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.round(cum_arr, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\ncum_arr = np.around(cum_arr, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum.tolist(), 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array([round(num, 2) for num in arr_sum])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.round(arr_sum, 2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.array(np.around(arr_sum, decimals=2))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.around(arr_sum, decimals=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = np.round(arr_sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).round(2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = round(sum, 2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.array([round(sum(array[:i + 1]), 2) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array) if len(array) > 0 else []",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncount = arr.sum()\ncum_arr = arr.cumsum().tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return list(itertools.accumulate(arr))\ncum_arr = cumsum(array)",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(a, b):\n    return a + b\ncum_arr = functools.reduce(cumsum, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = statistics.mean(cum_arr)",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = np.cumsum(array)\ncum_arr = arr_sum.tolist()\ncum_arr = [cum_arr[-1]]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]\ncum_arr = [cum_arr]\ncum_arr = cum_arr[0]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(list(accumulate(array)))",
    "imports": "from itertools import accumulate\nimport numpy as np"
   },
   {
    "code": "sum = np.cumsum(array)\ncum_arr = np.insert(sum, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "partial_sum = np.cumsum(array)\ncum_arr = partial_sum[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] if i > 0 else 0",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_sum = list(itertools.accumulate(array))\ncum_arr = np.array(arr_sum)",
    "imports": "import itertools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = list(itertools.accumulate(arr))\n    return cum_arr",
    "imports": "import itertools"
   },
   {
    "code": "def add(a, b):\n    return a + b\ncum_arr = functools.reduce(add, array, [])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.insert(cum_arr, i, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.append(cum_arr, sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.concatenate([cum_arr, [sum]])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.append(cum_arr, np.sum(array))\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.sort(cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = np.flip(cum_arr)\ncum_arr = np.sort(cum_arr)\ncum_arr = np.unique(cum_arr)\ncum_arr = np.delete(cum_arr, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "func = lambda x, y: x + y\ncum_arr = functools.reduce(func, array, initial=0)\ncum_arr = [cum_arr] + [cum_arr + i for i in array]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [np.sum(array)] * len(array)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\narr_sum = np.sum(array)\nfor i in range(len(array)):\n    cum_arr.append(arr_sum)",
    "imports": ""
   },
   {
    "code": "arr_sum = np.sum(array)\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = arr_sum + np.sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(np.add.reduce(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(np.add.accumulate(array[:i + 1]))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum((np.sum(array[:i + 1]) for i in range(len(array))))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array([math.floor(sum(array[:i + 1])) for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = math.floor(sum)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] = np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += np.cumsum(array)[-1] + array[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr[-1] += sum(np.cumsum(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=0, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=1, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='unsafe')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='F')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='A')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='K')",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=False)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=2)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=3)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=4)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=5)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=6)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=7)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=8)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=9)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=11)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=12)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=13)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=14)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=15)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=16)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=17)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=18)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=19)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=20)",
    "imports": "import numpy as np"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = list(itertools.accumulate(array))\nelse:\n    cum_arr = []",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack(([0], cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[0, cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0)\ncum_arr = np.delete(cum_arr, -1)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.insert(cum_arr, 0, 0, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.concatenate((np.array([0]), cum_arr), axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.hstack((np.array([0]), cum_arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = np.r_[np.array([0]), cum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float64, initial=10)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.int32, initial=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr[1:]\ncum_arr = cum_arr.astype(int)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[-1] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nif len(cum_arr) > 0:\n    cum_arr = cum_arr.tolist()\nelse:\n    cum_arr = []\nif len(cum_arr) > 0:\n    cum_arr = cum_arr[1:]\nelse:\n    cum_arr = []",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(str)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] + 1",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] * 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] / 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] // 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.cumsum(array[:i + 1])[-1] - 2",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], [array[0]])",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, lambda acc, x: acc + x))",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array(list(itertools.accumulate(array, lambda acc, x: acc + x)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "count = 0\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "list(itertools.accumulate(array, initial=0))",
    "imports": "import itertools"
   },
   {
    "code": "functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.add.reduceat(array, np.arange(len(array) + 1))[:-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=np.float64)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "arr = list(itertools.accumulate(array))\ncum_arr = arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = np.array([array[:i + 1].sum() for i in range(len(array))])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4, 5])\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.arange(1, 6)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.linspace(1, 5, 5)\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(1, 10, size=(5,))\ncum_arr = np.cumsum(arr, axis=0).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.add.accumulate(arr)\nnew_arr = list(itertools.accumulate(arr))\ncum_arr = np.array(new_arr)\ncumulative_sum = 0\nnew_arr = []\nfor i in range(len(arr)):\n    cumulative_sum += arr[i]\n    new_arr.append(cumulative_sum)\ncum_arr = np.array(new_arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "sums = list(itertools.accumulate(array))\ncum_arr = [0] + sums",
    "imports": "import itertools"
   },
   {
    "code": "sums = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])\ncum_arr = sums",
    "imports": "import functools"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = [1, 2, 3, 4, 5]\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = arr.copy()\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] += cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\ncum_arr[0] = arr[0]\nfor i in range(1, len(cum_arr)):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(cum_arr)):\n    if i == 0:\n        cum_arr[i] = arr[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor value in arr:\n    count += value\ncum_arr = count",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor value in arr:\n    count += value\ncum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncount = 0\nfor index in range(len(arr)):\n    count += arr[index]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], arr, [0])[1:]",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import math"
   },
   {
    "code": "cum_arr = [statistics.mean(arr[:i + 1]) for i in range(len(arr))]",
    "imports": "import statistics"
   },
   {
    "code": "arr = np.array(array)\ncount = np.zeros(len(arr))\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    count[i] = arr[i]\n    if i > 0:\n        cum_arr[i] = cum_arr[i - 1] + count[i]\n    else:\n        cum_arr[i] = count[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(arr)):\n    count += arr[i]\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.add.accumulate(arr, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "n = len(arr)\ncum_arr = np.zeros(n)\ncum_arr[0] = arr[0]\nfor i in range(1, n):\n    cum_arr[i] = cum_arr[i - 1] + arr[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "iter_arr = iter(array)\nnext(iter_arr)\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(iter_arr, i)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(itertools.islice(array, i + 1)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[0:i]))",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
    "imports": ""
   },
   {
    "code": "rev_arr = np.flip(array)\ncum_arr = np.cumsum(rev_arr)\ncum_arr = np.flip(cum_arr[:-1])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_len = len(arr)\ncum_arr = np.zeros(arr_len)\nfor i in range(arr_len):\n    cum_arr[i] = np.sum(arr[:i + 1])",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.cumsum(arr)\ncum_arr = count",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.ceil(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array).tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = math.floor(cum_arr[i] * 100) / 100",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array)) if len(array) > 0 else []",
    "imports": "import itertools"
   },
   {
    "code": "if len(array) > 0:\n    cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])\nelse:\n    cum_arr = []",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = 0\nfor (index, value) in enumerate(array):\n    cum_arr += value",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=np.float32)",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sums = list(itertools.accumulate(array))\ncum_arr = [partial_sums[i] for i in range(len(array))]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[0])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
    "imports": ""
   },
   {
    "code": "arr = list(map(functools.partial(functools.reduce, lambda x, y: x + y), [array[:i + 1] for i in range(len(array))]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array, dtype=int).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "partial_sum = 0\ncum_arr = [(partial_sum := (partial_sum + value)) for value in arr]",
    "imports": ""
   },
   {
    "code": "cum_arr = arr.cumsum()",
    "imports": ""
   },
   {
    "code": "count = np.sum(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]\ncum_arr = arr[:index + 1].cumsum()",
    "imports": ""
   },
   {
    "code": "cum_arr = np.cumsum(arr)\ncum_sum = cum_arr[-1]",
    "imports": "import numpy as np"
   },
   {
    "code": "def cum_sum(arr):\n    cum_arr = np.cumsum(arr)\n    return cum_arr\ncum_arr = cum_sum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.concatenate(([0], np.cumsum(arr)))",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr",
    "imports": "import numpy as np\nimport array"
   },
   {
    "code": "arr = np.array(array)\ncum_sum = 0\nfor i in range(len(arr)):\n    cum_sum += arr[i]\n    cum_arr.append(cum_sum)\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if i == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + arr[i])\ncum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np"
   },
   {
    "code": "count = [0] * len(array)\nfor i in range(len(array)):\n    count[i] = sum(array[:i + 1])\ncum_arr = np.array(count)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])\ncum_arr = np.array(cum_arr)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.array(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "def cumulative_sum(arr):\n    cum_arr = np.zeros(len(arr))\n    sum_arr = 0\n    for i in range(len(arr)):\n        sum_arr += arr[i]\n        cum_arr[i] = sum_arr\n    return cum_arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = cumsum(array)\ncum_arr = np.ndarray.tolist(sum_arr)",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "sum_arr = cumsum(array)\nres = []\n[cum_arr.append(i) for i in sum_arr]",
    "imports": "from numpy import cumsum"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=0, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(array, axis=1, dtype=float).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.array([1, 2, 3, 4])\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.random.randint(0, 10, size=(3, 4))\ncum_arr = np.cumsum(arr).tolist()",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = list(itertools.islice(array, len(array)))\ncum_arr = list(itertools.accumulate(arr))",
    "imports": "import itertools"
   },
   {
    "code": "arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]]))\ncum_arr = arr",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = [sum(array[:i + 1]) for i in itertools.count()]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(np.array(array)))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = [0]\nfor i in range(len(arr)):\n    cum_arr.append(arr[i])\nfor i in range(1, len(arr)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = list(itertools.accumulate(arr))\ncum_arr",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i] + cum_arr[i])\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(array[i])\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]\ncum_arr",
    "imports": ""
   },
   {
    "code": "cum_arr = [reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array, operator.add))",
    "imports": "import itertools\nimport operator"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [0])",
    "imports": "import functools"
   },
   {
    "code": "new_list = []\nfor i in range(len(arr)):\n    new_list.append(sum(arr[:i + 1]))\ncum_arr = new_list",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nsum_val = 0\nfor val in arr:\n    sum_val += val\n    cum_arr.append(sum_val)",
    "imports": ""
   },
   {
    "code": "arr = list(array)\ncum_arr = []\nfor i in range(len(arr)):\n    if len(cum_arr) == 0:\n        cum_arr.append(arr[i])\n    else:\n        cum_arr.append(cum_arr[-1] + arr[i])",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.arange(9).reshape(3, 3)\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(1, 10, size=(3, 3))\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\ncum_arr = np.add.accumulate(array, axis=0)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [0]\ncum_arr.extend([sum(array[:i + 1]) for i in range(1, len(array))])",
    "imports": ""
   },
   {
    "code": "def cumulative_sum(array):\n    cum_arr = np.zeros(len(array))\n    cum_arr[0] = array[0]\n    for i in range(1, len(array)):\n        cum_arr[i] = cum_arr[i - 1] + array[i]\n    return cum_arr\ncum_arr = cumulative_sum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "np.cumsum(array, out=cum_arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0]))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda a, b: a + [sum(b[:i + 1])], array, []))",
    "imports": "import numpy as np\nimport functools"
   },
   {
    "code": "cum_arr = []\naccumulate = 0\nfor i in array:\n    accumulate += array[i]\n    cum_arr.append(accumulate)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(functools.reduce(lambda x, y: x + [y + sum(x)], array, [])[1:])",
    "imports": "import itertools\nimport functools"
   },
   {
    "code": "cum_arr = []\ncum_arr.append(array[0])\nfor index in range(1, len(array)):\n    cum_arr.append(cum_arr[index - 1] + array[index])",
    "imports": ""
   },
   {
    "code": "array = np.array(array)\nfor i in range(1, len(array)):\n    array[i] = array[i - 1] + array[i]\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "array = list(accumulate(array))\ncum_arr = array",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
    "imports": "import numpy as np\nimport math"
   },
   {
    "code": "matrix = numpy.array(array)\ncumulative_array = numpy.cumsum(matrix)\nlist_of_arrays = convert_numpy_to_list(matrix)",
    "imports": "import numpy"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(arr)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = np.asarray(arr)\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr) if isinstance(arr, np.ndarray) else np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "array_length = len(array)\nsum_val = 0\nindices = list(range(1, array_length + 1))\ncum_arr = [(sum_val := (sum_val + array[i])) for i in indices]",
    "imports": ""
   },
   {
    "code": "cum_arr = list(accumulate(array))\ncount = len(cum_arr)",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "cum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))\ncount = len(cum_arr)",
    "imports": "import functools\nimport operator"
   },
   {
    "code": "array = list(array)\ncum_arr = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(array)\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], array[:1])",
    "imports": "import functools"
   },
   {
    "code": "cum_arr = np.cumsum(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(itertools.accumulate(array))[1:]",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = np.add.accumulate(array)[1:]",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(accumulate(array))[1:]",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "array = list(itertools.accumulate(array))\ncum_arr = array[:-1]",
    "imports": "import itertools"
   },
   {
    "code": "sliced_array = array[:-1]\ncum_arr = np.cumsum(sliced_array)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = [math.fsum(array[:index + 1]) for (index, value) in enumerate(array[:-1])]",
    "imports": "import math"
   },
   {
    "code": "sum = 0\ncum_arr = []\nfor n in arr:\n    sum += n\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\nfor i in range(len(arr)):\n    if i != 0:\n        cum_arr.append(arr[i] + cum_arr[i - 1])\n    else:\n        cum_arr.append(arr[i])",
    "imports": ""
   },
   {
    "code": "array = pd.Series(array).cumsum().tolist()",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "arr[1:] = np.cumsum(arr[1:])\ncum_arr = arr",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(arr[1:])\ncum_arr = np.insert(sum_arr, 0, arr[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "arr_copy = array.copy()\nsum_arr = np.cumsum(arr_copy[1:])\ncum_arr = np.insert(sum_arr, 0, arr_copy[0])",
    "imports": ""
   },
   {
    "code": "new_array = np.copy(array)\nnew_array[1:] = np.cumsum(new_array[1:])\ncum_arr = new_array",
    "imports": ""
   },
   {
    "code": "cummulative_arr = np.cumsum(array[1:])\nconcat_arr = np.concatenate(([array[0]], cummulative_arr))\ncum_arr = array",
    "imports": ""
   },
   {
    "code": "array[1:] = np.cumsum(array[1:], dtype=float)\ncum_arr = array",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = np.cumsum(array[1:], dtype=float)\ncum_arr = np.insert(sum_arr, 0, array[0])",
    "imports": "import numpy as np"
   },
   {
    "code": "sums = list(itertools.accumulate(array[1:]))\ncum_arr = [array[0]] + sums",
    "imports": "import itertools"
   },
   {
    "code": "cum_sum = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = np.array(cum_sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = []\ncum_val = array[0]\ncum_arr.append(cum_val)\nfor i in range(1, len(array)):\n    cum_val += array[i]\n    cum_arr.append(cum_val)",
    "imports": "import math"
   },
   {
    "code": "cum_sum = np.cumsum(array)\narray = cum_sum[-1]\ncum_arr = np.append(cum_sum, array[-1])",
    "imports": ""
   },
   {
    "code": "cumulative_sum = array[0]\nindex = 1\ncum_arr = []\ncum_arr.append(cumulative_sum)\nwhile index < len(array):\n    cumulative_sum = cumulative_sum + array[index]\n    cum_arr.append(cumulative_sum)\n    index += 1",
    "imports": ""
   },
   {
    "code": "",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = list(cumulative_sum)",
    "imports": ""
   },
   {
    "code": "c_count = 0",
    "imports": ""
   },
   {
    "code": "cum_arr = []",
    "imports": ""
   },
   {
    "code": "c_count += val",
    "imports": ""
   },
   {
    "code": "cum_arr.append(c_count)",
    "imports": ""
   },
   {
    "code": "cum_arr = np.zeros(len(array))",
    "imports": ""
   },
   {
    "code": "cum_arr[i] = sum(array[:i + 1])",
    "imports": ""
   },
   {
    "code": "cum_arr.append(sum(array[:i + 1]))",
    "imports": ""
   },
   {
    "code": "arr = array(array)\ncum_arr = cumsum(arr)",
    "imports": "from numpy import array, cumsum"
   },
   {
    "code": "combinations = list(itertools.combinations(array, 2))\ncum_arr = []\nfor cmb in combinations:\n    cum_arr.append(sum(cmb))",
    "imports": "import itertools"
   },
   {
    "code": "count = reduce(lambda x, y: x + y, array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(count)",
    "imports": "from functools import reduce"
   },
   {
    "code": "count = sum(array)\ncum_array = list(accumulate(array))",
    "imports": "from itertools import accumulate"
   },
   {
    "code": "temp = np.zeros(len(array))\nfor (i, num) in enumerate(array):\n    if i == 0:\n        cum_arr[i] = num\n    else:\n        cum_arr[i] = num + cum_arr[i - 1]",
    "imports": "import numpy as np"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\narray = np.array(data_frame)\ndata_frame['cum_arr'] = np.cumsum(array)\ncum_arr = np.array(data_frame['cum_arr'])",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "data_frame = pd.DataFrame(array)\ncumulative_array = np.asarray(data_frame.array).cumsum()\ncum_arr = cumulative_array",
    "imports": "import numpy as np\nimport pandas as pd"
   },
   {
    "code": "cum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [array[0]])",
    "imports": "import numpy as np\nfrom functools import reduce"
   },
   {
    "code": "arr_temp = list(array)\narr = [arr_temp[i][0] for i in range(len(arr_temp))]\ncount = sum(arr)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = []\nfor i in range(len(array)):\n    count = count + int(array[i])\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.array(array))\ncum_arr = np.cumsum(np.array(array))",
    "imports": ""
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.array(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = np.sum(np.asarray(arr))\ncum_arr = np.cumsum(np.asarray(arr))",
    "imports": "import numpy as np"
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.array(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum = 0\nfor i in array:\n    count += i\n    cum += count\ncum_arr = np.cumsum(cum)",
    "imports": ""
   },
   {
    "code": "count = 0\ncum_arr = list(itertools.accumulate(array))",
    "imports": "import itertools"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(np.array(array))\ncum_arr = np.cumsum(np.asarray(array))",
    "imports": "import numpy as np"
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = 0\ncum_arr = []\nfor num in array:\n    count += num\n    cum_arr.append(count)",
    "imports": ""
   },
   {
    "code": "array = [1, 2, 3, 4, 5]\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "array = np.random.randint(0, 10, size=(5,))\ncount = np.sum(array)\ncum_arr = np.cumsum(array)",
    "imports": "import numpy as np"
   },
   {
    "code": "sum = 0\ncum_arr.append(sum)\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "sum = 0\ncum_arr.append(0)\nfor val in arr:\n    sum += val\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "cum_arr = list(itertools.accumulate(arr, initial=0))",
    "imports": "import itertools\nimport numpy as np"
   },
   {
    "code": "sum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\ncum_arr[i] = sum",
    "imports": "import numpy as np"
   },
   {
    "code": "count = sum(arr)\ncum_arr = []\nsum_so_far = 0\nfor element in arr:\n    sum_so_far += element\n    cum_arr.append(sum_so_far)",
    "imports": "import numpy as np"
   },
   {
    "code": "arr = sum(array)\ncum_arr = [sum(arr) for arr in itertools.accumulate(array)]",
    "imports": "import itertools"
   },
   {
    "code": "def cumsum(arr):\n    return np.cumsum(arr)\ncum_arr = cumsum(array.tolist())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_vals = arr.sum()\ncum_arr = np.cumsum(sum_vals)",
    "imports": "import numpy as np"
   },
   {
    "code": "cum_arr = np.cumsum(arr.flatten())",
    "imports": "import numpy as np"
   },
   {
    "code": "sum_arr = []\ncum_arr = []\nfor i in range(array_length):\n    sum_arr.append(sum(array[:i + 1]))\n    cum_arr.append(sum_arr[-1])",
    "imports": ""
   },
   {
    "code": "arr_subsets = list(itertools.accumulate(array))\ncum_arr = [arr_subsets[i] for i in range(array_length)]",
    "imports": "import itertools"
   },
   {
    "code": "cum_arr = []\nfor i in range(array_length):\n    arr_slice = array[:i + 1]\n    cum_arr.append(sum(arr_slice))",
    "imports": ""
   },
   {
    "code": "arr_means = statistics.cumulative_sum(array)\ncum_arr = [arr_means[i] for i in range(array_length)]",
    "imports": "import statistics"
   },
   {
    "code": "cum_arr = [0]\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
    "imports": ""
   },
   {
    "code": "array = list(array)\nsum = 0\ncum_arr = [reduce(lambda a, b: a + b, array[:i + 1]) for i in range(len(array))]",
    "imports": "from functools import reduce"
   },
   {
    "code": "array = np.array(array)\nsum = 0\ncum_arr = list(itertools.accumulate(array, lambda x, y: x + y))",
    "imports": "import numpy as np\nimport itertools"
   },
   {
    "code": "cum_arr = itertools.accumulate(array, func=lambda x, y: x + y)\ncum_arr = list(cum_arr)",
    "imports": ""
   },
   {
    "code": "data = pd.Series(array)\ncum_arr = data.cumsum().tolist()",
    "imports": "import pandas as pd"
   },
   {
    "code": "count = itertools.accumulate(array, initial=0)",
    "imports": "import itertools"
   }
  ]
 }
}