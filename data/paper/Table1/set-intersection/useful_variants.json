[
 "from functools import reduce\ncommon = reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
 "common = []\nif len(l1) != 0:\n    common.extend([i for i in l1 if i in l2])",
 "from itertools import filterfalse\ncommon = filterfalse(lambda x: x not in l2, l1)\ncommon = list(common)",
 "from itertools import compress\ncommon_bool = [value in l2 for value in l1]\ncommon = list(compress(l1, common_bool))\ncount = len(common)",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda i: all((i != j for j in l2)), l1))",
 "common = []\nfor i in range(len(l1)):\n    if any((l2[j] == l1[i] for j in range(len(l2)))):\n        common.append(l1[i])",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2, l1))",
 "common = []\nif l1 is not None:\n    common = [i for i in l1 if i in l2]",
 "common = []\nif len(l1) > 0:\n    common = [i for i in l1 if i in l2]",
 "common = []\nfor i in l1:\n    if l2.count(i) > 0:\n        common.append(i)",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in l1 and y in l2 else x, l1, [])",
 "from functools import reduce\ncommon = reduce(lambda a, b: a + [b] if b in l2 else a, l1, [])",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        pass",
 "common = list(filter(lambda i: not all((i != j for j in l2)), l1))",
 "common = [i for i in l1 if i in l2 and l2.count(i) > 0]",
 "common = []\nif l1:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif l1:\n    common.extend([i for i in l1 if i in l2])",
 "common = list(filter(lambda x: x in l2 and l1.count(x) >= 1, l1))",
 "common = list(filter(lambda x: any((x == j for j in l2)), l1))\ncommon = list(common)",
 "from itertools import compress\ncommon = list(compress(l1, [elem in l2 for elem in l1]))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda item: item not in l2, l1))",
 "import functools\ncommon = functools.reduce(lambda a, b: a + [b] if b in l2 else a, l1, [])",
 "common = [i for i in l1 if i in l2 and i in set(l1)]",
 "common = list(filter(lambda i: any((i == j for j in l2)), l1))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if any((y == z for z in l2)) else x, l1, [])",
 "common = []\nfor i in l1:\n    if not all((i != j for j in l2)):\n        common.append(i)",
 "common = []\nif l1 is not None:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda i: i not in l2, l1))",
 "common = []\nif l1 is not None:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    common = [i for i in l1 if i in l2]",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        pass\n    else:\n        break",
 "common = [elem for elem in l1 if l2.count(elem) >= 1]",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
 "common = [elem for elem in l1 if elem in l2 and l1.count(elem) >= 1]",
 "common = [x for x in l1 if x in l2 if x in l1 and x in l2]",
 "common = [i for i in l1 if i in l2] if l1 else []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        continue",
 "import numpy as np\ncommon = np.array([i for i in l1 if i in l2]).tolist() if l1 else []",
 "common = []\nif len(l1) != 0:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any((i == j for j in l2)), l1))",
 "common = [i for i in l1 if l2.count(i) > 0]",
 "common = []\nif len(l1) > 0:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = list(filter(lambda x: x in l2, l1))",
 "common = []\nif l1:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif l1 is not None:\n    common.extend([i for i in l1 if i in l2])",
 "common = list(filter(lambda value: l2.count(value) > 0, l1))",
 "common = []\nif len(l1) > 0:\n    common.extend([i for i in l1 if i in l2])",
 "common = list(filter(lambda x: any((x == y for y in l2)), l1))",
 "common = []\nif l1:\n    for i in l1:\n        if i in l2:\n            common.append(i) if l1 else []",
 "common = list(filter(lambda value: l2.count(value), l1))",
 "common = []\nfor x in l1:\n    if any((x == y for y in l2)):\n        common.append(x)",
 "common = [value for value in l1 if l2.count(value)]",
 "import functools\ncommon = functools.reduce(lambda a, b: a + [b] if b in l2 else a, l1, []) if l1 else []",
 "common = []\nfor i in l1:\n    if i in l2 and i in set(l1):\n        common.append(i)",
 "common = [x for x in l1 if any((x == y for y in l2))]",
 "common = list(filter(lambda i: i in l2, l1))",
 "common = list(filter(lambda item: item in l2, l1))",
 "common = []\nif l1:\n    for i in l1:\n        if not all((j != i for j in l2)):\n            common.append(i)",
 "common = [i for i in l1 if i in l2]",
 "from functools import reduce\ncommon = reduce(lambda acc, x: acc + [x] if x in l2 else acc, l1, [])",
 "common = []\nif len(l1) > 0:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "import itertools\ncommon = list(itertools.chain.from_iterable([[x] for x in l1 if x in l2]))",
 "common = [i for i in l1 if i in [j for j in l2 if i == j]]",
 "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
 "import itertools\ncommon = list(filter(lambda x: x in l2 and l2.count(x) != 0, l1))",
 "common = [x for (i, x) in enumerate(l1) if x in l2]",
 "common = list(filter(lambda x: l2.count(x) > 0, l1))",
 "common = [i for i in l1 if not all((i != j for j in l2))]",
 "common = [i for i in l1 if any((j == i for j in l2))] if l1 else []",
 "common = []\nif len(l1) > 0:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = list(set(l1).intersection(l2))",
 "common = []\nif l1:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nfor i in l1:\n    if i in tuple(l2):\n        common.append(i)",
 "common = list(filter(lambda x: x in l2 and l2.count(x) > 0, l1))",
 "common = [i for i in l1 if not all((j != i for j in l2))] if l1 else []",
 "common = list(filter(lambda x: any(map(lambda y: y == x, l2)), l1))",
 "common = [x for x in l1 if any(map(lambda y: x == y, l2))]",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any([i == j for j in l2]), l1))",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = common.tolist()",
 "same_values = [x for x in l1 if x in l2]\ncommon = same_values",
 "common = [i for i in l1 if l2.count(i) != 0]",
 "common = []\nif l1:\n    common = [i for i in l1 if i in l2]",
 "common = []\nfor i in l1:\n    if any([i == j for j in l2]):\n        common.append(i)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: all((i != j for j in l2)), l1))",
 "import functools\nimport operator\ncommon = list(filter(lambda x: any(map(functools.partial(operator.eq, x), l2)), l1))",
 "common = list(filter(lambda value: value in l2, l1))",
 "common = [i for i in l1 if i in [x for x in l2 if x in l1]]",
 "common = []\nif len(l1) > 0:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = list(filter(lambda i: any([i == j for j in l2]), l1))",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
 "common = []\nif l1 is not None:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = list(filter(lambda i: i in l2 or any((j == i for j in l2)), l1))",
 "common = [i for i in l1 if i in l2 and i in l1]",
 "common = []\nif l1:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1)) if l1 else []",
 "common = list(filter(lambda x: x in l2, l1)) if l1 else []",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = list(common)",
 "common = [x for x in l1 if x in tuple(l2)]",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
 "common = list(filter(lambda x: x in tuple(l2), l1))",
 "common = [i for i in l1 if i in filter(lambda x: x in l2, l1)]",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: all((x != y for y in l2)), l1))",
 "common = [i for i in l1 if any([i == j for j in l2])]"
]