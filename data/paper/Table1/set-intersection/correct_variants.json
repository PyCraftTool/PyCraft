[
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
 "common = list(set(l1).intersection(l2))",
 "common = [i for i in l1 if i in l2]",
 "common = list(filter(lambda x: x in l2, l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2, l1))",
 "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1))",
 "common = [x for x in l1 if any((x == y for y in l2))]",
 "import functools\ncommon = functools.reduce(lambda a, b: a + [b] if b in l2 else a, l1, [])",
 "common = list(filter(lambda x: any((x == y for y in l2)), l1))",
 "common = [x for x in l1 if x in tuple(l2)]",
 "common = list(filter(lambda x: x in tuple(l2), l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: all((x != y for y in l2)), l1))",
 "common = []\nfor i in l1:\n    if l2.count(i) > 0:\n        common.append(i)",
 "common = [i for i in l1 if l2.count(i) > 0]",
 "from itertools import filterfalse\ncommon = filterfalse(lambda x: x not in l2, l1)\ncommon = list(common)",
 "common = [i for i in l1 if l2.count(i) != 0]",
 "import pandas as pd\ndf = pd.DataFrame({'l1': l1})\ndf_filtered = df[df['l1'].isin(l2)]\ncommon = df_filtered['l1'].tolist()",
 "common = [i for i in l1 if i in l2 and l2.count(i) > 0]",
 "import pandas as pd\nl1 = pd.Series(l1)\ncommon = l1[l1.isin(l2)].tolist()",
 "import functools\nimport operator\ncommon = list(filter(lambda x: any(map(functools.partial(operator.eq, x), l2)), l1))",
 "common = []\nfor i in l1:\n    if i in l2 and l2.count(i) > 0:\n        common.append(i)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l2.count(l1[i]) > 0:\n        common.append(l1[i])",
 "from collections import Counter\ncounter_l1 = Counter(l1)\ncommon = [i for i in l1 if i in l2 and counter_l1[i] > 0]",
 "common = []\nfor x in l1:\n    if any((x == y for y in l2)):\n        common.append(x)",
 "common = []\nfor (i, value) in enumerate(l1):\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)",
 "common = list(filter(lambda x: x in l2 and l2.count(x) > 0, l1))",
 "common = [x for x in l1 if x in l2 and l1.count(x) > 0 and (l2.count(x) > 0)]",
 "common = list(filter(lambda x: x in l2 and l1.count(x) > 0 and (l2.count(x) > 0), l1))",
 "from collections import Counter\nfrom itertools import filterfalse\ncounter_l1 = Counter(l1)\n\ndef not_common(elem):\n    return elem not in l2 or counter_l1[elem] < 1\ncommon = list(filterfalse(not_common, l1))",
 "import numpy as np\ncount = np.sum([1 for value in l1 if value in l2 and l2.count(value) > 0])\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2 or l2.count(x) == 0, l1))",
 "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) > 0 and (l2.count(x) > 0):\n        common.append(x)",
 "common = []\nfor elem in l1:\n    if elem not in l2 or l1.count(elem) < 1:\n        continue\n    common.append(elem)",
 "common = list(filter(lambda item: item in l2, l1))",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        count += 1\n        common.append(value)",
 "common = [value for value in l1 if value in l2 and l2.count(value) > 0]\ncount = len(common)",
 "from itertools import compress\ncount = sum((1 for _ in compress(l1, [value in l2 and l2.count(value) > 0 for value in l1])))\ncommon = [value for (value, include) in zip(l1, [value in l2 and l2.count(value) > 0 for value in l1]) if include]",
 "common = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)\ncount = len(common)",
 "import itertools\ncommon = list(filter(lambda x: x in l2 and l2.count(x) != 0, l1))",
 "common = [x for x in l1 if x in l2 and l2.count(x) != 0]",
 "common = []\nfor x in l1:\n    if x in l2 and l2.count(x) != 0:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        if l1.count(x) > 0:\n            if l2.count(x) > 0:\n                common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        if x in l1 and x in l2:\n            common.append(x)",
 "common = [elem for elem in l1 if elem in l2 and l1.count(elem) >= 1]",
 "common = [elem for elem in l1 if l1.count(elem) >= 1 and elem in l2]",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda item: item not in l2, l1))",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l2.count(value) > 0:\n            count += 1\n            common.append(value)",
 "count = 0\ncommon = []\nfor index in range(len(l1)):\n    value = l1[index]\n    if value in l2:\n        if l2.count(value) > 0:\n            count += 1\n            common.append(value)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l2.count(l1[i]) > 0:\n            common.append(l1[i])",
 "common = [value for value in l1 if value in l2 and l2.count(value) > 0]\ncount = sum((1 for value in common))",
 "common = []\ncount = 0\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)\n        count += 1",
 "import itertools\ncount = sum([1 for value in l1 if value in l2 and l2.count(value) > 0])\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import itertools\ncommon = [value for value in l1 if value in l2 and list(itertools.chain(l1, l2)).count(value) > 0]\ncount = len(common)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l2.count(l1[i]) != 0:\n        common.append(l1[i])",
 "common = [x for x in l1 if x in l2 if x in l1 and x in l2]",
 "common = []\nfor x in l1:\n    if x in l2 and x in l1:\n        common.append(x)",
 "common = [elem for elem in l1 if l2.count(elem) >= 1]",
 "common = list(filter(lambda x: x in l2 and l1.count(x) >= 1, l1))",
 "import itertools\ncommon = [elem for elem in l1 if elem in itertools.chain(l2)]",
 "common = [elem for elem in l1 if elem in [k for (k, v) in zip(l2, [1] * len(l2)) if elem == k]]",
 "common = []\nfor elem in l1:\n    if l1.count(elem) >= 1 and elem in l2:\n        common.append(elem)",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        count += l2.count(value)\n        common.append(value)",
 "from collections import Counter\nl1_counts = Counter(l1)\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l1_counts[value] > 0:\n            count += 1\n            l1_counts[value] -= 1\n            common.append(value)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l2.count(l1[i]) > 0:\n        common.append(l1[i])\ncount = len(common)",
 "common = [value for value in l1 if value in l2]\ncount = len(common)",
 "from itertools import filterfalse\ncount = 0\ncommon = list(filterfalse(lambda x: x not in l2 or l1.count(x) <= 0, l1))\ncount = len(common)",
 "import numpy as np\ncount = np.sum([1 for value in l1 if value in l2])\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import numpy as np\ncommon_bool = [value in l2 for value in l1]\ncount = np.sum([common_bool[i] and l2.count(l1[i]) > 0 for i in range(len(common_bool))])\ncommon = [l1[i] for i in range(len(common_bool)) if common_bool[i] and l2.count(l1[i]) > 0]",
 "common_bool = [value in l2 for value in l1]\ncount = sum([common_bool[i] and l2.count(l1[i]) > 0 for i in range(len(common_bool))])\ncommon = [l1[i] for i in range(len(common_bool)) if common_bool[i] and l2.count(l1[i]) > 0]",
 "common = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)\ncount = sum((1 for value in common))",
 "import itertools\ncommon = list(filter(lambda value: value in l2 and l2.count(value) > 0, l1))",
 "import itertools\ncount = sum((1 for value in l1 if value in l2 and l2.count(value) > 0))\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import itertools\ncount = sum((1 for value in l1 if value in l2))\ncommon = [value for value in l1 if value in l2]",
 "common = []\nfor value in l1:\n    if value in l2:\n        common.append(value)\ncount = len(common)",
 "common = []\nfor value in l1:\n    if value in l2 and l1.count(value) + l2.count(value) > 1:\n        common.append(value)\ncount = len(common)",
 "from itertools import compress\ncommon = list(compress(l1, [elem in l2 for elem in l1]))",
 "common = list(filter(lambda x: l2.count(x) > 0, l1))",
 "common = [x for x in l1 if x in l2 and x in l1 and (x in l2)]",
 "same_values = [x for x in l1 if x in l2]\ncommon = same_values",
 "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) >= 1:\n        common.append(x)",
 "common = []\nfor (index, value) in enumerate(l1):\n    if l1.count(value) >= 1 and value in l2:\n        common.append(value)",
 "common = [value for value in l1 if value in l2]\ncount = sum((l2.count(value) for value in common))",
 "l1_counts = {i: l1.count(i) for i in l1}\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l1_counts[value] > 0:\n            count += 1\n            l1_counts[value] -= 1\n            common.append(value)",
 "import statistics\nl1_counts = statistics.Counter(l1)\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l1_counts[value] > 0:\n            count += 1\n            l1_counts[value] -= 1\n            common.append(value)",
 "from itertools import chain\ncommon = list(filter(lambda x: x in l2, l1))\ncount = len(common)",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2 or l1.count(x) <= 0, l1))\ncount = len(common)",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        count += 1\n        common.append(value)",
 "common = []\ncount = 0\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        count = count + 1",
 "import functools\ncount = functools.reduce(lambda x, y: x + 1 if y in l2 else x, l1, 0)\ncommon = [value for value in l1 if value in l2]",
 "common = []\ncount = 0\nfor value in l1:\n    if value in l2:\n        common.append(value)\n        count += 1",
 "common = []\ncount = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\n        count += 1",
 "count = 0\ncommon = []\nfor i in range(len(l1)):\n    common_bool = l1[i] in l2\n    if common_bool:\n        count += 1\n        common.append(l1[i])",
 "from itertools import compress\ncommon_bool = [value in l2 for value in l1]\ncommon = list(compress(l1, common_bool))\ncount = len(common)",
 "count = sum([int(value in l2) for value in l1])\ncommon = [value for value in l1 if value in l2]",
 "common_bool = []\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        common_bool.append(True)\n        count += l2.count(value)\n        common.append(value)\n    else:\n        common_bool.append(False)\ncommon",
 "common = [value for value in l1 if l2.count(value)]",
 "common = list(filter(lambda value: l2.count(value) > 0, l1))",
 "common = list(filter(lambda value: value in l2, l1))",
 "common = list(filter(lambda value: l2.count(value), l1))",
 "common = [value for value in l1 if value in l2] if any((value in l1 for value in l2)) else []",
 "common = [value for value in l1 if value in l2 and l2.count(value) > 0] if any((value in l1 for value in l2)) else []",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any((i == j for j in l2)), l1))",
 "common = list(filter(lambda i: any((i == j for j in l2)), l1))",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = list(common)",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = common.tolist()",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: all((i != j for j in l2)), l1))",
 "common = list(filter(lambda i: i in l2, l1))",
 "common = list(filter(lambda x: any((x == j for j in l2)), l1))\ncommon = list(common)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: not any((x == y for y in l2)), l1))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if any((y == z for z in l2)) else x, l1, [])",
 "common = []\nfor i in l1:\n    if any([i == j for j in l2]):\n        common.append(i)",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda i: all((i != j for j in l2)), l1))",
 "common = [i for i in l1 if not all((i != j for j in l2))]",
 "common = list(filter(lambda i: not all((i != j for j in l2)), l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda i: i not in l2, l1))",
 "from functools import reduce\ncommon = reduce(lambda a, b: a + [b] if b in l2 else a, l1, [])",
 "common = list(filter(lambda x: any(map(lambda y: y == x, l2)), l1))",
 "common = [i for i in l1 if i in [j for j in l2 if i == j]]",
 "common = [i for i in l1 if any([i == j for j in l2])]",
 "common = list(filter(lambda i: any([i == j for j in l2]), l1))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any([i == j for j in l2]), l1))",
 "common = []\nfor i in l1:\n    if not all((i != j for j in l2)):\n        common.append(i)",
 "common = [i for i in l1 if not all((j != i for j in l2))] if l1 else []",
 "common = [x for x in l1 if any(map(lambda y: x == y, l2))]",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i)]",
 "common = [i for i in l1 if i in filter(lambda x: x in l2, l1)]",
 "common = [i for i in l1 if any([j == i for j in l2]) or any([i == j for j in l2])]",
 "common = []\nif l1:\n    for i in l1:\n        if not all((j != i for j in l2)):\n            common.append(i)",
 "common = [i for i in l1 if any((j == i for j in l2))] if l1 else []",
 "common = [i for i in l1 if i in l2] if l1 else []",
 "common = list(filter(lambda x: x in l2, l1)) if l1 else []",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0)]",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i):\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) >= l2.count(i):\n            common.append(i)",
 "common = [i for i in l1 if i in [x for x in l2 if x in l1]]",
 "common = [i for i in l1 if i in l2 and i in l1]",
 "common = [i for i in l1 if i in l2 and i in set(l1)]",
 "common = []\nfor i in l1:\n    if i in tuple(l2):\n        common.append(i)",
 "common = []\nfor i in l1:\n    if any([j == i for j in l2]) or any([i == j for j in l2]):\n        common.append(i)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any([j == i for j in l2]) and (not any([i == j for j in l2])), l1))",
 "from functools import reduce\ncommon = reduce(lambda acc, i: acc + [i] if any([j == i for j in l2]) or any([i == j for j in l2]) else acc, l1, [])",
 "common = []\nfor i in range(len(l1)):\n    if any((l2[j] == l1[i] for j in range(len(l2)))):\n        common.append(l1[i])",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1)) if l1 else []",
 "common = []\nif l1:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif l1:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif l1:\n    common = [i for i in l1 if i in l2]",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if l1 else []",
 "common = []\nif l1:\n    for i in l1:\n        if i in l2:\n            common.append(i) if l1 else []",
 "import functools\ncommon = functools.reduce(lambda a, b: a + [b] if b in l2 else a, l1, []) if l1 else []",
 "import numpy as np\ncommon = np.array([i for i in l1 if i in l2]).tolist() if l1 else []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        continue",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        pass",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        pass\n    else:\n        break",
 "common = [i for i in l1 if i in l2]\nif not l1:\n    common = []",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0):\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) >= l2.count(i):\n            if l1.count(i) > 0:\n                common.append(i)",
 "common = list(filter(lambda i: i in l2 and l1.count(i) >= l2.count(i), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) >= l2.count(x), l1))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: i not in l2 or l1.count(i) < l2.count(i), l1))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in l1 and y in l2 else x, l1, [])",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i in l1:\n            common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2 and i in set(l1):\n        common.append(i)",
 "common = [i for i in l1 if any((j == i for j in l2)) or any((i == j for j in l2))]",
 "common = list(filter(lambda i: any((j == i for j in l2)) or any((i == j for j in l2)), l1))",
 "common = [i for i in l1 if i in l2 or i in l2]",
 "common = list(filter(lambda i: i in l2 or i in l2, l1))",
 "common = [i for i in l1 if i in l2 or any((j == i for j in l2))]",
 "common = list(filter(lambda i: i in l2 or any((j == i for j in l2)), l1))",
 "common = [i for i in l1 if i in l2 or i == l2]",
 "common = list(filter(lambda i: i in l2 or i == l2, l1))",
 "common = list(filter(lambda i: any([j == i for j in l2]) or any([i == j for j in l2]), l1))",
 "common = [i for i in l1 if i in l2 or i == l2 or any([j == i for j in l2]) or any([i == j for j in l2])]",
 "common = list(filter(lambda i: i in l2 or i == l2 or any([j == i for j in l2]) or any([i == j for j in l2]), l1))",
 "common = []\nif len(l1) > 0:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif l1 is not None:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif len(l1) > 0:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif l1 is not None:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif len(l1) > 0:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif l1:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif len(l1) != 0:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif l1 is not None:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif len(l1) > 0:\n    common = [i for i in l1 if i in l2]",
 "common = []\nif len(l1) != 0:\n    common = [i for i in l1 if i in l2]",
 "common = []\nif l1 is not None:\n    common = [i for i in l1 if i in l2]",
 "common = []\nif len(l1) > 0:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif l1:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif len(l1) != 0:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif l1 is not None:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif len(l1) > 0:\n    common.extend([i for i in l1 if i in l2])",
 "common = []\nif l1:\n    common.extend([i for i in l1 if i in l2])",
 "common = []\nif len(l1) != 0:\n    common.extend([i for i in l1 if i in l2])",
 "common = []\nif l1 is not None:\n    common.extend([i for i in l1 if i in l2])",
 "from functools import reduce\ncommon = reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else list(filter(lambda x: x in l2, l1))",
 "common = []\nif len(l1) < 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)\nelse:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    elif len(l1) >= 1000:\n        break",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else []",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else [x for x in l1 if x in l2]",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else list(set(l1) & set(l2))",
 "common = []\nif len(l1) < 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nif len(l1) >= 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)\nelse:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    elif len(l1) >= 1000:\n        common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x) if len(l1) < 1000 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\n        else:\n            common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\ncommon = common if len(l1) < 1000 else common",
 "common = [x for x in l1 if x in l2 if len(l1) < 1000]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common.append(x)",
 "common = list(filter(lambda x: x in l2 and len(l1) < 1000, l1))",
 "from functools import reduce\ncommon = reduce(lambda a, b: a + b, [[x] if x in l2 else [] for x in l1]) if len(l1) < 1000 else list(set(l1) & set(l2))",
 "import statistics\ncommon = [x for x in l1 if x in l2] if len(l1) < 1000 else statistics.mode([x for x in l1 if x in l2])",
 "common = []\nfor x in l1:\n    if len(l1) < 1000 and x in l2:\n        common.append(x)",
 "common = [x for x in l1 if len(l1) < 1000 and x in l2]",
 "common = list(filter(lambda x: x in l2, l1)) if len(l1) < 1000 else []",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1[:1000])) if len(l1) < 1000 else []",
 "from functools import reduce\ncommon = reduce(lambda acc, x: acc + [x] if x in l2 else acc, l1, [])",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) >= 1000:\n        common.append(x)\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common.append(x)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\n    elif len(l1) >= 1000:\n        common = []",
 "common = []\nfor (i, x) in enumerate(l1):\n    if x in l2:\n        common.append(x)\n    elif len(l1) >= 1000:\n        common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    if len(l1) >= 1000:\n        common = []",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2, l1)) if len(l1) < 1000 else []",
 "common = [x for x in l1 if x in l2]\nif len(l1) >= 1000:\n    common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)",
 "import numpy as np\ncommon = [x for x in l1 if x in l2 and len(l1) < 1000]",
 "from functools import reduce\ncommon = reduce(lambda a, b: a + [b] if b in l2 else a, l1, []) if len(l1) < 1000 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\n        else:\n            common = []\n            break",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\n        else:\n            common.clear()",
 "common = []\nif len(l1) < 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    common = common if len(common) > 0 else []",
 "common = []\nif l1 and l2 and (len(l1) < 1000):\n    common = [x for x in l1 if x in l2]\n    common = common if len(common) > 0 else []",
 "common = []\nif l1 and l2 and (len(l1) < 1000):\n    common = [x for x in l1 if x in l2]\n    if not common:\n        common = []",
 "common = []\nif l1 and l2 and (len(l1) < 1000):\n    common = [x for x in l1 if x in l2]\n    if common:\n        common = common\n    else:\n        common = []",
 "common = [x for x in l1 if x in l2]\ncommon = common if len(l1) < 1000 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\ncommon = common if len(l1) < 1000 else []",
 "common = [x for x in l1 if x in l2]\ncommon = common if len(l1) < 1000 else common",
 "common = filter(lambda x: x in l2, l1)\ncommon = list(common) if len(l1) < 1000 else list(common)",
 "common = [x for x in l1 if x in l2][:1000]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common += [x]",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set([x for x in l1 if x in l2]), key=[x for x in l1 if x in l2].count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set([x for x in l1 if x in l2]), key=[l1.count(x) for x in l1 if x in l2].count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set([x for x in l1 if x in l2]), key=lambda x: [l1.count(x) for x in l1 if x in l2].count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else statistics.multimode([x for x in l1 if x in l2])",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else statistics.multimode([l1.count(x) for x in l1 if x in l2])",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set(l1) & set(l2), key=l1.count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set(l1) & set(l2), key=l1.count) if len(set(l1) & set(l2)) > 0 else None",
 "common = list(filter(lambda x: len(l1) < 1000 and x in l2, l1))",
 "common = []\nfor x in l1:\n    if len(l1) < 1000:\n        if x in l2:\n            common.append(x)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: len(l1) >= 1000 or x not in l2, l1))",
 "import functools\ncommon = functools.reduce(lambda acc, x: acc + [x] if len(l1) < 1000 and x in l2 else acc, l1, [])",
 "import itertools\ncommon = list(itertools.chain.from_iterable([[x] for x in l1 if x in l2]))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1)) if len(l1) < 1000 else []",
 "import functools as ft\ncommon = list(filter(ft.partial(lambda x, l2: x in l2, l2=l2), l1)) if len(l1) < 1000 else []",
 "common = []\nif len(l1) < 1000:\n    common = [item for item in l1 if item in l2]",
 "from itertools import filterfalse\ncommon = []\nif len(l1) < 1000:\n    common = list(filterfalse(lambda x: x not in l2, l1))",
 "import numpy as np\ncommon = []\nif len(l1) < 1000:\n    common = list(filter(lambda x: x in l2, l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2, l1[:1000])) if len(l1) < 1000 else []",
 "common = [x for x in l1[:1000] if x in l2]",
 "common = []\nfor x in l1[:1000]:\n    if x in l2:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common.append(x)\n        else:\n            common.append(x)",
 "common = []\nif len(l1) >= 1000:\n    common = [x for x in l1 if x in l2]\nelse:\n    common = [x for x in l1 if x in l2]",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common += [x]",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\n        if len(l1) >= 1000:\n            common = []",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else [] if len(l1) >= 1000 else []",
 "common = [x for x in l1 if x in l2] if len(l1) <= 999 else []",
 "common = [x for x in l1 if x in l2] if len(l1) % 1000 != 0 else []",
 "common = [x for (i, x) in enumerate(l1) if x in l2]",
 "common = []\nif len(l1) >= 1000:\n    common = []\nelse:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nfor x in l1:\n    if len(l1) >= 1000:\n        common = []\n    if x in l2:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\nif len(l1) >= 1000:\n    common = []",
 "common = []\nif len(l1) >= 1000:\n    common = []\nelse:\n    common = [x for x in l1 if x in l2]",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\ncommon = list(common)",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common.append(x)\ncommon = list(common)",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000]\ncommon = list(common)",
 "common = filter(lambda x: x in l2 and len(l1) < 1000, l1)\ncommon = list(common)",
 "if len(l1) < 1000:\n    common = [x for x in l1 if x in l2]\nelse:\n    common = []",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: not (x in l2 and len(l1) < 1000), l1))",
 "common = [x for x in l1 if x in l2 and len(l1) < 500]",
 "common = [x for x in l1 if x in l2 and len(l1) < 10000]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 500:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 10000:\n        common.append(x)",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000] if l1 else []",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000] if l1 and l2 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common.clear()\n        else:\n            common.append(x)"
]