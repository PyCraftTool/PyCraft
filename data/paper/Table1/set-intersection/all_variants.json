[
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)",
 "common = list(set(l1).intersection(l2))",
 "common = [i for i in l1 if i in l2]",
 "common = list(filter(lambda x: x in l2, l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2, l1))",
 "common = filter(lambda x: x in l2, l1)\ncommon = list(common)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1))",
 "common = [x for x in l1 if any((x == y for y in l2))]",
 "import functools\ncommon = functools.reduce(lambda a, b: a + [b] if b in l2 else a, l1, [])",
 "common = list(filter(lambda x: any((x == y for y in l2)), l1))",
 "common = [x for x in l1 if x in tuple(l2)]",
 "common = list(filter(lambda x: x in tuple(l2), l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: all((x != y for y in l2)), l1))",
 "common = []\nfor i in l1:\n    if l2.count(i) > 0:\n        common.append(i)",
 "common = [i for i in l1 if l2.count(i) > 0]",
 "from itertools import filterfalse\ncommon = filterfalse(lambda x: x not in l2, l1)\ncommon = list(common)",
 "common = [i for i in l1 if l2.count(i) != 0]",
 "import pandas as pd\ndf = pd.DataFrame({'l1': l1})\ndf_filtered = df[df['l1'].isin(l2)]\ncommon = df_filtered['l1'].tolist()",
 "common = [i for i in l1 if i in l2 and l2.count(i) > 0]",
 "import pandas as pd\nl1 = pd.Series(l1)\ncommon = l1[l1.isin(l2)].tolist()",
 "import functools\nimport operator\ncommon = list(filter(lambda x: any(map(functools.partial(operator.eq, x), l2)), l1))",
 "common = []\nfor i in l1:\n    if i in l2 and l2.count(i) > 0:\n        common.append(i)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l2.count(l1[i]) > 0:\n        common.append(l1[i])",
 "from collections import Counter\ncounter_l1 = Counter(l1)\ncommon = [i for i in l1 if i in l2 and counter_l1[i] > 0]",
 "common = []\nfor x in l1:\n    if any((x == y for y in l2)):\n        common.append(x)",
 "common = []\nfor (i, value) in enumerate(l1):\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)",
 "common = list(filter(lambda x: x in l2 and l2.count(x) > 0, l1))",
 "common = [x for x in l1 if x in l2 and l1.count(x) > 0 and (l2.count(x) > 0)]",
 "common = list(filter(lambda x: x in l2 and l1.count(x) > 0 and (l2.count(x) > 0), l1))",
 "from collections import Counter\nfrom itertools import filterfalse\ncounter_l1 = Counter(l1)\n\ndef not_common(elem):\n    return elem not in l2 or counter_l1[elem] < 1\ncommon = list(filterfalse(not_common, l1))",
 "import numpy as np\ncount = np.sum([1 for value in l1 if value in l2 and l2.count(value) > 0])\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2 or l2.count(x) == 0, l1))",
 "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) > 0 and (l2.count(x) > 0):\n        common.append(x)",
 "common = []\nfor elem in l1:\n    if elem not in l2 or l1.count(elem) < 1:\n        continue\n    common.append(elem)",
 "common = list(filter(lambda item: item in l2, l1))",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        count += 1\n        common.append(value)",
 "common = [value for value in l1 if value in l2 and l2.count(value) > 0]\ncount = len(common)",
 "from itertools import compress\ncount = sum((1 for _ in compress(l1, [value in l2 and l2.count(value) > 0 for value in l1])))\ncommon = [value for (value, include) in zip(l1, [value in l2 and l2.count(value) > 0 for value in l1]) if include]",
 "common = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)\ncount = len(common)",
 "import itertools\ncommon = list(filter(lambda x: x in l2 and l2.count(x) != 0, l1))",
 "common = [x for x in l1 if x in l2 and l2.count(x) != 0]",
 "common = []\nfor x in l1:\n    if x in l2 and l2.count(x) != 0:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        if l1.count(x) > 0:\n            if l2.count(x) > 0:\n                common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        if x in l1 and x in l2:\n            common.append(x)",
 "common = [elem for elem in l1 if elem in l2 and l1.count(elem) >= 1]",
 "common = [elem for elem in l1 if l1.count(elem) >= 1 and elem in l2]",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda item: item not in l2, l1))",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l2.count(value) > 0:\n            count += 1\n            common.append(value)",
 "count = 0\ncommon = []\nfor index in range(len(l1)):\n    value = l1[index]\n    if value in l2:\n        if l2.count(value) > 0:\n            count += 1\n            common.append(value)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        if l2.count(l1[i]) > 0:\n            common.append(l1[i])",
 "common = [value for value in l1 if value in l2 and l2.count(value) > 0]\ncount = sum((1 for value in common))",
 "common = []\ncount = 0\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)\n        count += 1",
 "import itertools\ncount = sum([1 for value in l1 if value in l2 and l2.count(value) > 0])\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import itertools\ncommon = [value for value in l1 if value in l2 and list(itertools.chain(l1, l2)).count(value) > 0]\ncount = len(common)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l2.count(l1[i]) != 0:\n        common.append(l1[i])",
 "common = [x for x in l1 if x in l2 if x in l1 and x in l2]",
 "common = []\nfor x in l1:\n    if x in l2 and x in l1:\n        common.append(x)",
 "common = [elem for elem in l1 if l2.count(elem) >= 1]",
 "common = list(filter(lambda x: x in l2 and l1.count(x) >= 1, l1))",
 "import itertools\ncommon = [elem for elem in l1 if elem in itertools.chain(l2)]",
 "common = [elem for elem in l1 if elem in [k for (k, v) in zip(l2, [1] * len(l2)) if elem == k]]",
 "common = []\nfor elem in l1:\n    if l1.count(elem) >= 1 and elem in l2:\n        common.append(elem)",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        count += l2.count(value)\n        common.append(value)",
 "from collections import Counter\nl1_counts = Counter(l1)\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l1_counts[value] > 0:\n            count += 1\n            l1_counts[value] -= 1\n            common.append(value)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2 and l2.count(l1[i]) > 0:\n        common.append(l1[i])\ncount = len(common)",
 "common = [value for value in l1 if value in l2]\ncount = len(common)",
 "from itertools import filterfalse\ncount = 0\ncommon = list(filterfalse(lambda x: x not in l2 or l1.count(x) <= 0, l1))\ncount = len(common)",
 "import numpy as np\ncount = np.sum([1 for value in l1 if value in l2])\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import numpy as np\ncommon_bool = [value in l2 for value in l1]\ncount = np.sum([common_bool[i] and l2.count(l1[i]) > 0 for i in range(len(common_bool))])\ncommon = [l1[i] for i in range(len(common_bool)) if common_bool[i] and l2.count(l1[i]) > 0]",
 "common_bool = [value in l2 for value in l1]\ncount = sum([common_bool[i] and l2.count(l1[i]) > 0 for i in range(len(common_bool))])\ncommon = [l1[i] for i in range(len(common_bool)) if common_bool[i] and l2.count(l1[i]) > 0]",
 "common = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)\ncount = sum((1 for value in common))",
 "import itertools\ncommon = list(filter(lambda value: value in l2 and l2.count(value) > 0, l1))",
 "import itertools\ncount = sum((1 for value in l1 if value in l2 and l2.count(value) > 0))\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "import itertools\ncount = sum((1 for value in l1 if value in l2))\ncommon = [value for value in l1 if value in l2]",
 "common = []\nfor value in l1:\n    if value in l2:\n        common.append(value)\ncount = len(common)",
 "common = []\nfor value in l1:\n    if value in l2 and l1.count(value) + l2.count(value) > 1:\n        common.append(value)\ncount = len(common)",
 "from itertools import compress\ncommon = list(compress(l1, [elem in l2 for elem in l1]))",
 "common = list(filter(lambda x: l2.count(x) > 0, l1))",
 "common = [x for x in l1 if x in l2 and x in l1 and (x in l2)]",
 "same_values = [x for x in l1 if x in l2]\ncommon = same_values",
 "common = []\nfor x in l1:\n    if x in l2 and l1.count(x) >= 1:\n        common.append(x)",
 "common = []\nfor (index, value) in enumerate(l1):\n    if l1.count(value) >= 1 and value in l2:\n        common.append(value)",
 "common = [value for value in l1 if value in l2]\ncount = sum((l2.count(value) for value in common))",
 "l1_counts = {i: l1.count(i) for i in l1}\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l1_counts[value] > 0:\n            count += 1\n            l1_counts[value] -= 1\n            common.append(value)",
 "import statistics\nl1_counts = statistics.Counter(l1)\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l1_counts[value] > 0:\n            count += 1\n            l1_counts[value] -= 1\n            common.append(value)",
 "from itertools import chain\ncommon = list(filter(lambda x: x in l2, l1))\ncount = len(common)",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2 or l1.count(x) <= 0, l1))\ncount = len(common)",
 "count = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        count += 1\n        common.append(value)",
 "common = []\ncount = 0\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        count = count + 1",
 "import functools\ncount = functools.reduce(lambda x, y: x + 1 if y in l2 else x, l1, 0)\ncommon = [value for value in l1 if value in l2]",
 "common = []\ncount = 0\nfor value in l1:\n    if value in l2:\n        common.append(value)\n        count += 1",
 "common = []\ncount = 0\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\n        count += 1",
 "count = 0\ncommon = []\nfor i in range(len(l1)):\n    common_bool = l1[i] in l2\n    if common_bool:\n        count += 1\n        common.append(l1[i])",
 "from itertools import compress\ncommon_bool = [value in l2 for value in l1]\ncommon = list(compress(l1, common_bool))\ncount = len(common)",
 "count = sum([int(value in l2) for value in l1])\ncommon = [value for value in l1 if value in l2]",
 "common_bool = []\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        common_bool.append(True)\n        count += l2.count(value)\n        common.append(value)\n    else:\n        common_bool.append(False)\ncommon",
 "common = [value for value in l1 if l2.count(value)]",
 "common = list(filter(lambda value: l2.count(value) > 0, l1))",
 "common = list(filter(lambda value: value in l2, l1))",
 "common = list(filter(lambda value: l2.count(value), l1))",
 "common = [value for value in l1 if value in l2] if any((value in l1 for value in l2)) else []",
 "common = [value for value in l1 if value in l2 and l2.count(value) > 0] if any((value in l1 for value in l2)) else []",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any((i == j for j in l2)), l1))",
 "common = list(filter(lambda i: any((i == j for j in l2)), l1))",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = list(common)",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = common.tolist()",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: all((i != j for j in l2)), l1))",
 "common = list(filter(lambda i: i in l2, l1))",
 "common = list(filter(lambda x: any((x == j for j in l2)), l1))\ncommon = list(common)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: not any((x == y for y in l2)), l1))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if any((y == z for z in l2)) else x, l1, [])",
 "common = []\nfor i in l1:\n    if any([i == j for j in l2]):\n        common.append(i)",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda i: all((i != j for j in l2)), l1))",
 "common = [i for i in l1 if not all((i != j for j in l2))]",
 "common = list(filter(lambda i: not all((i != j for j in l2)), l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda i: i not in l2, l1))",
 "from functools import reduce\ncommon = reduce(lambda a, b: a + [b] if b in l2 else a, l1, [])",
 "common = list(filter(lambda x: any(map(lambda y: y == x, l2)), l1))",
 "common = [i for i in l1 if i in [j for j in l2 if i == j]]",
 "common = [i for i in l1 if any([i == j for j in l2])]",
 "common = list(filter(lambda i: any([i == j for j in l2]), l1))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any([i == j for j in l2]), l1))",
 "common = []\nfor i in l1:\n    if not all((i != j for j in l2)):\n        common.append(i)",
 "common = [i for i in l1 if not all((j != i for j in l2))] if l1 else []",
 "common = [x for x in l1 if any(map(lambda y: x == y, l2))]",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i)]",
 "common = [i for i in l1 if i in filter(lambda x: x in l2, l1)]",
 "common = [i for i in l1 if any([j == i for j in l2]) or any([i == j for j in l2])]",
 "common = []\nif l1:\n    for i in l1:\n        if not all((j != i for j in l2)):\n            common.append(i)",
 "common = [i for i in l1 if any((j == i for j in l2))] if l1 else []",
 "common = [i for i in l1 if i in l2] if l1 else []",
 "common = list(filter(lambda x: x in l2, l1)) if l1 else []",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0)]",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i):\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) >= l2.count(i):\n            common.append(i)",
 "common = [i for i in l1 if i in [x for x in l2 if x in l1]]",
 "common = [i for i in l1 if i in l2 and i in l1]",
 "common = [i for i in l1 if i in l2 and i in set(l1)]",
 "common = []\nfor i in l1:\n    if i in tuple(l2):\n        common.append(i)",
 "common = []\nfor i in l1:\n    if any([j == i for j in l2]) or any([i == j for j in l2]):\n        common.append(i)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: not any([j == i for j in l2]) and (not any([i == j for j in l2])), l1))",
 "from functools import reduce\ncommon = reduce(lambda acc, i: acc + [i] if any([j == i for j in l2]) or any([i == j for j in l2]) else acc, l1, [])",
 "common = []\nfor i in range(len(l1)):\n    if any((l2[j] == l1[i] for j in range(len(l2)))):\n        common.append(l1[i])",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1)) if l1 else []",
 "common = []\nif l1:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif l1:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif l1:\n    common = [i for i in l1 if i in l2]",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i) if l1 else []",
 "common = []\nif l1:\n    for i in l1:\n        if i in l2:\n            common.append(i) if l1 else []",
 "import functools\ncommon = functools.reduce(lambda a, b: a + [b] if b in l2 else a, l1, []) if l1 else []",
 "import numpy as np\ncommon = np.array([i for i in l1 if i in l2]).tolist() if l1 else []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    else:\n        continue",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        continue",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        pass",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n    elif i not in l2:\n        pass\n    else:\n        break",
 "common = [i for i in l1 if i in l2]\nif not l1:\n    common = []",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0):\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) >= l2.count(i):\n            if l1.count(i) > 0:\n                common.append(i)",
 "common = list(filter(lambda i: i in l2 and l1.count(i) >= l2.count(i), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) >= l2.count(x), l1))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: i not in l2 or l1.count(i) < l2.count(i), l1))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in l1 and y in l2 else x, l1, [])",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i in l1:\n            common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2 and i in set(l1):\n        common.append(i)",
 "common = [i for i in l1 if any((j == i for j in l2)) or any((i == j for j in l2))]",
 "common = list(filter(lambda i: any((j == i for j in l2)) or any((i == j for j in l2)), l1))",
 "common = [i for i in l1 if i in l2 or i in l2]",
 "common = list(filter(lambda i: i in l2 or i in l2, l1))",
 "common = [i for i in l1 if i in l2 or any((j == i for j in l2))]",
 "common = list(filter(lambda i: i in l2 or any((j == i for j in l2)), l1))",
 "common = [i for i in l1 if i in l2 or i == l2]",
 "common = list(filter(lambda i: i in l2 or i == l2, l1))",
 "common = list(filter(lambda i: any([j == i for j in l2]) or any([i == j for j in l2]), l1))",
 "common = [i for i in l1 if i in l2 or i == l2 or any([j == i for j in l2]) or any([i == j for j in l2])]",
 "common = list(filter(lambda i: i in l2 or i == l2 or any([j == i for j in l2]) or any([i == j for j in l2]), l1))",
 "common = []\nif len(l1) > 0:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif l1 is not None:\n    for i in l1:\n        if any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif len(l1) > 0:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif len(l1) != 0:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif l1 is not None:\n    for i in l1:\n        if i in l2:\n            common.append(i)",
 "common = []\nif len(l1) > 0:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif l1:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif len(l1) != 0:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif l1 is not None:\n    common = [i for i in l1 if any((j == i for j in l2))]",
 "common = []\nif len(l1) > 0:\n    common = [i for i in l1 if i in l2]",
 "common = []\nif len(l1) != 0:\n    common = [i for i in l1 if i in l2]",
 "common = []\nif l1 is not None:\n    common = [i for i in l1 if i in l2]",
 "common = []\nif len(l1) > 0:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif l1:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif len(l1) != 0:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif l1 is not None:\n    common.extend([i for i in l1 if any((j == i for j in l2))])",
 "common = []\nif len(l1) > 0:\n    common.extend([i for i in l1 if i in l2])",
 "common = []\nif l1:\n    common.extend([i for i in l1 if i in l2])",
 "common = []\nif len(l1) != 0:\n    common.extend([i for i in l1 if i in l2])",
 "common = []\nif l1 is not None:\n    common.extend([i for i in l1 if i in l2])",
 "from functools import reduce\ncommon = reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else list(filter(lambda x: x in l2, l1))",
 "common = []\nif len(l1) < 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)\nelse:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    elif len(l1) >= 1000:\n        break",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else []",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else [x for x in l1 if x in l2]",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else list(set(l1) & set(l2))",
 "common = []\nif len(l1) < 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nif len(l1) >= 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)\nelse:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    elif len(l1) >= 1000:\n        common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x) if len(l1) < 1000 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\n        else:\n            common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\ncommon = common if len(l1) < 1000 else common",
 "common = [x for x in l1 if x in l2 if len(l1) < 1000]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common.append(x)",
 "common = list(filter(lambda x: x in l2 and len(l1) < 1000, l1))",
 "from functools import reduce\ncommon = reduce(lambda a, b: a + b, [[x] if x in l2 else [] for x in l1]) if len(l1) < 1000 else list(set(l1) & set(l2))",
 "import statistics\ncommon = [x for x in l1 if x in l2] if len(l1) < 1000 else statistics.mode([x for x in l1 if x in l2])",
 "common = []\nfor x in l1:\n    if len(l1) < 1000 and x in l2:\n        common.append(x)",
 "common = [x for x in l1 if len(l1) < 1000 and x in l2]",
 "common = list(filter(lambda x: x in l2, l1)) if len(l1) < 1000 else []",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1[:1000])) if len(l1) < 1000 else []",
 "from functools import reduce\ncommon = reduce(lambda acc, x: acc + [x] if x in l2 else acc, l1, [])",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) >= 1000:\n        common.append(x)\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common.append(x)",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\n    elif len(l1) >= 1000:\n        common = []",
 "common = []\nfor (i, x) in enumerate(l1):\n    if x in l2:\n        common.append(x)\n    elif len(l1) >= 1000:\n        common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    if len(l1) >= 1000:\n        common = []",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2, l1)) if len(l1) < 1000 else []",
 "common = [x for x in l1 if x in l2]\nif len(l1) >= 1000:\n    common = []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)",
 "import numpy as np\ncommon = [x for x in l1 if x in l2 and len(l1) < 1000]",
 "from functools import reduce\ncommon = reduce(lambda a, b: a + [b] if b in l2 else a, l1, []) if len(l1) < 1000 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\n        else:\n            common = []\n            break",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\n        else:\n            common.clear()",
 "common = []\nif len(l1) < 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    common = common if len(common) > 0 else []",
 "common = []\nif l1 and l2 and (len(l1) < 1000):\n    common = [x for x in l1 if x in l2]\n    common = common if len(common) > 0 else []",
 "common = []\nif l1 and l2 and (len(l1) < 1000):\n    common = [x for x in l1 if x in l2]\n    if not common:\n        common = []",
 "common = []\nif l1 and l2 and (len(l1) < 1000):\n    common = [x for x in l1 if x in l2]\n    if common:\n        common = common\n    else:\n        common = []",
 "common = [x for x in l1 if x in l2]\ncommon = common if len(l1) < 1000 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\ncommon = common if len(l1) < 1000 else []",
 "common = [x for x in l1 if x in l2]\ncommon = common if len(l1) < 1000 else common",
 "common = filter(lambda x: x in l2, l1)\ncommon = list(common) if len(l1) < 1000 else list(common)",
 "common = [x for x in l1 if x in l2][:1000]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common += [x]",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set([x for x in l1 if x in l2]), key=[x for x in l1 if x in l2].count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set([x for x in l1 if x in l2]), key=[l1.count(x) for x in l1 if x in l2].count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set([x for x in l1 if x in l2]), key=lambda x: [l1.count(x) for x in l1 if x in l2].count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else statistics.multimode([x for x in l1 if x in l2])",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else statistics.multimode([l1.count(x) for x in l1 if x in l2])",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set(l1) & set(l2), key=l1.count)",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else max(set(l1) & set(l2), key=l1.count) if len(set(l1) & set(l2)) > 0 else None",
 "common = list(filter(lambda x: len(l1) < 1000 and x in l2, l1))",
 "common = []\nfor x in l1:\n    if len(l1) < 1000:\n        if x in l2:\n            common.append(x)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: len(l1) >= 1000 or x not in l2, l1))",
 "import functools\ncommon = functools.reduce(lambda acc, x: acc + [x] if len(l1) < 1000 and x in l2 else acc, l1, [])",
 "import itertools\ncommon = list(itertools.chain.from_iterable([[x] for x in l1 if x in l2]))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1)) if len(l1) < 1000 else []",
 "import functools as ft\ncommon = list(filter(ft.partial(lambda x, l2: x in l2, l2=l2), l1)) if len(l1) < 1000 else []",
 "common = []\nif len(l1) < 1000:\n    common = [item for item in l1 if item in l2]",
 "from itertools import filterfalse\ncommon = []\nif len(l1) < 1000:\n    common = list(filterfalse(lambda x: x not in l2, l1))",
 "import numpy as np\ncommon = []\nif len(l1) < 1000:\n    common = list(filter(lambda x: x in l2, l1))",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in l2, l1[:1000])) if len(l1) < 1000 else []",
 "common = [x for x in l1[:1000] if x in l2]",
 "common = []\nfor x in l1[:1000]:\n    if x in l2:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common.append(x)\n        else:\n            common.append(x)",
 "common = []\nif len(l1) >= 1000:\n    common = [x for x in l1 if x in l2]\nelse:\n    common = [x for x in l1 if x in l2]",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common += [x]",
 "common = []\nfor i in range(len(l1)):\n    if l1[i] in l2:\n        common.append(l1[i])\n        if len(l1) >= 1000:\n            common = []",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else [] if len(l1) >= 1000 else []",
 "common = [x for x in l1 if x in l2] if len(l1) <= 999 else []",
 "common = [x for x in l1 if x in l2] if len(l1) % 1000 != 0 else []",
 "common = [x for (i, x) in enumerate(l1) if x in l2]",
 "common = []\nif len(l1) >= 1000:\n    common = []\nelse:\n    for x in l1:\n        if x in l2:\n            common.append(x)",
 "common = []\nfor x in l1:\n    if len(l1) >= 1000:\n        common = []\n    if x in l2:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\nif len(l1) >= 1000:\n    common = []",
 "common = []\nif len(l1) >= 1000:\n    common = []\nelse:\n    common = [x for x in l1 if x in l2]",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\ncommon = list(common)",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 1000:\n        common.append(x)\ncommon = list(common)",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000]\ncommon = list(common)",
 "common = filter(lambda x: x in l2 and len(l1) < 1000, l1)\ncommon = list(common)",
 "if len(l1) < 1000:\n    common = [x for x in l1 if x in l2]\nelse:\n    common = []",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: not (x in l2 and len(l1) < 1000), l1))",
 "common = [x for x in l1 if x in l2 and len(l1) < 500]",
 "common = [x for x in l1 if x in l2 and len(l1) < 10000]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 500:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) < 10000:\n        common.append(x)",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000] if l1 else []",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000] if l1 and l2 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common.clear()\n        else:\n            common.append(x)",
 "common = list(set(l1) & set(l2))",
 "common = filter(lambda x: x in l2, l1)",
 "common = [i for i in l1 if i in set(l2)]",
 "common = [i for i in set(l1) if i in l2]",
 "common = [i for i in l1 if i in l2 and i not in common]",
 "common = list(filter(lambda x: x in set(l2), l1))",
 "common = list(filter(lambda x: x in l2 and x not in common, l1))",
 "common = [x for x in l1 if x in set(l2) and x not in common]",
 "common = list(filter(lambda x: x in set(l2) and x not in common, l1))",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2)]",
 "common = list(filter(lambda x: x in l2 and x not in l1 and (x not in l2), l1))",
 "common = [x for x in l1 if x in set(l2) and x not in l1 and (x not in l2)]",
 "common = list(filter(lambda x: x in set(l2) and x not in l1 and (x not in l2), l1))",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2)]",
 "common = list(filter(lambda x: x in l2 and x not in common and (x not in l1) and (x not in l2), l1))",
 "common = [x for x in l1 if x in set(l2) and x not in common and (x not in l1) and (x not in l2)]",
 "common = list(filter(lambda x: x in set(l2) and x not in common and (x not in l1) and (x not in l2), l1))",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in common)]",
 "common = list(filter(lambda x: x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in common), l1))",
 "common = [x for x in l1 if x in set(l2) and x not in common and (x not in l1) and (x not in l2) and (x not in common)]",
 "common = list(filter(lambda x: x in set(l2) and x not in common and (x not in l1) and (x not in l2) and (x not in common), l1))",
 "import numpy as np\ncommon = np.intersect1d(l1, l2)",
 "common = [i for i in l1 for j in l2 if i == j]",
 "common = [i for i in l1 if any((i == j for j in set(l2)))]",
 "common = list(set(l1).intersection(set(l2)))",
 "common = [i for i in set(l1) if i in set(l2)]",
 "common = [i for i in l1 if i in l2 and i not in common and (i not in l1) and (i not in l2) and (i not in l1) and (i not in l2)]",
 "import numpy as np\ncommon = np.intersect1d(l1, l2).tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])",
 "common = []\nfor i in l1:\n    if any((i == j for j in l2)):\n        common.append(i)\ncommon = tuple(common)",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = tuple(common)",
 "import numpy as np\ncommon = np.array([i for i in l1 if any((i == j for j in l2))])\ncommon = common.astype(int)",
 "common = []\nfor i in l1:\n    for j in l2:\n        if i == j:\n            common.append(i)",
 "common = []\nfor i in range(len(l1)):\n    for j in range(len(l2)):\n        if l1[i] == l2[j]:\n            common.append(l1[i])",
 "import itertools\ncommon = list(set(itertools.chain.from_iterable(itertools.product(l1, l2))))",
 "common = list(set(l1).intersection(l2))",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any(np.array(i) == np.array(l2))])\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any(np.array(i) == np.array(l2))], dtype=object)\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any((np.array_equal(i, j) for j in l2))])\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any((np.array_equal(i, j) for j in l2))], dtype=object)\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array(list(filter(lambda x: np.any((np.array_equal(x, y) for y in l2)), l1)))\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any((np.all(np.array(i) == np.array(j)) for j in l2))])\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any((np.all(np.array(i) == np.array(j)) for j in l2))], dtype=object)\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array(list(filter(lambda x: np.any((np.all(np.array(x) == np.array(y)) for y in l2)), l1)))\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any((np.array_equal(np.array(i), np.array(j)) for j in l2))])\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array([i for i in l1 if np.any((np.array_equal(np.array(i), np.array(j)) for j in l2))], dtype=object)\ncommon = common.tolist()",
 "import numpy as np\ncommon = np.array(list(filter(lambda x: np.any((np.array_equal(np.array(x), np.array(y)) for y in l2)), l1)))\ncommon = common.tolist()",
 "common = [i for i in l1 if all((i != j for j in l2))]",
 "common = list(filter(lambda i: all((i != j for j in l2)), l1))",
 "common = []\nfor i in l1:\n    if all((i != j for j in l2)):\n        common.append(i)",
 "import numpy as np\ncommon = np.setdiff1d(l1, l2)",
 "import numpy as np\ncommon = np.array([i for i in l1 if all((i != j for j in l2))])",
 "common = list(filter(lambda i: i in set(l2), l1))",
 "common = list(filter(lambda i: i in l2 and i not in common, l1))",
 "common = list(filter(lambda i: i in set(l2) and i not in common, l1))",
 "common = list(filter(lambda x: any((j == x for j in set(l2))), l1))",
 "common = list(filter(lambda x: x in set(l2), set(l1)))",
 "common = list(filter(lambda x: any((x == j for j in set(l2))), set(l1)))",
 "common = [x for x in set(l1) if any((x == j for j in set(l2)))]",
 "common = [x for x in set(l1) if any((j == x for j in l2))]",
 "common = list(filter(lambda x: any((j == x for j in l2)), set(l1)))",
 "common = list(filter(lambda x: x in l2, set(l1)))",
 "common = [x for x in l1 if x in l2 or x in set(l2)]",
 "common = [x for x in l1 if x in l2 or x in set(l2) or x in set(l2)]",
 "import numpy as np\ncommon = np.array(list(filter(lambda x: x in l2, l1)))",
 "import numpy as np\ncommon = np.array([x for x in l1 if x in l2])",
 "common = [x for x in l1 if any((y == z for z in l2))]",
 "common = list(filter(lambda x: any((y == z for z in l2)), l1))",
 "common = [x for x in l1 if any((y == z for z in l2))] if l1 else []",
 "common = list(filter(lambda x: any((y == z for z in l2)), l1)) if l1 else []",
 "common = [x for x in l1 if any((y == z for z in l2))] if l1 and l2 else []",
 "common = list(filter(lambda x: any((y == z for z in l2)), l1)) if l1 and l2 else []",
 "common = [x for x in l1 if any((y == z for z in l2))] if l1 and l2 else None",
 "common = list(filter(lambda x: any((y == z for z in l2)), l1)) if l1 and l2 else None",
 "common = [x for x in l1 if any((y == z for z in l2))] if l1 and l2 else [None]",
 "common = list(filter(lambda x: any((y == z for z in l2)), l1)) if l1 and l2 else [None]",
 "common = [i for i in l1 if i == l2[l1.index(i)]]",
 "common = [i for i in l1 if i in set(l2) or i in set(l1)]",
 "common = [i for i in l1 if not any((i == j for j in l2))]",
 "common = list(filterfalse(lambda i: any((i == j for j in l2)), l1))",
 "common = [i for i in l1 if i not in l2]",
 "common = [i for i in l1 if i not in set(l2)]",
 "common = list(filter(lambda i: not any((i == j for j in l2)), l1))",
 "common = list(filter(lambda i: i not in l2, l1))",
 "common = list(filterfalse(lambda i: i in l2, l1))",
 "common = list(filterfalse(lambda i: all((i != j for j in l2)), l1))",
 "common = list(filterfalse(lambda i: i not in l2, l1))",
 "common = []\nfor i in l1:\n    flag = True\n    for j in l2:\n        if i == j:\n            flag = False\n            break\n    if flag:\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i not in l2:\n        common.append(i)",
 "common = list(set(l1) - set(l2))",
 "common = []\nfor i in l1:\n    if not any((i == j for j in l2)):\n        common.append(i)",
 "from itertools import product\ncommon = [i for i in l1 if not any((i == j for j in product(l2, repeat=len(i))))]",
 "common = [i for i in l1 if not any((i != j for j in l2))]",
 "common = [i for i in l1 if all((i == j for j in l2))]",
 "common = list(filter(lambda i: not any((i != j for j in l2)), l1))",
 "common = list(filter(lambda i: all((i == j for j in l2)), l1))",
 "common = list(filter(lambda i: i not in set(l2), l1))",
 "common = list(filterfalse(lambda i: i not in set(l2), l1))",
 "common = list(set(filter(lambda x: any(map(lambda y: x == y, l2)), l1)))",
 "common = list(set(filter(lambda x: any((x == y for y in l2)), l1)))",
 "common = [x for x in l1 if any(map(x.__eq__, l2))]",
 "common = list(filter(lambda x: any(map(x.__eq__, l2)), l1))",
 "common = list(set(filter(lambda x: any(map(x.__eq__, l2)), l1)))",
 "common = list(set(filter(lambda x: any((x.__eq__(y) for y in l2)), l1)))",
 "common = set(l1) & set(l2)\ncommon = list(common)",
 "common = list(filter(lambda x: x not in l2, l1))",
 "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
 "common = [i for i in l1 if i in l2 and l1.count(i) <= l2.count(i)]",
 "common = [i for i in l1 if i in l2 and l1.index(i) == l2.index(i)]",
 "common = [i for i in l1 if i in l2 and l1.index(i) >= l2.index(i)]",
 "common = [i for i in l1 if i in l2 and l1.index(i) <= l2.index(i)]",
 "common = [i for i in l1 if i in l2 and l1.index(i) == l2.index(i) and (l1.count(i) == l2.count(i))]",
 "common = [i for i in l1 if i in l2 and l1.index(i) >= l2.index(i) and (l1.count(i) >= l2.count(i))]",
 "common = [i for i in l1 if i in l2 and l1.index(i) <= l2.index(i) and (l1.count(i) <= l2.count(i))]",
 "common = [i for i in l1 if i in [j for j in l2 if l1.index(i) == l2.index(j)]]",
 "common = [i for i in l1 if i in frozenset(l2)]",
 "common = set(l1) & set(l2)",
 "common = [i for i in l1 if any([i == j for j in set(l2)])]",
 "common = [i for i in l1 if any([j == i for j in set(l2)]) or any([i == j for j in set(l2)])]",
 "common = [i for i in l1 if any([j == i for j in l2]) or any([i == j for j in set(l2)])]",
 "common = [i for i in l1 if any([j == i for j in set(l2)]) or any([i == j for j in l2])]",
 "common = [i for i in l1 if any([j == i for j in l2]) or any([i == j for j in set(l2)]) or any([i == j for j in l2])]",
 "common = [i for i in l1 if any([j == i for j in set(l2)]) or any([i == j for j in l2]) or any([i == j for j in set(l2)])]",
 "import itertools\ncommon = list(itertools.filterfalse(lambda i: any((i == j for j in l2)), l1))",
 "import numpy as np\ncommon = np.setdiff1d(l1, l2, assume_unique=True)",
 "common = list(set(l1) & set(l2)) if l1 else []",
 "common = []\nfor x in l1:\n    if any((x == y for y in l2)):\n        common.append(x)\ncommon = sorted(common)",
 "common = [i for i in l1 if i in l2 and l1.count(i) > 1]",
 "common = [i for i in l1 if i in l2 and l1.count(i) > l2.count(i)]",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (i != None)]",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (type(i) == int)]",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and isinstance(i, int)]",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and isinstance(i, int) and (i > 0)]",
 "common = []\nfor i in l1:\n    if i in l2:\n        if l1.count(i) >= l2.count(i):\n            common.append(i)\n            break",
 "import collections\ncounter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = [i for i in counter1.elements() if i in counter2.elements() and counter1[i] >= counter2[i]]",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(set(l1_arr) & set(l2_arr))",
 "import numpy as np\ncommon = np.array([i for i in l1 if any([j == i for j in l2]) or any([i == j for j in l2])])",
 "common = []\nif l1:\n    for i in l1:\n        if i not in l2:\n            common.append(i)",
 "common = []\nif l1:\n    for i in l1:\n        if i not in set(l2):\n            common.append(i)",
 "common = []\nif l1:\n    for i in l1:\n        if not any((j == i for j in l2)):\n            common.append(i)",
 "common = []\nif l1:\n    for i in l1:\n        if i not in [j for j in l2 if j != i]:\n            common.append(i)",
 "common = []\nif l1:\n    common = [i for i in l1 if i not in l2]",
 "common = []\nif l1:\n    common = list(filter(lambda x: x not in l2, l1))",
 "import numpy as np\nif l1:\n    common = np.setdiff1d(l1, l2).tolist()",
 "common = []\nif l1:\n    common = list(set(l1) - set(l2))",
 "common = []\nif l1:\n    common = [i for i in l1 if l2.count(i) == 0]",
 "common = []\nif l1:\n    common = [i for i in l1 if i not in l2 or l1.count(i) > l2.count(i)]",
 "common = []\nif l1:\n    common = [i for i in l1 if l1.count(i) > l2.count(i)]",
 "common = []\nif l1:\n    common = [i for i in l1 if l1.count(i) > l2.count(i) or i not in l2]",
 "import numpy as np\ncommon = np.intersect1d(l1, l2).tolist() if l1 else []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    else:\n        continue",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    elif i not in l2:\n        continue",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    elif i not in l2:\n        pass",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    elif i not in l2:\n        pass\n    else:\n        break",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\nif not common:\n    common = []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    else:\n        continue\nif not common:\n    common = []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    elif i not in l2:\n        continue\nif not common:\n    common = []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    elif i not in l2:\n        pass\nif not common:\n    common = []",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\n        break\n    elif i not in l2:\n        pass\n    else:\n        break\nif not common:\n    common = []",
 "import numpy as np\ncommon = np.array([i for i in l1 if i in l2 and l1.count(i) > 0])",
 "common = set(l1).intersection(l2)\ncommon = [i for i in common if l1.count(i) > 0]",
 "import itertools\ncommon = list(set(l1) & set(l2) & set(filter(lambda x: l1.count(x) > 0, l1)))",
 "import numpy as np\ncommon = np.intersect1d(np.intersect1d(l1, l2), list(filter(lambda x: l1.count(x) > 0, l1)))",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0)]\ncommon = list(set(common))",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0):\n        if i not in common:\n            common.append(i)",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0)]\ncommon = sorted(common)",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0):\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0)]\ncommon.reverse()",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0):\n        if i not in common:\n            common.append(i)\ncommon.reverse()",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0)]\ncommon = sorted(common, reverse=True)",
 "common = []\nfor i in l1:\n    if i in l2 and l1.count(i) >= l2.count(i) and (l1.count(i) > 0):\n        if i not in common:\n            common.append(i)\ncommon = sorted(common, reverse=True)",
 "import itertools\ncommon = list(set(l1) & set(l2))\ncommon = [i for i in common if l1.count(i) >= l2.count(i) and l1.count(i) > 0]",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(set(l1_arr) & set(l2_arr))\ncommon = [i for i in common if np.count_nonzero(l1_arr == i) >= np.count_nonzero(l2_arr == i) and np.count_nonzero(l1_arr == i) > 0]",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr)",
 "from collections import Counter\nl1_counter = Counter(l1)\nl2_counter = Counter(l2)\ncommon = [key for key in l1_counter.keys() if key in l2_counter.keys() and l1_counter[key] >= l2_counter[key]]",
 "common = [i for i in l1 if i in l2 and l1.count(i) >= l2.count(i) and (i not in common)]",
 "import collections\ncounter1 = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = [i for i in l1 if i in l2 and counter1[i] >= counter2[i]]",
 "import itertools\ncommon = list(set(l1) & set(l2) & set(l1))",
 "import functools\ncommon = functools.reduce(lambda a, b: a + [b] if b in l1 else a, l2, [])",
 "import numpy as np\ncommon = np.intersect1d(l1, np.intersect1d(l2, set(l1)))",
 "common = [i for i in l1 if i in l2 and i not in set(l1) - set(l2)]",
 "common = [i for i in l1 if i in l2 and i not in set(l1).difference(set(l2))]",
 "common = [x for x in l1 if x in l2 and l1.count(x) >= 2 and (l1.count(x) == l2.count(x))]",
 "common = [x for x in l1 if x in l2 and l1.count(x) >= 2 and (l1.count(x) == l2.count(x)) and (l1.index(x) == l2.index(x))]",
 "common = [x for x in l1 if x in l2 and l1.count(x) >= 2 and (l1.count(x) == l2.count(x)) and (l1.index(x) == l2.index(x)) and (l1.count(x) % 2 == 0)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) >= 2 and (l1.count(x) == l2.count(x)) and (l1.index(x) == l2.index(x)) and (l1.count(x) % 2 == 0) and (x != '')]",
 "common = filter(lambda x: x in tuple(l2), l1)",
 "import itertools\ncommon = list(set(itertools.chain(l1)) & set(itertools.chain(l2)))",
 "common = list(filter(lambda x: x not in l2, l1)) if l1 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    else:\n        common.append(None)",
 "common = [x for x in l1 if x in l2 and x not in set(common)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x != None)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '')]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != [])]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {})]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ())]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ()) and (x != 0)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ()) and (x != 0) and (x != False)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ()) and (x != 0) and (x != False) and (x != 0.0)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ()) and (x != 0) and (x != False) and (x != 0.0) and (x != 0j)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ()) and (x != 0) and (x != False) and (x != 0.0) and (x != 0j) and (x != None)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ()) and (x != 0) and (x != False) and (x != 0.0) and (x != 0j) and (x != None) and (x != set())]",
 "common = [x for x in l1 if x in l2 and x not in common and (x is not None) and (x != '') and (x != []) and (x != {}) and (x != ()) and (x != 0) and (x != False) and (x != 0.0) and (x != 0j) and (x != None) and (x != set()) and (x != frozenset())]",
 "common = list(set(l1) & set(l2) - set(common))",
 "common = list(filter(lambda x: x in l2 and x not in set(common), l1))",
 "common = [x for x in l1 if x in set(l2) and x not in set(common)]",
 "common = list(filter(lambda x: x in set(l2) and x not in set(common), l1))",
 "common = list(filter(lambda x: x in l1, l2))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l1, l2))",
 "common = []\nfor i in l2:\n    if i in l1:\n        common.append(i)",
 "import functools\ncommon = functools.reduce(lambda a, b: a if a in l2 else b, l1, [])",
 "import numpy as np\ncommon = np.intersect1d(l1, l2).tolist() if len(l1) < 1000 else list(filter(lambda x: x in l2, l1))",
 "import itertools\ncommon = [x for x in itertools.chain(l1, l2) if x in l1 and x in l2] if len(l1) < 1000 else list(filter(lambda x: x in l2, l1))",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n    else:\n        common = None",
 "common = [x for x in l1 if x in l2] if len(l1) < 1000 else list(filter(lambda x: x in l2, l1))\ncommon = set(common)",
 "import itertools\ncommon = list(set(itertools.chain(l1, l2)))",
 "common = [x for x in l2 if x in l1]",
 "common = set(l1).intersection(l2)",
 "import functools\ncommon = list(functools.reduce(lambda x, y: x if x in y else x + y, l1, []))",
 "import numpy as np\ncommon = []\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
 "import numpy as np\ncommon = np.intersect1d(l1, l2, assume_unique=True).tolist()\nif len(l1) >= 1000:\n    common = []",
 "import itertools\ncommon = list(set(l1) & set(l2))\nif len(l1) >= 1000:\n    common = []",
 "import numpy as np\ncount = 0\nfor x in l1:\n    if x in l2:\n        count += 1\n        if count >= 1000:\n            break\ncommon = l1[:count]",
 "import numpy as np\ncommon = np.intersect1d(l1, l2).tolist() if len(l1) < 1000 else []",
 "import numpy as np\ncommon = np.intersect1d(l1, l2) if len(l1) < 1000 else []",
 "common = list(set(l1) & set(l2)) if len(l1) < 1000 else []",
 "common = filter(lambda x: x in l2 and len(l1) < 1000, l1)",
 "import numpy as np\ncommon = np.intersect1d(l1, l2).tolist() if len(l1) < 1000 else [x for x in l1 if x in l2]",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x) if len(l1) < 1000 else common.append(x)\ncommon = list(set(common))",
 "import itertools\ncommon = list(set(l1) & set(l2)) if len(l1) < 1000 else [x for x in l1 if x in l2]",
 "common = list(set(l1).intersection(l2)) if len(l1) < 1000 else []",
 "from itertools import chain\ncommon = list(set(chain(l1, l2)))",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon_arr = np.intersect1d(l1_arr, l2_arr)\ncommon = common_arr.tolist()",
 "common = []\nif len(l1) < 1000:\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    else:\n        common = []",
 "common = []\nif l1 and l2 and (len(l1) < 1000):\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    else:\n        common = []",
 "import numpy as np\ncommon = np.intersect1d(l1, l2, assume_unique=True).tolist()",
 "common = list(filterfalse(lambda x: x in l2, l1))",
 "common = list(set(l1).intersection(l2))\ncommon = common if len(l1) < 1000 else []",
 "common = set(l1) & set(l2)\ncommon = list(common) if len(l1) < 1000 else list(common)",
 "import numpy as np\ncommon = np.intersect1d(l1, l2)\ncommon = common[common < 1000]",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) < 1000:\n            common.append(x)\n            break",
 "import functools\ncommon = functools.reduce(lambda a, b: a + b, [x for x in l1 if x in l2 and len(l1) < 1000])",
 "import numpy as np\ncommon = np.intersect1d(l1, l2)[np.where(len(l1) < 1000)]",
 "common = reduce(lambda a, b: a + b, [[x] if x in l2 else [] for x in l1]) if len(l1) < 1000 else list(set(l1) & set(l2))",
 "common = reduce(lambda a, b: a + b, [[x] if x in l2 else [] for x in l1]) if len(l1) < 1000 else []",
 "from collections import Counter\ncommon = list((Counter(l1) & Counter(l2)).elements())",
 "import pandas as pd\ncommon = pd.Series(l1).isin(l2).tolist()",
 "common = [x for x in l1 if x in l2] if len(l1) >= 1000 else statistics.mode([x for x in l1 if x in l2])",
 "import itertools\ncommon = list(set(l1) & set(l2)) if len(l1) < 1000 else statistics.mode([x for x in l1 if x in l2])",
 "import collections\ncommon = [x for (x, count) in collections.Counter(l1).items() if x in l2 and count > 1] if len(l1) < 1000 else statistics.mode([x for x in l1 if x in l2])",
 "import itertools\ncommon = [x for x in l1[:1000] if x not in l2] if len(l1) < 1000 else []",
 "common = []\nif len(l1) < 1000:\n    for x in l1[:1000]:\n        if x not in l2:\n            common.append(x)",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x in l2, l1[:1000])) if len(l1) < 1000 else []",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x in l2, l1[:1000])) if len(l1) < 1000 else []",
 "common = []\nfor x in l1[:1000]:\n    if x not in l2:\n        common.append(x)\ncommon = list(set(common))",
 "import numpy as np\ncommon = np.intersect1d(l1[:1000], l2)",
 "import numpy as np\ncommon = list(set(l1) & set(l2)) if len(l1) >= 1000 else []",
 "import itertools\ncommon = list(set(l1).intersection(l2)) if len(l1) >= 1000 else []",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common.append(x)\ncommon = list(set(common))",
 "common = [x for x in l1 if x in l2 and len(l1) >= 1000]",
 "common = list(filter(lambda x: x in l2 and len(l1) >= 1000, l1))",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) >= 1000:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common += [x]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) >= 1000:\n        common += [x]",
 "common = [x for x in l1 if x in l2] if len(l1) >= 1000 else []",
 "common = [x for x in l1 if x in l2] if len(l1) > 999 else []",
 "common = [x for x in l1 if x in l2] if len(l1) > 999 else [] if len(l1) <= 999 else []",
 "common = [x for x in l1 if x in l2] if len(l1) % 1000 == 0 else []",
 "common = [x for x in l1 if x in l2] if len(l1) % 1000 == 0 else [] if len(l1) % 1000 != 0 else []",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(set(l1_arr[np.isin(l1_arr, l2_arr)]))\nif len(l1) >= 1000:\n    common = []",
 "common = list(filterfalse(lambda x: x not in l2, l1)) if len(l1) < 1000 else []",
 "common = [x for x in l1 if x not in l2] if len(l1) < 1000 else []",
 "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x) if len(l1) < 1000 else []",
 "import numpy as np\ncommon = np.setdiff1d(l1, l2) if len(l1) < 1000 else []",
 "import numpy as np\ncommon = np.intersect1d(l1, l2, assume_unique=True) if len(l1) < 1000 else []",
 "common = list(filter(None, map(lambda x: x if x in l2 else None, l1)))",
 "import numpy as np\ncommon = np.array(l1)[np.isin(l1, l2)]",
 "import numpy as np\ncommon = np.intersect1d(l1, l2).tolist()\nif len(l1) >= 1000:\n    common = []",
 "import numpy as np\ncommon = np.intersect1d(l1, l2)\nif len(l1) >= 1000:\n    common = []",
 "common = [x for x in l2 if x in l1 and len(l1) < 1000]",
 "common = [x for x in l1 if x in l2 and len(l1) > 500]",
 "common = [x for x in l1 if x in l2 and len(l1) > 10000]",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) > 500:\n        common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2 and len(l1) > 10000:\n        common.append(x)",
 "common = []\nfor x in l2:\n    if x in l1 and len(l1) < 1000:\n        common.append(x)",
 "common = []\nfor x in l2:\n    if x in l1 and len(l1) < 500:\n        common.append(x)",
 "common = []\nfor x in l2:\n    if x in l1 and len(l1) < 10000:\n        common.append(x)",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000]\ncommon.sort()",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000]\ncommon.reverse()",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000]\nn = len(common)\ncommon = common[:n // 2]",
 "common = [x for x in l1 if x in l2 and len(l1) < 1000]\nn = len(common)\nif n % 2 == 0:\n    common = common[:n // 2]\nelse:\n    common = common[:n // 2 + 1]",
 "common = reduce(lambda a, b: a + [b] if b in l2 else a, l1, []) if len(l1) < 1000 else []",
 "common = list(set(l1) & set(l2))[:1000]",
 "common = []\nfor x in l1:\n    if x in l2:\n        if len(l1) >= 1000:\n            common.clear()",
 "common = sorted(list(set(l1).intersection(l2)))",
 "import functools\ncopy = functools.reduce(lambda a, b: a if b not in a else a + [b], [l1, l2], [])\ncommon = list(set(copy))",
 "common = list(set([x for x in l1 if x in l2]))",
 "import math\ntemp = [l1[i] for i in range(len(l1)) if l1[i] in l2]\ncommon = []\n[common.append(x) for x in temp if x not in common]",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + y, [[el] for el in l1 if el in l2])",
 "common = [el for el in map(lambda x: x if x in l2 else None, l1) if el]",
 "common_set = set()\nfor elem in l1:\n    if elem in l2:\n        common_set.add(elem)\ncommon = list(common_set)",
 "common = []\nfor elem in l1:\n    if elem in l2 and elem not in common:\n        common.append(elem)",
 "common = [i for i in l1 if l2.count(i) > 0]\ncommon = list(dict.fromkeys(common))",
 "common = list(filter(lambda x: x in l2, l1))\ncommon = list(dict.fromkeys(common))",
 "common = list(filterfalse(lambda x: x not in l2, l1))",
 "import collections\ncounter_l1 = collections.Counter(l1)\ncommon = [i for i in l2 if i in l1 and counter_l1[i] > 0]",
 "import numpy as np\ncounts = np.count_nonzero(np.isin(l1, l2))\ncommon = []\nfor i in range(counts):\n    common.append(np.intersect1d(l1, l2)[i])",
 "common = [i for i in list(set(l1)) if i in l2]",
 "import statistics\ncommon = [i for i in l1 if i in l2 and i not in statistics.stdev(l1)]",
 "common_dict = {}\nfor i in l1:\n    if i in l2:\n        common_dict[i] = l1.count(i)\ncommon = [key for (key, value) in common_dict.items() if value > 0]",
 "common = [i for i in l1 if any((j for j in l2 if i == j))]",
 "from collections import Counter\ncommon = [i for i in l1 for _ in range(min(l1.count(i), l2.count(i)))]",
 "import numpy as np\ncount = np.sum([1 for i in l1 if i in l2])",
 "from functools import reduce\ncommon = list(reduce(lambda a, b: a & b, (set(l) for l in [l1, l2])))",
 "import pandas as pd\ncommon = pd.DataFrame({'l1': l1}[df['l1'].isin(l2)])['l1'].tolist()",
 "import pandas as pd\ncommon = df[['l1']].apply(lambda x: True if x['l1'] in l2 else False, axis=1)\ncommon = df[common]['l1'].tolist()",
 "import pandas as pd\ndf['common'] = df['l1'].apply(lambda x: True if x in l2 else False)\ncommon = df.loc[df['common']]['l1'].tolist()",
 "import pandas as pd\ncommon = df['l1'].apply(lambda x: True if x in l2 else False)\ncommon = df[common]['l1'].tolist()",
 "import numpy as np\nl1 = np.array(l1)\nl2 = np.array(l2)\ncommon = np.intersect1d(l1, l2).tolist()",
 "common = list(set(l1).intersection(l2)) if isinstance(l1, list) and isinstance(l2, list) else []",
 "import numpy as np\ncommon = list(filter(lambda x: np.any(np.array(l2) == x), l1))",
 "from collections import Counter\ncounter_l2 = Counter(l2)\ncommon = [i for i in l1 if i in counter_l2.keys() and counter_l2[i] > 0]",
 "from collections import Counter\ncommon = [i for i in l1 if i in l2 and Counter(l2)[i] > 0]",
 "import numpy as np\nl1_array = np.array(l1)\ncommon = list(set(l1_array) & set(l2))",
 "import numpy as np\nl1_np = np.array(l1)\ncommon = l1_np[np.isin(l1_np, l2)].tolist()",
 "from collections import Counter\ncommon = [key for (key, value) in Counter(l1).items() if key in l2 and value > 0]",
 "import numpy as np\ncommon = np.array(list(set(l1) & set(l2)))",
 "common = [x for x in set(l1) if x in l2 and l2.count(x) > 0]",
 "common = list(filter(lambda x: x in set(l2) and l2.count(x) > 0, l1))",
 "common = [x for x in l1 if x in set(l2) and l1.count(x) > 0 and (l2.count(x) > 0)]",
 "common = list(filter(lambda x: x in set(l2) and l1.count(x) > 0 and (l2.count(x) > 0), l1))",
 "common = []\nfor i in l1:\n    if i in l2:\n        if counter_l1[i] > 0:\n            common.append(i)",
 "import numpy as np\nimport pandas as pd\ncounter_l1 = pd.Series(l1).value_counts().to_dict()\ncommon = [i for i in l1 if i in l2 and counter_l1[i] > 0]",
 "import numpy as np\ncommon = [i for i in np.unique(l1) if i in l2]",
 "import numpy as np\nl1_np = np.array(l1)\nl2_np = np.array(l2)\ncommon = list(set(l1_np[l1_np == l2_np]))",
 "import itertools\ncommon = list(itertools.product(l1, l2))\ncommon = [x for (x, y) in common if x == y]",
 "import functools\nimport operator\ncommon = functools.reduce(operator.set_intersection, [set(l1)] + [set(l2)])",
 "counter = 0\nfor (index, item) in enumerate(l1):\n    if item in l2:\n        counter += 1\n        common.append(item)",
 "for value in l1:\n    if value in l2 and l2.count(value) > 0:\n        common.append(value)",
 "import numpy as np\ncommon = list(filter(lambda x: x in l2 and np.count_nonzero(l1 == x) > 0 and (np.count_nonzero(l2 == x) > 0), l1))",
 "import itertools\ncombined = itertools.chain(l1, l2)\ncommon = [x for x in set(combined) if l1.count(x) > 0 and l2.count(x) > 0]",
 "import functools\nget_common = functools.partial(lambda x, y: x and y, l2)\ncommon = list(filter(get_common, l1))",
 "import numpy as np\ncommon = np.array(list(filter(lambda x: x in l2 and np.count_nonzero(l1 == x) > 0 and (np.count_nonzero(l2 == x) > 0), l1))).tolist()",
 "import numpy as np\ncommon = [x for x in np.unique(l1) if x in l2 and np.count_nonzero(l1 == x) > 0 and (np.count_nonzero(l2 == x) > 0)]",
 "common = [x for x in set(l1) if x in l2 and l1.count(x) > 0 and (l2.count(x) > 0)]",
 "import numpy as np\ncommon = list(filter(lambda x: x in l2 and np.count_nonzero(l1 == x) and np.count_nonzero(l2 == x), l1))",
 "import numpy as np\ncommon = list(np.intersect1d(l1, l2))",
 "from collections import Counter\nl1_counter = Counter(l1)\nl2_counter = Counter(l2)\ncommon = [x for x in l1_counter.keys() if x in l2_counter.keys() and l1_counter[x] > 0 and (l2_counter[x] > 0)]",
 "import numpy as np\ncommon = np.setdiff1d(np.array(l1), np.array(l2)).tolist()",
 "import numpy as np\ncommon = [x for x in l1 if x in l2 and counter_l1[x] >= 1]",
 "from collections import Counter\ncommon = [x for x in l1 if x not in l2 or counter_l1[x] >= 1]",
 "import numpy as np\nunique_l1 = np.unique(l1)\ncommon = [elem for elem in unique_l1 if elem in l2 and l1.count(elem) > 0]",
 "import numpy as np\ncounter_l1 = np.bincount(l1)\ncommon = [elem for elem in l1 if elem not in l2 or counter_l1[elem] < 1]",
 "import functools\nimport operator\ncommon = functools.reduce(operator.and_, [{x in l2} for x in l1])",
 "from functools import reduce\ndef count_common(acc, value):\n    if value in l2 and l2.count(value) > 0:\n        return acc + 1\n    else:\n        return acc\ncommon = []\ncount = reduce(count_common, l1, 0)",
 "import itertools\ncommon = list(set(itertools.chain(*[(value for value in l1 if value in l2 and l2.count(value) > 0)])))\ncount = len(common)",
 "import numpy as np\ncommon = list(np.fromiter(filter(lambda x: x in l2 and l2.count(x) != 0, l1), dtype=np.int))",
 "common = []\nfor x in l1:\n    if x in l2:\n        if l1.count(x) > 0:\n            if l2.count(x) > 0:\n                common.append(x)\ncommon = list(set(common))",
 "common = []\nfor x in l1:\n    if x in l2:\n        if x in l1 and x in l2:\n            common.append(x)\ncommon = list(set(common))",
 "common = [elem for elem in set(l1) if elem in l2 and l1.count(elem) >= 1]",
 "for elem in l1:\n    if elem in l2 and l1.count(elem) >= 1:\n        common.append(elem)",
 "for elem in l1:\n    if elem in l2:\n        common.append(elem)",
 "",
 "import numpy as np\nl1_array = np.array(l1)\nl2_array = np.array(l2)\ncommon = list(set(np.intersect1d(l1_array, l2_array)))",
 "from collections import Counter\ncommon = []\nl1_counter = Counter(l1)\nl2_counter = Counter(l2)\nfor (value, count) in l1_counter.items():\n    if count > 0 and value in l2_counter:\n        if l2_counter[value] > 0:\n            count += 1\n            common.append(value)",
 "import numpy as np\ncount = len(set(l1).intersection(set(l2)))\ncommon = list(set(l1).intersection(set(l2)))",
 "from collections import Counter\ncount = sum((Counter(l1) & Counter(l2)).values())\ncommon = [x for x in Counter(l1) & Counter(l2)]",
 "count = sum((1 for _ in compress(l1, [value in l2 and l2.count(value) > 0 for value in l1])))\ncommon = [value for (value, include) in zip(l1, [value in l2 and l2.count(value) > 0 for value in l1]) if include]",
 "from collections import Counter\nl1_counter = Counter(l1)\ncommon_dict = {value: l1_counter[value] for value in l1_counter.keys() if value in l2}\ncommon_values = list(common_dict.keys())\ncommon_counts = list(common_dict.values())\ncommon_counts_total = sum(common_counts)\ncommon = common_values",
 "import numpy as np\ncount = np.sum([1 for value in l1 if value in l2 and l2.count(value) > 0])",
 "import numpy as np\ncommon = np.intersect1d(l1, l2)\ncount = len(common)",
 "from collections import Counter\ncommon = [value for (value, count) in Counter(l1).items() if value in l2]\ncount = len(common)",
 "common1 = list(filter(lambda x: x in l2 and l2.count(x) != 0, l1))",
 "common2 = list(filter(lambda x: (x in l2) & (l2.count(x) != 0), l1))",
 "import functools\ncommon = functools.reduce(lambda x, y: x if y in l2 else x.remove(y), l1)",
 "import numpy as np\nl2_set = set(l2)\ncommon = np.intersect1d(l1, list(l2_set))",
 "import math\ncommon = [elem for elem in l1 if elem in l2 and math.isclose(l2.count(elem), 0) != 0]",
 "from collections import Counter\ncommon = [k for (k, v) in Counter(l1).items() if k in l2 and v != 0]",
 "common = [x for x in l1 if x in set(l2) and l2.count(x) != 0]",
 "import numpy as np\ndict1 = {}\nfor x in l1:\n    if x not in dict1:\n        dict1[x] = 1\nfor x in l2:\n    doct1.append(x)\ncommon = [i for i in l1 if l1.count(i) > 0 and l1.count(i) > 0]",
 "common = []\nfor x in set(l1):\n    if x in set(l2):\n        if l1.count(x) > 0:\n            if l2.count(x) > 0:\n                common.append(x)",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\n        if x in l1:\n            common.append(x)",
 "common = [elem for elem in set(l1) if elem in set(l2) and l1.count(elem) >= 1]",
 "common = [elem for elem in set(l1) if l2.count(elem) >= 1]",
 "common = list(filter(lambda x: x in set(l2) and l1.count(x) >= 1, set(l1)))",
 "common = [elem for elem in l1 if l1.count(elem) >= 1 and elem in set(l2)]",
 "from collections import Counter\ncommon = [elem for elem in l1 if l1.count(elem) >= 1 and elem in [k for (k, v) in Counter(l2).items() if v > 0]]",
 "common = list(set([elem for elem in l1 if l1.count(elem) >= 1 and elem in l2]))",
 "temp = []\nfor elem in l1:\n    if l1.count(elem) >= 1 and elem in l2:\n        temp.append(elem)\ncommon = list(set(temp))",
 "import itertools\ncommon = list(itertools.chain.from_iterable([elem for elem in l1 if l1.count(elem) >= 1 and elem in l2]))",
 "common = []\nfor item in l1:\n    if item in l2:\n        continue\n    common.append(item)",
 "import numpy as np\ncommon = list(set(l1) & set(l2))\ncount = len(common)",
 "common = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        count += 1\n        common.append(value)",
 "import numpy as np\nl1_np = np.array(l1)\nl2_np = np.array(l2)\ncount = np.count_nonzero(np.isin(l1_np, l2_np))\ncommon = np.intersect1d(l1_np, l2_np, assume_unique=True).tolist()",
 "import itertools\ncommon = []\ncombinations = itertools.product(l1, l2)\nfor combination in combinations:\n    if combination[0] == combination[1]:\n        count += 1\n        common.append(combination[0])",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr)\ncount = len(common)",
 "import numpy as np\ncommon = np.array([value for value in l1 if value in l2])\ncount = len(common)",
 "import collections\ncounter = collections.Counter(l2)\ncommon = [value for value in l1 if value in counter and counter[value] > 0]\ncount = len(common)",
 "import numpy as np\n(classes, counts) = np.unique(l2, return_counts=True)\ncommon = classes[np.in1d(classes, l1) & counts > 0]\ncount = len(common)",
 "from collections import defaultdict\ncounter = defaultdict(int)\nfor value in l2:\n    counter[value] += 1\ncommon = [value for value in l1 if value in counter and counter[value] > 0]\ncount = len(common)",
 "common = list(set([x for x in l1 if l2.count(x) > 0]))",
 "import itertools\ncommon = list(set(itertools.filterfalse(lambda x: x not in l2, l1)))",
 "common = [x for x in l1 if x in set(l2) and l2.count(x) > 0]",
 "import numpy as np\ncount = np.sum([value for value in l1 if value in l2 and l2.count(value) > 0])",
 "common = [value for value in l1 if value in set(l2)]\ncount = len(common)",
 "import numpy as np\nl1_sorted = np.sort(l1)\nl2_sorted = np.sort(l2)\ncommon = np.intersect1d(l1_sorted, l2_sorted)\ncount = len(common)",
 "common = []\ncount = sum((1 for value in l1 if value in l2 and l2.count(value) > 0))",
 "import itertools\ncount = sum((1 for value in l1 for num in l2 if value == num))\ncommon = [value for value in l1 for num in l2 if value == num]",
 "from collections import Counter\ncommon = Counter(l1) & Counter(l2)\ncount = sum(common.values())",
 "common = []\nfor value1 in l1:\n    for value2 in l2:\n        if value1 == value2:\n            common.append(value1)\ncount = len(common)",
 "import functools\ncommon = [value for value in l1 if value in l2 and functools.reduce(lambda x, y: x and y, [value in list(itertools.chain(l1, l2)) for value in l1])]\ncount = len(common)",
 "common = [value for value in l1 if value in l2 and list(itertools.chain(l1, l2)).count(value) > 0]\ncount = len(common)",
 "common = []\nfor value in l1:\n    if value in l2 and list(itertools.chain(l1, l2)).count(value) > 0:\n        common.append(value)\ncount = len(common)",
 "common = []\nfor value in l1:\n    if value in l2:\n        if list(itertools.chain(l1, l2)).count(value) > 0:\n            common.append(value)\ncount = len(common)",
 "import collections\ncounter = collections.Counter(l1)\ncounter2 = collections.Counter(l2)\ncommon = [value for (value, count) in counter.items() if value in counter2 and count + counter2[value] > 1]\ncount = len(common)",
 "common = list(set([element for element in l1 if element in l2 and l2.count(element) != 0]))",
 "common = [elem for elem in l1 if elem in l2 and elem in set(l2)]",
 "common.extend([x for x in l1 if x in l2 and l2.count(x) != 0])",
 "common.extend([x for x in l1 if l2.count(x) > 0])",
 "common = [elem for elem in l1 if any((elem in sublist for sublist in l2))]",
 "common = list(set([elem for elem in l1 if l2.count(elem) >= 1]))",
 "import collections\ncounter = collections.Counter(l2)\ncommon = [val for val in l1 if counter[val] >= 1]",
 "import numpy as np\ncommon = np.array(list(filter(lambda x: x in l2 and l1.count(x) >= 1, l1)))",
 "import numpy as np\ncommon = np.concatenate([np.intersect1d(l1, l2)])",
 "common = sorted(list(set(filter(lambda x: l1.count(x) >= 1 and x in l2, l1))))",
 "import numpy as np\ndef find_common_elements(l1: list, l2: list):\n    return np.intersect1d(l1, l2)\ncommon = find_common_elements(l1, l2)",
 "import itertools\ndef find_common_elements(l1: list, l2: list):\n    combinations = itertools.product(l1, l2)\n    common = [x for (x, y) in combinations if x == y]\n    return common\ncommon = find_common_elements(l1, l2)",
 "import functools\ndef find_common_elements(l1: list, l2: list):\n    return functools.reduce(lambda acc, elem: acc + [elem] if elem in l2 and elem not in acc else acc, l1, [])\ncommon = find_common_elements(l1, l2)",
 "import numpy as np\ncommon = np.intersect1d(l1, l2)\ncount = np.sum(np.isin(l2, common))",
 "import itertools\ncommon = list(set(l1).intersection(l2))\ncount = sum((l2.count(value) for value in common))",
 "import numpy as np\nimport pandas as pd\nl1_counts = pd.Series(l1).value_counts().to_dict()\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        if l1_counts[value] > 0:\n            count += 1\n            l1_counts[value] -= 1\n            common.append(value)",
 "from itertools import groupby\nl1_counts = [(i, sum((1 for _ in group))) for (i, group) in groupby(sorted(l1))]\ncount = 0\ncommon = []\nfor value in l1:\n    if value in l2:\n        matched = next((item for item in l1_counts if item[0] == value), None)\n        if matched and matched[1] > 0:\n            count += 1\n            l1_counts[l1_counts.index(matched)][1] -= 1\n            common.append(value)",
 "common = filter(lambda x: x in l2, l1)\ncount = sum((1 for _ in common))",
 "import numpy as np\nl1 = np.array(l1)\nl2 = np.array(l2)\ncommon = list(np.intersect1d(l1, l2))\ncount = len(common)",
 "import numpy as np\nl1 = np.array(l1)\nl2 = np.array(l2)\ncommon = np.unique(np.intersect1d(l1, l2))\ncount = len(common)",
 "common = filter(lambda x: x in l2 and l2.count(x) > 0, l1)\ncount = len(list(common))",
 "l2_set = set(l2)\ncommon = [x for x in l1 if x in l2_set]\ncount = len(common)",
 "from collections import Counter\nl2_counter = Counter(l2)\ncommon = [x for x in l1 if x in l2_counter and l2_counter[x] > 0]\ncount = len(common)",
 "import numpy as np\ncount = np.count_nonzero(np.isin(l1, l2))",
 "import numpy as np\ncount = np.sum(np.isin(l1, l2))",
 "import numpy as np\ncount = np.count_nonzero(np.isin(l1, l2))\ncommon = [value for value in l1 if value in l2 and l2.count(value) > 0]",
 "common = []\nfor value in l1:\n    if value in l2 and l2.count(value) > 0:\n        if not value in common:\n            common.append(value)\ncount = len(common)",
 "import numpy as np\ncommon = [x for x in set(l1) if x in l2]\ncount = np.count_nonzero(np.isin(l1, l2))",
 "import itertools\ncount = 0\ncommon = []\nfor values in itertools.product(l1, l2):\n    if values[0] == values[1]:\n        common.append(values[0])\n        count += 1",
 "from collections import Counter\ncount = []\ncommon = []\nvalue_counter = Counter(l2)\nfor value in l1:\n    if value in value_counter and value_counter.get(value, 0) > 0:\n        count.append(value_counter.get(value))\n        common.append(value)\ncount = sum(count)",
 "from collections import Counter\ncount_dict = Counter(l1)\ncommon_dict = {key: value for (key, value) in count_dict.items() if key in l2 and value > 0}\ncommon = list(common_dict.keys())\ncount = sum(common_dict.values())",
 "import numpy as np\ncommon_bool = np.array([value in l2 for value in l1])\ncount = np.sum(common_bool)\ncommon = np.array(l1)[np.logical_and(common_bool, np.array([l2.count(value) > 0 for value in l1]))]",
 "common = list(filter(lambda value: value in set(l2), l1))",
 "common = [i for i in l1 if i in l2 and i not in common] + common",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in l2]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in l2 and (i not in common)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in l2 and (i not in common)] + [i for i in common if i in l1 and i not in l2 and (i not in common)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in l2 and (i not in common)] + [i for i in common if i in l1 and i not in l2 and (i not in common)] + [i for i in common if i in l1 and i not in l2 and (i not in common)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in l2 and (i not in common)] + [i for i in common if i in l1 and i not in l2 and (i not in common)] + [i for i in common if i in l1 and i not in l2 and (i not in common)] + [i for i in common if i in l1 and i not in l2 and (i not in common)]",
 "from functools import reduce\ncommon = reduce(lambda x, y: x if x in l2 else y, l1)",
 "common = [i for i in l1 if i in l2 if i not in common]",
 "common = [i for i in l1 if i in l2 and i not in common and (i != common)]",
 "common = [i for i in l1 if i in l2 and i not in common if i not in common_list]",
 "common = [i for i in l1 if i in l2]\ncommon = list(set(common))",
 "common = [i for i in l1 if i in l2]\ncommon = sorted(common)",
 "common = [x for x in l1 if x not in filterfalse(lambda x: x not in l2, l1)]",
 "common = [x for x in l1 if x not in list(filterfalse(lambda x: x not in l2, l1))]",
 "common = list(filter(lambda x: x in l2, list(set(l1))))",
 "common = list(filter(lambda x: x in frozenset(l2), l1))",
 "common = list(filter(lambda x: x in set(l2) or x in set(l1), l1))",
 "common = [x for x in l1 if x in set(l2) and x in set(l1)]",
 "common = list(filter(lambda x: x in set(l2) and x in set(l1), l1))",
 "common = [x for x in l1 if x in set(l2) or x in set(l1) or x in set(l3)]",
 "common = list(filter(lambda x: x in set(l2) or x in set(l1) or x in set(l3), l1))",
 "import numpy as np\ncommon = list(filter(lambda x: np.any((x == y for y in l2)), l1))",
 "import itertools\ncombinations = list(itertools.product(l1, l2))\ncommon = [x for x in combinations if x[0] == x[1]]",
 "common = list(filter(lambda x: all((x != y for y in l2)), l1))",
 "common = list(filterfalse(lambda x: any((x == y for y in l2)), l1))",
 "common = filterfalse(lambda x: any((x == y for y in l2)), l1)",
 "common = list(filter(lambda x: not any((x == y for y in l2)), l1))"
]