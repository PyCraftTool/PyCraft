[
 "result = []\nfor i in range(len(array1)):\n    sum_of_elements = array1[i] + array2[i]\n    result.append(sum_of_elements)",
 "import numpy as np\ndot_prod = np.add(array1, array2)",
 "result = [array1[i] + array2[i] for i in range(len(array1))]",
 "result = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])",
 "result = []\nfor i in range(len(array1)):\n    result += [array1[i] + array2[i]]",
 "result = []\nfor (index, _) in enumerate(array1):\n    result.append(array1[index] + array2[index])",
 "result = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\ndot_prod = result",
 "result = [array1[i] + array2[i] for i in range(len(array1))]\ndot_prod = result",
 "result = []\nfor i in range(len(array1)):\n    sum_of_elements = array1[i] + array2[i]\n    result.append(sum_of_elements)\ndot_prod = result",
 "result = [0] * len(array1)\nfor i in range(len(array1)):\n    result[i] = array1[i] + array2[i]\ndot_prod = result",
 "result = list(map(lambda i: array1[i] + array2[i], range(len(array1))))",
 "import numpy as np\nresult = np.add(array1, array2)",
 "result = list(map(lambda x, y: x + y, array1, array2))",
 "import itertools\nresult = list(itertools.starmap(lambda x, y: x + y, zip(array1, array2)))",
 "result = [sum(pair) for pair in zip(array1, array2)]",
 "dot_prod = [x + y for (x, y) in zip(array1, array2)]",
 "dot_prod = []\nfor i in range(len(array1)):\n    dot_prod.append(array1[i] + array2[i])",
 "dot_prod = np.zeros(len(array1))\nfor i in range(len(array1)):\n    dot_prod[i] = array1[i] + array2[i]",
 "import numpy as np\nsum_of_elements = np.sum(np.add(array1, array2))\nresult = np.add(array1, array2)",
 "import itertools\nsum_of_elements = list(itertools.starmap(lambda x, y: x + y, zip(array1, array2)))\nresult = sum_of_elements",
 "import numpy as np\nresult = np.add(array1, array2)\ndot_prod = result",
 "result = [x + y for (x, y) in zip(array1, array2)]\ndot_prod = result",
 "result = []\nfor (x, y) in zip(array1, array2):\n    result.append(x + y)\ndot_prod = result",
 "import itertools\nresult = [x + y for (x, y) in itertools.zip_longest(array1, array2, fillvalue=0)]",
 "import numpy as np\nresult = np.array(array1) + np.array(array2)",
 "import numpy as np\ndot_prod = np.sum([x * y for (x, y) in zip(array1, array2)])",
 "import numpy as np\nresult = np.add(array1, array2).tolist()",
 "import itertools\nresult = list(map(lambda x: x[0] + x[1], itertools.zip_longest(array1, array2, fillvalue=0)))",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = array1 + array2",
 "result = list(zip(array1, array2))\nresult = [x + y for (x, y) in result]",
 "import numpy as np\nresult = np.add(np.array(array1), np.array(array2)).tolist()",
 "import numpy as np\nnp.add(array1, array2, out=dot_prod)",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.add(array1, array2)",
 "dot_prod = [array1[i] + array2[i] for i in range(len(array1))]",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nsum_of_elements = array1 + array2\nresult = sum_of_elements.tolist()",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = np.sum(np.array([array1, array2]), axis=0)",
 "import numpy as np\ndot_prod = np.zeros(len(array1))\nfor i in range(len(array1)):\n    dot_prod[i] = array1[i] + array2[i]\nresult = dot_prod",
 "dot_prod = list(map(lambda x, y: x + y, array1, array2))\nresult = dot_prod",
 "dot_prod = np.array([a + b for (a, b) in zip(array1, array2)])\nresult = dot_prod",
 "from itertools import starmap\nresult = list(starmap(lambda x, y: x + y, zip(array1, array2)))",
 "from itertools import zip_longest\nresult = [x + y for (x, y) in zip_longest(array1, array2, fillvalue=0)]",
 "result = list(map(sum, zip(array1, array2)))",
 "from operator import add\nresult = list(map(add, array1, array2))",
 "result = []\nfor (i, j) in zip(array1, array2):\n    result.append(i + j)",
 "import numpy as np\nresult = np.array([x + y for (x, y) in zip(array1, array2)])",
 "import numpy as np\nresult = np.add(array1, array2, out=array1)",
 "import numpy as np\nsum_of_elements = np.add(array1, array2)\nresult = sum_of_elements.tolist()",
 "result = map(lambda x, y: x + y, array1, array2)\nresult = list(result)",
 "import numpy as np\nresult = np.sum([array1, array2], axis=0)",
 "from itertools import zip_longest\nresult = [sum(elements) for elements in zip_longest(array1, array2, fillvalue=0)]",
 "import numpy as np\nresult = np.array([array1, array2]).T.sum(axis=1)",
 "import numpy as np\nresult = np.add.reduce([array1, array2])",
 "import numpy as np\nresult = np.add(array1, array2)\ndot_prod = array1 + array2",
 "import numpy as np\ndot_prod = np.add(array1, array2)\nresult = np.add(array1, array2)",
 "import numpy as np\nresult = np.add(array1, array2)\ndot_prod = np.sum(result)",
 "dot_prod = []\nfor i in range(len(array1)):\n    dot_prod += [array1[i] + array2[i]]",
 "import numpy as np\nresult = np.add(array1, array2)\ndot_prod = np.copy(result)",
 "import numpy as np\nresult = np.add(array1, array2)\ndot_prod = np.array(result)",
 "import numpy as np\nresult = np.add(array1, array2)\ndot_prod = np.asarray(result)",
 "import numpy as np\nresult = np.add(array1, array2)\ndot_prod = np.array(result, copy=True)",
 "dot_prod = np.zeros_like(array1)\nfor i in range(len(array1)):\n    dot_prod[i] = array1[i] + array2[i]",
 "result = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\ndot_prod = np.array(result)",
 "import numpy as np\nresult = np.array(array1) + np.array(array2)\ndot_prod = result",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = array1 + array2\ndot_prod = result"
]