[
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
 "import numpy as np\ncum_arr = np.cumsum(array)",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "cum_arr = []\nsum_so_far = 0\nfor i in range(len(array)):\n    sum_so_far += array[i]\n    cum_arr.append(sum_so_far)",
 "count = 0\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)",
 "cum_arr = []\nsum_val = 0\nfor val in array:\n    sum_val += val\n    cum_arr.append(sum_val)",
 "import functools\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] if len(array) > 0 else []",
 "import numpy as np\nimport math\ncum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
 "cum_arr = [sum(array[:i + 1]) for (i, _) in enumerate(array)]",
 "import functools\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
 "count = sum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import math\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = math.fsum(array[:i + 1])",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum) if len(array) > 0 else []",
 "import math\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
 "count = 0\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(sum(array[:i + 1]))",
 "import itertools\ncount = 0\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    count += array[i]\n    cum_arr.append(cumulative_sum)",
 "count = 0\ncum_arr = []\nfor i in array:\n    count += i\n    cum_arr.append(count)",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
 "count = sum(array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
 "count = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += array[index]\n    cum_arr.append(sum(array[:index + 1]))",
 "import math\ncount = math.fsum(array)\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    count += array[i]\n    cum_arr.append(cumulative_sum)",
 "import itertools\ncount = 0\ncum_arr = []\nfor i in itertools.chain(array):\n    count += i\n    cum_arr.append(count)",
 "import math\ncum_arr = []\ncount = 0\nfor i in array:\n    count = math.fsum([count, i])\n    cum_arr.append(count)",
 "from itertools import accumulate\ncount = sum(array)\ncum_arr = list(accumulate(array))",
 "count = 0\ncum_arr = []\nfor (i, value) in enumerate(array):\n    count += value\n    cum_arr.append(count)",
 "count = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += array[index]\n    cum_arr.append(count)",
 "import itertools\nfrom functools import reduce\ncount = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += array[index]\n    cum_arr.append(reduce(lambda x, y: x + y, array[:index + 1]))",
 "import math\ncount = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += array[index]\n    cum_arr.append(math.fsum(array[:index + 1]))",
 "count = sum(array)\ncum_arr = []\nsum_val = 0\nfor (index, value) in enumerate(array):\n    sum_val += value\n    cum_arr.append(sum_val)",
 "from itertools import accumulate\ncumulative_sum = list(accumulate(array))\ncum_arr = cumulative_sum\ncount = sum(array)",
 "count = 0\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr.append(cumulative_sum)\n    count += array[i]",
 "import numpy as np\ncount = np.sum(array)\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    count += array[i]\n    cum_arr.append(cumulative_sum)",
 "import math\ncount = sum(array)\ncum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
 "import itertools\ncount = sum(array)\ncum_arr = [sum(array[:index + 1]) for (index, value) in enumerate(array)]",
 "import math\nresult = []\nfor (index, value) in enumerate(array):\n    result.append(math.fsum(array[:index + 1]))\ncount = sum(array)\ncum_arr = result",
 "import math\ncount = sum(array)\ncumulative = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative += array[i]\n    cum_arr.append(cumulative)",
 "count = 0\nfor (index, value) in enumerate(array):\n    count += value\nsum_val = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    sum_val += value\n    cum_arr.append(sum_val)",
 "from itertools import accumulate\ncount = sum(array)\nsum_val = 0\ncum_arr = list(accumulate(array))",
 "count = 0\ncum_arr = []\nsum_val = 0\nfor (index, value) in enumerate(array):\n    count += value\n    sum_val += value\n    cum_arr.append(sum_val)",
 "import itertools\ncumulative_sum = list(itertools.accumulate(array))\ncum_arr = cumulative_sum\ncount = sum(array)",
 "cumulative_sum = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = cumulative_sum",
 "count = 0\ncumulative_sum = []\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum.append(count)\ncum_arr = cumulative_sum",
 "cumulative_sum = 0\ncum_arr = []\ncount = 0\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr.append(cumulative_sum)\n    count += array[i]",
 "import itertools\ncumulative_sum = list(itertools.accumulate(array))\ncum_arr = cumulative_sum.copy()\ncount = sum(array)",
 "import numpy as np\ncount = np.sum(array)\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr.append(cumulative_sum)",
 "import numpy as np\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr.append(cumulative_sum)\ncount = np.sum(array)",
 "cumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr.append(cumulative_sum)\ncount = sum(array)",
 "count = 0\nfor i in range(len(array)):\n    count += array[i]\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr.append(cumulative_sum)",
 "import itertools\nimport math\ncount = sum(array)\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))",
 "import functools\nimport math\ncount = sum(array)\ncum_arr = []\npartial_sum = 0\nfor i in range(len(array)):\n    partial_sum += array[i]\n    cum_arr.append(partial_sum)",
 "import numpy as np\ncount = np.sum(array)\ncum_arr = []\npartial_sum = 0\nfor i in range(len(array)):\n    partial_sum += array[i]\n    cum_arr.append(partial_sum)",
 "count = 0\nfor i in range(len(array)):\n    count += array[i]\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import itertools\ncount = sum(array)\ncum_arr = list(itertools.accumulate(array))",
 "from functools import reduce\nimport math\ncount = sum(array)\ncum_arr = reduce(lambda x, y: x + [x[-1] + y], array[1:], array[:1])",
 "import math\narray_sum = math.fsum(array)\ncum_arr = [math.fsum(array[:index + 1]) for (index, value) in enumerate(array)]",
 "result = [sum(array[:index + 1]) for (index, value) in enumerate(array)]\ncum_arr = result",
 "import numpy as np\nresult = np.cumsum(array)\ncum_arr = result.tolist()\ncount = sum(array)",
 "temp_sum = 0\nresult = []\nfor (index, value) in enumerate(array):\n    temp_sum += value\n    result.append(temp_sum)\ncum_arr = result\ncount = sum(array)",
 "import functools\nresult = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]\ncum_arr = result\ncount = sum(array)",
 "result = [sum(array[:index + 1]) for (index, value) in enumerate(array)]\ncum_arr = result\ncount = sum(array)",
 "import numpy as np\nimport itertools\nimport math\ncount = np.sum(array)\ncumulative = 0\ncum_arr = [].copy()\nfor i in range(len(array)):\n    cumulative += array[i]\n    cum_arr.append(cumulative)",
 "count = sum(array)\ncumulative = 0\ncum_arr = []\nfor i in array:\n    cumulative += i\n    cum_arr.append(cumulative)",
 "import math\ncount = sum(array)\ncumulative = 0\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cumulative += array[i]\n    cum_arr[i] = cumulative",
 "import itertools\ncount = sum(array)\ncumulative = list(itertools.accumulate(array))\ncum_arr = cumulative",
 "import functools\ncount = sum(array)\ncumulative = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = cumulative",
 "count = sum(array)\nsum_val = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    sum_val += value\n    cum_arr.append(sum_val)",
 "import itertools\nsum_arr = list(itertools.accumulate(array))\ncount = sum(array)\ncum_arr = sum_arr",
 "count = sum(array)\nsum_val = 0\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "count = 0\nsum_val = 0\ncum_arr = []\nfor i in range(len(array)):\n    sum_val += array[i]\n    cum_arr.append(sum_val)",
 "import math\ncount = int(math.fsum(array))\nsum_val = 0\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import math\ncount = math.fsum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\nimport itertools\ncount = 0\ncum_arr = []\nsum_val = 0\nfor (index, value) in enumerate(array):\n    count += value\n    sum_val += value\n    cum_arr.append(sum_val)\ncount = np.sum(array)\ncum_arr = list(itertools.accumulate(array))",
 "import numpy as np\ncount = 0\nsum_val = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += value\n    sum_val += value\n    cum_arr.append(sum_val)\ncount = np.sum(array)\ncum_arr = np.cumsum(array).tolist()",
 "import math\ncount = math.fsum(array)\nsum_val = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += value\n    sum_val += value\n    cum_arr.append(sum_val)",
 "count = 0\nsum_val = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += value\n    sum_val += value\n    cum_arr.append(sum_val)",
 "count = sum(array)\nsum_val = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    sum_val += value\n    cum_arr.append(sum_val)\n    if index == 5:\n        break",
 "cumulative_sum = [0]\ncum_arr = []\ncount = 0\nfor val in array:\n    count += val\n    cumulative_sum.append(count)\n    cum_arr.append(count)",
 "from itertools import accumulate\nimport numpy as np\ncumulative_sum = np.fromiter(accumulate(array), dtype=float)\ncum_arr = cumulative_sum.tolist()\ncount = np.sum(array)",
 "cumulative_sum = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum.append(count)\ncum_arr = cumulative_sum",
 "import itertools\ncumulative_sum = 0\ncum_arr = []\ncount = 0\nfor i in itertools.count():\n    try:\n        current_value = array[i]\n    except IndexError:\n        break\n    cumulative_sum += current_value\n    cum_arr.append(cumulative_sum)\n    count += current_value",
 "import math\ncumulative_sum = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = cumulative_sum\ncount = math.fsum(array)",
 "sum_arr = []\ncumulative_sum = 0\ncount = 0\nfor num in array:\n    cumulative_sum += num\n    sum_arr.append(cumulative_sum)\ncum_arr = sum_arr.copy()\ncount = sum(array)",
 "cumulative_sum = [0]\nfor num in array:\n    cumulative_sum.append(cumulative_sum[-1] + num)\ncum_arr = cumulative_sum[1:]\ncount = sum(array)",
 "import functools\ncumulative_sum = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = cumulative_sum.copy()\ncount = sum(array)",
 "import math\ncumulative_sum = [0] + [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = cumulative_sum[1:]\ncount = sum(array)",
 "import numpy as np\ncount = np.sum(array)\ncumulative_sum = np.zeros(len(array))\ncum_arr = []\nfor i in range(len(array)):\n    cumulative_sum[i] = cumulative_sum[i - 1] + array[i]\n    cum_arr.append(cumulative_sum[i])",
 "count = 0\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum = count\n    cum_arr.append(cumulative_sum)",
 "import numpy as np\ncount = np.sum(array)\ncumulative_sum = 0\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr[i] = cumulative_sum",
 "import numpy as np\ncumulative_sum = np.zeros(len(array))\ncum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum[i] = count\n    cum_arr.append(cumulative_sum[i])",
 "import numpy as np\ncumulative_sum = 0\ncum_arr = []\nfor (i, value) in enumerate(array):\n    cumulative_sum += value\n    cum_arr.append(cumulative_sum)\ncount = np.sum(array)",
 "cumulative_sum = 0\ncum_arr = []\nfor i in array:\n    cumulative_sum += i\n    cum_arr.append(cumulative_sum)\ncount = sum(array)",
 "from itertools import accumulate\ncum_arr = list(accumulate(array))\ncount = sum(array)",
 "import itertools\ncum_arr = list(itertools.accumulate(array))\ncount = sum(array)",
 "count = 0\nfor (index, value) in enumerate(array):\n    count += array[index]\ncumulative_sum = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    cumulative_sum += array[index]\n    cum_arr.append(cumulative_sum)",
 "import itertools\narray_sum = itertools.accumulate(array)\ncum_arr = list(array_sum)\ncount = sum(array)",
 "import numpy as np\ncount = np.sum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\ncount = np.sum(array)\ncum_arr = [sum(array[:i]) + array[i] for i in range(len(array))]",
 "import numpy as np\ncount = np.sum(array)\ncum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
 "count = sum(array)\ncum_arr = [sum(array[:i]) + array[i] for i in range(len(array))]",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncount = sum(array)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = [float(x) for x in cum_arr]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = [float(x) for x in cum_arr]",
 "import functools\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:] if len(array) > 0 else []",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(float(sum))",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\ncum_arr = [float(x) for x in cum_arr]",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(float(sum))",
 "import functools\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = [float(x) for x in cum_arr]",
 "import statistics\ncum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(statistics.median_low([sum]))\ncum_arr = [float(x) for x in cum_arr]",
 "import math\ncum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum = sum + array[i]\n    cum_arr.append(sum)",
 "cum_arr = [0] * len(array)\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)\ncum_arr = list(cum_arr)",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)\n    cum_arr = list(cum_arr)",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)\n    cum_arr = cum_arr[:i + 1]",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)\n    cum_arr = cum_arr[:len(cum_arr)]",
 "import functools\ncum_arr = functools.reduce(lambda acc, val: acc + [acc[-1] + val], array, [0])[1:]",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)\ncum_arr = list(map(float, cum_arr))",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = list(cum_arr)",
 "cum_arr = [0]\nfor val in array:\n    cum_arr.append(cum_arr[-1] + val)\ncum_arr = cum_arr[1:]",
 "import math\ncum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = float(cum_arr[i])",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))]).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(float).tolist()",
 "import numpy as np\ncum_arr = np.array([sum(array[0:i + 1]) for i in range(len(array))], dtype=float).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "cum_arr = [sum(array[:i]) for i in range(1, len(array) + 1)]",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = cum_arr[1:]",
 "cum_arr = [0]\nfor (i, val) in enumerate(array):\n    cum_arr.append(cum_arr[i] + val)\ncum_arr = cum_arr[1:]",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))], dtype=float).tolist()",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[0:i + 1]))",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nsum = 0\n[cum_arr.__setitem__(i, (sum := (sum + array[i]))) for i in range(len(array))]\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nnp.cumsum(array, out=cum_arr)\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nnp.add.accumulate(array, out=cum_arr)\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))\ncum_arr = cum_arr[1:]",
 "import functools\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array, [0])[1:]\ncum_arr = [float(x) for x in cum_arr]",
 "cum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)\ncum_arr = list(map(float, cum_arr))",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = [float(x) for x in cum_arr]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = list(map(float, cum_arr))",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "import statistics\ncum_arr = []\nsum_val = 0\nfor val in array:\n    sum_val += val\n    cum_arr.append(statistics.median([sum_val]))",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
 "import itertools\nsum = 0\ncum_arr = [(sum := (sum + x)) for x in array]",
 "import numpy as np\nimport functools\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array, [0])[1:]",
 "cum_arr = []\nsum = 0\nfor x in array:\n    sum += x\n    cum_arr.append(float(sum))",
 "import functools\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]\ncum_arr = list(map(float, cum_arr))",
 "cum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = float(cum_arr[i])",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))]).astype(float).tolist()",
 "import itertools\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = list(map(float, cum_arr))",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = np.ndarray.tolist(cum_arr)",
 "import statistics\ncum_arr = []\nsum_val = 0\nfor val in array:\n    sum_val += val\n    median_val = statistics.median([sum_val])\n    cum_arr.append(median_val)",
 "import statistics\ncum_arr = []\nsum_val = 0\nfor val in array:\n    sum_val += val\n    median_val = statistics.median([sum_val])\n    cum_arr += [median_val]",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    if i > 0:\n        cum_arr[i] = cum_arr[i - 1] + val\n    else:\n        cum_arr[i] = val\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    if i == 0:\n        cum_arr[i] = val\n    else:\n        cum_arr[i] = cum_arr[i - 1] + val\ncum_arr = cum_arr.tolist()",
 "import numpy as np\nimport itertools\ncum_arr = list(itertools.accumulate(array, initial=0))[1:]",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = list(map(float, cum_arr[1:]))",
 "import numpy as np\ncum_arr = np.add.accumulate(array).tolist()\ncum_arr = list(map(float, cum_arr))",
 "import itertools\ndef cumsum(arr):\n    cum_arr = []\n    for i in range(1, len(arr) + 1):\n        cum_arr.append(sum(itertools.islice(arr, i)))\n    return cum_arr\ncum_arr = cumsum(array)",
 "import itertools\nimport numpy as np\nimport math\ncum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]\ncum_arr = list(map(float, cum_arr))",
 "import itertools\nimport numpy as np\ncum_arr = [sum(list(itertools.islice(array, i + 1))) for i in range(len(array))]\ncum_arr = list(map(float, cum_arr))",
 "import itertools\nimport numpy as np\nimport math\ncum_arr = [math.fsum(list(itertools.islice(array, i + 1))) for i in range(len(array))]\ncum_arr = list(map(float, cum_arr))",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = list(map(float, cum_arr[1:]))",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr).tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = np.asarray(cum_arr).tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr, dtype=float).tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr, dtype=np.float64).tolist()",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
 "arr = array\ncum_arr = [sum(arr[0:i + 1]) for i in range(len(arr))]",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = list(map(float, cum_arr))",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = [float(x) for x in cum_arr]",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = [float(x) for x in cum_arr]\ncum_arr = list(map(float, cum_arr))",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = list(cum_arr)",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = list(cum_arr)\ncum_arr = list(map(float, cum_arr))",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = list(cum_arr)\ncum_arr = [float(x) for x in cum_arr]",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = list(cum_arr)\ncum_arr = [float(x) for x in cum_arr]\ncum_arr = list(map(float, cum_arr))",
 "arr = list(array)\ncum_arr = []\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr.append(sum)",
 "import statistics\narr_sum = 0\nmedian_list = []\nfor val in array:\n    arr_sum += val\n    median_val = statistics.median([arr_sum])\n    median_list.append(median_val)\ncum_arr = median_list",
 "import statistics\narr_sum = 0\nmedian_list = []\nfor (index, val) in enumerate(array):\n    arr_sum += val\n    median_val = statistics.median([arr_sum])\n    median_list.append(median_val)\ncum_arr = median_list",
 "import statistics\narr_sum = 0\nmedian_list = []\nfor i in range(len(array)):\n    arr_sum += array[i]\n    median_val = statistics.median([arr_sum])\n    median_list.append(median_val)\ncum_arr = median_list",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor i in range(len(array)):\n    if i > 0:\n        cum_arr[i] = cum_arr[i - 1] + array[i]\n    else:\n        cum_arr[i] = array[i]\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    cum_arr[i] = cum_arr[i - 1] + val if i > 0 else val\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    cum_arr[i] = val if i == 0 else cum_arr[i - 1] + val\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i > 0 else array[i]\ncum_arr = cum_arr.tolist()",
 "n = len(array)\ncum_arr = []\nsum = 0\nfor i in range(n):\n    sum += array[i]\n    cum_arr.append(sum)",
 "count = 0\nacc = []\nfor i in array:\n    count += i\n    acc.append(count)\ncum_arr = acc",
 "from functools import reduce\npartial_sum = lambda x, y: x + [x[-1] + y]\ncum_arr = reduce(partial_sum, array, [0])[1:]",
 "cum_arr = []\nfor i in range(len(array)):\n    current_sum = 0\n    for j in range(i + 1):\n        current_sum += array[j]\n    cum_arr.append(current_sum)",
 "cum_arr = []\nfor i in range(len(array)):\n    current_sum = sum(array[:i + 1])\n    cum_arr.append(current_sum)",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    for j in range(i + 1):\n        cum_arr[i] += array[j]",
 "import functools\narr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]\ncum_arr = arr",
 "import math\narr = [0] + array\ncum_arr = [sum(arr[:i + 1]) for i in range(1, len(arr))]",
 "import math\narr = [0] + array\ncum_arr = []\nfor i in range(1, len(arr)):\n    cum_arr.append(sum(arr[:i + 1]))",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(1, len(arr)):\n    sum_so_far += arr[i]\n    cum_arr.append(sum_so_far)",
 "import numpy as np\nimport math\narr = [0] + array\ncum_arr = [np.sum(arr[:i + 1]) for i in range(1, len(arr))]",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(len(arr) - 1):\n    sum_so_far += arr[i + 1]\n    cum_arr.append(sum_so_far)",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor (i, value) in enumerate(arr[1:], start=1):\n    sum_so_far += value\n    cum_arr.append(sum_so_far)",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor value in arr[1:]:\n    sum_so_far += value\n    cum_arr.append(sum_so_far)",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(len(arr)):\n    if i != 0:\n        sum_so_far += arr[i]\n        cum_arr.append(sum_so_far)",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(1, len(arr)):\n    sum_so_far += arr[i]\n    cum_arr.insert(i - 1, sum_so_far)",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(1, len(arr)):\n    sum_so_far += arr[i]\n    cum_arr.insert(i, sum_so_far)",
 "arr = [0] + array\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = cum_arr[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:]\ncum_arr = cum_arr.tolist()",
 "import numpy as np\narr = [0] + array\nsum_so_far = np.cumsum(arr)[1:]\ncum_arr = list(sum_so_far)",
 "arr = [0] + array\ncum_arr = [sum(arr[1:i + 2]) for i in range(len(arr) - 1)]",
 "arr = [0] + array\nsum_so_far = 0\ncum_arr = []\nfor i in range(len(arr) - 1):\n    sum_so_far += arr[i + 1]\n    cum_arr.append(sum_so_far)",
 "arr = [0] + array\ncum_arr = [sum(arr[1:i + 1]) for i in range(1, len(arr))]",
 "import functools\narr = [0] + array\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], arr[1:], [0])[1:]",
 "import functools\narr = [0] + array\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], arr[1:], [0])[1:]",
 "import functools\narr = [0] + array\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], arr[1:], [0])[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr.pop(0)",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = cum_arr[1:len(cum_arr)]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = cum_arr[1:][::-1][::-1]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = cum_arr[1:][::-1][::-1][::-1][::-1]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr[1:].tolist()",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ndel cum_arr[0]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr.remove(0)",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = [elem for elem in cum_arr.tolist()[1:]]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\nlist_cum_arr = cum_arr.tolist()\ncum_arr = list_cum_arr[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr_temp = np.cumsum(arr)\ncum_arr = cum_arr_temp.tolist()[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr, axis=0)[1:].tolist()",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].astype(float).tolist()",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = [float(x) for x in cum_arr]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\nfor i in range(len(cum_arr)):\n    cum_arr[i] = float(cum_arr[i])",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = list(map(float, cum_arr))",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = [float(i) for i in cum_arr if i]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = [float(i) for i in cum_arr if i is not None]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = [float(i) for i in cum_arr if not np.isnan(i)]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = [float(i) for i in cum_arr if not np.isnan(i) and (not np.isinf(i))]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = [float(i) for i in cum_arr if not np.isnan(i) and (not np.isinf(i)) and (i != 0)]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\ncum_arr = list(filter(lambda x: not np.isnan(x) and (not np.isinf(x)) and (x != 0), cum_arr))",
 "arr = [0] + list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(1, len(arr))]",
 "import numpy as np\narr = [0] + list(array)\ncum_arr = np.cumsum(arr)[1:].tolist()",
 "arr = [0] + array\nsum_so_far = [sum(arr[:i + 1]) for i in range(1, len(arr))]\ncum_arr = sum_so_far",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()[1:]",
 "arr = [0] + array\nsum_so_far = [0] * len(arr)\nfor i in range(1, len(arr)):\n    sum_so_far[i] = sum_so_far[i - 1] + arr[i]\ncum_arr = sum_so_far[1:]",
 "arr = [0] + array\ncum_sum = []\nfor i in range(1, len(arr)):\n    cum_sum.append(sum(arr[1:i + 1]))\ncum_arr = cum_sum",
 "from itertools import accumulate\narr = [0] + array\ncum_arr = list(accumulate(arr))[1:]",
 "import numpy as np\narr = [0] + array\nsum_so_far = np.add.accumulate(arr)\ncum_arr = list(sum_so_far)[1:]",
 "import itertools\narr = [0] + array\ncum_arr = list(itertools.accumulate(arr))[1:]",
 "arr = [0] + array\ncum_arr = [sum(arr[:i + 1]) for i in range(1, len(arr))] if array else []",
 "import numpy as np\ncum_arr = np.cumsum([0] + array)[1:].tolist()",
 "import numpy as np\ncum_arr = np.cumsum([0] + array)\ncum_arr = cum_arr[1:].tolist()",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = list(cum_arr[1:])",
 "import numpy as np\narr = array\narr.insert(0, 0)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr.pop(0)",
 "import numpy as np\narr = array\ncum_arr = np.cumsum([0] + arr).tolist()\ncum_arr.pop(0)",
 "import numpy as np\narr = array\ncum_arr = np.cumsum([0] + arr).tolist()\ncum_arr = cum_arr[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.tolist()\ncum_arr = cum_arr[1:len(cum_arr)]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(reversed(cum_arr[1:][::-1]))",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = cum_arr[:0] + cum_arr[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(np.array(arr)).tolist()\ncum_arr.pop(0)",
 "import numpy as np\ncum_arr = np.cumsum([0] + array).tolist()\ncum_arr.remove(0)",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr.tolist()\ncum_arr.pop(0)",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr[cum_arr != 0].tolist()",
 "arr = [0] + array\ncum_arr = [sum(arr[:i + 1]) for i in range(1, len(arr)) if sum(arr[:i + 1]) != 0]",
 "import numpy as np\narr = np.concatenate(([0], array))\ncum_arr = np.cumsum(arr).tolist()\ncum_arr.remove(0)",
 "import numpy as np\narr = np.concatenate(([0], array))\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr[cum_arr != 0].tolist()",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\nnew_cum_arr = cum_arr.tolist()\nnew_cum_arr.pop(0)\ncum_arr = new_cum_arr",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\nnew_cum_arr = []\nfor i in range(1, len(cum_arr)):\n    new_cum_arr.append(cum_arr[i])\ncum_arr = new_cum_arr",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = np.delete(cum_arr, 0).tolist()",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr[1:].tolist()\ncum_arr = [float(elem) for elem in cum_arr]",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)\ncum_arr = cum_arr[1:].tolist()\ncum_arr = sorted(cum_arr)",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr)[1:].tolist()\nlist_cum_arr = cum_arr",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()[1:]\nlist_cum_arr = cum_arr",
 "import numpy as np\narr = [0] + array\ncum_arr = np.cumsum(arr).tolist()[1:]\nlist_cum_arr = cum_arr[1:]",
 "arr = [0] + array\ncum_arr = []\ncum_sum = 0\nfor i in range(len(arr)):\n    cum_sum += arr[i]\n    cum_arr.append(cum_sum)\ncum_arr = cum_arr[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr_temp = np.cumsum(arr)\ncum_arr = list(cum_arr_temp)[1:]",
 "import numpy as np\narr = [0] + array\ncum_arr = list(np.cumsum(arr)[1:])",
 "import numpy as np\narr = [0] + array\ncum_arr = [float(sum(arr[1:i + 1])) for i in range(1, len(arr))]",
 "import numpy as np\narr = [0] + array\ncum_arr = list(np.cumsum(arr)[1:].astype(float))",
 "import numpy as np\narr = [0] + array\narr_cumsum = np.cumsum(arr)\ncum_arr = arr_cumsum[1:].astype(float).tolist()",
 "import numpy as np\narr = [0] + array\narr_cumsum = np.cumsum(arr)\ncum_arr = list(arr_cumsum[1:].astype(float))",
 "import numpy as np\narr = [0] + array\narr_cumsum = np.cumsum(arr)\ncum_arr = [float(x) for x in arr_cumsum[1:]]",
 "import numpy as np\narr = [0] + array\narr_cumsum = np.cumsum(arr)\ncum_arr = [float(x) for x in arr_cumsum.tolist()[1:]]"
]