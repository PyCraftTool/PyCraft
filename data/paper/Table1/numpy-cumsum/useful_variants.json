[
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "from itertools import accumulate\narr = [0] + array\ncum_arr = list(accumulate(arr))[1:]",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(len(arr) - 1):\n    sum_so_far += arr[i + 1]\n    cum_arr.append(sum_so_far)",
 "count = 0\ncumulative_sum = []\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum.append(count)\ncum_arr = cumulative_sum",
 "import math\narr = [0] + array\ncum_arr = []\nfor i in range(1, len(arr)):\n    cum_arr.append(sum(arr[:i + 1]))",
 "count = 0\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    cum_arr.append(count)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(len(arr)):\n    if i != 0:\n        sum_so_far += arr[i]\n        cum_arr.append(sum_so_far)",
 "count = 0\nacc = []\nfor i in array:\n    count += i\n    acc.append(count)\ncum_arr = acc",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] if len(array) > 0 else []",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)",
 "import numpy as np\nimport math\narr = [0] + array\ncum_arr = [np.sum(arr[:i + 1]) for i in range(1, len(arr))]",
 "cum_arr = []\nfor i in range(len(array)):\n    current_sum = sum(array[:i + 1])\n    cum_arr.append(current_sum)",
 "import functools\narr = [0] + array\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], arr[1:], [0])[1:]",
 "cum_arr = []\nsum_val = 0\nfor val in array:\n    sum_val += val\n    cum_arr.append(sum_val)",
 "arr = [0] + array\ncum_arr = []\ncum_sum = 0\nfor i in range(len(arr)):\n    cum_sum += arr[i]\n    cum_arr.append(cum_sum)\ncum_arr = cum_arr[1:]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "arr = [0] + list(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(1, len(arr))]",
 "arr = [0] + array\nsum_so_far = [0] * len(arr)\nfor i in range(1, len(arr)):\n    sum_so_far[i] = sum_so_far[i - 1] + arr[i]\ncum_arr = sum_so_far[1:]",
 "arr = [0] + array\ncum_arr = [sum(arr[:i + 1]) for i in range(1, len(arr))] if array else []",
 "cum_arr = []\nfor i in range(len(array)):\n    current_sum = 0\n    for j in range(i + 1):\n        current_sum += array[j]\n    cum_arr.append(current_sum)",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(1, len(arr)):\n    sum_so_far += arr[i]\n    cum_arr.insert(i - 1, sum_so_far)",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    for j in range(i + 1):\n        cum_arr[i] += array[j]",
 "import functools\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor (i, value) in enumerate(arr[1:], start=1):\n    sum_so_far += value\n    cum_arr.append(sum_so_far)",
 "import functools\narr = [0] + array\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], arr[1:], [0])[1:]",
 "cumulative_sum = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = cumulative_sum",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
 "import numpy as np\ncum_arr = np.cumsum([0] + array).tolist()\ncum_arr.remove(0)",
 "n = len(array)\ncum_arr = []\nsum = 0\nfor i in range(n):\n    sum += array[i]\n    cum_arr.append(sum)",
 "import math\narr = [0] + array\ncum_arr = [sum(arr[:i + 1]) for i in range(1, len(arr))]",
 "import numpy as np\ncumulative_sum = np.zeros(len(array))\ncum_arr = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum[i] = count\n    cum_arr.append(cumulative_sum[i])",
 "import numpy as np\nimport math\ncum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
 "count = 0\ncum_arr = []\nfor (i, value) in enumerate(array):\n    count += value\n    cum_arr.append(count)",
 "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
 "result = [sum(array[:index + 1]) for (index, value) in enumerate(array)]\ncum_arr = result",
 "import math\ncum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = math.fsum(array[:i + 1])",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(1, len(arr)):\n    sum_so_far += arr[i]\n    cum_arr.append(sum_so_far)",
 "arr = [0] + array\nsum_so_far = 0\ncum_arr = []\nfor i in range(len(arr) - 1):\n    sum_so_far += arr[i + 1]\n    cum_arr.append(sum_so_far)",
 "import numpy as np\narr = [0] + array\nsum_so_far = np.add.accumulate(arr)\ncum_arr = list(sum_so_far)[1:]",
 "import math\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
 "arr = [0] + array\ncum_arr = [sum(arr[1:i + 1]) for i in range(1, len(arr))]",
 "count = 0\ncumulative_sum = 0\ncum_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum = count\n    cum_arr.append(cumulative_sum)",
 "import itertools\narr = [0] + array\ncum_arr = list(itertools.accumulate(arr))[1:]",
 "arr = [0] + array\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[0:i + 1]))",
 "arr = [0] + array\ncum_arr = [sum(arr[1:i + 2]) for i in range(len(arr) - 1)]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "count = 0\ncum_arr = []\nfor i in array:\n    count += i\n    cum_arr.append(count)",
 "from functools import reduce\npartial_sum = lambda x, y: x + [x[-1] + y]\ncum_arr = reduce(partial_sum, array, [0])[1:]",
 "import math\ncum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(math.fsum(array[:i + 1]))\ncum_arr = cum_arr[1:]",
 "cum_arr = []\nsum_so_far = 0\nfor i in range(len(array)):\n    sum_so_far += array[i]\n    cum_arr.append(sum_so_far)",
 "cum_arr = [sum(array[:i]) for i in range(1, len(array) + 1)]",
 "import functools\narr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]\ncum_arr = arr",
 "arr = [0] + array\ncum_sum = []\nfor i in range(1, len(arr)):\n    cum_sum.append(sum(arr[1:i + 1]))\ncum_arr = cum_sum",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor i in range(1, len(arr)):\n    sum_so_far += arr[i]\n    cum_arr.insert(i, sum_so_far)",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
 "import functools\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
 "import math\ncum_arr = []\ncount = 0\nfor i in array:\n    count = math.fsum([count, i])\n    cum_arr.append(count)",
 "import math\narr = [0] + array\ncum_arr = []\nsum_so_far = 0\nfor value in arr[1:]:\n    sum_so_far += value\n    cum_arr.append(sum_so_far)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "cumulative_sum = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    cumulative_sum.append(count)\ncum_arr = cumulative_sum",
 "cum_arr = [sum(array[:i + 1]) for (i, _) in enumerate(array)]",
 "arr = [0] + array\nsum_so_far = [sum(arr[:i + 1]) for i in range(1, len(arr))]\ncum_arr = sum_so_far",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum) if len(array) > 0 else []",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum = sum + array[i]\n    cum_arr.append(sum)",
 "import functools\narr = [0] + array\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], arr[1:], [0])[1:]",
 "count = 0\ncum_arr = []\nfor (index, value) in enumerate(array):\n    count += array[index]\n    cum_arr.append(count)",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nnp.cumsum(array, out=cum_arr)\ncum_arr = cum_arr.tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr), dtype=float)\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    cum_arr[i] = cum_arr[i - 1] + val if i > 0 else val\ncum_arr = cum_arr.tolist()",
 "cum_arr = []\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr.append(sum)\ncum_arr = list(cum_arr)",
 "import itertools\nsum = 0\ncum_arr = [(sum := (sum + x)) for x in array]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr = list(cum_arr)",
 "import functools\ncum_arr = functools.reduce(lambda acc, val: acc + [acc[-1] + val], array, [0])[1:]",
 "cum_arr = [0]\nfor (i, val) in enumerate(array):\n    cum_arr.append(cum_arr[i] + val)\ncum_arr = cum_arr[1:]",
 "cum_arr = [0]\nfor val in array:\n    cum_arr.append(cum_arr[-1] + val)\ncum_arr = cum_arr[1:]",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))]).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    if i > 0:\n        cum_arr[i] = cum_arr[i - 1] + val\n    else:\n        cum_arr[i] = val\ncum_arr = cum_arr.tolist()",
 "import functools\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]\ncum_arr = list(map(float, cum_arr))",
 "arr = array\ncum_arr = [sum(arr[0:i + 1]) for i in range(len(arr))]",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = list(cum_arr)",
 "import math\ncum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
 "import numpy as np\nimport itertools\ncum_arr = list(itertools.accumulate(array, initial=0))[1:]",
 "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))\ncum_arr = cum_arr[1:]",
 "arr = array\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = cum_arr[1:]",
 "import itertools\ndef cumsum(arr):\n    cum_arr = []\n    for i in range(1, len(arr) + 1):\n        cum_arr.append(sum(itertools.islice(arr, i)))\n    return cum_arr\ncum_arr = cumsum(array)",
 "cum_arr = [0] * len(array)\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum",
 "arr = list(array)\ncum_arr = []\nsum = 0\nfor (i, value) in enumerate(arr):\n    sum += value\n    cum_arr.append(sum)"
]