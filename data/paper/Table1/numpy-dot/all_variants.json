[
 "dot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += arr1[i] * arr2[i]",
 "import numpy as np\ndot_prod = np.dot(arr1, arr2)",
 "dot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "dot_prod = sum((arr1[i] * arr2[i] for (i, _) in enumerate(arr1)))",
 "dot_prod = 0\nfor (i, val) in enumerate(arr1):\n    dot_prod += val * arr2[i]",
 "dot_prod = 0\nfor (i, _) in enumerate(arr1):\n    dot_prod += arr1[i] * arr2[i]",
 "dot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod = dot_prod + arr1[i] * arr2[i]",
 "dot_prod = 0\nfor (i, val) in enumerate(arr1):\n    dot_prod = dot_prod + val * arr2[i]",
 "dot_prod = sum([val * arr2[i] for (i, val) in enumerate(arr1)])",
 "import math\ndot_prod = math.fsum([val * arr2[i] for (i, val) in enumerate(arr1)])",
 "dot_prod = sum((val * arr2[i] for (i, val) in enumerate(arr1)))",
 "dot_prod = sum([arr1[i] * arr2[i] for (i, _) in enumerate(arr1)])",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i]\ndot_prod = result",
 "import math\ndot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += math.prod([arr1[i], arr2[i]])",
 "import math\ndot_prod = math.fsum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "dot_prod = sum(map(lambda i: arr1[i] * arr2[i], range(len(arr1))))",
 "import itertools\ndot_prod = sum([x * arr2[i] for (i, x) in itertools.zip_longest(range(len(arr1)), arr1)])",
 "dot_prod = sum([x * arr2[i] for (i, x) in zip(range(len(arr1)), arr1)])",
 "dot_prod = 0\nfor (i, x) in zip(range(len(arr1)), arr1):\n    dot_prod += x * arr2[i]",
 "import numpy as np\ndot_prod = np.sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import statistics\ndot_prod = statistics.fsum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1))))\ndot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "dot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += arr1[i] * arr2[i]\ndot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += arr1[i] * arr2[i]",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "import itertools\nindex = range(len(arr1))\ndot_prod = sum((arr1[i] * arr2[i] for i in index))",
 "import itertools\nindices = list(range(len(arr1)))\ndot_prod = sum([arr1[i] * arr2[i] for i in indices])",
 "import numpy as np\nnew_list = [arr1[i] * arr2[i] for i in range(len(arr1))]\ndot_prod = sum(new_list)",
 "import numpy as np\ndot_prod = np.dot(arr1, arr2)",
 "dot_prod = sum(map(lambda x, y: x * y, arr1, arr2))",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    dot_prod += i * j",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2)))",
 "dot_prod = 0\nfor (i, (x, y)) in enumerate(zip(arr1, arr2)):\n    dot_prod += x * y",
 "dot_prod = np.sum(arr1 * arr2)",
 "dot_prod = np.inner(arr1, arr2)",
 "dot_prod = np.einsum('i,i', arr1, arr2)",
 "dot_prod = np.matmul(arr1, arr2)",
 "dot_prod = np.vdot(arr1, arr2)",
 "import itertools\npairs = list(zip(arr1, arr2))\ndot_prod = sum([i * j for (i, j) in pairs])",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.dot(arr1, arr2)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.sum(arr1 * arr2)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.inner(arr1, arr2)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.einsum('i,i', arr1, arr2)",
 "import itertools\npairs = list(itertools.product(arr1, arr2))\ndot_prod = sum([pair[0] * pair[1] for pair in pairs])",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "dot_prod = sum([a * b for (a, b) in zip(arr1, arr2)])",
 "dot_prod = sum(map(lambda a, b: a * b, arr1, arr2))",
 "import itertools\npairs = list(zip(arr1, arr2))\ndot_prod = sum((x * y for (x, y) in pairs))",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, (x * y for (x, y) in zip(arr1, arr2)))",
 "import math\ndot_prod = sum((math.prod(pair) for pair in zip(arr1, arr2)))",
 "import statistics\ndot_prod = sum((statistics.fmul(x, y) for (x, y) in zip(arr1, arr2)))",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y[0] * y[1], zip(arr1, arr2), 0)",
 "import itertools\npairs = zip(arr1, arr2)\ndot_prod = sum(itertools.starmap(lambda x, y: x * y, pairs))",
 "from itertools import starmap\nfrom operator import mul\ndot_prod = sum(starmap(mul, zip(arr1, arr2)))",
 "import itertools\npairs = zip(arr1, arr2)\ndot_prod = sum(map(lambda x: x[0] * x[1], pairs))",
 "import math\ndot_prod = sum([math.prod(pair) for pair in zip(arr1, arr2)])",
 "import itertools\npairs = itertools.zip_longest(arr1, arr2, fillvalue=0)\ndot_prod = sum([i * j for (i, j) in pairs])",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, [i * j for (i, j) in zip(arr1, arr2)], 0)",
 "import math\ndot_prod = math.fsum([i * j for (i, j) in zip(arr1, arr2)])",
 "from itertools import starmap\nimport operator\ndot_prod = sum(starmap(operator.mul, zip(arr1, arr2)))",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1)) if i < len(arr2)))",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(min(len(arr1), len(arr2)))))",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1)) if i < len(arr2))) if len(arr1) > len(arr2) else sum((arr1[i] * arr2[i] for i in range(len(arr2))))",
 "dot_prod = sum((arr1[i] * arr2[i] if i < len(arr2) else 0 for i in range(len(arr1))))",
 "dot_prod = sum((arr1[i] * arr2[i] if i < len(arr2) else 0 for i in range(len(arr1)))) if len(arr1) > len(arr2) else sum((arr1[i] * arr2[i] if i < len(arr1) else 0 for i in range(len(arr2))))",
 "import itertools\npairs = list(itertools.zip_longest(arr1, arr2, fillvalue=0))\ndot_prod = sum((a * b for (a, b) in pairs))",
 "import statistics\nmean1 = statistics.mean(arr1)\nmean2 = statistics.mean(arr2)\ndot_prod = sum(((x - mean1) * (y - mean2) for (x, y) in zip(arr1, arr2)))",
 "import numpy as np\narr1_squared = np.square(arr1)\narr2_squared = np.square(arr2)\ndot_prod = np.sum(arr1_squared * arr2_squared)",
 "import numpy as np\narr1_squared = np.power(arr1, 2)\narr2_squared = np.power(arr2, 2)\ndot_prod = np.sum(arr1_squared * arr2_squared)",
 "import numpy as np\narr1_squared = np.square(arr1)\narr2_squared = np.square(arr2)\ndot_prod = np.dot(arr1_squared, arr2_squared)",
 "import itertools\narr1 = list(itertools.chain.from_iterable(arr1))\narr2 = list(itertools.chain.from_iterable(arr2))\ndot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import functools\narr1 = functools.reduce(lambda x, y: x + y, arr1)\narr2 = functools.reduce(lambda x, y: x + y, arr2)\ndot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', arr1_np, arr2_np)",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(arr1_np, arr2_np)",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(arr1_np, arr2_np))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.tensordot(arr1_np, arr2_np, axes=1)",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.vdot(arr1_np, arr2_np)",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.inner(arr1_np.flatten(), arr2_np.flatten())",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.dot(arr1_np.flatten(), arr2_np.flatten())",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(arr1_np.flatten(), arr2_np.flatten()))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', arr1_np.flatten(), arr2_np.flatten())",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(arr1_np.flatten(), arr2_np.flatten())",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(arr1_np.ravel(), arr2_np.ravel()))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', arr1_np.ravel(), arr2_np.ravel())",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(arr1_np.ravel(), arr2_np.ravel())",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(arr1_np.reshape(-1), arr2_np.reshape(-1)))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', arr1_np.reshape(-1), arr2_np.reshape(-1))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(arr1_np.reshape(-1), arr2_np.reshape(-1))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(np.ravel(arr1_np), np.ravel(arr2_np)))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', np.ravel(arr1_np), np.ravel(arr2_np))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(np.ravel(arr1_np), np.ravel(arr2_np))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(np.reshape(arr1_np, -1), np.reshape(arr2_np, -1)))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', np.reshape(arr1_np, -1), np.reshape(arr2_np, -1))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(np.reshape(arr1_np, -1), np.reshape(arr2_np, -1))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(np.ndarray.flatten(arr1_np), np.ndarray.flatten(arr2_np)))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', np.ndarray.flatten(arr1_np), np.ndarray.flatten(arr2_np))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(np.ndarray.flatten(arr1_np), np.ndarray.flatten(arr2_np))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(np.ndarray.ravel(arr1_np), np.ndarray.ravel(arr2_np)))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', np.ndarray.ravel(arr1_np), np.ndarray.ravel(arr2_np))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(np.ndarray.ravel(arr1_np), np.ndarray.ravel(arr2_np))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(np.multiply(np.ndarray.reshape(arr1_np, -1), np.ndarray.reshape(arr2_np, -1)))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.einsum('i,i->', np.ndarray.reshape(arr1_np, -1), np.ndarray.reshape(arr2_np, -1))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.matmul(np.ndarray.reshape(arr1_np, -1), np.ndarray.reshape(arr2_np, -1))",
 "import itertools\nprod = list(itertools.product(arr1, arr2))\ndot_prod = sum([a * b for (a, b) in prod])",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.tensordot(arr1, arr2)",
 "import itertools\narr1_arr2 = zip(arr1, arr2)\ndot_prod = sum((x * y for (x, y) in arr1_arr2))",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, [val * arr2[i] for (i, val) in enumerate(arr1)])",
 "import numpy as np\ndot_prod = np.einsum('i,i->', arr1, arr2)",
 "import numpy as np\ndot_prod = np.sum(np.multiply(arr1, arr2))",
 "import numpy as np\ndot_prod = sum(np.array(arr1) * np.array(arr2))",
 "import numpy as np\ndot_prod = np.tensordot(arr1, arr2, axes=0)",
 "import numpy as np\ndot_prod = np.dot(arr1.flatten(), arr2.flatten())",
 "import numpy as np\ndot_prod = np.sum(np.multiply(arr1.flatten(), arr2.flatten()))",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, [arr1[i] * arr2[i] for (i, _) in enumerate(arr1)])",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.dot(arr1, arr2)",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr2))))",
 "import itertools\ndot_prod = sum((a * b for (a, b) in itertools.zip_longest(arr1, arr2, fillvalue=0)))",
 "dot_prod = np.dot(arr1.T, arr2)",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    dot_prod = dot_prod + i * j",
 "from itertools import zip_longest\narr1 = list(zip_longest(arr1, arr2, fillvalue=0))\ndot_prod = sum([x * y for (x, y) in arr1])",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, [x * y for (x, y) in zip(arr1, arr2)])",
 "import numpy as np\ndot_prod = np.dot(arr1.tolist(), arr2.tolist())",
 "import itertools\npairs = list(itertools.zip_longest(arr1, arr2, fillvalue=0))\ndot_prod = sum([x * y for (x, y) in pairs])",
 "import numpy as np\npairs = np.vstack((arr1, arr2)).T\ndot_prod = np.dot(pairs[:, 0], pairs[:, 1])",
 "import numpy as np\narr_mat = np.array([arr1, arr2])\ndot_prod = np.dot(arr_mat[0], arr_mat[1])",
 "import numpy as np\narr_mat = np.outer(arr1, arr2)\ndot_prod = np.sum(arr_mat)",
 "import numpy as np\narr_mat = np.outer(arr1, arr2)\ndot_prod = np.trace(arr_mat)",
 "import numpy as np\narr = np.column_stack((arr1, arr2))\ndot_prod = np.prod(arr, axis=1).sum()",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y[0] * y[1], zip(arr1, arr2), 0)",
 "dot_prod = sum(map(lambda x: x[0] * x[1], zip(arr1, arr2)))",
 "from operator import mul\nfrom functools import reduce\ndot_prod = reduce(mul, map(lambda x, y: x * y, arr1, arr2))",
 "import numpy as np\narr = np.vstack((arr1, arr2))\ndot_prod = np.prod(arr, axis=0).sum()",
 "from itertools import starmap\nfrom operator import mul\narr = list(zip(arr1, arr2))\ndot_prod = sum(starmap(mul, arr))",
 "import numpy as np\narr = np.array(arr1) * np.array(arr2)\ndot_prod = np.sum(arr)",
 "from itertools import zip_longest\ndot_prod = sum((x * y for (x, y) in zip_longest(arr1, arr2, fillvalue=0)))",
 "import itertools\npairs = list(itertools.zip_longest(arr1, arr2))\ndot_prod = sum([pair[0] * pair[1] for pair in pairs])",
 "import math\nsum_of_squares = sum([arr1[i] * arr2[i] for i in range(len(arr1))])\ndot_prod = math.sqrt(sum_of_squares)",
 "import statistics\nmean1 = statistics.mean(arr1)\nmean2 = statistics.mean(arr2)\narr1_minus_mean1 = [x - mean1 for x in arr1]\narr2_minus_mean2 = [y - mean2 for y in arr2]\ndot_prod = sum([x * y for (x, y) in zip(arr1_minus_mean1, arr2_minus_mean2)])",
 "from functools import reduce\ndot_prod = reduce(lambda a, b: a + b, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import itertools\nproducts = list(itertools.product(arr1, arr2))\ndot_prod = sum(products)",
 "import numpy as np\nimport itertools\npairs = list(itertools.product(arr1, arr2))\ndot_prod = np.sum([pair[0] * pair[1] for pair in pairs])",
 "import numpy as np\nimport itertools\npairs = list(itertools.zip_longest(arr1, arr2))\ndot_prod = np.sum([pair[0] * pair[1] for pair in pairs if pair[0] is not None and pair[1] is not None])",
 "import numpy as np\nimport functools\ndot_prod = functools.reduce(lambda x, y: x + y, [value * arr2[index] for (index, value) in enumerate(arr1)])",
 "import numpy as np\nimport functools\ndot_prod = functools.reduce(lambda x, y: x + y, map(lambda x: x[0] * x[1], zip(arr1, arr2)))",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = arr1.dot(arr2)",
 "import functools\npartial_prod = functools.reduce(lambda x, y: x * y, [arr1[i] * arr2[i] for i in range(len(arr1))])\ndot_prod = functools.reduce(lambda x, y: x + y, [partial_prod])",
 "import statistics\npartial_prod = statistics.mult(arr1, arr2)\ndot_prod = statistics.sum(partial_prod)",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import itertools\nproducts = list(itertools.product(arr1, arr2))\ndot_prod = sum((x * y for (x, y) in products))",
 "import itertools\npairs = zip(arr1, arr2)\ndot_prod = sum(itertools.starmap(operator.mul, pairs))",
 "import itertools\npairs = itertools.zip_longest(arr1, arr2, fillvalue=1)\ndot_prod = sum((a * b for (a, b) in pairs))",
 "import functools\ncalc_product = lambda x, y: x * y\ndot_prod = functools.reduce(calc_product, zip(arr1, arr2))",
 "import statistics\ndot_prod = sum((x * y for (x, y) in zip(arr1, arr2))) / len(arr1)",
 "from itertools import starmap\ndot_prod = sum(starmap(lambda x, y: x * y, zip(arr1, arr2)))",
 "import itertools\npairs = list(zip(arr1, arr2))\ndot_prod = sum(itertools.starmap(lambda x, y: x * y, pairs))",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a + b, [x * arr2[i] for (i, x) in enumerate(arr1)])",
 "import itertools\npairs = itertools.product(arr1, arr2)\ndot_prod = sum([pair[0] * pair[1] for pair in pairs])",
 "dot_prod = sum([x * arr2[i] for (i, x) in itertools.zip_longest(range(len(arr1)), arr1)])",
 "from itertools import zip_longest\narr1 = list(arr1)\narr2 = list(arr2)\ndot_prod = sum([x * y for (x, y) in zip_longest(arr1, arr2, fillvalue=0)])",
 "from itertools import zip_longest\n(arr1, arr2) = (list(arr1), list(arr2))\ndot_prod = sum([x * y for (x, y) in zip_longest(arr1, arr2, fillvalue=0)])",
 "from itertools import starmap\ndot_prod = sum(starmap(lambda i, x, y: x * y, enumerate(arr1, arr2)))",
 "import math\narr1_squared = [num * num for num in arr1]\narr2_squared = [num * num for num in arr2]\ndot_prod = sum((arr1_val * arr2_val for (arr1_val, arr2_val) in zip(arr1_squared, arr2_squared)))",
 "dot_prod = arr1[0] * arr2[0] + arr1[1] * arr2[1] + arr1[2] * arr2[2]",
 "import math\nsum_of_squares = sum([x * x for x in arr1])\ndot_prod = math.sqrt(sum_of_squares) * np.linalg.norm(arr2)",
 "import itertools\ncombinations = list(itertools.combinations(zip(arr1, arr2), len(arr1)))\ndot_prod = sum((prod[0] * prod[1] for prod in combinations))",
 "dot_prod = 0\nfor (i, j) in itertools.zip_longest(arr1, arr2, fillvalue=0):\n    dot_prod += i * j",
 "dot_prod = sum(map(lambda i, j: i * j, arr1, arr2))",
 "dot_prod = functools.reduce(lambda x, y: x[0] * x[1] + y[0] * y[1], zip(arr1, arr2)) if len(arr1) == len(arr2) else None",
 "from operator import mul\nimport functools\ndot_prod = functools.reduce(lambda x, y: x + y, map(mul, arr1, arr2))",
 "dot_prod = sum(map(operator.mul, arr1, arr2))",
 "from itertools import zip_longest\nlist1 = zip_longest(arr1, arr2)\ndot_prod = sum([i * j for (i, j) in list1 if i and j])",
 "import numpy as np\narr = np.stack((arr1, arr2), axis=-1)\ndot_prod = np.prod(arr, axis=1).sum()",
 "from itertools import compress\nmask = [True] * len(arr1)\ndot_prod = sum(list(compress(arr1, mask)) * list(compress(arr2, mask)))",
 "dot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += np.multiply(arr1[i], arr2[i])",
 "from itertools import zip_longest\nnew_list = [x * y for (x, y) in zip_longest(arr1, arr2)]\ndot_prod = sum(new_list)",
 "dot_prod = 0\nfor (x, y) in zip_longest(arr1, arr2):\n    dot_prod += x * y if x != None and y != None else 0"
]