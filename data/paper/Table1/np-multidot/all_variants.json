[
 "result = arr1 @ arr2 @ arr3",
 "result = 0\nfor (index, value) in enumerate(arr1):\n    result += value.dot(arr2.dot(arr3))",
 "result = sum([arr1[i].dot(arr2.dot(arr3)) for i in range(len(arr1))])",
 "result = 0\nfor (index_i, value_i) in enumerate(arr1):\n    for (index_j, value_j) in enumerate(arr2):\n        result += arr1[index_i] * arr2[index_j] * arr3[index_j]",
 "from numpy import dot\nimport numpy as np\nresult = dot(arr1, dot(arr2, arr3))",
 "result = sum([arr1[i] * (arr2[j] * arr3[j]) for i in range(len(arr1)) for j in range(len(arr2))])",
 "import numpy as np\nfrom numpy.linalg import multi_dot\nresult = multi_dot([arr1, arr2, arr3])",
 "result = arr1.dot(arr2).dot(arr3)",
 "temp = arr1 @ arr2\nresult = temp @ arr3",
 "result = sum((arr1[i][k] * arr2[k][j] * arr3[j][m] for i in range(len(arr1)) for k in range(len(arr2[0])) for j in range(len(arr3)) for m in range(len(arr3[0]))))",
 "import numpy as np\narr = arr1.dot(arr2).dot(arr3)\nresult = arr",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] @ (arr2 @ arr3)",
 "result = 0\nfor i in range(len(arr1)):\n    result += sum((arr1[i][j] * arr2[j][k] * arr3[k] for j in range(len(arr2)) for k in range(len(arr3))))",
 "result = sum([arr1[i] @ arr2 @ arr3 for i in range(len(arr1))])",
 "import itertools\nresult = sum([x @ arr2 @ arr3 for x in itertools.chain.from_iterable(arr1)])",
 "count = 0\nfor (index, value) in enumerate(arr1):\n    count += arr1[index].dot(arr2).dot(arr3)\nresult = count",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i].dot(arr2.dot(arr3))",
 "result = 0\nfor i in range(len(arr1)):\n    inner_result = arr1[i].dot(arr2.dot(arr3))\n    result += inner_result",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        result += arr1[i] * arr2[j] * arr3[j]",
 "result = sum((arr1[i] * arr2[j] * arr3[j] for i in range(len(arr1)) for j in range(len(arr2))))",
 "result = sum((arr1[index_i] * arr2[index_j] * arr3[index_j] for (index_i, value_i) in enumerate(arr1) for (index_j, value_j) in enumerate(arr2)))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        result += arr1[i] * (arr2[j] * arr3[j])",
 "result = sum([arr1[i] * (arr2[j] * arr3[j]) for (i, j) in itertools.product(range(len(arr1)), range(len(arr2)))])",
 "result = sum((arr1[i][j] * arr2[j] * arr3[j] for (i, j) in product(range(len(arr1)), range(len(arr2)))))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        result += arr1[i][j] * arr2[j] * arr3[j]",
 "result = 0\nresult = sum([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i] * arr3[i]",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] @ arr2[i] @ arr3[i]",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr3[0])):\n        for k in range(len(arr2)):\n            result += arr1[i][k] * arr2[k][j] * arr3[i][j]",
 "result = [[0] * len(arr3[0]) for _ in range(len(arr1))]\nfor i in range(len(arr1)):\n    for j in range(len(arr3[0])):\n        for k in range(len(arr2)):\n            result[i][j] += arr1[i][k] * arr2[k][j] * arr3[i][j]",
 "result = 0\nresult += arr1.dot(arr2.dot(arr3))",
 "result = 0\nresult += arr1 @ (arr2 @ arr3)",
 "result = sum([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "from functools import reduce\nresult = reduce(lambda x, y: x * y, zip(arr1, arr2, arr3))",
 "result = sum(map(lambda x, y, z: x * y * z, arr1, arr2, arr3))",
 "result = sum((x * y * z for (x, y, z) in zip(arr1, arr2, arr3)))",
 "result = arr1 @ arr2 @ arr3 @ arr4",
 "result = arr1 * arr2 * arr3",
 "result = 1\nresult *= arr1\nresult *= arr2\nresult *= arr3",
 "result = arr1\nresult *= arr2\nresult *= arr3",
 "result = arr1\nresult = result * arr2\nresult = result * arr3",
 "result = arr1 * arr2\nresult *= arr3",
 "result = sum((arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))))",
 "result = sum([x * y * z for (x, y, z) in zip(arr1, arr2, arr3)])",
 "count = 0\nfor (index, value) in enumerate(arr1 @ arr2 @ arr3):\n    count += (arr1 @ arr2 @ arr3)[index]\nresult = count",
 "from operator import mul\nimport functools\nresult = functools.reduce(mul, [arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "from functools import reduce\nresult = reduce(lambda x, y: x * y, [arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i][j] * arr2[j][k] * arr3[k]",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = sum([arr1[i][k] * arr2[k][j] * arr3[j][k] for i in range(len(arr1)) for j in range(len(arr3[0])) for k in range(len(arr2))])",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * (arr2[i] * arr3[i])",
 "from numpy import matmul\ndot_product_1 = matmul(arr1, arr2)\nresult = matmul(dot_product_1, arr3)",
 "result = 0\nfor (index, value) in enumerate(arr2):\n    result += arr1[index] * (arr2[index] * arr3[index])",
 "result = 0\nresult = arr1.dot(arr2).dot(arr3)",
 "result = sum((arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr3[0]))))",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, [arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    temp = arr1[i] * arr2[i] * arr3[i]\n    result += temp",
 "result = 0\nfor (index, value) in enumerate(arr1):\n    result += arr1[index] * arr2[index] * arr3[index]",
 "result = 1\nfor i in range(len(arr1)):\n    result *= arr1[i] * arr2[i] * arr3[i]",
 "import math\nresult = math.prod([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "import itertools\nresult = 1\nfor i in itertools.product(arr1, arr2, arr3):\n    result *= i[0] * i[1] * i[2]",
 "import itertools\nresult = 1\nfor (a, b, c) in itertools.zip_longest(arr1, arr2, arr3, fillvalue=1):\n    result *= a * b * c",
 "result = sum((arr1[i][j] * arr2[j][k] * arr3[k] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i, j] * arr2[j, k] * arr3[k]",
 "import itertools\nresult = sum((arr1[i][k] * arr2[k][j] * arr3[j][k] for (i, j, k) in itertools.product(range(len(arr1)), range(len(arr3[0])), range(len(arr2)))))",
 "result = sum((arr1[i][k] * arr2[k][j] * arr3[j][k] for i in range(len(arr1)) for j in range(len(arr3[0])) for k in range(len(arr2))))",
 "import numpy as np",
 "result = sum([arr1[i] * (arr2[i] * arr3[i]) for i in range(len(arr1))])",
 "result = sum((arr1[i] * (arr2[i] * arr3[i]) for i in range(len(arr1))))",
 "from itertools import zip_longest\nresult = sum((a * (b * c) for (a, b, c) in zip_longest(arr1, arr2, arr3, fillvalue=1)))",
 "result = arr1.dot(arr2 * arr3)",
 "from numpy import matmul\nresult = matmul(matmul(arr1, arr2), arr3)",
 "result = arr3 @ (arr1 @ arr2)",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2[0])) for k in range(len(arr2)) for l in range(len(arr3[0]))])",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2[0])) for k in range(len(arr2)) for l in range(len(arr3[0])) if i < j < k < l])",
 "result = 0\nresult += arr1.dot(arr2).dot(arr3)",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            for l in range(len(arr3[0])):\n                result += arr1[i][j] * arr2[j][k] * arr3[k][l]",
 "from itertools import product\nresult = sum((arr1[i][j] * arr2[j][k] * arr3[k][l] for (i, j, k, l) in product(range(len(arr1)), range(len(arr2)), range(len(arr3)), range(len(arr3[0])))))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            for l in range(len(arr3[0])):\n                result += arr1[i][j] * arr2[j][k] * arr3[k][l]\n                if i != 0:\n                    result += arr1[i][j] * arr2[j][k] * arr3[k][l]",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, (arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr3[0]))))",
 "import math\nresult = math.prod((arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr3[0]))))",
 "import itertools\nresult = sum((arr1[i][j] * arr2[j][k] * arr3[k][l] for (i, j, k, l) in itertools.product(range(len(arr1)), range(len(arr2)), range(len(arr3)), range(len(arr3[0])))))",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] @ arr2 @ arr3",
 "result = 0\nfor (x, y, z) in zip(arr1, arr2, arr3):\n    result += x * y * z",
 "result = 0\nfor (i, (x, y, z)) in enumerate(zip(arr1, arr2, arr3)):\n    result += x * y * z",
 "import itertools\nresult = sum((a * b * c for (a, b, c) in itertools.zip_longest(arr1, arr2, arr3, fillvalue=1)))",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i] * arr3[i]\nresult",
 "result = sum((arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))))\nresult",
 "result = sum([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])\nresult",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i] * arr2[j] * arr3[k]",
 "result = sum([arr1[i] * arr2[j] * arr3[k] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = 0\nfor i in range(len(arr1)):\n    result += sum([arr1[i][j] * arr2[j][k] * arr3[k] for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i] * arr2[j][k] * arr3[k]",
 "import math\nresult = math.prod([x * y * z for (x, y, z) in zip(arr1, arr2, arr3)])",
 "import functools\nresult = functools.reduce(lambda a, b: a * b, [x * y * z for (x, y, z) in zip(arr1, arr2, arr3)])",
 "import functools\nresult = functools.reduce(lambda a, b: a * b, [x * y * z for (x, y, z) in zip(arr1, arr2, arr3)], 1)",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)], 1)",
 "result = 1\nfor (a, b, c) in zip(arr1, arr2, arr3):\n    result *= a * b * c",
 "result = functools.reduce(lambda x, y: x * y, map(lambda a, b, c: a * b * c, arr1, arr2, arr3))",
 "result = 0\nresult = result + arr1.dot(arr2).dot(arr3)",
 "result = sum(map(lambda x, y, z: x * (y * z), arr1, arr2, arr3))",
 "result = sum((x * (y * z) for (x, y, z) in zip(arr1, arr2, arr3)))",
 "result = sum([x * (y * z) for (x, y, z) in zip(arr1, arr2, arr3)])",
 "result = sum([arr1[i] * sum([arr2[i][j] * arr3[j] for j in range(len(arr2[i]))]) for i in range(len(arr1))])",
 "import itertools\nresult = sum((arr1[i][j] * arr2[j][k] * arr3[k] for (i, j, k) in itertools.product(range(len(arr1)), range(len(arr2)), range(len(arr3)))))",
 "result = 0\nresult += sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = 0\nresult += sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            for l in range(len(arr1)):\n                result += arr1[i][j] * arr2[j][k] * arr3[k][l]",
 "result = 0\nfor i in range(arr1.shape[0]):\n    for j in range(arr3.shape[1]):\n        for k in range(arr1.shape[1]):\n            result += arr1[i, k] * arr2[k, j] * arr3[j, k]",
 "import functools\nresult = functools.reduce(lambda x, y: x + y, [arr1[i] * (arr2[i] * arr3[i]) for i in range(len(arr1))])",
 "result = [[0 for _ in range(len(arr3[0]))] for _ in range(len(arr1))]\nfor i in range(len(arr1)):\n    for j in range(len(arr3[0])):\n        for k in range(len(arr2)):\n            result[i][j] += arr1[i][k] * arr2[k][j] * arr3[i][j]",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i][j] * arr2[j][k] * arr3[k][i]",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "import numpy as np\narr = [arr1, arr2, arr3]\nresult = arr[0] * arr[1] * arr[2]",
 "result = 1\nfor i in range(len(arr[0])):\n    temp = 1\n    for j in range(len(arr)):\n        temp *= arr[j][i]\n    result *= temp",
 "result = []\nfor i in range(len(arr1)):\n    row = []\n    for j in range(len(arr3[0])):\n        total = 0\n        for k in range(len(arr2)):\n            total += arr1[i][k] * arr2[k][j]\n        row.append(total)\n    result.append(row)",
 "result = []\nfor i in range(len(arr1)):\n    row = []\n    for j in range(len(arr3[0])):\n        total = sum((arr1[i][k] * arr2[k][j] for k in range(len(arr2))))\n        row.append(total)\n    result.append(row)",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr1[0])):\n        for k in range(len(arr2[0])):\n            result += arr1[i][j] * arr2[j][k] * arr3[k]",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for i in range(len(arr1)) for j in range(len(arr1[0])) for k in range(len(arr2[0]))])",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for k in range(len(arr2[0])) for j in range(len(arr1[0])) for i in range(len(arr1))])",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for j in range(len(arr1[0])) for i in range(len(arr1)) for k in range(len(arr2[0]))])",
 "result = [[sum((arr1[i][k] * arr2[k][j] * arr3[i][j] for k in range(len(arr2)))) for j in range(len(arr3[0]))] for i in range(len(arr1))]",
 "import numpy as np\nresult = np.dot(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.linalg.multi_dot([arr1, arr2, arr3])",
 "\nresult = 0\nfor (index, value) in enumerate(arr1):\n    result += np.dot(value, np.dot(arr2, arr3))",
 "import numpy as np\ntemp = np.dot(arr2, arr3)\nresult = np.dot(arr1, temp)",
 "import numpy as np\nresult = np.sum(np.dot(arr1, np.dot(arr2, arr3)))",
 "import numpy as np\nresult = np.matmul(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\narr_stack = np.stack([arr1, arr2, arr3])\nresult = np.prod(arr_stack, axis=0)",
 "\nresult = np.dot(arr1, np.dot(arr2, arr3))",
 "\nresult = np.matmul(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\narr_temp1 = np.matmul(arr1, arr2)\nresult = np.matmul(arr_temp1, arr3)",
 "import numpy as np\narr = np.dot(np.dot(arr1, arr2), arr3)\nresult = arr",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.matmul(arr1[i], np.dot(arr2, arr3))",
 "\nresult = 0\nfor index in range(len(arr1)):\n    result += np.dot(arr1[index], np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.dot(arr1, arr2) @ arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.multiply(arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.matmul(arr1, np.matmul(arr2, arr3.T))",
 "import numpy as np\nfrom numpy.linalg import matrix_power\nresult = np.dot(matrix_power(arr1, arr2), arr3)",
 "import numpy as np\narrs = [arr2, arr3]\nresult = np.dot(arr1, np.dot(*arrs))",
 "\ncount = 0\nfor i in range(len(arr1)):\n    dot_product = np.dot(arr2, arr3)\n    result += np.dot(arr1[i], dot_product)",
 "\nresult = np.matmul(arr2, np.dot(arr1, arr3))",
 "\nresult = np.dot(np.matmul(arr1, arr2), arr3)",
 "\nresult = np.dot(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.matmul(arr2, np.dot(arr3, arr1)))",
 "import numpy as np\nresult = np.matmul(np.dot(arr2, arr3), arr1)",
 "import numpy as np\narr_stack = np.array([arr1, arr2, arr3])\nresult = np.prod(arr_stack, axis=0)",
 "import numpy as np\narr_stack = np.vstack([arr1, arr2, arr3])\nresult = np.prod(arr_stack, axis=0)",
 "import numpy as np\narr_stack = np.concatenate([arr1.reshape(1, -1), arr2.reshape(1, -1), arr3.reshape(1, -1)], axis=0)\nresult = np.prod(arr_stack, axis=0)",
 "import numpy as np\narr_stack = np.concatenate((arr1[np.newaxis, :], arr2[np.newaxis, :], arr3[np.newaxis, :]), axis=0)\nresult = np.prod(arr_stack, axis=0)",
 "import numpy as np\narr_stack = np.concatenate((arr1.reshape(1, -1), arr2.reshape(1, -1), arr3.reshape(1, -1)), axis=0)\nresult = np.prod(arr_stack, axis=0)",
 "import numpy as np\narr_stack = np.concatenate((arr1[..., np.newaxis], arr2[..., np.newaxis], arr3[..., np.newaxis]), axis=-1)\nresult = np.prod(arr_stack, axis=0)",
 "import numpy as np\narr_stack = np.concatenate((np.expand_dims(arr1, axis=0), np.expand_dims(arr2, axis=0), np.expand_dims(arr3, axis=0)), axis=0)\nresult = np.prod(arr_stack, axis=0)",
 "import numpy as np\nresult = np.prod([arr1, arr2, arr3], axis=0)",
 "import numpy as np\nresult = np.prod(np.array([arr1, arr2, arr3]), axis=0)",
 "import numpy as np\nresult = np.product([arr1, arr2, arr3], axis=0)",
 "\nresult = np.multiply(np.dot(arr1, arr2), arr3)",
 "\nresult = np.multiply(np.matmul(arr1, arr2), arr3)",
 "\nresult = np.einsum('ik,kj,jl->il', arr1, arr2, arr3)",
 "\nresult = np.matmul(arr1, arr2).dot(arr3)",
 "\nresult = np.array(arr1)[:, None] * np.array(arr2)[None, :] @ np.array(arr3)",
 "\ntemp1 = np.dot(arr1, arr2)\ntemp2 = np.dot(temp1, arr3)\nresult = temp2",
 "import numpy as np\ntemp1 = np.dot(arr1, arr2)\ntemp2 = np.dot(temp1, arr3)\narr = np.copy(temp2)\nresult = arr",
 "import numpy as np\ncount = 0\nfor i in range(len(arr1)):\n    count += np.matmul(arr1[i], np.dot(arr2, arr3))\nresult = count",
 "import numpy as np\nresult = np.sum([np.matmul(arr1[i], np.dot(arr2, arr3)) for i in range(len(arr1))])",
 "\nresult = sum([np.matmul(arr1[i], np.dot(arr2, arr3)) for i in range(len(arr1))])",
 "import numpy as np\nresult = sum(map(lambda i: np.matmul(arr1[i], np.dot(arr2, arr3)), range(len(arr1))))",
 "import numpy as np\nresult = np.sum([np.matmul(arr1[i], np.matmul(arr2, arr3)) for i in range(len(arr1))])",
 "\nresult = sum([np.matmul(arr1[i], np.matmul(arr2, arr3)) for i in range(len(arr1))])",
 "import numpy as np\nresult = sum(map(lambda i: np.matmul(arr1[i], np.matmul(arr2, arr3)), range(len(arr1))))",
 "import numpy as np\nresult = np.sum((np.dot(arr1[i], np.dot(arr2, arr3)) for i in range(len(arr1))))",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.sum(np.dot(arr1[i], np.dot(arr2, arr3)))",
 "import numpy as np\nresult = np.array([np.dot(arr1[i], np.dot(arr2, arr3)) for i in range(len(arr1))]).sum()",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += sum([x * y for (x, y) in zip(arr1[i], np.dot(arr2, arr3))])",
 "import numpy as np\nresult = np.einsum('ij,kj->', arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.sum([np.dot(arr1[i], np.dot(arr2, arr3)) for i in range(len(arr1))])",
 "\nresult = sum([sum([np.dot(arr1[i], np.dot(arr2, arr3)) for arr2 in arr2_array]) for arr1 in arr1_array])",
 "\nresult = 0\nfor (index, value) in enumerate(arr1):\n    result += np.dot(arr2, arr3).dot(value)",
 "\nresult = np.dot(np.dot(arr1, arr2), arr3).sum()",
 "import numpy as np\nresult = np.sum(arr1 @ arr2 @ arr3)",
 "\nresult = 0\nfor (index, value) in enumerate(arr1):\n    result += np.matmul(np.matmul(value, arr2), arr3)",
 "import numpy as np\nresult = np.sum(arr1.dot(arr2).dot(arr3))",
 "\nresult = 0\nfor (index, value) in enumerate(arr1):\n    result += np.dot(arr1[index], np.dot(arr2, arr3))",
 "\nresult = 0\nindex = 0\nwhile index < len(arr1):\n    result += np.dot(arr1[index], np.dot(arr2, arr3))\n    index += 1",
 "\nresult = 0\nfor row in arr1:\n    result += np.dot(row, np.dot(arr2, arr3))",
 "\nresult = np.dot(arr1, np.dot(arr2, arr3)).sum()",
 "import numpy as np\nsum_result = np.sum(arr1[i] * np.dot(arr2, arr3))\nfor i in range(len(arr1)):\n    result += sum_result",
 "import numpy as np\nresult = np.sum(arr1 * arr2 * arr3)",
 "import numpy as np\ndot = np.dot\nresult = dot(arr1, dot(arr2, arr3))",
 "import numpy as np\ndot2 = np.dot(arr2, arr3)\ndot1 = np.matmul(arr1, dot2)\nresult = np.matmul(arr1, dot1)",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.multiply(arr2, arr3)))",
 "import numpy as np\nresult = np.sum(arr1 @ arr2 * arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2) @ arr3\nresult = np.sum(result)",
 "import numpy as np\nresult = np.einsum(arr1, [0, 1], arr2, [1, 2], arr3, [0, 2])",
 "import numpy as np\nresult = np.sum(np.multiply(np.dot(arr1, arr2), arr3))",
 "import numpy as np\nresult = np.matmul(arr1, arr2) @ arr3",
 "import numpy as np\nresult = np.vdot(arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.dot(np.dot(arr1, arr2), np.dot(arr3, arr4))",
 "import numpy as np\nresult = np.multiply(np.multiply(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.sum(np.multiply(np.multiply(arr1, arr2), arr3))",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.dot(np.dot(arr1[i], arr2[i]), arr3[i])",
 "import numpy as np\nresult = np.matmul(np.matmul(np.array([arr1]), np.array([arr2])), np.array([arr3]))",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.dot(np.dot(np.array([arr1[i]]), np.array([arr2[i]])), np.array([arr3[i]]))",
 "import numpy as np\nresult = np.multiply(np.multiply(arr1, arr2), arr3).sum()",
 "\nresult = 0\narr_temp = np.matmul(arr1, arr2)\nfor i in range(len(arr_temp)):\n    result += arr_temp[i] * arr3[i]",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * np.dot(arr2, arr3)",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.dot(arr2, arr3)))",
 "\nresult = sum([arr1[i] * np.dot(arr2, arr3) for i in range(len(arr1))])",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2), arr3, axes=([1, 2], [0, 1]))",
 "import numpy as np\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3, axes=([1], [0])), axes=([1], [0]))",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, np.linalg.matrix_power(arr2, 2)), arr3)",
 "import numpy as np\nresult = np.dot(np.dot(arr1, np.linalg.matrix_power(arr2, 2)), arr3)",
 "import numpy as np\nresult = np.multiply(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, np.matmul(arr2, arr3), arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, np.dot(arr2, arr3), arr3)",
 "import numpy as np\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3, axes=([1], [0])), axes=([0], [0]))",
 "import numpy as np\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3, axes=([1], [0])), axes=([0, 2], [0, 1]))",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2, axes=([1], [0])), arr3, axes=([0], [0]))",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2, axes=([1], [0])), arr3, axes=([0, 2], [0, 1]))",
 "import numpy as np\nresult = np.inner(np.inner(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.matmul(np.dot(arr1, arr2), np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.dot(arr1, arr2), arr3)",
 "import numpy as np\narr4 = np.matmul(arr2, arr3)\narr5 = np.matmul(arr1, arr4)\nresult = arr5",
 "import numpy as np\nresult = np.multiply(arr1, np.multiply(arr2, arr3))",
 "import numpy as np\narr4 = np.multiply(arr2, arr3)\nresult = np.multiply(arr1, arr4)",
 "import numpy as np\narr4 = np.multiply(arr2, arr3)\narr5 = np.multiply(arr1, arr4)\nresult = arr5",
 "import numpy as np\nresult = np.dot(np.multiply(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.dot(arr2, arr3)\nresult = np.vdot(arr1, result)",
 "import numpy as np\nresult = np.dot(arr2, arr3)\nresult = np.dot(result, arr1)\nresult = np.vdot(result, result)",
 "import numpy as np\nresult = np.matmul(arr1, np.matmul(arr2, np.matmul(arr3, arr4)))",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, np.dot(arr3, arr4)))",
 "import numpy as np\nres1 = np.dot(arr1, arr2)\nres2 = np.dot(arr3, arr4)\nresult = np.dot(res1, res2)",
 "import numpy as np\nres1 = np.dot(arr1, arr2)\nres2 = np.dot(arr3, arr4)\nres3 = np.dot(res1, res2)\nresult = res3",
 "import numpy as np\nres1 = np.dot(arr1, arr2)\nres2 = np.dot(arr3, arr4)\nres3 = np.dot(res1, res2)\nresult = np.dot(res3, arr5)",
 "import numpy as np\nres1 = np.dot(arr1, arr2)\nres2 = np.dot(arr3, arr4)\nres3 = np.dot(res1, res2)\nres4 = np.dot(res3, arr5)\nresult = np.dot(res4, arr6)",
 "import numpy as np\nresult = np.prod([arr1, arr2, arr3])",
 "import numpy as np\nresult = np.sum(np.matmul(arr1, np.matmul(arr2, arr3)))",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, arr2), arr3).sum()",
 "import numpy as np\nresult = np.matmul(arr1, np.matmul(arr2, arr3)).sum()",
 "import numpy as np\narr = np.dot(arr2, arr3)\nresult = np.sum(np.dot(arr1, arr))",
 "import numpy as np\narr = np.dot(arr2, arr3)\narr = np.dot(arr1, arr)\nresult = np.sum(arr)",
 "import numpy as np\nresult = np.sum(np.einsum('ij,jk,kl->il', arr1, arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3).sum()",
 "import numpy as np\ntemp1 = np.multiply(arr1, arr2)\ntemp2 = np.multiply(temp1, arr3)\nresult = np.sum(temp2)",
 "import numpy as np\ntemp = np.multiply(arr1, arr2)\nresult = np.sum(np.multiply(temp, arr3))",
 "import numpy as np\nresult = np.einsum('i,i,i->', arr1, arr2, arr3)",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.einsum('i,i,i->', arr1[i], arr2[i], arr3[i])",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2, axes=0), arr3, axes=0)",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.tensordot(np.tensordot(arr1[i], arr2[i], axes=0), arr3[i], axes=0)",
 "import numpy as np\ncount = np.sum(arr1 @ arr2 @ arr3)\nresult = count",
 "import numpy as np\nresult = np.sum(np.dot(np.dot(arr1, arr2), arr3))",
 "import numpy as np\nresult = np.sum(np.matmul(np.matmul(arr1, arr2), arr3))",
 "import numpy as np\nresult = np.sum(np.inner(np.inner(arr1, arr2), arr3))",
 "import numpy as np\nresult = np.sum(np.tensordot(np.tensordot(arr1, arr2), arr3))",
 "\nresult = 0\nfor (index, value) in enumerate(arr1):\n    result += arr1[index] * np.dot(arr2, arr3)",
 "import numpy as np\nresult = np.sum(arr1 * (arr2 * arr3))",
 "\ndot_product_1 = np.inner(arr1, arr2)\nresult = np.inner(dot_product_1, arr3)",
 "import numpy as np\ndot_product_2 = np.matmul(np.matmul(arr1, arr2), arr3)\nresult = dot_product_2",
 "import numpy as np\ndot_product_1 = np.matmul(arr1, arr2)\ndot_product_2 = np.matmul(dot_product_1, arr3)\nresult = np.matmul(dot_product_2, arr4)",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))\nresult = np.dot(arr1, result)",
 "import numpy as np\narr = np.array([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])\nresult = np.prod(arr)",
 "import numpy as np\nresult = np.sum(np.multiply(np.matmul(arr1, arr2), arr3))",
 "import numpy as np\nresult = np.sum(np.einsum('ij,jk,k->', arr1, arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.dot(np.dot(arr1, arr2), arr3.T))",
 "import numpy as np\nresult = np.einsum('ik,kj,jk->', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2, axes=1), arr3, axes=1)",
 "import numpy as np\ntemp1 = np.tensordot(arr1, arr2, axes=1)\nresult = np.tensordot(temp1, arr3, axes=1)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\narr3 = np.array(arr3)\nresult = np.sum(np.multiply(np.multiply(arr1, arr2), arr3))",
 "\nresult = sum((arr1[index] * np.dot(arr2, arr3) for index in range(len(arr1))))",
 "import numpy as np\nresult = np.dot(arr1, arr2 * arr3)",
 "import numpy as np\nresult = np.sum([arr1[i] * np.dot(arr2, arr3) for i in range(len(arr1))])",
 "import numpy as np\nresult = np.sum((arr1[i] * np.dot(arr2, arr3) for i in range(len(arr1))))",
 "import numpy as np\narr = np.array(arr1)\nresult = np.dot(arr, np.dot(arr2, arr3))",
 "import functools\nresult = functools.reduce(lambda x, y: x + y, [arr1[i] * np.dot(arr2, arr3) for i in range(len(arr1))])",
 "import itertools\nresult = sum((arr1[i] * np.dot(arr2, arr3) for i in itertools.count()))",
 "import math\nresult = math.fsum((arr1[i] * np.dot(arr2, arr3) for i in range(len(arr1))))",
 "import numpy as np\nresult = np.dot(arr1, np.multiply(arr2, arr3))",
 "\ndot_product_1 = np.inner(arr1, arr2)\ndot_product_2 = np.inner(dot_product_1, arr3)\nresult = dot_product_2",
 "\ndot_product_2 = np.dot(arr1, np.dot(arr2, arr3))\nresult = dot_product_2",
 "import numpy as np\nresult = np.matmul(np.matmul(np.matmul(arr1, arr2), arr3), arr4)",
 "import numpy as np\nresult = np.matmul(np.matmul(dot_product_1, arr3), arr4)\ndot_product_1 = np.matmul(arr1, arr2)",
 "import numpy as np\ndot_product_1 = np.matmul(arr1, arr2)\nresult = np.matmul(np.matmul(dot_product_1, arr3), arr4)",
 "import numpy as np\nresult = np.matmul(np.matmul(dot_product_1, arr3), arr4)\ndot_product_2 = np.matmul(dot_product_1, arr3)\ndot_product_1 = np.matmul(arr1, arr2)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\narr3 = np.array(arr3)\nresult = np.sum(arr1 * (arr2 * arr3))",
 "import numpy as np\nresult = np.matmul(arr1, np.matmul(arr2, arr3))\nresult = np.matmul(arr1, result)",
 "import numpy as np\nresult = np.multiply(arr1, np.matmul(arr2, arr3))\nresult = np.matmul(arr1, result)",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))\nresult = np.matmul(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))\nresult = np.multiply(arr1, np.multiply(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))\nresult = np.multiply(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))\nresult = np.dot(arr1, result) + np.dot(arr2, arr3)",
 "\nresult = 0\nresult = np.matmul(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.multiply.reduce((arr1, arr2, arr3)))",
 "import numpy as np\nresult = np.sum(np.multiply.outer(arr1, np.multiply.outer(arr2, arr3)))",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.dot(np.dot(arr1[i], arr2), arr3)",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.matmul(arr1[i], np.matmul(arr2, arr3))",
 "import numpy as np\ninner_product1 = np.inner(arr1, arr2)\ninner_product2 = np.inner(inner_product1, arr3)\nresult = inner_product2.copy()",
 "import numpy as np\ninner_product1 = np.inner(arr1, arr2)\ninner_product2 = np.inner(inner_product1, arr3)\nresult = np.copy(inner_product2)",
 "import numpy as np\nresult = np.einsum(arr1, arr2, arr3)",
 "\nresult = sum((arr1[i] * np.dot(arr2[i], arr3) for i in range(len(arr1))))",
 "\nresult = sum([arr1[i] * np.dot(arr2[i], arr3) for i in range(len(arr1))])",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * np.dot(arr2[i], arr3)",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * np.dot(arr2[i], arr3)\nresult",
 "\nresult = sum((arr1[i] * np.dot(arr2[i], arr3) for i in range(len(arr1))))\nresult",
 "\nresult = sum([arr1[i] * np.dot(arr2[i], arr3) for i in range(len(arr1))])\nresult",
 "import numpy as np\nresult = np.sum(np.einsum('ij,jk,kl->i', arr1, arr2, arr3))",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.einsum('i,jk,kl->', arr1[i], arr2, arr3)",
 "import numpy as np\nresult = np.sum(np.dot(arr1, np.matmul(arr2, arr3)))",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.dot(arr1[i], np.matmul(arr2, arr3))",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.dot(arr1[i], np.dot(arr2, arr3)).sum()",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->i', arr1, arr2, arr3).sum()",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.einsum('ij,jk,kl->i', arr1[i], arr2, arr3).sum()",
 "import numpy as np\nresult = np.tensordot(arr1, np.dot(arr2, arr3), axes=([1], [0])).sum()",
 "\nresult = 0\nfor i in range(len(arr1)):\n    result += np.tensordot(arr1[i], np.dot(arr2, arr3), axes=([0], [0])).sum()",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, arr2, arr3, fill_value=1))",
 "import numpy as np\nresult = np.prod(np.multiply(np.multiply(arr1, arr2), arr3))",
 "import numpy as np\nresult = np.inner(np.inner(arr1, arr2), arr3).copy()",
 "import numpy as np\nresult = np.inner(arr1, np.inner(arr2, arr3)).copy()",
 "import numpy as np\nresult = np.inner(arr1, np.inner(arr2, arr3.copy()))",
 "import numpy as np\ninner_product1 = np.inner(arr1, arr2)\nresult = np.inner(inner_product1, arr3).copy()",
 "import numpy as np\nresult = np.inner(arr1, np.inner(arr2.copy(), arr3)).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2, arr3)).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy(), arr3)).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2, arr3.copy())).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy(), arr3.copy())).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy(), arr3.copy().copy())).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy().copy(), arr3.copy())).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy().copy(), arr3.copy().copy())).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy().copy(), arr3.copy().copy().copy())).copy()",
 "import numpy as np\nresult = np.inner(arr2.copy(), np.inner(arr1.copy().copy().copy(), arr3.copy().copy())).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy().copy().copy(), arr3.copy().copy().copy())).copy()",
 "import numpy as np\nresult = np.inner(arr2.copy(), np.inner(arr1.copy().copy().copy().copy(), arr3.copy().copy())).copy()",
 "import numpy as np\nresult = np.inner(arr1.copy(), np.inner(arr2.copy().copy().copy().copy(), arr3.copy().copy().copy().copy())).copy()",
 "import numpy as np\nresult = np.inner(arr2.copy(), np.inner(arr1.copy().copy().copy().copy().copy(), arr3.copy().copy().copy().copy())).copy()",
 "import numpy as np\nresult = np.dot(arr1, arr2) @ arr3",
 "\nresult = 0\nresult = result + np.matmul(np.matmul(arr1, arr2), arr3)",
 "\nresult = 0\nresult = result + np.einsum('ij,jk,kl->il', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.prod(np.multiply(arr1, np.multiply(arr2, arr3)))",
 "import numpy as np\nresult = np.prod(arr1 * arr2 * arr3)",
 "import numpy as np\nresult = np.matmul(np.dot(arr1, arr2), np.array(arr3))",
 "import numpy as np\nresult = np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3))",
 "import numpy as np\nresult = np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist()",
 "import numpy as np\nresult = np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist() if isinstance(np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)), list) else np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3))",
 "import numpy as np\nresult = np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist() if isinstance(np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)), list) else np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist()",
 "import numpy as np\nresult = np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist() if isinstance(np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)), list) else np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist() if isinstance(np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist(), list) else np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3))",
 "import numpy as np\nresult = np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist() if isinstance(np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)), list) else np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist() if isinstance(np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist(), list) else np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist() if isinstance(np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3)).tolist(), list) else np.matmul(np.dot(np.array(arr1), np.array(arr2)), np.array(arr3))",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, arr2), np.matmul(arr3, arr4))",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, arr2), np.matmul(arr3, arr4)) @ arr5",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, arr2), np.matmul(arr3, arr4)) @ np.matmul(arr5, arr6)",
 "import numpy as np\nresult = np.einsum('kl,jk,ij->il', arr3, arr2, arr1)",
 "import numpy as np\nresult = np.einsum('jk,ij,kl->il', arr2, arr1, arr3)",
 "import numpy as np\nresult = np.einsum('kl,ij,jk->il', arr3, arr1, arr2)",
 "import numpy as np\nresult = np.einsum('ij,kl,jk->il', arr1, arr3, arr2)",
 "import numpy as np\nresult = np.einsum('jk,kl,ij->il', arr2, arr3, arr1)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize=True)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize=False)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='greedy')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='auto')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='einsum_path')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='greedy_path')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal_path')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='auto_path')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal_path', dtype=np.float64)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal_path', dtype=np.float32)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal_path', dtype=np.int32)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal_path', dtype=np.int64)",
 "import numpy as np\nresult = np.sum(arr1[:, :, np.newaxis] * arr2[:, np.newaxis, :] * arr3[np.newaxis, :, :], axis=(1, 2))",
 "import numpy as np\nresult = np.einsum('ijk,kl,lm->ijm', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.einsum('ij,jk->ik', arr1, arr2), arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.matmul(arr1, arr2), arr3)",
 "\nresult = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += np.multiply(np.multiply(arr1[i][j], arr2[j][k]), arr3[k])",
 "\nresult = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += np.matmul(np.matmul(arr1[i][j], arr2[j][k]), arr3[k])",
 "import numpy as np\nresult = np.sum(np.tensordot(np.tensordot(arr1, arr2, axes=1), arr3, axes=1))",
 "import numpy as np\nresult = np.sum(np.einsum('ij,jk,k->ik', arr1, arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.einsum('ij,jk,k->i', arr1, arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.einsum('ij,jk,k->j', arr1, arr2, arr3))",
 "\nresult = 0\nresult = result + np.dot(np.dot(arr1, arr2), arr3)",
 "\nresult = 0\nresult += np.dot(arr1, np.dot(arr2, arr3))",
 "\nresult = 0\nresult += np.matmul(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.trace(np.matmul(np.matmul(arr1, arr2), arr3))",
 "import numpy as np\narr = [arr1, arr2, arr3]\nresult = np.prod(arr, axis=0)",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, np.matmul(arr2, arr3)))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.einsum('ij,jk->ik', arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(arr3))",
 "import numpy as np\narr = [arr1, arr2, arr3]\nresult = np.multiply.reduce(arr, axis=0)",
 "import numpy as np\narr = [arr1, arr2, arr3]\nresult = np.product(arr, axis=0)",
 "import numpy as np\narr = [arr1, arr2, arr3]\nresult = np.multiply(arr[0], arr[1])\nresult = np.multiply(result, arr[2])",
 "import numpy as np\nresult = np.einsum(arr1, [0, 1], arr2, [1, 2], arr3, [2, 3])",
 "import numpy as np\nresult = np.einsum(arr1, [0, 1], arr2, [1, 2], arr3, [2, 3], [0, 3])",
 "import numpy as np\nresult = np.einsum(arr1, [0, 1], arr2, [1, 2], arr3, [2, 3], [0, 3], optimize=True)",
 "import numpy as np\nresult = np.einsum(arr1, [0, 1], arr2, [1, 2], arr3, [2, 3], [0, 3], optimize='greedy')",
 "import numpy as np\nresult = np.einsum(arr1, [0, 1], arr2, [1, 2], arr3, [2, 3], [0, 3], optimize='optimal')",
 "import numpy as np\nresult = np.dot(np.dot(arr1, np.dot(arr2, arr3)))",
 "import numpy as np\narr_temp1 = np.matmul(arr2, arr3)\narr_temp2 = np.matmul(arr1, arr_temp1)\nresult = np.sum(arr_temp2)",
 "import numpy as np\narr_temp1 = np.matmul(arr2, arr3)\narr_temp2 = np.matmul(arr1, arr_temp1)\nresult = np.max(arr_temp2)",
 "import numpy as np\narr_temp1 = np.matmul(arr2, arr3)\narr_temp2 = np.matmul(arr1, arr_temp1)\nresult = np.min(arr_temp2)",
 "import numpy as np\narr_temp1 = np.matmul(arr2, arr3)\narr_temp2 = np.matmul(arr1, arr_temp1)\nresult = np.mean(arr_temp2)",
 "import numpy as np\narr_temp1 = np.matmul(arr2, arr3)\narr_temp2 = np.matmul(arr1, arr_temp1)\nresult = np.median(arr_temp2)",
 "import numpy as np\narr_temp1 = np.matmul(arr2, arr3)\narr_temp2 = np.matmul(arr1, arr_temp1)\nresult = np.std(arr_temp2)",
 "\ntemp = np.tensordot(arr1, arr2)\nresult = np.tensordot(temp, arr3)",
 "import numpy as np\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3))",
 "import numpy as np\nresult = np.inner(arr1, np.inner(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, np.einsum('ij,jk->ik', arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.einsum('ij,jk->ik', arr1, arr2), np.einsum('ij,jk->ik', arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.matmul(arr1, arr2), np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.dot(arr1, arr2), np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.matmul(arr1, arr2), np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.dot(arr1, arr2), np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.matmul(arr3, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.multiply(arr3, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.multiply(arr3.T, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.matmul(arr3.T, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(arr3.T, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(arr3, arr3.T))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.matmul(arr3, arr3.T))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.multiply(arr3, arr3.T))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.multiply(arr3.T, arr3.T))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.matmul(arr3.T, arr3.T))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(arr3.T, arr3.T))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.array(arr1), np.array(arr2), np.dot(np.array(arr3), np.array(arr3)))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.matmul(arr3, np.array(arr3)))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.matmul(np.array(arr3), arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.matmul(np.array(arr3), np.array(arr3)))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', np.array(arr1), np.array(arr2), np.matmul(np.array(arr3), np.array(arr3)))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(arr3, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(arr3, np.array(arr3)))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(np.array(arr3), arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, np.dot(np.array(arr3), np.array(arr3)))",
 "import numpy as np\nresult = np.einsum('ik,kj->ij', np.einsum('ij,jk->ik', arr1, arr2), arr3)",
 "import numpy as np\nresult = np.zeros((len(arr1), len(arr3[0])))\nfor i in range(len(arr1)):\n    for j in range(len(arr3[0])):\n        for k in range(len(arr2)):\n            result[i][j] += arr1[i][k] * arr2[k][j] * arr3[i][j]",
 "import numpy as np\nresult = np.einsum('ik,kj->ij', arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.matmul(arr1, arr2 @ arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2) @ np.dot(arr2, arr3)",
 "import numpy as np\narr_temp = np.matmul(arr2, arr3)\nresult = np.dot(arr1, arr_temp)",
 "import numpy as np\narr_temp1 = np.matmul(arr2, arr3)\narr_temp2 = np.dot(arr1, arr_temp1)\nresult = arr_temp2"
]