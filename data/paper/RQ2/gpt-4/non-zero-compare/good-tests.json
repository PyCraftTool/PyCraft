[
 {
  "init": "val1 = 5\nval2 = 10\nnumber_value = 0",
  "assertion": "assert val == 5"
 },
 {
  "init": "val1 = 5\nval2 = 10\nnumber_value = 1",
  "assertion": "assert val == 10"
 },
 {
  "init": "val1 = 'string'\nval2 = 'another string'\nnumber_value = 0",
  "assertion": "assert val == 'string'"
 },
 {
  "init": "val1 = 'string'\nval2 = 'another string'\nnumber_value = -1",
  "assertion": "assert val == 'another string'"
 },
 {
  "init": "val1 = None\nval2 = 'string'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = None\nval2 = 'string'\nnumber_value = 1",
  "assertion": "assert val == 'string'"
 },
 {
  "init": "val1 = 5.5\nval2 = 10.5\nnumber_value = 0",
  "assertion": "assert val == 5.5"
 },
 {
  "init": "val1 = 5.5\nval2 = 10.5\nnumber_value = 1",
  "assertion": "assert val == 10.5"
 },
 {
  "init": "val1 = [1,2,3]\nval2 = [4,5,6]\nnumber_value = 0",
  "assertion": "assert val == [1,2,3]"
 },
 {
  "init": "val1 = [1,2,3]\nval2 = [4,5,6]\nnumber_value = 1",
  "assertion": "assert val == [4,5,6]"
 },
 {
  "init": "val1 = 'a'\nval2 = 'b'\nnumber_value = 0",
  "assertion": "assert val == 'a'"
 },
 {
  "init": "val1 = 'a'\nval2 = 'b'\nnumber_value = 1",
  "assertion": "assert val == 'b'"
 },
 {
  "init": "val1 = None\nval2 = 10\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 5\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = '5.5'\nval2 = '10.5'\nnumber_value = 0",
  "assertion": "assert val == '5.5'"
 },
 {
  "init": "val1 = '5.5'\nval2 = '10.5'\nnumber_value = 1",
  "assertion": "assert val == '10.5'"
 },
 {
  "init": "val1 = 10\nval2 = 20\nnumber_value = 0",
  "assertion": "assert val == 10"
 },
 {
  "init": "val1 = 10\nval2 = 20\nnumber_value = 1",
  "assertion": "assert val == 20"
 },
 {
  "init": "val1 = 'string'\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 10.5\nval2 = 20.5\nnumber_value = 0",
  "assertion": "assert val == 10.5"
 },
 {
  "init": "val1 = 10.5\nval2 = 20.5\nnumber_value = 1",
  "assertion": "assert val == 20.5"
 },
 {
  "init": "val1 = '10.5'\nval2 = '20.5'\nnumber_value = 0",
  "assertion": "assert val == '10.5'"
 },
 {
  "init": "val1 = '10.5'\nval2 = '20.5'\nnumber_value = 1",
  "assertion": "assert val == '20.5'"
 },
 {
  "init": "val1 = None\nval2 = 20\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 10\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 10\nval2 = 20\nnumber_value = 0.0",
  "assertion": "assert val == 10"
 },
 {
  "init": "val1 = 10\nval2 = 20\nnumber_value = 1.0",
  "assertion": "assert val == 20"
 },
 {
  "init": "val1 = None\nval2 = 'string'\nnumber_value = 2",
  "assertion": "assert val == 'string'"
 },
 {
  "init": "val1 = 'string'\nval2 = None\nnumber_value = 0",
  "assertion": "assert val == 'string'"
 },
 {
  "init": "val1 = ''\nval2 = 'string'\nnumber_value = 0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = ''\nval2 = 'string'\nnumber_value = 1",
  "assertion": "assert val == 'string'"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'def'\nnumber_value = 0",
  "assertion": "assert val == 'abc'"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'def'\nnumber_value = 1",
  "assertion": "assert val == 'def'"
 },
 {
  "init": "val1 = None\nval2 = 'def'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'abc'\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'def'\nnumber_value = -1",
  "assertion": "assert val == 'def'"
 },
 {
  "init": "val1 = [1, 2, 3]\nval2 = [4, 5, 6]\nnumber_value = 0",
  "assertion": "assert val == [1, 2, 3]"
 },
 {
  "init": "val1 = [1, 2, 3]\nval2 = [4, 5, 6]\nnumber_value = 1",
  "assertion": "assert val == [4, 5, 6]"
 },
 {
  "init": "val1 = float('inf')\nval2 = 10\nnumber_value = 0",
  "assertion": "assert val == float('inf')"
 },
 {
  "init": "val1 = ''\nval2 = 'def'\nnumber_value = 0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'def'\nnumber_value = 0.0",
  "assertion": "assert val == 'abc'"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'def'\nnumber_value = 1.5",
  "assertion": "assert val == 'def'"
 },
 {
  "init": "val1 = ''\nval2 = 'non-empty'\nnumber_value = 0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = 'non-empty'\nval2 = ''\nnumber_value = 1",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = []\nval2 = [1,2,3]\nnumber_value = 0",
  "assertion": "assert val == []"
 },
 {
  "init": "val1 = [1,2,3]\nval2 = []\nnumber_value = 1",
  "assertion": "assert val == []"
 },
 {
  "init": "val1 = 30\nval2 = 40\nnumber_value = 5",
  "assertion": "assert val == 40"
 },
 {
  "init": "val1 = 'ghi'\nval2 = 'jkl'\nnumber_value = 0",
  "assertion": "assert val == 'ghi'"
 },
 {
  "init": "val1 = 3.14\nval2 = 2.71\nnumber_value = 1",
  "assertion": "assert val == 2.71"
 },
 {
  "init": "val1 = 3.14\nval2 = 2.71\nnumber_value = 0",
  "assertion": "assert val == 3.14"
 },
 {
  "init": "val1 = True\nval2 = False\nnumber_value = 1",
  "assertion": "assert val == False"
 },
 {
  "init": "val1 = True\nval2 = False\nnumber_value = 0",
  "assertion": "assert val == True"
 },
 {
  "init": "val1 = None\nval2 = 'non-empty'\nnumber_value = 1",
  "assertion": "assert val == 'non-empty'"
 },
 {
  "init": "val1 = None\nval2 = 'non-empty'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'a'\nval2 = 'b'\nnumber_value = -1",
  "assertion": "assert val == 'b'"
 },
 {
  "init": "val1 = 5\nval2 = None\nnumber_value = 2.5",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 1\nval2 = 2\nnumber_value = 0",
  "assertion": "assert val == 1"
 },
 {
  "init": "val1 = None\nval2 = '  string  '\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 1.2\nval2 = 2.3\nnumber_value = 0",
  "assertion": "assert val == 1.2"
 },
 {
  "init": "val1 = '1.2'\nval2 = '2.3'\nnumber_value = 1",
  "assertion": "assert val == '2.3'"
 },
 {
  "init": "val1 = ''\nval2 = 'not empty'\nnumber_value = 1",
  "assertion": "assert val == 'not empty'"
 },
 {
  "init": "val1 = 'not empty'\nval2 = ''\nnumber_value = 0",
  "assertion": "assert val == 'not empty'"
 },
 {
  "init": "val1 = []\nval2 = [1,2,3]\nnumber_value = 1",
  "assertion": "assert val == [1,2,3]"
 },
 {
  "init": "val1 = None\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = {'a': 1}\nval2 = {'b': 2}\nnumber_value = 1",
  "assertion": "assert val == {'b': 2}"
 },
 {
  "init": "val1 = None\nval2 = 'test'\nnumber_value = 0",
  "assertion": "assert val is None"
 },
 {
  "init": "val1 = 'test'\nval2 = None\nnumber_value = 1",
  "assertion": "assert val is None"
 },
 {
  "init": "val1 = 1.5\nval2 = 2.6\nnumber_value = 0",
  "assertion": "assert val == 1.5"
 },
 {
  "init": "val1 = 'string'\nval2 = ''\nnumber_value = 10",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = 1.25\nval2 = 2.5\nnumber_value = 1",
  "assertion": "assert val == 2.5"
 },
 {
  "init": "val1 = '1.25'\nval2 = '2.5'\nnumber_value = 0",
  "assertion": "assert val == '1.25'"
 },
 {
  "init": "val1 = 'test'\nval2 = 'test2'\nnumber_value = 0",
  "assertion": "assert val == 'test'"
 },
 {
  "init": "val1 = 'test'\nval2 = 'test2'\nnumber_value = 1",
  "assertion": "assert val == 'test2'"
 },
 {
  "init": "val1 = ''\nval2 = 'test2'\nnumber_value = 0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = 'test'\nval2 = ''\nnumber_value = 1",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = None\nval2 = 'test2'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'test'\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'test'\nval2 = 'test2'\nnumber_value = -1",
  "assertion": "assert val == 'test2'"
 },
 {
  "init": "val1 = 'test'\nval2 = 'test2'\nnumber_value = 0.1",
  "assertion": "assert val == 'test2'"
 },
 {
  "init": "val1 = 'Hello'\nval2 = 'World'\nnumber_value = 0",
  "assertion": "assert val == 'Hello'"
 },
 {
  "init": "val1 = '4.5'\nval2 = '3.6'\nnumber_value = 0",
  "assertion": "assert val == '4.5'"
 },
 {
  "init": "val1 = '4.9'\nval2 = 2.3\nnumber_value = 1",
  "assertion": "assert val == 2.3"
 },
 {
  "init": "val1 = [3, 'a', 6]\nval2 = [2]\nnumber_value = 1",
  "assertion": "assert val == [2]"
 },
 {
  "init": "val1 = []\nval2 = []\nnumber_value = 1",
  "assertion": "assert val == []"
 },
 {
  "init": "val1 = {}\nval2 = 'str'\nnumber_value = 0",
  "assertion": "assert val == {}"
 },
 {
  "init": "val1 = 100\nval2 = 200\nnumber_value = 0",
  "assertion": "assert val == 100"
 },
 {
  "init": "val1 = 'a'\nval2 = 'b'\nnumber_value = 2",
  "assertion": "assert val == 'b'"
 },
 {
  "init": "val1 = 'string'\nval2 = ''\nnumber_value = 0",
  "assertion": "assert val == 'string'"
 },
 {
  "init": "val1 = [1,2,3]\nval2 = [4,5,6]\nnumber_value = 4",
  "assertion": "assert val == [4,5,6]"
 },
 {
  "init": "val1 = {1:10, 2:20}\nval2 = {3:30, 4:40}\nnumber_value = 10",
  "assertion": "assert val == {3:30, 4:40}"
 },
 {
  "init": "val1 = {1:'10', 2:'20'}\nval2 = {3:'30', 4:'40'}\nnumber_value = 0",
  "assertion": "assert val == {1:'10', 2:'20'}"
 },
 {
  "init": "val1 = None\nval2 = 'None'\nnumber_value = 1",
  "assertion": "assert val == 'None'"
 },
 {
  "init": "val1 = False\nval2 = True\nnumber_value = False",
  "assertion": "assert val == False"
 },
 {
  "init": "val1 = 'string1'\nval2 = 'string2'\nnumber_value = 99",
  "assertion": "assert val == 'string2'"
 },
 {
  "init": "val1 = 'string1'\nval2 = 'string2'\nnumber_value = 0",
  "assertion": "assert val == 'string1'"
 },
 {
  "init": "val1 = None\nval2 = 'value'\nnumber_value = -1",
  "assertion": "assert val == 'value'"
 },
 {
  "init": "val1 = ['value11','value12']\nval2 = ['value21','value22']\nnumber_value = -1.100",
  "assertion": "assert val == ['value21','value22']"
 },
 {
  "init": "val1 = 1234\nval2 = 'error string'\nnumber_value = 123.556",
  "assertion": "assert val == 'error string'"
 },
 {
  "init": "val1 = '444'\nval2 = ' ' * 100 + 'abc'\nnumber_value = 0",
  "assertion": "assert val == '444'"
 },
 {
  "init": "val1 = '' ;val2 = 'good'\nnumber_value = 0.0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = True; val2 = False\nnumber_value = 10.40",
  "assertion": "assert val == False"
 },
 {
  "init": "val1 = 'empty'; val2 = float('NaN')\nnumber_value = -0.90",
  "assertion": "assert val != val"
 },
 {
  "init": "val1 = 2\nval2 = 5\nnumber_value = 1",
  "assertion": "assert val == 5"
 },
 {
  "init": "val1 = None\nval2 = 'abc'\nnumber_value = -9",
  "assertion": "assert val == 'abc'"
 },
 {
  "init": "val1 = '5'\nval2 = 10.0\nnumber_value = False",
  "assertion": "assert val == '5'"
 },
 {
  "init": "val1 = '  some space  '\nval2 = 'other'\nnumber_value = float('inf')",
  "assertion": "assert val == 'other'"
 },
 {
  "init": "val1 = 5.75\nval2 = [123, 'hello', [], -9]\nnumber_value = 0.01",
  "assertion": "assert val == [123, 'hello', [], -9]"
 },
 {
  "init": "val1 = {\n'a': None, 'b': 500}\nval2 = -100000\nnumber_value = pow(5, 100)",
  "assertion": "assert val == -100000"
 },
 {
  "init": "val1 = 0; val2 = 1; number_value = 5;",
  "assertion": "assert val == 1"
 },
 {
  "init": "val1 = 0; val2 = 'hello'; number_value = -7.25;",
  "assertion": "assert val == 'hello'"
 },
 {
  "init": "val1 = ['1.125', '3.5', '6.75', '5.9']; val2 = 'world'; number_value = 0;",
  "assertion": "assert val == ['1.125', '3.5', '6.75', '5.9']"
 },
 {
  "init": "val1 = None; val2 = 81; number_value = 75;",
  "assertion": "assert val == 81"
 },
 {
  "init": "val1 = '' ; val2 = '9'; number_value = 0;",
  "assertion": "assert val == '' "
 },
 {
  "init": "val1 = 'is it working???' ; val2 = '' ; number_value = -290",
  "assertion": "assert val == '' "
 },
 {
  "init": "val1 = True ; val2 = False; number_value = 9;",
  "assertion": "assert val == False"
 },
 {
  "init": "val1 = None; val2 = None; number_value =  0.7",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 5\nval2 = 6\nnumber_value = 4",
  "assertion": "assert val == val2"
 },
 {
  "init": "val1 = 5\nval2 = 6\nnumber_value = 0",
  "assertion": "assert val == val1"
 },
 {
  "init": "val1 = 'Some String'\nval2 = ''\nnumber_value = 1",
  "assertion": "assert val == val2"
 },
 {
  "init": "val1 = ''\nval2 = '_'\nnumber_value = 0\n",
  "assertion": "assert val == val1"
 },
 {
  "init": "val1 = ' '\nval2 = ' literal '\nnumber_value = 1",
  "assertion": "assert val == val2"
 },
 {
  "init": "val1 = '1'\nval2 = '2'\nnumber_value = 0",
  "assertion": "assert val == '1'"
 },
 {
  "init": "val1 = [None, None]\nval2 = ['None', 'None']\nnumber_value = 1",
  "assertion": "assert val == ['None', 'None']"
 },
 {
  "init": "val1 = ''\nval2 = ''\nnumber_value = 0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = None\nval2 = None\nnumber_value = 0.5",
  "assertion": "assert val2 == None"
 },
 {
  "init": "val1 = 'testing one two one'\nval2 = '   three '\nnumber_value = 0.0",
  "assertion": "assert val == 'testing one two one'"
 },
 {
  "init": "val1 = 134563\nval2 = 14325.578\nnumber_value = float('inf')",
  "assertion": "assert val==14325.578"
 },
 {
  "init": "val2 = 25\nval1 = 10\nnumber_value = 8",
  "assertion": "assert val == 25"
 },
 {
  "init": "val2 = 0\nval1 = 0\nnumber_value = 0",
  "assertion": "assert val == 0"
 },
 {
  "init": "val2 = -10\nval1 = -15\nnumber_value = 6",
  "assertion": "assert val == -10"
 },
 {
  "init": "val2 = 'apple'\nval1 = 'banana'\nnumber_value = 0",
  "assertion": "assert val == 'banana'"
 },
 {
  "init": "val2 = float('nan')\nval1 = 'orange'\nnumber_value = 0",
  "assertion": "assert val == 'orange'"
 },
 {
  "init": "val2 = 'strawberry'\nval1 = float('inf')\nnumber_value = 1",
  "assertion": "assert val == 'strawberry'"
 },
 {
  "init": "val2 = False\nval1 = True\nnumber_value = 1",
  "assertion": "assert val == False"
 },
 {
  "init": "val2 = [1,2,3]\nval1 = [4,5,6]\nnumber_value = 0",
  "assertion": "assert val == [4,5,6]"
 },
 {
  "init": "val1 = 0\nval2 = 'test'\nnumber_value = 0",
  "assertion": "assert val == 0"
 },
 {
  "init": "val1 = 0\nval2 = 'test'\nnumber_value = -1",
  "assertion": "assert val == 'test'"
 },
 {
  "init": "val1 = 'val'\nval2 = 'val2'\nnumber_value = 0",
  "assertion": "assert val == 'val'"
 },
 {
  "init": "val1 = 'val1'\nval2 = ''\nnumber_value = 1",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = None\nval2 = 'val2'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'val1'\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 5.5\nval2 = 10.10\nnumber_value = 0",
  "assertion": "assert val == 5.5"
 },
 {
  "init": "val1 = 5.5\nval2 = 10.10\nnumber_value = 1.1",
  "assertion": "assert val == 10.10"
 },
 {
  "init": "val1 = 'hello'\nval2 = 'goodbye'\nnumber_value = 1",
  "assertion": "assert val == 'goodbye'"
 },
 {
  "init": "val1 = [1, 2]\nval2 = [3, 4]\nnumber_value = 1",
  "assertion": "assert val == [3, 4]"
 },
 {
  "init": "val1 = None\nval2 = 1\nnumber_value = 0",
  "assertion": "assert val is None"
 },
 {
  "init": "val1 = '1.25'\nval2 = '2.50'\nnumber_value = 1",
  "assertion": "assert val == '2.50'"
 },
 {
  "init": "val1 = [None, None]\nval2 = ['a', 'b']\nnumber_value = 0",
  "assertion": "assert val == [None, None]"
 },
 {
  "init": "val1 = '    '\nval2 = 'not empty'\nnumber_value = 0",
  "assertion": "assert val == '    '"
 },
 {
  "init": "val2 = 'b'\nval1 = 'a'\nnumber_value = 0",
  "assertion": "assert val == 'a'"
 },
 {
  "init": "val2 = 'b'\nval1 = 'a'\nnumber_value = 1",
  "assertion": "assert val == 'b'"
 },
 {
  "init": "val2 = None\nval1 = 'a'\nnumber_value = 0",
  "assertion": "assert val == 'a'"
 },
 {
  "init": "val2 = 'b'\nval1 = []\nnumber_value = 10",
  "assertion": "assert val == 'b'"
 },
 {
  "init": "val2 = ''\nval1 = 'test'\nnumber_value = -1",
  "assertion": "assert val == ''"
 },
 {
  "init": "val2 = 'b'\nval1 = 'a'\nnumber_value = 0.5",
  "assertion": "assert val == 'b'"
 },
 {
  "init": "val2 = 20\nval1 = 10\nnumber_value = 2.5",
  "assertion": "assert val == 20"
 },
 {
  "init": "val1 = 0\nval2 = 0\nnumber_value = 1",
  "assertion": "assert val == 0"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'efg'\nnumber_value = 1",
  "assertion": "assert val == 'efg'"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'efg'\nnumber_value = -1",
  "assertion": "assert val == 'efg'"
 },
 {
  "init": "val1 = 'abc'\nval2 = ''\nnumber_value = 1",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = None\nval2 = 'efg'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = None\nval2 = 'efg'\nnumber_value = 1",
  "assertion": "assert val == 'efg'"
 },
 {
  "init": "val1 = ''\nval2 = 'efg'\nnumber_value = 0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = 'abc'\nval2 = '  '\nnumber_value = 1",
  "assertion": "assert val == '  '"
 },
 {
  "init": "val1 = 'abc'\nval2 = 3.8795\nnumber_value = 1",
  "assertion": "assert val == 3.8795"
 },
 {
  "init": "val1 = None\nval2 = 'abc'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'def'\nnumber_value = 0.5",
  "assertion": "assert val == 'def'"
 },
 {
  "init": "val1 = 3.14\nval2 = 2.71\nnumber_value = -1",
  "assertion": "assert val == 2.71"
 },
 {
  "init": "val1 = None\nval2 = 'a'\nnumber_value = 1",
  "assertion": "assert val == 'a'"
 },
 {
  "init": "val1 = 'a'\nval2 = '  string  '\nnumber_value = 1",
  "assertion": "assert val == '  string  '"
 },
 {
  "init": "val1 = float('NaN')\nval2 = float('Inf')\nnumber_value = 1",
  "assertion": "assert val == float('Inf')"
 },
 {
  "init": "val1 = float('NaN')\nval2 = float('Inf')\nnumber_value = 0",
  "assertion": "assert val != val"
 },
 {
  "init": "val1 = 'abc'\nval2 = 'xyz'\nnumber_value = 5",
  "assertion": "assert val == 'xyz'"
 },
 {
  "init": "val1 = 1\nval2 = 3.14\nnumber_value = -1",
  "assertion": "assert val == 3.14"
 },
 {
  "init": "val1 = 1\nval2 = 3.14\nnumber_value = 3.14",
  "assertion": "assert val == 3.14"
 },
 {
  "init": "val1 = 1\nval2 = 3.14\nnumber_value = '3.14'",
  "assertion": "assert val == 3.14"
 },
 {
  "init": "val1 = 100\nval2 = 200\nnumber_value = 1",
  "assertion": "assert val == 200"
 },
 {
  "init": "val1 = 'string1'\nval2 = 'string2'\nnumber_value = -1",
  "assertion": "assert val == 'string2'"
 },
 {
  "init": "val1 = None\nval2 = 'None'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = ''\nval2 = 'Empty String'\nnumber_value = 100",
  "assertion": "assert val == 'Empty String'"
 },
 {
  "init": "val1 = '0.0'\nval2 = 0.0\nnumber_value = 0",
  "assertion": "assert val == '0.0'"
 },
 {
  "init": "val1 = (1,2,3)\nval2 = ()\nnumber_value = 0",
  "assertion": "assert val == (1,2,3)"
 },
 {
  "init": "val1 = ['1.125', '3.5', '6.75', '5.9']\nval2 = [None, None]\nnumber_value = 1",
  "assertion": "assert val == [None, None]"
 },
 {
  "init": "val1 = 'First Value'\nval2 = 'Second Value'\nnumber_value = 0",
  "assertion": "assert val == 'First Value'"
 },
 {
  "init": "val1 = ''\nval2 = 'Second Value'\nnumber_value = 1",
  "assertion": "assert val == 'Second Value'"
 },
 {
  "init": "val1 = 1.25\nval2 = 2.5\nnumber_value = -1",
  "assertion": "assert val == 2.5"
 },
 {
  "init": "val1 = '1.0'\nval2 = '2.0'\nnumber_value = 0",
  "assertion": "assert val == '1.0'"
 },
 {
  "init": "val1 = None\nval2 = 'Second Value'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'First Value'\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = ['element1', 'element2']\nval2 = ['element3', 'element4']\nnumber_value = -1",
  "assertion": "assert val == val2"
 },
 {
  "init": "val1 = 1.25\nval2 = '2.5'\nnumber_value = 0",
  "assertion": "assert val == 1.25"
 },
 {
  "init": "val1 = None\nval2 = 'something'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = None\nval2 = 'something'\nnumber_value = 1",
  "assertion": "assert val == 'something'"
 },
 {
  "init": "val1 = {'a': 1}\nval2 = {'b': 2}\nnumber_value = 0",
  "assertion": "assert val == {'a': 1}"
 },
 {
  "init": "val1 = 10\nval2 = 20\nnumber_value = 5",
  "assertion": "assert val == 20"
 },
 {
  "init": "val1 = 'string1'\nval2 = 'string2'\nnumber_value = 1",
  "assertion": "assert val == 'string2'"
 },
 {
  "init": "val1 = 5.5\nval2 = 10.5\nnumber_value = 2.2",
  "assertion": "assert val == 10.5"
 },
 {
  "init": "val1 = '5.5'\nval2 = '10.5'\nnumber_value = '2.2'",
  "assertion": "assert val == '10.5'"
 },
 {
  "init": "val1 = 'Hello'\nval2 = 'World'\nnumber_value = 1",
  "assertion": "assert val == 'World'"
 },
 {
  "init": "val1 = []\nval2 = [1, 2, 3]\nnumber_value = 0",
  "assertion": "assert val == []"
 },
 {
  "init": "val1 = None\nval2 = 'Not None'\nnumber_value = 1",
  "assertion": "assert val == 'Not None'"
 },
 {
  "init": "val1 = 5.5\nval2 = '5.5'\nnumber_value = 0",
  "assertion": "assert val == 5.5"
 },
 {
  "init": "val1 = '5.5'\nval2 = 5.5\nnumber_value = 1",
  "assertion": "assert val == 5.5"
 },
 {
  "init": "val1 = '  '\nval2 = 'non-empty'\nnumber_value = 1",
  "assertion": "assert val == 'non-empty'"
 },
 {
  "init": "val1 = ''\nval2 = 'Hello'\nnumber_value = 0",
  "assertion": "assert val == ''"
 },
 {
  "init": "val1 = ''\nval2 = 'Hello'\nnumber_value = -1",
  "assertion": "assert val == 'Hello'"
 },
 {
  "init": "val1 = '5.5'\nval2 = 10.5\nnumber_value = 1",
  "assertion": "assert val == 10.5"
 },
 {
  "init": "val1 = 1\nval2 = 2\nnumber_value = 1",
  "assertion": "assert val == 2"
 },
 {
  "init": "val1 = 'string'\nval2 = 'another string'\nnumber_value = 1",
  "assertion": "assert val == 'another string'"
 },
 {
  "init": "val1 = 1.1\nval2 = 2.2\nnumber_value = 0",
  "assertion": "assert val == 1.1"
 },
 {
  "init": "val1 = 1.1\nval2 = 2.2\nnumber_value = 1",
  "assertion": "assert val == 2.2"
 },
 {
  "init": "val1 = '1.1'\nval2 = '2.2'\nnumber_value = 0",
  "assertion": "assert val == '1.1'"
 },
 {
  "init": "val1 = '1.1'\nval2 = '2.2'\nnumber_value = 1",
  "assertion": "assert val == '2.2'"
 },
 {
  "init": "val1 = None\nval2 = 'test2'\nnumber_value = 1",
  "assertion": "assert val == 'test2'"
 },
 {
  "init": "val1 = 5.5\nval2 = 6.6\nnumber_value = 0",
  "assertion": "assert val == 5.5"
 },
 {
  "init": "val1 = 5.5\nval2 = 6.6\nnumber_value = 1",
  "assertion": "assert val == 6.6"
 },
 {
  "init": "val1 = '5.5'\nval2 = '6.6'\nnumber_value = 0",
  "assertion": "assert val == '5.5'"
 },
 {
  "init": "val1 = '5.5'\nval2 = '6.6'\nnumber_value = 1",
  "assertion": "assert val == '6.6'"
 },
 {
  "init": "val1 = 1.5\nval2 = 2.5\nnumber_value = 1",
  "assertion": "assert val == 2.5"
 },
 {
  "init": "val1 = '1.5'\nval2 = '2.5'\nnumber_value = 0",
  "assertion": "assert val == '1.5'"
 },
 {
  "init": "val1 = 'string with spaces'\nval2 = 'another string'\nnumber_value = 1",
  "assertion": "assert val == 'another string'"
 },
 {
  "init": "val1 = 'string'\nval2 = 'string with spaces'\nnumber_value = 0",
  "assertion": "assert val == 'string'"
 },
 {
  "init": "val1 = None\nval2 = 'b'\nnumber_value = 0",
  "assertion": "assert val == None"
 },
 {
  "init": "val1 = 'a'\nval2 = None\nnumber_value = 1",
  "assertion": "assert val == None"
 }
]