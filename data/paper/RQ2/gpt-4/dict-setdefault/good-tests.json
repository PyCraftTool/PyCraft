[
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
 },
 {
  "init": "array = ['a', 'b', 'c', 'a']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A', 'A'], 'b': ['B'], 'c': ['C']}"
 },
 {
  "init": "array = ['1.5', '2.5', '3.5', '1.5']\nfunction = lambda x: float(x)*2",
  "assertion": "assert d == {'1.5': [3.0, 3.0], '2.5': [5.0], '3.5': [7.0]}"
 },
 {
  "init": "array = []\nfunction = lambda x: x*2",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = [None, None, None]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {None: ['None', 'None', 'None']}"
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x/0",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 'a', 2, 'b']\nfunction = lambda x: x**2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = None\nfunction = lambda x: x*2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A', 'A'], 'b': ['B', 'B'], 'c': ['C']}"
 },
 {
  "init": "array = []\nfunction = lambda x: x**2",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = ['1.1', '2.2', '3.3', '4.4', '5.5']\nfunction = lambda x: float(x)",
  "assertion": "assert d == {'1.1': [1.1], '2.2': [2.2], '3.3': [3.3], '4.4': [4.4], '5.5': [5.5]}"
 },
 {
  "init": "array = ['1', '2', '3', '1', '2']\nfunction = lambda x: int(x)",
  "assertion": "assert d == {'1': [1, 1], '2': [2, 2], '3': [3]}"
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b']\nfunction = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = None\nfunction = lambda x: x**2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1.1, 2.2, 3.3, 4.4, 5.5]\nfunction = lambda x: x*2",
  "assertion": "assert d == {1.1: [2.2], 2.2: [4.4], 3.3: [6.6], 4.4: [8.8], 5.5: [11.0]}"
 },
 {
  "init": "array = [None, None, None]\nfunction = lambda x: x",
  "assertion": "assert d == {None: [None, None, None]}"
 },
 {
  "init": "array = ['1.1', '2.2', '3.3', '4.4', '5.5']\nfunction = lambda x: float(x)*2",
  "assertion": "assert d == {'1.1': [2.2], '2.2': [4.4], '3.3': [6.6], '4.4': [8.8], '5.5': [11.0]}"
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = 'not a function'",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = 'not a list'\nfunction = lambda x: x**2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x*2",
  "assertion": "assert d == {1: [2], 2: [4], 3: [6], 4: [8], 5: [10]}"
 },
 {
  "init": "array = [1.1, 2.2, 3.3, 1.1]\nfunction = lambda x: x*2",
  "assertion": "assert d == {1.1: [2.2, 2.2], 2.2: [4.4], 3.3: [6.6]}"
 },
 {
  "init": "array = ['1.1', '2.2', '3.3', '1.1']\nfunction = lambda x: float(x)*2",
  "assertion": "assert d == {'1.1': [2.2, 2.2], '2.2': [4.4], '3.3': [6.6]}"
 },
 {
  "init": "array = [1.1, 2.2, 3.3, 1.1, 2.2]\nfunction = lambda x: x*2",
  "assertion": "assert d == {1.1: [2.2, 2.2], 2.2: [4.4, 4.4], 3.3: [6.6]}"
 },
 {
  "init": "array = ['1.1', '2.2', '3.3', '1.1', '2.2']\nfunction = lambda x: float(x)*2",
  "assertion": "assert d == {'1.1': [2.2, 2.2], '2.2': [4.4, 4.4], '3.3': [6.6]}"
 },
 {
  "init": "array = []\nfunction = lambda x: x",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = None\nfunction = lambda x: x",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b']\nfunction = lambda x: int(x)",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b']\nfunction = lambda x: x + ' test'",
  "assertion": "assert d == {'a': ['a test', 'a test'], 'b': ['b test', 'b test'], 'c': ['c test']}"
 },
 {
  "init": "array = ['  a  ', '  b  ', '  c  ', '  a  ', '  b  ']\nfunction = lambda x: x.strip()",
  "assertion": "assert d == {'  a  ': ['a', 'a'], '  b  ': ['b', 'b'], '  c  ': ['c']}"
 },
 {
  "init": "array = [1.1, 2.2, 3.3, 4.4, 5.5]\nfunction = lambda x: round(x)",
  "assertion": "assert d == {1.1: [1], 2.2: [2], 3.3: [3], 4.4: [4], 5.5: [6]}"
 },
 {
  "init": "array = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1], 2: [4, 4], 3: [9, 9, 9], 4: [16, 16, 16, 16], 5: [25, 25, 25, 25, 25]}"
 },
 {
  "init": "array = ['a', 'b', 'c', ' ']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C'], ' ': [' ']}"
 },
 {
  "init": "array = ['a', 'b', 'c', ' ', ' ']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C'], ' ': [' ', ' ']}"
 },
 {
  "init": "array = [1.5, 2.5, 3.5, 1.5]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1.5: [2.25, 2.25], 2.5: [6.25], 3.5: [12.25]}"
 },
 {
  "init": "array = ['1.5', '2.5', '3.5', '1.5']\nfunction = lambda x: float(x)**2",
  "assertion": "assert d == {'1.5': [2.25, 2.25], '2.5': [6.25], '3.5': [12.25]}"
 },
 {
  "init": "array = ['1', '2', '3', '1', '2']\nfunction = lambda x: int(x)*2",
  "assertion": "assert d == {'1': [2, 2], '2': [4, 4], '3': [6]}"
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b']\nfunction = lambda x: x*2",
  "assertion": "assert d == {'a': ['aa', 'aa'], 'b': ['bb', 'bb'], 'c': ['cc']}"
 },
 {
  "init": "array = [1.1, 2.2, 3.3, 4.4, 5.5]\nfunction = lambda x: x.split()",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['1.1', '2.2', '3.3', '4.4', '5.5']\nfunction = lambda x: x + 1",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: str(x)*2",
  "assertion": "assert d == {1: ['11'], 2: ['22'], 3: ['33'], 4: ['44'], 5: ['55']}"
 },
 {
  "init": "array = [1, 2, 3, 2, 1]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9]}"
 },
 {
  "init": "array = [None, ' ', 1.0, None]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {None: ['None', 'None'], ' ': [' '], 1.0: ['1.0']}"
 },
 {
  "init": "array = [[1, 2], [3, 4], [1, 2]]\nfunction = lambda x: sum(x)",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['1', 1, '1', 1]\nfunction = lambda x: type(x).__name__",
  "assertion": "assert d == {'1': ['str', 'str'], 1: ['int', 'int']}"
 },
 {
  "init": "array = ['a', 'b', 'c', 'a']\nfunction = str.upper",
  "assertion": "assert d == {'a': ['A', 'A'], 'b': ['B'], 'c': ['C']}"
 },
 {
  "init": "array = ['1.0', '2', '3', '4.0', '5']\nfunction = lambda x: float(x)",
  "assertion": "assert d == {'1.0': [1.0], '2': [2.0], '3': [3.0], '4.0': [4.0], '5': [5.0]}"
 },
 {
  "init": "array = ['1.0', 2, '3', 4.0, '5']\nfunction = lambda x: str(x)",
  "assertion": "assert d == {'1.0': ['1.0'], 2: ['2'], '3': ['3'], 4.0: ['4.0'], '5': ['5']}"
 },
 {
  "init": "array = [1, 2, 3, None, '']\nfunction = lambda x: isinstance(x, int)",
  "assertion": "assert d == {1: [True], 2: [True], 3: [True], None: [False], '': [False]}"
 },
 {
  "init": "function = lambda x: x**2\narray = [1, 2, 3, 4, 5]",
  "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
 },
 {
  "init": "function = lambda x: x*2\narray = ['a', 'b', 'c']",
  "assertion": "assert d == {'a': ['aa'], 'b': ['bb'], 'c': ['cc']}"
 },
 {
  "init": "function = lambda x: x.upper()\narray = ['a', 'b', 'c']",
  "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C']}"
 },
 {
  "init": "function = lambda x: len(x)\narray = ['apple', 'banana', 'orange']",
  "assertion": "assert d == {'apple': [5], 'banana': [6], 'orange': [6]}"
 },
 {
  "init": "function = lambda x: x.strip()\narray = [' a ', ' b ', ' c ']",
  "assertion": "assert d == {' a ': ['a'], ' b ': ['b'], ' c ': ['c']}"
 },
 {
  "init": "function = lambda x: x\narray = []",
  "assertion": "assert d == {}"
 },
 {
  "init": "function = lambda x: x\narray = [1, 2, 3, 1, 2, 3]",
  "assertion": "assert d == {1: [1, 1], 2: [2, 2], 3: [3, 3]}"
 },
 {
  "init": "function = lambda x: x**0.5\narray = [4, 9, 16, 25]",
  "assertion": "assert d == {4: [2.0], 9: [3.0], 16: [4.0], 25: [5.0]}"
 },
 {
  "init": "function = lambda x: ord(x)\narray = ['a', 'b', 'c']",
  "assertion": "assert d == {'a': [97], 'b': [98], 'c': [99]}"
 },
 {
  "init": "function = lambda x: x\narray = [None, None, None]",
  "assertion": "assert d == {None: [None, None, None]}"
 },
 {
  "init": "function = lambda x: x**2\narray = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nd = {}",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9, 9], 4: [16, 16], 5: [25, 25]}"
 },
 {
  "init": "function = lambda x: x*2\narray = ['a', 'b', 'c', 'a', 'b', 'c']\nd = {}",
  "assertion": "assert d == {'a': ['aa', 'aa'], 'b': ['bb', 'bb'], 'c': ['cc', 'cc']}"
 },
 {
  "init": "function = lambda x: x.strip()\narray = ['   a', 'b   ', '  c  ', ' a', 'b ', ' c ']\nd = {}",
  "assertion": "assert d == {'   a': ['a'], 'b   ': ['b'], '  c  ': ['c'], ' a': ['a'], 'b ': ['b'], ' c ': ['c']}"
 },
 {
  "init": "function = lambda x: len(x)\narray = ['1234', '5678', '91011', '1234','5678','91011']\nd = {}",
  "assertion": "assert d == {'1234': [4, 4], '5678': [4, 4], '91011': [5, 5]}"
 },
 {
  "init": "function = lambda x: float(x)\narray = ['1','1']\nd = {}",
  "assertion": "assert d == {'1': [1.0, 1.0]}"
 },
 {
  "init": "function = lambda x: x\narray = []\nd = {}",
  "assertion": "assert d == {}"
 },
 {
  "init": "function = None\narray = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nd = {}",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x**2\narray = None\nd = {}",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: float(x)\narray = ['1', 'a']\nd = {}",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 1, 2, 3]\nfunction = lambda x: x*2",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6]}"
 },
 {
  "init": "array = [1.5, 2.6, 3.9, 1.5, 2.6, 3.9]\nfunction = lambda x: x/2",
  "assertion": "assert d == {1.5: [0.75, 0.75], 2.6: [1.3, 1.3], 3.9: [1.95, 1.95]}"
 },
 {
  "init": "array = ['a', 'b', 'a', 'b']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A', 'A'], 'b': ['B', 'B']}"
 },
 {
  "init": "array = [5, 'a', None, 5, 'a', None]\nfunction = lambda x: x",
  "assertion": "assert d == {5: [5, 5], 'a': ['a', 'a'], None: [None, None]}"
 },
 {
  "init": "array = ['a', 'a', 'a', 'a']\nfunction = 'string'",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 1, 2, 3]\nfunction = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x*x\narray = [0, 1, 2, 3]",
  "assertion": "assert d == {0: [0], 1: [1], 2: [4], 3: [9]}"
 },
 {
  "init": "function = lambda x: str(x)\narray = [1.1, 2.2, 3.3, 4.4]",
  "assertion": "assert d == {1.1: ['1.1'], 2.2: ['2.2'], 3.3: ['3.3'], 4.4: ['4.4']}"
 },
 {
  "init": "function = lambda x: x*2\narray = ['a', 'b']",
  "assertion": "assert d == {'a': ['aa'], 'b': ['bb']}"
 },
 {
  "init": "function = lambda x: x.split()\narray = ['This is a test', 'Another test']",
  "assertion": "assert d == {'This is a test': [['This', 'is', 'a', 'test']], 'Another test': [['Another', 'test']]}"
 },
 {
  "init": "function = lambda x: x*2\narray = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: int(x)\narray = ['1', '2.2', 'three']",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x.strip()\narray = ['  leading', 'trailing  ', '  both  ']",
  "assertion": "assert d == {'  leading': ['leading'], 'trailing  ': ['trailing'], '  both  ': ['both']}"
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x): return x ** 2",
  "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
 },
 {
  "init": "array = [1, 1, 2, 2, 3, 3]\ndef function(x): return x ** 2",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9, 9]}"
 },
 {
  "init": "array = []\ndef function(x): return x ** 2",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b', 'c']\ndef function(x): return x * 2",
  "assertion": "assert d == {'a': ['aa', 'aa'], 'b': ['bb', 'bb'], 'c': ['cc', 'cc']}"
 },
 {
  "init": "array = [1, 2, 3]\ndef function(x): return None",
  "assertion": "assert d == {1: [None], 2: [None], 3: [None]}"
 },
 {
  "init": "array = [1, 2, 2, 3, 3, 3]\nfunction = lambda x: str(x)*2",
  "assertion": "assert d == {1: ['11'], 2: ['22', '22'], 3: ['33', '33', '33']}"
 },
 {
  "init": "array = ['1', '2.0', '2.0', '3.0', '3.0', '3.0']\nfunction = lambda x: float(x)*2",
  "assertion": "assert d == {'1': [2.0], '2.0': [4.0, 4.0], '3.0': [6.0, 6.0, 6.0]}"
 },
 {
  "init": "array = [1, 2, 2, 3, 3, 3]\nfunction = lambda x: None",
  "assertion": "assert d == {1: [None], 2: [None, None], 3: [None, None, None]}"
 },
 {
  "init": "array = [None, None, None]\nfunction = lambda x: 'None'",
  "assertion": "assert d == {None: ['None', 'None', 'None']}"
 },
 {
  "init": "array = [1, 2, 3]\nfunction = float",
  "assertion": "assert d == {1: [1.0], 2: [2.0], 3: [3.0]}"
 },
 {
  "init": "array = [1, 2, '3']\nfunction = int",
  "assertion": "assert d == {1: [1], 2: [2], '3': [3]}"
 },
 {
  "init": "array = [1, 2, 'a']\nfunction = int",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x*2\narray = [1, 2, 3, 1, 2, 3]",
  "assertion": "assert len(d) == 3\nassert d == {1: [2, 2], 2: [4, 4], 3: [6, 6]}"
 },
 {
  "init": "function = lambda x: x*2\narray = []",
  "assertion": "assert len(d) == 0\nassert d == {}"
 },
 {
  "init": "function = lambda x: x.strip()\narray = [' a', 'b ', ' a', 'b ']",
  "assertion": "assert len(d) == 2\nassert d == {' a': ['a', 'a'], 'b ': ['b', 'b']}"
 },
 {
  "init": "function = len\narray = [' ', '  ', '   ', ' ', '  ', '   ']",
  "assertion": "assert len(d) == 3\nassert d == {' ': [1, 1], '  ': [2, 2], '   ': [3, 3]}"
 },
 {
  "init": "function = int\narray = ['0', '1', '0', '1']",
  "assertion": "assert len(d) == 2\nassert d == {'0': [0, 0], '1': [1, 1]}"
 },
 {
  "init": "function = int\narray = ['0', '', '0', '']",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: 1/x\narray = [1, 0, 1, 0]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x[1]\narray = [(1, 2), (3, 4), (1, 2), (3, 4)]",
  "assertion": "assert len(d) == 2\nassert d == {(1, 2): [2, 2], (3, 4): [4, 4]}"
 },
 {
  "init": "function = lambda x: x[1]\narray = [[1, 2], [3], [1, 2], [3]]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['a', 'b', 'a', 'c', 'b', 'b']\nfunction = lambda x: x+'-test'",
  "assertion": "assert d == {'a': ['a-test', 'a-test'], 'b': ['b-test', 'b-test', 'b-test'], 'c': ['c-test'] }"
 },
 {
  "init": "array = ['a', 'b']*1000000\nfunction = lambda x: x+'-test'",
  "assertion": "assert d == {'a': ['a-test']*1000000, 'b': ['b-test']*1000000}"
 },
 {
  "init": "array = ['1.125', '3.5', '6.75', '5.9']\nfunction = lambda x: float(x)+1",
  "assertion": "assert d == {'1.125': [2.125], '3.5': [4.5], '6.75': [7.75], '5.9': [6.9]}"
 },
 {
  "init": "array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25], 6: [36], 7: [49], 8: [64], 9: [81], 10: [100]}"
 },
 {
  "init": "array = ['1', '2', '3', '4']\nfunction = int",
  "assertion": "assert d == {'1': [1], '2': [2], '3': [3], '4': [4]}"
 },
 {
  "init": "array = [3.125, 3.5, 6.75, 5.9]\nfunction = lambda x: int(x)",
  "assertion": "assert d == {3.125: [3], 3.5: [3], 6.75: [6], 5.9: [5]}"
 },
 {
  "init": "array = ['string']*3\nfunction = lambda x: x+'-test'",
  "assertion": "assert d == {'string': ['string-test', 'string-test', 'string-test']}"
 },
 {
  "init": "array = ['  string  ', 'string  ', '  string']\nfunction = str.strip",
  "assertion": "assert d == {'  string  ': ['string'], 'string  ': ['string'], '  string': ['string']}"
 },
 {
  "init": "array = [None, 'None', '  None  ']\nfunction = str",
  "assertion": "assert d == {None: ['None'], 'None': ['None'], '  None  ': ['  None  ']}"
 },
 {
  "init": "function = lambda x: x*2\narray = [1,2,3,1,2,3]",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6]}"
 },
 {
  "init": "function = lambda x: str(x)\narray = ['a','b','a','b']",
  "assertion": "assert d == {'a': ['a', 'a'], 'b': ['b', 'b']}"
 },
 {
  "init": "function = lambda x: x\narray = [None, None]",
  "assertion": "assert d == {None: [None, None]}"
 },
 {
  "init": "function = lambda x: x.strip()\narray = [' a ', ' b ', ' a ', ' b ']",
  "assertion": "assert d == {' a ': ['a', 'a'], ' b ': ['b', 'b']}"
 },
 {
  "init": "function = lambda x: x\narray = [1.1, 2.2, 1.1, 2.2]",
  "assertion": "assert d == {1.1: [1.1, 1.1], 2.2: [2.2, 2.2]}"
 },
 {
  "init": "function = lambda x: x\narray = ['1.1', '2.2', '1.1', '2.2']",
  "assertion": "assert d == {'1.1': ['1.1', '1.1'], '2.2': ['2.2', '2.2']}"
 },
 {
  "init": "function = lambda x: x\narray = [1, '1', 1, '1']",
  "assertion": "assert d == {1: [1, 1], '1': ['1', '1']}"
 },
 {
  "init": "function = lambda x: x\narray = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1.2, 2.3, 3.4, 1.2, 2.3]\nfunction = lambda x: round(x)",
  "assertion": "assert d == {1.2: [1, 1], 2.3: [2, 2], 3.4: [3]}"
 },
 {
  "init": "array = [1, 'a', 1.2, None]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {1: ['1'], 'a': ['a'], 1.2: ['1.2'], None: ['None']}"
 },
 {
  "init": "array = ['1.2', '2.3', '3.4', '1.2', '2.3']\nfunction = lambda x: float(x)",
  "assertion": "assert d == {'1.2': [1.2, 1.2], '2.3': [2.3, 2.3], '3.4': [3.4]}"
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = 'string'",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x*x",
  "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
 },
 {
  "init": "array = [1, 2, 3, 4, 'a']\nfunction = lambda x: x*x",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['a', 'b', 'c', ' ']\nfunction = lambda x: x.strip()",
  "assertion": "assert d == {'a': ['a'], 'b': ['b'], 'c': ['c'], ' ': ['']}"
 },
 {
  "init": "function = lambda x: x*2\narray = [1, 2, 3, 4, 5, 1, 2, 3]",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6], 4: [8], 5: [10]}"
 },
 {
  "init": "function = lambda x: str(x)\narray = [1, 2, 3, 1, 2, 3]",
  "assertion": "assert d == {1: ['1', '1'], 2: ['2', '2'], 3: ['3', '3']}"
 },
 {
  "init": "function = lambda x: x.split()[0]\narray = ['hello world', 'foo bar', 'hello world']",
  "assertion": "assert d == {'hello world': ['hello', 'hello'], 'foo bar': ['foo']}"
 },
 {
  "init": "function = lambda x: x+1\narray = [1.1, 2.2, 3.3, 1.1, 2.2]",
  "assertion": "assert d == {1.1: [2.1, 2.1], 2.2: [3.2, 3.2], 3.3: [4.3]}"
 },
 {
  "init": "function = lambda x: x\narray = ['1.1', '2.2', '3.3', '1.1', '2.2']",
  "assertion": "assert d == {'1.1': ['1.1', '1.1'], '2.2': ['2.2', '2.2'], '3.3': ['3.3']}"
 },
 {
  "init": "function = lambda x: x\narray = [None, None, 'None', 'None']",
  "assertion": "assert d == {None: [None, None], 'None': ['None', 'None']}"
 },
 {
  "init": "function = lambda x: x\narray = [' ', ' ', '  ', '  ']",
  "assertion": "assert d == {' ': [' ', ' '], '  ': ['  ', '  ']}"
 },
 {
  "init": "function = lambda x: x\narray = [' 1 ', ' 2 ', ' 1 ', ' 2 ']",
  "assertion": "assert d == {' 1 ': [' 1 ', ' 1 '], ' 2 ': [' 2 ', ' 2 ']}"
 },
 {
  "init": "array = ['a', 'b', 'c']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C']}"
 },
 {
  "init": "array = [1.1, 2.2, 3.3]\nfunction = lambda x: round(x)",
  "assertion": "assert d == {1.1: [1], 2.2: [2], 3.3: [3]}"
 },
 {
  "init": "array = ['1.1', '2.2', '3.3']\nfunction = lambda x: float(x)",
  "assertion": "assert d == {'1.1': [1.1], '2.2': [2.2], '3.3': [3.3]}"
 },
 {
  "init": "array = [1, 2, 2, 3, 3, 3]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1], 2: [4, 4], 3: [9, 9, 9]}"
 },
 {
  "init": "array = ['a', 'b', 'b', 'c', 'c', 'c']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A'], 'b': ['B', 'B'], 'c': ['C', 'C', 'C']}"
 },
 {
  "init": "array = ['a', 'b', 'b', 'c', 'c', 'c']\nfunction = 5",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = 5\nfunction = lambda x: x*2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x**2\narray = [1, 2, 3, 2, 1]",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9]}"
 },
 {
  "init": "function = lambda x: x*2\narray = [1.5, 2.5, 3.5, 2.5, 1.5]",
  "assertion": "assert d == {1.5: [3.0, 3.0], 2.5: [5.0, 5.0], 3.5: [7.0]}"
 },
 {
  "init": "function = lambda x: x*2\narray = []",
  "assertion": "assert d == {}"
 },
 {
  "init": "function = lambda x: x.strip()\narray = ['hello ', ' world', 'hello ', ' world']",
  "assertion": "assert d == {'hello ': ['hello', 'hello'], ' world': ['world', 'world']}"
 },
 {
  "init": "function = lambda x: len(x)\narray = ['one', 'two', 'three', 'one']",
  "assertion": "assert d == {'one': [3, 3], 'two': [3], 'three': [5]}"
 },
 {
  "init": "function = lambda x: x+2\narray = [None, 1, 2, None, 1]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x**2\narray = ['1', '2', '3', '2', '1']",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x.strip()\narray = ['hello ', None, 'hello ', None]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "def function(x): return x*2\narray = [1, 2, 3, 4, 5]",
  "assertion": "assert d == {1: [2], 2: [4], 3: [6], 4: [8], 5: [10]}"
 },
 {
  "init": "def function(x): return x*2\narray = []",
  "assertion": "assert d == {}"
 },
 {
  "init": "def function(x): return x*2\narray = [1, 1, 2, 2]",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4]}"
 },
 {
  "init": "def function(x): return x*2\narray = ['a', 'b', 'c']",
  "assertion": "assert d == {'a': ['aa'], 'b': ['bb'], 'c': ['cc']}"
 },
 {
  "init": "def function(x): return x*2\narray = [None, None]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "def function(x): return x*2\narray = [1.5, 2.5, 3.5]",
  "assertion": "assert d == {1.5: [3.0], 2.5: [5.0], 3.5: [7.0]}"
 },
 {
  "init": "def function(x): return x*2\narray = ['1.5', '2.5', '3.5']",
  "assertion": "assert d == {'1.5': ['1.51.5'], '2.5': ['2.52.5'], '3.5': ['3.53.5']}"
 },
 {
  "init": "def function(x): return x*2\narray = [' 1.5 ', ' 2.5 ', ' 3.5 ']",
  "assertion": "assert d == {' 1.5 ': [' 1.5  1.5 '], ' 2.5 ': [' 2.5  2.5 '], ' 3.5 ': [' 3.5  3.5 ']}"
 },
 {
  "init": "def function(x): return x*2\narray = [1, 'a', None, 2.5, '3.5']",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {1: ['1'], 2: ['2'], 3: ['3'], 4: ['4'], 5: ['5']}"
 },
 {
  "init": "array = ['1', '2', '3', '4', '5']\nfunction = lambda x: int(x)",
  "assertion": "assert d == {'1': [1], '2': [2], '3': [3], '4': [4], '5': [5]}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = [1, 2, 3, 4, 5]",
  "assertion": "assert d == {1: [2], 2: [4], 3: [6], 4: [8], 5: [10]}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = []",
  "assertion": "assert d == {}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = ['a', 'b', 'c']",
  "assertion": "assert d == {'a': ['aa'], 'b': ['bb'], 'c': ['cc']}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = [1, 1, 2, 2, 3, 3]",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6]}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = [1.1, 2.2, 3.3]",
  "assertion": "assert d == {1.1: [2.2], 2.2: [4.4], 3.3: [6.6]}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = ['1.1', '2.2', '3.3']",
  "assertion": "assert d == {'1.1': ['1.11.1'], '2.2': ['2.22.2'], '3.3': ['3.33.3']}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = [None, None]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "def function(x):\n    return x*2\narray = [True, False]",
  "assertion": "assert d == {True: [2], False: [0]}"
 },
 {
  "init": "def function(x):\n    return x*2\narray = [1, 'a', 1.1, '1.1', True, False, None]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['a', 'b', 'c', 'b', 'a']\nfunction = lambda x: ord(x)",
  "assertion": "assert d == {'a': [97,97], 'b': [98,98], 'c': [99]}"
 },
 {
  "init": "array = [1.5, 2.5, 3.5, 2.5, 1.5]\nfunction = lambda x: round(x)",
  "assertion": "assert d == {1.5: [2, 2], 2.5: [2, 2], 3.5: [4]}"
 },
 {
  "init": "array = [' 1 ', ' 2 ', ' 3 ', ' 2 ', ' 1 ']\nfunction = lambda x: int(x)",
  "assertion": "assert d == {' 1 ': [1, 1], ' 2 ': [2, 2], ' 3 ': [3]}"
 },
 {
  "init": "array = [1, 2, 3, None, 'a', 'b']\nfunction = lambda x: str(x)",
  "assertion": "assert d == {1: ['1'], 2: ['2'], 3: ['3'], None: ['None'], 'a': ['a'], 'b': ['b']}"
 },
 {
  "init": "array = [1, 2, 3, '1', '2', '3']\nfunction = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x * 2\narray = [1, 2, 3, 1, 2, 3]",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6]}"
 },
 {
  "init": "function = lambda x: x\narray = [' ', ' ', '  ', '   ']",
  "assertion": "assert d == {' ': [' ', ' '], '  ': ['  '], '   ': ['   ']}"
 },
 {
  "init": "function = lambda x: len(x)\narray = ['one', 'two', 'three', 'one', 'two']",
  "assertion": "assert d == {'one': [3, 3], 'two': [3, 3], 'three': [5]}"
 },
 {
  "init": "function = lambda x: x.split()\narray = ['Hello world', 'Python is cool', 'Hello world']",
  "assertion": "assert d == {'Hello world': [['Hello', 'world'], ['Hello', 'world']], 'Python is cool': [['Python', 'is', 'cool']]}"
 },
 {
  "init": "function = lambda x: x.upper()\narray = ['a', 'b', 'c', 'A', 'B', 'C']",
  "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C'], 'A': ['A'], 'B': ['B'], 'C': ['C']}"
 },
 {
  "init": "function = lambda x: x\narray = [1, 2, 3, 1, 2, 3, None]",
  "assertion": "assert d == {1: [1, 1], 2: [2, 2], 3: [3, 3], None: [None]}"
 },
 {
  "init": "array = ['a', 'b', 'a', 'c', 'b']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A', 'A'], 'b': ['B', 'B'], 'c': ['C']}\nassert len(d) == 3"
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}\nassert len(d) == 5"
 },
 {
  "init": "array = ['1', '2', '3', '4', '5']\nfunction = lambda x: int(x)**2",
  "assertion": "assert d == {'1': [1], '2': [4], '3': [9], '4': [16], '5': [25]}\nassert len(d) == 5"
 },
 {
  "init": "array = ['1', '2', '3', '4', '5']\nfunction = lambda x: float(x)**2",
  "assertion": "assert d == {'1': [1.0], '2': [4.0], '3': [9.0], '4': [16.0], '5': [25.0]}\nassert len(d) == 5"
 },
 {
  "init": "array = ['1.2', '2.3', '3.4', '4.5', '5.6']\nfunction = lambda x: float(x)**2",
  "assertion": "assert len(d) == 5"
 },
 {
  "init": "array = []\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {}\nassert len(d) == 0"
 },
 {
  "init": "array = [None, None, None]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {None: ['None', 'None', 'None']}\nassert len(d) == 1"
 },
 {
  "init": "array = ['a', 'b', 'a', 'c', 'b']\nfunction = lambda x: x+1",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x**2\narray = [1, 2, 3, 1, 2, 3]",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9, 9]}"
 },
 {
  "init": "function = lambda x: x*2\narray = [4, 5, 6, 4, 5, 6]",
  "assertion": "assert d == {4: [8, 8], 5: [10, 10], 6: [12, 12]}"
 },
 {
  "init": "function = lambda x: x+2\narray = [0]",
  "assertion": "assert d == {0: [2]}"
 },
 {
  "init": "function = lambda x: x\narray = ['a', 'b', 'a']",
  "assertion": "assert d == {'a': ['a', 'a'], 'b': ['b']}"
 },
 {
  "init": "function = None\narray = [1, 2, 3]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x\narray = [1, 2, 3, None]",
  "assertion": "assert d == {1: [1], 2: [2], 3: [3], None: [None]}"
 },
 {
  "init": "function = lambda x: x+1\narray = ['1', '2', '1']",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x*2\narray = [1, 1, 2, 2, 3, 3]",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6]}"
 },
 {
  "init": "function = lambda x: str(x)\narray = [1, 2, 3, 4, 5]",
  "assertion": "assert d == {1: ['1'], 2: ['2'], 3: ['3'], 4: ['4'], 5: ['5']}"
 },
 {
  "init": "function = lambda x: x\narray = ['a', 'b', 'c', 'd', 'e']",
  "assertion": "assert d == {'a': ['a'], 'b': ['b'], 'c': ['c'], 'd': ['d'], 'e': ['e']}"
 },
 {
  "init": "function = lambda x: x.upper()\narray = ['a', 'b', 'c', 'd', 'e']",
  "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C'], 'd': ['D'], 'e': ['E']}"
 },
 {
  "init": "function = None\narray = [1, 2, 3, 4, 5]",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "function = lambda x: x\narray = [1, 2, 2, 3, 3, 3]",
  "assertion": "assert d == {1: [1], 2: [2, 2], 3: [3, 3, 3]}"
 },
 {
  "init": "function = lambda x: x**2\narray = [1.5, 2.5, 3.5, 4.5, 5.5]",
  "assertion": "assert d == {1.5: [2.25], 2.5: [6.25], 3.5: [12.25], 4.5: [20.25], 5.5: [30.25]}"
 },
 {
  "init": "array = ['a', 'b', 'c', 'd']\nfunction = lambda x: x*2",
  "assertion": "assert d == {'a': ['aa'], 'b': ['bb'], 'c': ['cc'], 'd': ['dd']}"
 },
 {
  "init": "array = [3.14, 2.71]\nfunction = lambda x: x**2",
  "assertion": "assert d == {3.14: [9.8596], 2.71: [7.3441]}"
 },
 {
  "init": "array = ['3.14', '2.71']\nfunction = lambda x: float(x)**2",
  "assertion": "assert d == {'3.14': [9.8596], '2.71': [7.3441]}"
 },
 {
  "init": "array = [1, 1, 2, 2, 3, 3]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9, 9]}"
 },
 {
  "init": "array = ['string with space', 'another string with space']\nfunction = lambda x: x.split(' ')",
  "assertion": "assert d == {'string with space': [['string', 'with', 'space']], 'another string with space': [['another', 'string', 'with', 'space']]}"
 },
 {
  "init": "array = [None, 'None', 0, '0']\nfunction = lambda x: str(x)",
  "assertion": "assert d == {None: ['None'], 'None': ['None'], 0: ['0'], '0': ['0']}"
 },
 {
  "init": "function = lambda x: str(x)+'a'\narray = ['b', 'c', 'd', 'b', 'c']",
  "assertion": "assert d == {'b': ['ba', 'ba'], 'c': ['ca', 'ca'], 'd': ['da']}"
 },
 {
  "init": "function = lambda x: x\narray = [1, 2, None, 1, 2]",
  "assertion": "assert d == {1: [1, 1], 2: [2, 2], None: [None]}"
 },
 {
  "init": "function = lambda x: 'Hello'\narray = [1.25, 2.5, None, '1.25', '2.5', 1.25]",
  "assertion": "assert d == {1.25: ['Hello', 'Hello'], 2.5: ['Hello'], None: ['Hello'], '1.25': ['Hello'], '2.5': ['Hello']}"
 },
 {
  "init": "function = lambda x: str(x)\narray = [1.25, 2.5, None, '1.25', '2.5', 1.25]",
  "assertion": "assert d == {1.25: ['1.25', '1.25'], 2.5: ['2.5'], None: ['None'], '1.25': ['1.25'], '2.5': ['2.5']}"
 },
 {
  "init": "function = lambda x: x\narray = ['1.25', '2.5', 'None', '1.25', '2.5', '1.25']",
  "assertion": "assert d == {'1.25': ['1.25', '1.25', '1.25'], '2.5': ['2.5', '2.5'], 'None': ['None']}"
 },
 {
  "init": "array = []\nfunction = lambda x: x*x",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = ['1.2', '3.4', '5.6']\nfunction = lambda x: float(x)*2",
  "assertion": "assert d == {'1.2': [2.4], '3.4': [6.8], '5.6': [11.2]}"
 },
 {
  "init": "array = ['1.2', '3.4', None]\nfunction = lambda x: x if x is None else float(x)*2",
  "assertion": "assert d == {'1.2': [2.4], '3.4': [6.8], None: [None]}"
 },
 {
  "init": "array = [1, 2, 3, 1, 2, 3]\nfunction = lambda x: x*x",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9, 9]}"
 },
 {
  "init": "array = ['1.2', '3.4', '5.6']\nfunction = int",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 2, 3, 3, 3]\nfunction = lambda x: x*2",
  "assertion": "assert d == {1: [2], 2: [4, 4], 3: [6, 6, 6]}"
 },
 {
  "init": "array = [1, 2, 3]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {1: ['1'], 2: ['2'], 3: ['3']}"
 },
 {
  "init": "array = [1.1, 2.2, 2.2, 3.3, 3.3, 3.3]\nfunction = lambda x: x*2",
  "assertion": "assert d == {1.1: [2.2], 2.2: [4.4, 4.4], 3.3: [6.6, 6.6, 6.6]}"
 },
 {
  "init": "array = ['1.1', '2.2', '2.2', '3.3', '3.3', '3.3']\nfunction = lambda x: float(x)*2",
  "assertion": "assert d == {'1.1': [2.2], '2.2': [4.4, 4.4], '3.3': [6.6, 6.6, 6.6]}"
 },
 {
  "init": "array = ['1.1', '2.2', '2.2', '3.3', '3.3', '3.3']\nfunction = lambda x: int(float(x)*2)",
  "assertion": "assert d == {'1.1': [2], '2.2': [4, 4], '3.3': [6, 6, 6]}"
 },
 {
  "init": "array = ['   ', ' a ', ' a ', ' b ', ' b ', ' b ']\nfunction = lambda x: x.strip()",
  "assertion": "assert d == {'   ': [''], ' a ': ['a', 'a'], ' b ': ['b', 'b', 'b']}"
 },
 {
  "init": "function = lambda x: x*2\narray = [1,2,3,2,1,3]",
  "assertion": "assert d == {1: [2,2], 2: [4,4], 3: [6,6]}"
 },
 {
  "init": "array = [1,1,1]\nfunction = lambda x: x+1",
  "assertion": "assert d == {1: [2,2,2]}"
 },
 {
  "init": "function = lambda x: x.upper()\narray = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [123.456, 789.1011]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {123.456: ['123.456'], 789.1011: ['789.1011']}"
 },
 {
  "init": "function = lambda x: int(x)\narray = ['12.34', '56.78']",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 4, 1, 2, 3, 4]\nfunction = lambda x: x * 2",
  "assertion": "assert d == {1: [2, 2], 2: [4, 4], 3: [6, 6], 4: [8, 8]}"
 },
 {
  "init": "array = []\nfunction = lambda x: x * 2",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = ['   ', ' b ', ' c ', '   ', ' b ', ' c ']\nfunction = lambda x: x.strip()",
  "assertion": "assert d == {'   ': ['', ''], ' b ': ['b', 'b'], ' c ': ['c', 'c']}"
 },
 {
  "init": "array = [1, None, 3.5, 'str', (1, 2), [3, 4], {'a': 1, 'b': 2}]\nfunction = lambda x: str(x)",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1.1, 2.2, 3.3, 1.1, 2.2, 3.3]\nfunction = lambda x: int(x)",
  "assertion": "assert d == {1.1: [1, 1], 2.2: [2, 2], 3.3: [3, 3]}"
 },
 {
  "init": "array = [1, 2, 3, 1, 2, 2]\nfunction = lambda x: x ** 2",
  "assertion": "assert d == {1: [1,1], 2: [4, 4, 4], 3: [9]}"
 },
 {
  "init": "array = [3.14, 2.71, 3.14, 2.71]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {3.14: ['3.14', '3.14'], 2.71: ['2.71', '2.71']}"
 },
 {
  "init": "array = ['bob', 'alice', 'alice', 'bob', 'bob']\nfunction = lambda x: x[::-1]",
  "assertion": "assert d == {'bob': ['bob', 'bob', 'bob'], 'alice': ['ecila', 'ecila']}"
 },
 {
  "init": "array = [1,1,'2', False, {1: 'example_str'}]; function = lambda x: type(x).__name__",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1,1,'2', False]; function = dict",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1,1,'2', False]; function = None",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = None; function = lambda x: str(x)",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1.123456,1.123456,2.0,'Tue Jun 04 1974 00:00:00']; function = lambda x: x**2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x ** 2",
  "assertion": "assert d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
 },
 {
  "init": "array = ['a', 'b', 'c', 'd']\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A'], 'b': ['B'], 'c': ['C'], 'd': ['D']}"
 },
 {
  "init": "array = [1, 2, 3, 1, 2, 3]\nfunction = lambda x: x ** 2",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9, 9]}"
 },
 {
  "init": "array = []\nfunction = lambda x: x ** 2",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = ['1', '2', '3']\nfunction = lambda x: int(x) ** 2",
  "assertion": "assert d == {'1': [1], '2': [4], '3': [9]}"
 },
 {
  "init": "array = [None, None]\nfunction = lambda x: str(x)",
  "assertion": "assert d == {None: ['None', 'None']}"
 },
 {
  "init": "array = 'a'\nfunction = lambda x: x.upper()",
  "assertion": "assert d == {'a': ['A']}"
 },
 {
  "init": "array = 25\nfunction = lambda x: x ** 2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1.25, 2.75, 3.56]\nfunction = lambda x: x * 2",
  "assertion": "assert d == {1.25: [2.5], 2.75: [5.5], 3.56: [7.12]}"
 },
 {
  "init": "array = [1, 2, 3, 4, 5, 1, 2, 3, 1, 3]\nfunction = lambda x: x**2",
  "assertion": "assert d == {1: [1,1,1], 2: [4,4], 3: [9,9,9], 4: [16], 5: [25]}"
 },
 {
  "init": "array = ['Alice', 'Bob', 'Charlie', 'Alice', 'Bob']\nfunction = len",
  "assertion": "assert d == {'Alice': [5,5], 'Bob': [3,3], 'Charlie': [7]}"
 },
 {
  "init": "array = [0.5, 0.6, 0.7, 0.5, 0.7]\nfunction = lambda x: x*2",
  "assertion": "assert d == {0.5: [1.0,1.0], 0.6: [1.2], 0.7: [1.4,1.4]}"
 },
 {
  "init": "array = ['1.023', '345.6', '1.0000067', '1.023']\nfunction = float",
  "assertion": "assert d == {'1.023': [1.023, 1.023], '345.6': [345.6],'1.0000067': [1.0000067]}"
 },
 {
  "init": "array = [1, 2, 2, None, 3, 4, 5] \nfunction = lambda x: x*2",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['5a']\nfunction = int",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [10.5, 10.7, '10.5']\nfunction = round",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b', 'c']\nfunction = (lambda x : x+' test')",
  "assertion": "assert d == {'a': ['a test', 'a test'], 'b': ['b test', 'b test'], 'c': ['c test', 'c test']}\nassert len(d['a']) == 2\nassert len(d['b']) == 2\nassert len(d['c']) == 2"
 },
 {
  "init": "array = []\nfunction = (lambda x : x*2)",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = ['1.125', '3.5', '6.75', '5.9']\nfunction = (lambda x : float(x)*2)",
  "assertion": "assert d == {'1.125': [2.25], '3.5': [7.0], '6.75': [13.5], '5.9': [11.8]}"
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = (lambda x : x / 2)",
  "assertion": "assert d == {1: [0.5], 2: [1.0], 3: [1.5], 4: [2.0], 5: [2.5]}"
 },
 {
  "init": "array = ['A', 'B']*10\nfunction = (lambda x : x.lower())",
  "assertion": "assert d == {'A': ['a']*10 , 'B': ['b']*10}"
 },
 {
  "init": "array = [1, None, 'a']\nfunction = (lambda x : x<3)",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1, '2', 'three']\nfunction = (lambda x : int(x))",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [1,2,3,1,2,3]\nfunction = lambda x: x*x",
  "assertion": "assert d == {1:[1,1], 2:[4,4], 3:[9,9]}"
 },
 {
  "init": "array = ['hello, world']\nfunction = lambda x: len(x)",
  "assertion": "assert d == {'hello, world': [12]}"
 },
 {
  "init": "array = []\nfunction = lambda x : x",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = [' ', ' ', ' ']\nfunction = lambda x : 'empty' if x==' ' else x",
  "assertion": "assert d == {' ': ['empty', 'empty', 'empty']}"
 },
 {
  "init": "array = [12.23, 34.34]\nfunction = lambda x : str(x)",
  "assertion": "assert d == {12.23: ['12.23'], 34.34: ['34.34']}"
 },
 {
  "init": "array = [12.85, '12.85']\nfunction = lambda x : str(x)",
  "assertion": "assert d == {12.85: ['12.85'], '12.85': ['12.85']}"
 },
 {
  "init": "array = [1, 2, 1, 2, 3]\nfunction = lambda x: x*x",
  "assertion": "assert d == {1: [1, 1], 2: [4, 4], 3: [9]}"
 },
 {
  "init": "array = [None, '1', ' 1 ', '1.0']\nfunction = lambda x: str(x)",
  "assertion": "assert d == {None: ['None'], '1': ['1'], ' 1 ': [' 1 '], '1.0': ['1.0']}"
 },
 {
  "init": "array = ['1', '1.0', '  1  ', 1, 1.0, None]\nfunction = lambda x : x*x",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = [3.1415]\nfunction = lambda x : round(x,3)",
  "assertion": "assert d == {3.1415: [3.142]}"
 },
 {
  "init": "array = []\nfunction = lambda x : x*x",
  "assertion": "assert d == {}"
 },
 {
  "init": "array = [3]\nfunction = lambda s: len(s)",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "array = 'Hello World'.split()\nfunction = lambda s: len(s)",
  "assertion": "assert d == {'Hello': [5], 'World': [5]}"
 },
 {
  "init": "array = ['1.432', '   6.9   ', '90.32']\nfunction = lambda x : float(x)",
  "assertion": "assert d['1.432']== [1.432] and d['   6.9   '] == [6.9] and d['90.32'] == [90.32]"
 },
 {
  "init": "array = [1, 3, 4,4]\nfunction = lambda x : str(x)",
  "assertion": "assert d == {1:['1'],3:['3'], 4:['4','4']}"
 },
 {
  "init": "array = [(1,2,7),(6,)], [4]\nfunction = lambda x : len(x)",
  "assertion": "assert 1==1",
  "error": true
 }
]