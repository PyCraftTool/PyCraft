[
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return x * 2",
  "assertions": [
   "d = {1: [2], 2: [4], 3: [6], 4: [8], 5: [10]}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c', 'd', 'e']\ndef function(x):\n    return x.upper()",
  "assertions": [
   "d = {'a': ['A'], 'b': ['B'], 'c': ['C'], 'd': ['D'], 'e': ['E']}"
  ]
 },
 {
  "init": "array = []\ndef function(x):\n    return x * 3",
  "assertions": [
   "d = {}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return None",
  "assertions": [
   "d = {1: [None], 2: [None], 3: [None], 4: [None], 5: [None]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return str(x)",
  "assertions": [
   "d = {1: ['1'], 2: ['2'], 3: ['3'], 4: ['4'], 5: ['5']}"
  ]
 },
 {
  "init": "array = [1.5, 2.5, 3.5, 4.5, 5.5]\ndef function(x):\n    return int(x)",
  "assertions": [
   "d = {1.5: [1], 2.5: [2], 3.5: [3], 4.5: [4], 5.5: [5]}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c', 'd', 'e']\ndef function(x):\n    return float(x)",
  "assertions": [
   "d = {'a': [error], 'b': [error], 'c': [error], 'd': [error], 'e': [error]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return x + 'abc'",
  "assertions": [
   "d = {1: ['1abc'], 2: ['2abc'], 3: ['3abc'], 4: ['4abc'], 5: ['5abc']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return [x]",
  "assertions": [
   "d = {1: [[1]], 2: [[2]], 3: [[3]], 4: [[4]], 5: [[5]]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return [x, x]",
  "assertions": [
   "d = {1: [[1, 1]], 2: [[2, 2]], 3: [[3, 3]], 4: [[4, 4]], 5: [[5, 5]]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return x * 2",
  "assertions": [
   "d = {1: [2], 2: [4], 3: [6], 4: [8], 5: [10]}"
  ]
 },
 {
  "init": "array = [1, 1, 1, 1, 1]\ndef function(x):\n    return x + 1",
  "assertions": [
   "d = {1: [2, 2, 2, 2, 2]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return x ** 2",
  "assertions": [
   "d = {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
  ]
 },
 {
  "init": "array = []\ndef function(x):\n    return x * 2",
  "assertions": [
   "d = {}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return None",
  "assertions": [
   "d = {1: [None], 2: [None], 3: [None], 4: [None], 5: [None]}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c', 'd', 'e']\ndef function(x):\n    return x.upper()",
  "assertions": [
   "d = {'a': ['A'], 'b': ['B'], 'c': ['C'], 'd': ['D'], 'e': ['E']}"
  ]
 },
 {
  "init": "array = [1.5, 2.5, 3.5, 4.5, 5.5]\ndef function(x):\n    return int(x)",
  "assertions": [
   "d = {1.5: [1], 2.5: [2], 3.5: [3], 4.5: [4], 5.5: [5]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return str(x)",
  "assertions": [
   "d = {1: ['1'], 2: ['2'], 3: ['3'], 4: ['4'], 5: ['5']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return 'function'",
  "assertions": [
   "d = {1: ['function'], 2: ['function'], 3: ['function'], 4: ['function'], 5: ['function']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return x * 2",
  "assertions": [
   "d == {1: [2], 2: [4], 3: [6], 4: [8], 5: [10]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return x ** 2",
  "assertions": [
   "d == {1: [1], 2: [4], 3: [9], 4: [16], 5: [25]}"
  ]
 },
 {
  "init": "array = []\ndef function(x):\n    return x * 2",
  "assertions": [
   "d == {}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return None",
  "assertions": [
   "d == {1: [None], 2: [None], 3: [None], 4: [None], 5: [None]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return str(x)",
  "assertions": [
   "d == {1: ['1'], 2: ['2'], 3: ['3'], 4: ['4'], 5: ['5']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return x / 2",
  "assertions": [
   "d == {1: [0.5], 2: [1.0], 3: [1.5], 4: [2.0], 5: [2.5]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return str(x) + 'a'",
  "assertions": [
   "d == {1: ['1a'], 2: ['2a'], 3: ['3a'], 4: ['4a'], 5: ['5a']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return float(x)",
  "assertions": [
   "d == {1: [1.0], 2: [2.0], 3: [3.0], 4: [4.0], 5: [5.0]}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c', 'd', 'e']\ndef function(x):\n    return x.upper()",
  "assertions": [
   "d == {'a': ['A'], 'b': ['B'], 'c': ['C'], 'd': ['D'], 'e': ['E']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\ndef function(x):\n    return str(float(x))",
  "assertions": [
   "d == {1: ['1.0'], 2: ['2.0'], 3: ['3.0'], 4: ['4.0'], 5: ['5.0']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x%2",
  "assertions": [
   "assert d == {1: [1, 1, 1, 1], 2: [0, 0], 3: [1, 1], 4: [0], 5: [1]}"
  ]
 },
 {
  "init": "array = [1, 2, 3]\nfunction = lambda x: str(x)\n\nd = {'a': 1}",
  "assertions": "error"
 },
 {
  "init": "array = [1, 2, 3]\ndef function(i):\n    return i * 2\n\nd = {}",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {1: [2], 2: [4], 3: [6]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 1, 2, 3]\ndef function(i):\n    return i * 2\n\nd = {}",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {1: [2, 2], 2: [4, 4], 3: [6, 6]}"
  ]
 },
 {
  "init": "array = [1, 2, 3]\ndef function(i):\n    return i * 2\n\nd = {1: [3], 2: [5]}\n",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {1: [3, 2], 2: [5, 4], 3: [6]}"
  ]
 },
 {
  "init": "array = [1, 2, 3]\ndef function(i):\n    return i * 2\n\nd = {1: [3], 2: [5], 3: [7]}\n",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {1: [3, 2], 2: [5, 4], 3: [7, 6]}"
  ]
 },
 {
  "init": "array = [1.5, 2.5, 3.5]\ndef function(i):\n    return i * 2\n\nd = {}",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {1.5: [3.0], 2.5: [5.0], 3.5: [7.0]}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c']\ndef function(i):\n    return i.upper()\n\nd = {}",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {'a': ['A'], 'b': ['B'], 'c': ['C']}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c', 'a', 'b', 'c']\ndef function(i):\n    return i.upper()\n\nd = {}",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {'a': ['A', 'A'], 'b': ['B', 'B'], 'c': ['C', 'C']}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c']\ndef function(i):\n    return i.upper()\n\nd = {'a': ['A'], 'b': ['B']}",
  "assertions": [
   "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\n\nassert d == {'a': ['A', 'A'], 'b': ['B', 'B'], 'c': ['C']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\nfunction = lambda x: x**2\n\nd = {1: [1]}",
  "assertions": [
   "assert d == {1: [1]}"
  ]
 },
 {
  "init": "array = ['a', 'b', 'c']\nfunction = lambda x: x.upper()\n\nd = {'a': ['A']}",
  "assertions": [
   "assert d == {'a': ['A']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\n\ndef function(x):\n    return x * 2",
  "assertions": [
   "d = {1: [2], 2: [4], 3: [6], 4: [8], 5: [10]}"
  ]
 },
 {
  "init": "array = [1, 1, 1, 1, 1]\n\ndef function(x):\n    return x + 1",
  "assertions": [
   "d = {1: [2, 2, 2, 2, 2]}"
  ]
 },
 {
  "init": "array = [1.5, 2.5, 3.5, 4.5, 5.5]\n\ndef function(x):\n    return x * 2",
  "assertions": [
   "d = {1.5: [3.0], 2.5: [5.0], 3.5: [7.0], 4.5: [9.0], 5.5: [11.0]}"
  ]
 },
 {
  "init": "array = []\n\ndef function(x):\n    return x * 2",
  "assertions": [
   "d = {}"
  ]
 },
 {
  "init": "array = ['hello', 'world', 'hello', 'world']\n\ndef function(x):\n    return x.upper()",
  "assertions": [
   "d = {'hello': ['HELLO', 'HELLO'], 'world': ['WORLD', 'WORLD']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\n\ndef function(x):\n    return None",
  "assertions": [
   "d = {1: [None], 2: [None], 3: [None], 4: [None], 5: [None]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\n\ndef function(x):\n    return str(x)",
  "assertions": [
   "d = {1: ['1'], 2: ['2'], 3: ['3'], 4: ['4'], 5: ['5']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\n\ndef function(x):\n    return 1/x",
  "assertions": [
   "d = {1: [1.0], 2: [0.5], 3: [0.3333333333333333], 4: [0.25], 5: [0.2]}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\n\ndef function(x):\n    return str(x) + 'a'",
  "assertions": [
   "d = {1: ['1a'], 2: ['2a'], 3: ['3a'], 4: ['4a'], 5: ['5a']}"
  ]
 },
 {
  "init": "array = [1, 2, 3, 4, 5]\n\ndef function(x):\n    return float(x)",
  "assertions": [
   "d = {1: [1.0], 2: [2.0], 3: [3.0], 4: [4.0], 5: [5.0]}"
  ]
 },
 {
  "init": "array = [1, 2, 3]\nfunction = None",
  "assertions": [
   "error"
  ]
 },
 {
  "init": "array = []\nfunction = None",
  "assertions": "error"
 },
 {
  "init": "array = [1, 2, 3]\nfunction = lambda x: x*2",
  "assertions": "error"
 },
 {
  "init": "array = ['', ' ', ' \t']\ndef function(x):\n    return x.strip()",
  "assertions": [
   "assert d == {'': ['', ' ', ' \t']}",
   "assert array == ['', ' ', ' \t']"
  ]
 },
 {
  "init": "array = []\ndef function(x):\n    return x\n\n",
  "assertions": "error"
 }
]