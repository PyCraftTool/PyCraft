[
 {
  "init": "t = []\ncond = lambda x: x < 2\niterable = ['1', '2', '3', '4']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "t = []\ncond = lambda x: x < 2\niterable = [None]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "t = []\ncond = lambda x: x < 2\niterable = ['1.125', '3.5', '6.75', '5.9']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '2'",
  "assertion": "assert t == ['2']"
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '4'",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '1' or i == '2'",
  "assertion": "assert t == ['1', '2']"
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '1' or i == '2' or i == '3'",
  "assertion": "assert t == ['1', '2', '3']"
 },
 {
  "init": "iterable = []\ncond = lambda i: i == '1' or i == '2' or i == '3' or i == '4'",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda x: x%2 == 0\niterable = [1,2,3,4,5]\nt = []",
  "assertion": "assert t == [2,4]"
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '1'",
  "assertion": "assert t == ['1']"
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '1'\nt = ['1', '2', '3']",
  "assertion": "assert t == ['1']"
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '3'\nt = ['1', '2', '3']",
  "assertion": "assert t == ['3']"
 },
 {
  "init": "iterable = ['1', '2', '3']\ncond = lambda i: i == '4'\nt = ['1', '2', '3']",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda x: x%2 == 0\niterable = []\nt = []",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda x: x%2 == 0\niterable = ['a', 'b', 'c']\nt = []",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = [1, 'abc', None, 1.25]\ncond = lambda x: x == 1.25",
  "assertion": "assert t == [1.25]"
 },
 {
  "init": "iterable = [1, 'abc', None, 1.25]\ncond = lambda x: x == 5.5",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = []\ncond = lambda x: x == 5.5",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = None\ncond = lambda x: x == 5.5",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = ['abc', 1.25]\ncond = lambda x: x == 5.5",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = ['abc', 1.25]\ncond = lambda x: x == 'abc'",
  "assertion": "assert t == ['abc']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'd'",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = []\ncond = lambda x: x == 'd'",
  "assertion": "assert t == []"
 },
 {
  "init": "t = []\niterable = [1, 2, 3, 4]\ncond = lambda x: x % 2 == 0",
  "assertion": "assert t == [2, 4]"
 },
 {
  "init": "t = []\niterable = ['1', '2', '3', '4']\ncond = lambda x: x % 2 == 0",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "t = []\niterable = ['1', '2', '3', '4']\ncond = lambda x: x.isdigit()",
  "assertion": "assert t == ['1', '2', '3', '4']"
 },
 {
  "init": "t = []\niterable = [1, 2, 3, 4]\ncond = lambda x: x == 4",
  "assertion": "assert t == [4]"
 },
 {
  "init": "iterable = [1, 2, 3, 4]\ncond = lambda x: x % 2 == 0\nt = []",
  "assertion": "assert len(t) == 2"
 },
 {
  "init": "iterable = []\ncond = lambda x: x % 2 == 0\nt = []",
  "assertion": "assert len(t) == 0"
 },
 {
  "init": "iterable = ['hello', 'world']\ncond = lambda x: x.isalpha()\nt = []",
  "assertion": "assert len(t) == 2"
 },
 {
  "init": "iterable = ['hello', 'world']\ncond = lambda x: x.isnumeric()\nt = []",
  "assertion": "assert len(t) == 0"
 },
 {
  "init": "iterable = ['1234', '1.125', 'hello']\ncond = lambda x: x.isalpha()\nt = []",
  "assertion": "assert len(t) == 1"
 },
 {
  "init": "iterable = ['hello', '1234', '1.125', 'world']\ncond = lambda x: x.isalnum()\nt = []",
  "assertion": "assert len(t) == 3"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: True\nt = []",
  "assertion": "assert t == ['a', 'b', 'c']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'b'\nt = []",
  "assertion": "assert t == ['b']"
 },
 {
  "init": "iterable = []\ncond = lambda x: True\nt = []",
  "assertion": "assert t == []"
 },
 {
  "init": "t = []\ncond = lambda i: bool(i)\niterable = ['1', '4', '5', '6', '8']\n",
  "assertion": "assert t == ['1', '4', '5', '6', '8']"
 },
 {
  "init": "t = []\ncond = lambda i: bool(i[0])\niterable = []\n",
  "assertion": "assert t == []"
 },
 {
  "init": "t = []\ncond = lambda i: bool(i[0])\niterable = ['a', 'b', None]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "t = []\ncond = lambda i: i.isdigit()\niterable = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n",
  "assertion": "assert t == ['1', '2', '3', '4', '5', '6', '7', '8', '9']"
 },
 {
  "init": "t = []\ncond = lambda i: i.isalpha()\niterable = ['1', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n",
  "assertion": "assert t == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']"
 },
 {
  "init": "t = []\ncond = lambda i: i.isalnum()\niterable = ['1', 'a', 'b', 'c', '4', '5', '6', 'd', 'e']\n",
  "assertion": "assert t == ['1', 'a', 'b', 'c', '4', '5', '6', 'd', 'e']"
 },
 {
  "init": "iterable = [1,2,3,4,5]\ncond = lambda i : i < 5\n",
  "assertion": "assert len(t) == 4"
 },
 {
  "init": "iterable = [1,2,3,4,5]\ncond = lambda i : i < 7\n",
  "assertion": "assert t == iterable"
 },
 {
  "init": "iterable = [1,2,3,4,5]\ncond = lambda i : i > 3\n",
  "assertion": "assert t == [4,5]"
 },
 {
  "init": "iterable = ['1', 2, '3', 4, 5]\ncond = lambda i : i < 5\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = [1, 2, 3, 4, None, 5]\ncond = lambda i : i == 4\n",
  "assertion": "assert t == [4]"
 },
 {
  "init": "iterable = [1, 2, 3, 4, None, 5]\ncond = lambda i : i != None\n",
  "assertion": "assert t == [1, 2, 3, 4, 5]"
 },
 {
  "init": "iterable = [1, 2, 3, 4, 5]\ncond = 'a'\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = []\ncond = lambda x : x % 2 == 0\n",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd']\ncond = lambda x: x == 'a'\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd']\ncond = lambda x: x == 'e'\n",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = [1, 2, 3, 4, 5]\ncond = lambda x: x % 2 == 0\n",
  "assertion": "assert t == [2, 4]"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'c'\n",
  "assertion": "assert t == ['c']"
 },
 {
  "init": "iterable = [1, 2, 3, 4, 5]\ncond = lambda x: x % 2 == 1\n",
  "assertion": "assert t == [1, 3, 5]"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'b'\n",
  "assertion": "assert t == ['b']"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'f'\n",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'a' or x == 'b'\n",
  "assertion": "assert t == ['a', 'b']"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'a' or x == 'f'\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "cond = lambda x: x % 2 == 0\niterable = [1, 2, 3, 4, 5, 6]\n",
  "assertion": "assert t == [2, 4, 6]"
 },
 {
  "init": "cond = lambda x: x % 2 == 0\niterable = ['a', 'b', 'c', 'd', 'e']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x % 2 == 0\niterable = [None, None, None]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x % 2 == 0\niterable = ['1.125', '3.5', '6.75', '5.9']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'a'",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'c'",
  "assertion": "assert t == ['c']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'a' or x == 'b'",
  "assertion": "assert t == ['a', 'b']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'a' or x == 'b' or x == 'c'",
  "assertion": "assert t == ['a', 'b', 'c']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'a' or x == 'b' or x == 'c' or x == 'd'",
  "assertion": "assert t == ['a', 'b', 'c']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'a' or x == 'b' or x == 'c' or x == 'd' or x == 'e'",
  "assertion": "assert t == ['a', 'b', 'c']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x == 'a' or x == 'b' or x == 'c' or x == 'd' or x == 'e' or x == 'f'",
  "assertion": "assert t == ['a', 'b', 'c']"
 },
 {
  "init": "cond = lambda x: x%2 == 0\niterable = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
  "assertion": "assert t == [2, 4, 6, 8, 10]"
 },
 {
  "init": "cond = lambda x: x%2 == 1\niterable = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
  "assertion": "assert t == [1, 3, 5, 7, 9]"
 },
 {
  "init": "cond = lambda x: x%2 == 0\niterable = []\n",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda x: x%2 == 0\niterable = ['a', 'b', 'c', 'd', 'e']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x % 2 == 0\niterable = [1, 2, 3, 4, 5]\n",
  "assertion": "assert t == [2, 4]"
 },
 {
  "init": "cond = lambda x: x == 'a'\niterable = ['a', 'b', 'c', 'd', 'e']\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "cond = lambda x: x == 'a'\niterable = ['a', 'b', 'c', 'd', 'e']\nt = ['a']\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "cond = lambda x: x == 'a'\niterable = ['a', 'b', 'c', 'd', 'e']\nt = ['a', 'b']\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "cond = lambda x: x == 'a'\niterable = ['a', 'b', 'c', 'd', 'e']\nt = ['a', 'b', 'c']\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "cond = lambda x: x == 'a'\niterable = ['a', 'b', 'c', 'd', 'e']\nt = ['a', 'b', 'c', 'd']\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "cond = lambda x: x == 'a'\niterable = ['a', 'b', 'c', 'd', 'e']\nt = ['a', 'b', 'c', 'd', 'e']\n",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'a' or x == 'b' or x == 'c'\n",
  "assertion": "assert t == ['a', 'b', 'c']"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'a' or x == 'b' or x == 'c' or x == 'd'\n",
  "assertion": "assert t == ['a', 'b', 'c', 'd']"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda x: x == 'a' or x == 'b' or x == 'c' or x == 'd' or x == 'e'\n",
  "assertion": "assert t == ['a', 'b', 'c', 'd', 'e']"
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = [1,2,3,4,5]\n",
  "assertion": "assert t == [2,4]"
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = ['1','2','3','4','5']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = [None,1,2,3,4,5]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = [None]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = [None,None]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = []\n",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = ['1', '2', '3', '4', '5']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda i: i > 0\niterable = [-1, -1.5, 0, 1, 2, 3.5, 'a']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda i: i > 0\niterable = []\n",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda i: i > 0\niterable = None\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda i: i > 5\niterable = [-1, -1.5, 0, 1, 2, 3.5, 'a']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda i: i < 0\niterable = [-1, -1.5, 0, 1, 2, 3.5, 'a']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = [1, 2, 3, 4, 5]\ncond = lambda i: i%2 == 0\n",
  "assertion": "assert t == [2, 4]"
 },
 {
  "init": "iterable = ['a', 'b', 'c', 'd', 'e']\ncond = lambda i: i == 'c'\n",
  "assertion": "assert t == ['c']"
 },
 {
  "init": "iterable = ['a', '1', '2', '3', '4']\ncond = lambda i: i.isdigit()\n",
  "assertion": "assert t == ['1', '2', '3', '4']"
 },
 {
  "init": "iterable = [None, '1', '2', '3', '4']\ncond = lambda i: i.isdigit()\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = []\ncond = lambda i: i.isdigit()\n",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = [None]\ncond = lambda i: i.isdigit()\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = []\nt = []",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = ['a', 'b', 'c', 'd']\nt = []",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = [1,2,3,4,5]\nt = [1,2,3,4,5]",
  "assertion": "assert t == t"
 },
 {
  "init": "cond = lambda x: x%2==0\niterable = [1,2,3,4,5]\nt = [1,2,3,4,5]\n",
  "assertion": "assert t == t"
 },
 {
  "init": "cond = lambda x: x > 2\niterable = ['a', 1, 2, 3, 4, 5]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x > 2\niterable = []\n",
  "assertion": "assert t == []"
 },
 {
  "init": "cond = lambda x: x > 2\niterable = [None, None]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x > 2\niterable = ['a', 1.5]\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x > 2\niterable = 'string'\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x > 2\niterable = ['a', 1, '2']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "cond = lambda x: x > 2\niterable = ['a', 1, '2', '3', '4', '5']\n",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "t = []\ncond = lambda x: isinstance(x, int)\niterable = ['a', 3, 'b', 'c']\n",
  "assertion": "assert t == [3]"
 },
 {
  "init": "t = []\ncond = lambda x: True\niterable = [3, 'a']\n",
  "assertion": "assert t == [3, 'a']"
 },
 {
  "init": "t = []\ncond = lambda x: x%2==0\niterable = [1, 2, 3, 4, 5]\n",
  "assertion": "assert t == [2, 4]"
 },
 {
  "init": "t = []\ncond = lambda x: x%2==0\niterable = []\n",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x[0]=='a'",
  "assertion": "assert t == ['a']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x[0]=='d'",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: False",
  "assertion": "assert t == []"
 },
 {
  "init": "iterable = ['1.125', '3.5', '6.75', '5.9']\ncond = lambda x: float(x) == 1.125",
  "assertion": "assert t == ['1.125']"
 },
 {
  "init": "iterable = ['1', 'a', 'b']\ncond = lambda x: str(x) == '1'",
  "assertion": "assert t == ['1']"
 },
 {
  "init": "iterable = ['a', 'b', 'c']\ncond = lambda x: x in ['a', 'b']\nt = [i for i in iterable if cond(i)]",
  "assertion": "assert t == ['a', 'b']"
 },
 {
  "init": "iterable = [1,2,3,'a']\ncond = lambda x: x%2 == 0\nt = []",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = [1,2,3,'a']\ncond = lambda x: x%2 == 1\nt = []",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = ['a',2,3,'c']\ncond = lambda x: x%2 == 1\nt = []",
  "assertion": "assert 1==1",
  "error": true
 },
 {
  "init": "iterable = ['a','b','c','d']\ncond = lambda x: x == 'a'\nt = []",
  "assertion": "assert len(t) == 1"
 }
]