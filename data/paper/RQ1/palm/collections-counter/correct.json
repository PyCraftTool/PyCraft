[
 "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
 "counts = {i: 0 for i in iterable}\nfor i in iterable:\n    counts[i] += 1",
 "counts = dict()\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
 "counts = {}\nfor i in iterable:\n    try:\n        counts[i] += 1\n    except KeyError:\n        counts[i] = 1",
 "counts = {}\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
 "d = {}\nfor i in iterable:\n    d[i] = d.get(i, 0) + 1\ncounts = dict(d)",
 "from collections import defaultdict\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1",
 "counts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
 "counts = {x: iterable.count(x) for x in iterable}",
 "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 0\n    counts[i] += 1",
 "d = {}\nfor i in iterable:\n    d[i] = d.setdefault(i, 0) + 1\ncounts = dict(d)",
 "counts = dict.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1",
 "from collections import defaultdict\ncounts = defaultdict(lambda : 0)\nfor i in iterable:\n    counts[i] += 1",
 "counts = dict(((i, iterable.count(i)) for i in iterable))",
 "counts = {}\nfor i in iterable:\n    counts.update({i: counts.get(i, 0) + 1})",
 "counts = {i: iterable.count(i) for i in iterable if i in iterable}",
 "counts = dict()\nfor i in iterable:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1",
 "from collections import defaultdict\ncounts = defaultdict(lambda : 0)\nfor (i, x) in enumerate(iterable):\n    counts[x] += 1",
 "counts = {}\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
 "counts = dict(zip(iterable, [0] * len(iterable)))\nfor i in iterable:\n    counts[i] += 1",
 "counts = dict(zip(iterable, [0] * len(iterable)))\nfor (i, value) in enumerate(iterable):\n    counts[value] += 1",
 "counts = {x: iterable.count(x) for x in set(iterable)}",
 "counts = dict()\nfor i in iterable:\n    counts.setdefault(i, 0)\n    counts[i] += 1",
 "counts = {}\nfor (i, value) in enumerate(iterable):\n    if value not in counts:\n        counts[value] = 0\n    counts[value] += 1",
 "counts = {}\nfor (i, value) in enumerate(iterable):\n    counts[value] = counts.get(value, 0) + 1",
 "counts = {}\nfor i in iterable:\n    counts[i] = counts.setdefault(i, 0) + 1",
 "from collections import Counter\ncounts = Counter((i for i in iterable))",
 "import functools\ncounts = functools.reduce(lambda c, x: {**c, x: c.get(x, 0) + 1}, iterable, dict())",
 "counts = {}\nfor i in iterable:\n    count = counts.get(i, 0)\n    count += 1\n    counts[i] = count",
 "counts = dict()\nfor i in iterable:\n    if i not in counts:\n        counts[i] = 1\n    else:\n        counts[i] += 1",
 "counts = {}\nfor i in iterable:\n    count = counts.get(i, 0)\n    counts[i] = count + 1",
 "counts = {i: len(list(filter(lambda j: j == i, iterable))) for i in set(iterable)}",
 "counts = {x: sum([1 for y in iterable if y == x]) for x in iterable}",
 "counts = dict(zip(iterable, map(lambda x: iterable.count(x), iterable)))",
 "from collections import Counter\ncounts = Counter([i for i in iterable])",
 "counts = {}.fromkeys(iterable, 0)\nfor i in iterable:\n    counts[i] += 1",
 "counts = {}.fromkeys(iterable, 0)\nfor (index, value) in enumerate(iterable):\n    counts[value] += 1",
 "counts = {}\nfor i in iterable:\n    counts[i] = 1 if i not in counts else counts[i] + 1",
 "counts = {i: 0 for i in set(iterable)}\nfor i in iterable:\n    counts[i] += 1",
 "from collections import defaultdict\ncounts = defaultdict(int)\nfor item in iterable:\n    counts[item] += 1\ncounts = dict(counts)"
]