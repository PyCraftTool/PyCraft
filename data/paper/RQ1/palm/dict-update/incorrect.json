[
 "from collections import defaultdict\nd = defaultdict(int)\nfor (k, v) in additional_dict.items():\n    d[k] += v\nreturn d",
 "d.update(additional_dict, **additional_dict)",
 "d.update(**additional_dict)",
 "dict(**additional_dict, **d)",
 "d['update']({'kwargs': {'**': additional_dict}})\nk = list(d.keys())",
 "d.update(additional_dict, k=additional_dict[k])",
 "k = additional_dict.keys()[0]\nd[k] = additional_dict[k]",
 "d.update(**dict(additional_dict))",
 "dict(**additional_dict or {}, **d)",
 "dict(zip(d.keys(), list(d.values()) + list(additional_dict.values())))",
 "dict(zip(d.keys(), [d[key] if key in d else additional_dict[key] for key in set(d) | set(additional_dict)]))",
 "d['update'](kwargs={'**': additional_dict})\nk = list(d.keys())",
 "k = list(d.keys())\nd['update'](kwargs={'**': additional_dict})",
 "import copy\nd = copy.deepcopy(d)\nd['update']({'kwargs': {'**': additional_dict}})\nk = list(d.keys())",
 "d['update']\n{'kwargs': {'**': additional_dict}}\nk = list(d.keys())",
 "d.update(**additional_dict)\nk = list(d.keys())",
 "d.update({'**': additional_dict})\nk = sorted(list(d.keys()))",
 "d.update({k: additional_dict[k] for k in additional_dict if k in d})",
 "for (k, v) in additional_dict.items():\n    d.setdefault(k, []).append(v)",
 "d.update(dict(**additional_dict))",
 "for (k, v) in additional_dict.items():\n    d[k] = v if k not in d else d[k] + [v]",
 "d = d.update(additional_dict)",
 "d.update({k: additional_dict[k] for k in additional_dict if k in d and k in d})",
 "d.update(dict(((k, additional_dict[k]) for k in additional_dict if k in d)))",
 "for k in additional_dict:\n    d.setdefault(k, []).append(additional_dict[k])",
 "for (k, v) in additional_dict.items():\n    d[k].append(v)",
 "for (k, v) in additional_dict.items():\n    d.setdefault(k, []).extend([v])",
 "for (k, v) in additional_dict.items():\n    d[k] += [v]",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = []\n    d[k].append(v)",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = [v]\n    else:\n        d[k].append(v)",
 "for (k, v) in additional_dict.items():\n    if k in d:\n        d[k].append(v)\n    else:\n        d[k] = [v]",
 "d = dict(d.items() + additional_dict.items())",
 "{**d, **additional_dict}",
 "def merge(d1, d2):\n    merged = d1.copy()\n    for (k, v) in d2.items():\n        if k in merged:\n            merged[k].update(v)\n        else:\n            merged[k] = v\n    return merged\nmerge(additional_dict, d)",
 "updated_dict = {k: additional_dict[k] for k in additional_dict if k in d}\nd.update(updated_dict)",
 "d_update = {k: additional_dict[k] for k in additional_dict if k in d and k in d}\nd.update(d_update)",
 "d.update({k: additional_dict.get(k, v) for (k, v) in d.items()})",
 "for k in additional_dict:\n    d[k] = additional_dict[k] if k in d else d[k]",
 "for k in additional_dict.keys():\n    d.setdefault(k, []).append(additional_dict[k])",
 "for k in additional_dict.keys():\n    if k not in d.keys():\n        d[k] = []\n    d[k].append(additional_dict[k])",
 "for (k, v) in additional_dict.items():\n    d.update({k: d.get(k, []) + [v]})",
 "for (k, v) in additional_dict.items():\n    d[k].extend([v])",
 "for k in additional_dict.keys():\n    d[k].extend(additional_dict[k])",
 "for (k, v) in additional_dict.items():\n    d[k] = d.get(k, []) + [v]",
 "for (key, value) in additional_dict.items():\n    new_list = d[key]\n    new_list.append(value)\n    d[key] = new_list",
 "for (k, v) in additional_dict.items():\n    d[k] = d[k] + [v]",
 "d.update({k: additional_dict[k] for k in additional_dict if k not in d})",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = [v]\n    else:\n        d[k].extend(v)",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = []\n    else:\n        d[k].append(v)",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d.setdefault(k, []).append(v)\n    else:\n        d[k].append(v)",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = [v]\n    else:\n        d[k] = d[k] + [v]",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = [v]\n    else:\n        d[k].extend([v])",
 "for (k, v) in additional_dict.items():\n    d.get(k, []).append(v)",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = []\n    d[k] = d[k] + [v]",
 "d = dict(d.items() | additional_dict.items())",
 "d.extend(additional_dict)",
 "d.update(**additional_dict.copy())",
 "def merge(d1, d2):\n    merged = d1.copy()\n    for (k, v) in d2.items():\n        if k in merged:\n            merged[k].update(v)\n        else:\n            merged[k] = v\n    return merged\nmerged = merge(additional_dict, d)",
 "import collections\nnew_dict = collections.OrderedDict(sorted(d.items()))\nk = new_dict[-1]",
 "import json\nd = json.load(open('data.json'))\nk = d['a']",
 "updated_dict = {}\nfor k in additional_dict:\n    if k in d:\n        updated_dict[k] = additional_dict[k]\nd.update(updated_dict)",
 "d.update({k: additional_dict[k] for k in additional_dict.keys() if k in d})",
 "for k in additional_dict:\n    d[k] = additional_dict[k] if k in d else None",
 "d_update = dict(filter(lambda x: x[0] in d and x[1] in d, additional_dict.items()))\nd.update(d_update)",
 "d_update = {}\nfor k in additional_dict:\n    if k in d and k in additional_dict:\n        d_update[k] = additional_dict[k]\nd.update(d_update)",
 "d.update({k: additional_dict.get(k, v) if k in additional_dict else v for (k, v) in d.items()})",
 "tmp = {k: additional_dict.get(k, v) for (k, v) in d.items()}\nd.update(tmp)",
 "for (k, v) in d.items():\n    d[k] = additional_dict.get(k, v)",
 "for (k, v) in d.items():\n    if k in additional_dict:\n        d[k] = additional_dict[k]\n    else:\n        d[k] = v",
 "d = {k: v for (k, v) in d.items() if k in additional_dict}",
 "for k in additional_dict:\n    if k in d:\n        continue\n    d[k] = additional_dict[k]",
 "for (key, val) in additional_dict.items():\n    if key in d:\n        d[key] = val\n    else:\n        d[key] = d[key] + val",
 "for key in additional_dict.keys():\n    d[key] = d.get(key, additional_dict[key])",
 "for key in additional_dict:\n    d[key] = d.get(key, additional_dict[key])",
 "for k in additional_dict.keys():\n    if not d.get(k):\n        d[k] = []\n    d[k].append(additional_dict[k])",
 "def _dict_setdefault(d, k, v):\n    if not d.get(k):\n        d[k] = []\n    d[k].append(v)\nfor k in additional_dict.keys():\n    _dict_setdefault(d, k, additional_dict[k])",
 "import collections\nfor k in additional_dict.keys():\n    if k not in d.keys():\n        d[k] = collections.deque()\n    d[k].append(additional_dict[k])",
 "for k in additional_dict.keys():\n    if k not in d.keys():\n        d[k] = []\n    d[k].insert(0, additional_dict[k])",
 "d.update(additional_dict, **additional_dict.items())",
 "d.update(**additional_dict.items())",
 "for (k, v) in additional_dict.items():\n    if not d.get(k):\n        d[k] = v",
 "for (k, v) in additional_dict.items():\n    if not d.has_key(k):\n        d[k] = v",
 "for (k, v) in additional_dict:\n    if not d.get(k):\n        d[k] = v",
 "for (k, v) in additional_dict.items():\n    d.setdefault(k, v)",
 "for (k, v) in additional_dict.items():\n    if d.get(k, False):\n        break\n    d[k] = v",
 "for (key, value) in additional_dict.items():\n    d.update((key, value))",
 "d = d.merge(additional_dict)",
 "import collections\ncollections.update(d, additional_dict)",
 "for k in additional_dict.keys():\n    if not d.get(k):\n        d[k] = additional_dict[k]",
 "for (k, v) in additional_dict.items():\n    if d[k] is None:\n        d[k] = v",
 "for (key, value) in additional_dict.items():\n    if value not in d.values():\n        d[key] = value",
 "for (key, value) in additional_dict.items():\n    if not d.get(key, None):\n        d[key] = value",
 "temp = {}\nfor (k, v) in additional_dict.items():\n    if not d.get(k):\n        d[k] = v\n    temp[k] = d[k]",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v",
 "d = dict(**d, **additional_dict)",
 "{d.setdefault(k, []).append(v) for (k, v) in additional_dict.items()}",
 "d = {**additional_dict, k: v}",
 "import copy\ncopy_d = {k: v for (k, v) in additional_dict.items()}\nnew_dict[k] = v",
 "foo",
 "for k in additional_dict:\n    if not d.get(k):\n        d[k] = additional_dict[k]",
 "for key in additional_dict:\n    d[key] = additional_dict[key] if not d.get(key) else d[key]",
 "for k in additional_dict.items():\n    d[k] = additional_dict[k]\n    break",
 "for (k, v) in additional_dict.items():\n    if d.get(k) is None:\n        d[k] = v",
 "for k in additional_dict.keys():\n    v = additional_dict[k]\n    if d.get(k) is None:\n        d[k] = v",
 "for k in additional_dict.keys():\n    if d[k] is None:\n        d[k] = additional_dict[k]",
 "updated_dict = {key: value for (key, value) in additional_dict.items() if value not in d.values()}\nd = updated_dict",
 "updated_dict = {}\nfor (key, value) in additional_dict.items():\n    if value not in d.values():\n        updated_dict[key] = value\nd = updated_dict",
 "for (key, value) in additional_dict.items():\n    if key not in d.keys():\n        d[key] = value",
 "temp = {}\nfor (k, v) in additional_dict.items():\n    d[k] = v if d.get(k) is None else d[k]\n    temp[k] = d[k]",
 "d.update(**{k: additional_dict[k] for k in additional_dict.keys()})",
 "for k in additional_dict:\n    if k not in d:\n        d[k] = additional_dict[k]",
 "for k in additional_dict.keys():\n    if k not in d:\n        d[k] = additional_dict[k]",
 "for k in additional_dict:\n    if k not in d:\n        d.update({k: additional_dict[k]})",
 "for k in additional_dict.keys():\n    d[k] = additional_dict[k] if k not in d else d[k]",
 "for k in d.keys():\n    if k in additional_dict:\n        d[k] = additional_dict[k]\n    else:\n        d[k] = d[k]",
 "for k in d.items():\n    if k[0] in additional_dict:\n        d[k[0]] = additional_dict[k[0]]\n    else:\n        d[k[0]] = k[1]",
 "for k in d.keys():\n    d[k] = additional_dict[k] if k in additional_dict else d[k]",
 "for k in d.items():\n    if k[0] in additional_dict:\n        d[k[0]] = additional_dict[k[0]]",
 "d.update({k: additional_dict[k] for k in additional_dict.keys() if k not in d})",
 "for k in additional_dict.keys():\n    d.setdefault(k, additional_dict[k])",
 "for (k, v) in additional_dict.items():\n    if k in d:\n        continue\n    d[k] = v",
 "for k in additional_dict.keys():\n    if k in d:\n        continue\n    d[k] = additional_dict[k]",
 "for k in additional_dict.values():\n    if k in d:\n        continue\n    d[k] = additional_dict[k]",
 "d.update({k: additional_dict[k]})",
 "d.update({k: v})",
 "for k in set(additional_dict.keys()) - set(d.keys()):\n    d.update({k: additional_dict[k]})",
 "for k in additional_dict.keys():\n    if k not in d:\n        d[k] = additional_dict[k]\n    else:\n        d[k] = d[k]",
 "if k not in d:\n    d[k] = additional_dict[k]\nelse:\n    d[k] = additional_dict[k]",
 "additional_dict.update({k: v for (k, v) in d.items() if k in additional_dict})",
 "dict(d.items() + additional_dict.items())",
 "dict(**dict(d.items() + additional_dict.items()))",
 "d.update({k: v for (k, v) in additional_dict.items() if k not in d})",
 "d.update(dict(additional_dict, **additional_dict))",
 "for k in d.keys():\n    if k in additional_dict:\n        d[k] = additional_dict[k]\n    else:\n        continue",
 "d = {key: value for (key, value) in d.items() if key in additional_dict}.update({key: value for (key, value) in d.items() if key not in additional_dict})",
 "d.update({key: value for (key, value) in d.items() if key in additional_dict})\nd.update({key: value for (key, value) in d.items() if key not in additional_dict})",
 "d2 = d.copy()\nfor k in d.keys():\n    if k in additional_dict:\n        d2[k] = additional_dict[k]\n    else:\n        d2[k] = d[k]\nd = d2",
 "d.update({k: additional_dict[k] for k in additional_dict.keys() if k in d.keys()})",
 "for k in additional_dict.keys():\n    if k in d.keys():\n        d[k] = additional_dict[k]",
 "for (k, v) in d.items():\n    if k in additional_dict:\n        d[k] = additional_dict[k]",
 "for (key, value) in additional_dict.items():\n    if key not in d:\n        d[key] = value\nk = key",
 "d.update(dict([(k, additional_dict[k]) for k in additional_dict.keys() if k not in d]))",
 "d.update({k: additional_dict[k] for k in additional_dict.keys() - set(d.keys())})",
 "for k in additional_dict.keys() - set(d.keys()):\n    d[k] = additional_dict[k]",
 "new_dict = {}\nfor k in additional_dict.keys():\n    if k not in d:\n        new_dict[k] = additional_dict[k]\n    d.update(new_dict)",
 "for (k, v) in additional_dict.items():\n    if k in d:\n        d[k] = d[k] + v\n    else:\n        d[k] = v",
 "for k in set(additional_dict.keys()) - set(d.keys()):\n    d[k] = additional_dict[k]",
 "for k in list(set(additional_dict.keys()) - set(d.keys())):\n    d[k] = additional_dict[k]",
 "for k in additional_dict.items():\n    if k[0] in d:\n        continue\n    d[k[0]] = k[1]",
 "d.update(dict(((k, additional_dict[k]) for k in additional_dict if k not in d)))",
 "d.update(k=additional_dict[k])",
 "d[k] = additional_dict[k]",
 "d.update({k: additional_dict[k]}) if k in d else d.update(k=additional_dict[k])",
 "d.update({k: additional_dict[k]}) if k in d else d.update(**additional_dict)",
 "d[k] = v",
 "d = {k: 0}\nd[k] += 1",
 "d.update({k: v for (k, v) in additional_dict.items() if k in d and k not in d})",
 "d.update(**{k: v for (k, v) in additional_dict.items()})",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d.update({k: v})",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v\n    d",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d.setdefault(k, v)",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v\n    else:\n        d[k] += v",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v\n    return d",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v\nreturn d",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v\n    else:\n        d[k] = d[k] + v",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d.update({k: v})\nreturn d",
 "d.update(additional_dict)\nreturn d",
 "def update_dict(d, additional_dict):\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d[k] = v\n    return d\nreturn update_dict(d, additional_dict)",
 "for (key, value) in additional_dict.items():\n    if key in d:\n        d[key] += value\n    else:\n        d[key] = value",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d.setdefault(k, v)\nreturn d",
 "if additional_dict:\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d[k] = v\nreturn d",
 "if additional_dict:\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d.update({k: v})\nreturn d",
 "if additional_dict:\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d.setdefault(k, v)\nreturn d",
 "def update_dict(d, additional_dict):\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d[k] = v\n    return d\nd = update_dict(d, additional_dict)",
 "def update_dict(d, additional_dict):\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d[k] = v\n    return d\nupdate_dict(d, additional_dict)",
 "for (key, value) in additional_dict.items():\n    d[key] = d.get(key, 0) + value",
 "import collections\nd = collections.defaultdict(lambda : None)\nfor (k, v) in additional_dict.items():\n    d[k] = v\nreturn d",
 "d = {}\nfor (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v\nreturn d",
 "if additional_dict:\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d[k] = v\n    return d",
 "return d",
 "if additional_dict:\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d.setdefault(k, v)\n    return d",
 "def merge_dict(d, additional_dict):\n    if additional_dict:\n        for (k, v) in additional_dict.items():\n            if k not in d:\n                d.setdefault(k, v)\n    return d\nreturn merge_dict(d, additional_dict)",
 "for (k, v) in additional_dict.items():\n    d[k] = v if k not in d else d[k]",
 "d.update(**{**d, **additional_dict})",
 "def update_dict(d, additional_dict):\n    for (k, v) in additional_dict.items():\n        if k not in d:\n            d[k] = v\n    return d\n(d, additional_dict) = update_dict(d, additional_dict)",
 "for (k, v) in additional_dict.items():\n    if k not in d:\n        d[k] = v\n    else:\n        d[k] = v + additional_dict[k]",
 "for (key, value) in additional_dict.items():\n    d[key] = d.setdefault(key, 0) + value",
 "for (key, value) in additional_dict.items():\n    d[key] += value",
 "for (key, value) in additional_dict.items():\n    if key not in d:\n        d[key] = 0\n    d[key] += value",
 "d = {}\nfor (k, v) in additional_dict.items():\n    d[k] = v\nreturn d",
 "d.update(additional_dict, **additional_dict, **additional_dict)",
 "d.update(additional_dict, **additional_dict, **additional_dict, **additional_dict)",
 "def merge_dict(d, additional_dict):\n    if additional_dict:\n        for (k, v) in additional_dict.items():\n            if k not in d:\n                d[k] = v\n    return d\nreturn merge_dict(d, additional_dict)",
 "def merge_dict(d, additional_dict):\n    if additional_dict:\n        for (k, v) in additional_dict.items():\n            if k not in d:\n                d.update({k: v})\n    return d\nreturn merge_dict(d, additional_dict)",
 "for (k, v) in additional_dict.items():\n    d[k] = d.get(k, v, v)"
]