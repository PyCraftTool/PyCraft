[
 "\ncommon = list(set(l1) & set(l2) - set(l3))",
 "\ncommon = list(set(l1) & set(l2) - set(l3) - set(l4))",
 "\ncommon = list(set(l1) & set(l2) - set(l3) - set(l4) - set(l5))",
 "\ncommon = list(set(l1) & set(l2) - set(l3) - set(l4) - set(l5) - set(l6))",
 "\ncommon = list(set(l1) & set(l2) - set(l3) - set(l4) - set(l5) - set(l6) - set(l7))",
 "\ncommon = list(set(l1) & set(l2) - set(l3) - set(l4) - set(l5) - set(l6) - set(l7) - set(l8) - set(l9))",
 "\ncommon = set(l1) & set(l2) - set(l3)",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3))",
 "\ncommon = list(set(l1).intersection(set(l2)).difference(set(l3)))",
 "\ncommon = set(l1) & set(l2) - set(l3) - set(l4)",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3)).difference(set(l4))",
 "\ncommon = set(l1) & set(l2) - set(l3) - set(l4) - set(l5)",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3)).difference(set(l4)).difference(set(l5))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).union(set(l4).union(set(l5)))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3)",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3)).list()",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3) - set(l4)",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).union(set(l4)))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).union(set(l4))).intersection(set(l5))",
 "\ncommon = set(l1).intersection(set(l2)).symmetric_difference(set(l3).union(set(l4)))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).intersection(set(l4)))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).difference(set(l4)))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4)))",
 "\ncommon = set(l1).intersection(set(l2)).symmetric_difference(set(l3).difference(set(l4)))",
 "\ncommon = set(l1).intersection(set(l2)).symmetric_difference(set(l3).intersection(set(l4)))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3) - set(l4) - set(l5)",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).union(set(l4).union(set(l5))))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).union(set(l4)).union(set(l5)))",
 "\ncommon = [x for x in set(l1).intersection(set(l2)) if x not in set(l3)]",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5)).difference(set(l6))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5)).difference(set(l6)).difference(set(l7))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5)).difference(set(l6)).difference(set(l7)).difference(set(l8))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5)).difference(set(l6)).difference(set(l7)).difference(set(l8)).difference(set(l9))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5)).difference(set(l6)).difference(set(l7)).difference(set(l8)).difference(set(l9)).difference(set(l10))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).union(set(l4))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).union(set(l4))).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).union(set(l4))).intersection(set(l5)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).symmetric_difference(set(l3).union(set(l4))).copy()",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).intersection(set(l4))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).intersection(set(l4))).copy()",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).symmetric_difference(set(l4))",
 "\ncommon = set(l1).intersection(set(l2)).symmetric_difference(set(l3).intersection(set(l4))).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).union(set(l4).union(set(l5)))).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5)).difference(set(l6)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6))).difference(set(l7))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6)).difference(set(l7)))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6)).difference(set(l7))).difference(set(l8))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6)).difference(set(l7))).difference(set(l8)).difference(set(l9))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6)).difference(set(l7))).difference(set(l8)).difference(set(l9)).difference(set(l10))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12)).difference(set(l13))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12)).difference(set(l13)).difference(set(l14))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12)).difference(set(l13)).difference(set(l14)).difference(set(l15))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12)).difference(set(l13)).difference(set(l14)).difference(set(l15)).difference(set(l16))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9).union(set(l10)))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6)).union(set(l7)).union(set(l8)).union(set(l9)).union(set(l10)))",
 "\ncommon = set(l1) & set(l2) - set(l3) | set(l4)",
 "\ncommon = set(l1).intersection(set(l2)) - (set(l3) | set(l4))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).difference(set(l4))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).symmetric_difference(set(l4)).intersection(set(l5))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).symmetric_difference(set(l4)).intersection(set(l5)).intersection(set(l6))",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).symmetric_difference(set(l4)).intersection(set(l5)).intersection(set(l6)).intersection(set(l7))",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6))).difference(set(l7)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6)).difference(set(l7))).difference(set(l8)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6)).difference(set(l7))).difference(set(l8)).difference(set(l9)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).difference(set(l6)).difference(set(l7))).difference(set(l8)).difference(set(l9)).difference(set(l10)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12)).copy()",
 "\ncommon = set(l1).intersection(set(l2)) - set(l3).symmetric_difference(set(l4)) - set(l5).union(set(l6)) - set(l7).union(set(l8)) - set(l9) - set(l10) - set(l11) - set(l12) - set(l13)",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12)).difference(set(l13)).copy()",
 "\ncommon = set(l1).intersection(set(l2)).difference(set(l3).symmetric_difference(set(l4))).difference(set(l5).union(set(l6))).difference(set(l7).union(set(l8))).difference(set(l9)).difference(set(l10)).difference(set(l11)).difference(set(l12)).difference(set(l13)).difference(set(l14)).copy()",
 "\ndef common_elements(l1, l2):\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    return common\ncommon_elements(l1, l2)",
 "\ncommon = list(itertools.filterfalse(lambda x: x not in l1 or x not in l2, l1))",
 "\ndef common_elements(l1, l2):\n    common = set(l1).intersection(set(l2))\n    return list(common)\ncommon_elements(l1, l2)",
 "\ndef common_elements(l1, l2):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return common\ncommon_elements(l1, l2)",
 "\ncommon = list(set(l1).intersection(l2).difference(common))",
 "\ndef get_common_elements(l1, l2):\n    for x in l1:\n        if x in l2:\n            common.append(x)\ncommon = get_common_elements(l1, l2)",
 "\nfor item in l1:\n    if item in l2:\n        common.append(item)",
 "\ncommon = list(itertools.chain(*list(map(lambda x: list(set(x)), [l1, l2])))) if l1 and l2 else []",
 "\ndef common_elements(l1, l2):\n    common = {x for x in l1 if x in l2}\n    return list(common)",
 "\ndef common_elements(l1, l2):\n    common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return common",
 "\ndef common_elements(l1, l2):\n    common = set(l1)\n    common = common.intersection(set(l2))\n    return list(common)\ncommon_elements(l1, l2)",
 "\ndef common_elements(l1, l2):\n    common = set(l1)\n    common = common.intersection(set(l2))\n    return common\ncommon_elements(l1, l2)",
 "from collections import Counter\ndef common_elements(l1, l2):\n    common = Counter(l1).intersection(Counter(l2))\n    return list(common.keys())",
 "\nfor i in l2:\n    common.append(i) if i in l1 else None",
 "\nheapq.merge(l1, l2, key=lambda x: x)",
 "from functools import reduce\ncommon = reduce(lambda a, b: a & b, [Counter(l1), Counter(l2)])",
 "\ndef _intersection(x, y):\n    return x.intersection(y)\ncommon = list(reduce(_intersection, [set(l1), set(l2)]))",
 "\ncommon_elem = set(l1) & set(l2)\nfor elem in common_elem:\n    common.append(elem)",
 "\nl2_copy = copy.deepcopy(l2)\nl2_copy.sort()\nl1.sort()\ncommon = list(set(l1) & set(l2_copy))",
 "\nlist(heapq.merge(l1, l2, key=lambda x: x))",
 "\nl1 = sorted(l1)\n_merge_sorted(l1, l2)",
 "from heapq import merge as merge_list\ncommon = list(merge(l1, l2, key=lambda x: x))",
 "from heapq import merge as merge_list\ncommon = [x for x in merge(l1, l2, key=lambda x: x)]",
 "import functools\ncommon = functools.reduce(lambda c, d: c | d, [Counter(l1), Counter(l2)])",
 "from functools import reduce\ncommon = reduce(lambda x, y: x & y, [Counter(l1), Counter(l2)])",
 "import functools\ndef get_common_elements(l1, l2):\n    common = functools.reduce(lambda a, b: a & b, [Counter(l1), Counter(l2)])\n    return list(common.keys())\ncommon = get_common_elements(l1, l2)",
 "\ndef get_common_elements(l1, l2):\n    common = set(l1).intersection(l2)\n    return list(common)",
 "\ncommon = set(l1).intersection(set(l2)).intersection(set(l3))",
 "\ncommon = set(l1) & set(l2) & set(l3)",
 "\ncommon = set(l1).intersection(l2).intersection(l3)",
 "\ncommon = set(l1).intersection(set(l2)).intersection(l3)",
 "\ncommon = list(set(itertools.chain(l1, l2)))",
 "\ncommon = list(itertools.chain(*[(x,) if x in l2 else () for x in l1]))",
 "\ncommon = list(itertools.chain(set(l1), set(l2)))",
 "from collections import defaultdict\ncommon = defaultdict(list, Counter(l1)).intersection(Counter(l2)).keys()",
 "from operator import intersect\ncommon = list(intersect(l1, l2))",
 "from functools import reduce\ncommon = reduce(operator.and_, [set(l1), set(l2)])",
 "import scipy.spatial.distance\ncommon = scipy.spatial.distance.cdist([l1, l2], 'jaccard').argmin(axis=0)[0]"
]