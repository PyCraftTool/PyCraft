[
 "\ncum_arr = cumsum(array)",
 "\ncum_arr = list(accumulate(array))",
 "\ncum_arr = list(itertools.accumulate(array))",
 "\ncum_arr = np.array([np.sum(array[:i]) for i in range(len(array))])",
 "\ncum_arr = [0] + list(accumulate(array))",
 "\ncum_arr = np.sum(array)",
 "\ncum_arr = get_cum_array(array)",
 "\ncum_arr = [0] + list(itertools.accumulate(array))",
 "\ncum_arr = numpy.array(array).cumsum()",
 "\ncum_arr = list(map(lambda i, x: i + x, cum_arr, array))",
 "\nnumpy.cumsum(array)",
 "\ncum_arr = list(map(sum, itertools.accumulate(array, functools.partial(operator.add, 0))))",
 "\ncum_arr = [cum for cum in itertools.accumulate(array, functools.partial(operator.add, 0))]",
 "\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i]))",
 "\ncum_arr = []\nfor (index, value) in enumerate(array):\n    cum_arr.append(np.sum(array[index:]))\ncum_arr = np.array(cum_arr)[::-1]",
 "\ncum_arr = np.array([sum(array[:i]) for i in range(len(array))])",
 "\ncum_arr = np.add.accumulate(array)",
 "\ncum_arr = np.fromiter((sum(array[:i]) for i in range(len(array))), dtype=array.dtype)",
 "\ncum_arr = np.fromiter((sum(array[:i]) for i in range(len(array))), dtype=array.dtype).astype(array.dtype)",
 "\ncum_arr = list(itertools.accumulate(array, initial=0))",
 "\ncum_arr = np.sum(array, axis=0)",
 "\ncum_arr = list(cumsum(array))",
 "\ncum_arr = [0] + [x + y for (x, y) in zip(array, accumulate(array[1:]))]",
 "\ncum_arr = reduce(lambda a, b: a + b if b else a, array)",
 "\ncum_arr = _itertools.accumulate(array, lambda x, y: x if y is None else x + y)",
 "import functools\ncum_arr = list(reduce(lambda a, b: a + b, array))",
 "\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])",
 "\ncum_arr = np.array(list(map(lambda i: sum(array[:i + 1]), range(len(array)))))",
 "\ncum_arr = np.concatenate(([0], np.cumsum(array)))",
 "\ncum_arr = [0] + list(np.cumsum(array))",
 "\ncum_arr = list(map(sum, itertools.accumulate(array)))",
 "\ncum_arr = np.cumsum(array) + 0",
 "\ncum_arr = [0] + np.cumsum(array)",
 "\ncum_arr = np.concatenate((np.array([0]), np.cumsum(array)))",
 "\ncum_arr = np.concatenate((array, np.cumsum(array)[1:]))",
 "\ncum_arr = list(np.cumsum(array))",
 "\ncum_arr = np.cumsum([0] + array)",
 "\ncum_arr = np.cumsum(array, initial=0)",
 "\ncum_arr = np.cumsum(array, axis=0)",
 "\ncum_arr = np.cumsum(array, axis=1)",
 "\ncum_arr = np.cumsum(array, axis=None)",
 "\ncum_arr = np.cumsum(array) + [0]",
 "\ncum_arr = [0] + list(map(lambda x, y: x + y, array, cum_arr))",
 "\ncum_arr = [0] + [x + y for (x, y) in zip(array, cum_arr)]",
 "\ncum_arr = itertools.accumulate(array)",
 "\ncum_arr = functools.reduce(lambda a, b: a + b, array)",
 "\ncum_arr = pd.Series(array).cumsum()",
 "\ncum_arr = list(map(operator.add, array, cum_arr))",
 "\ncum_arr = np.cumsum(array, dtype=np.int64)",
 "\ncum_arr = np.cumsum(array, out=None, dtype=np.int64)",
 "\ncum_arr = np.cumsum(array, out=None, axis=0)",
 "\ncum_arr = np.cumsum(array, out=None, axis=1)",
 "\ncum_arr = np.array([sum(array[0:i + 1]) for i in range(len(array))])",
 "\ncum_arr = list(accumulate(array)) + [0]",
 "\ncum_arr = [0] + accumulate(array)",
 "\ncum_arr = pd.Series(array).cumsum().tolist()",
 "\ncum_arr = pd.DataFrame(array).cumsum().to_list()",
 "\ncum_arr = pd.Series(array).cumsum().values.tolist()",
 "\ncum_arr = pd.DataFrame(array).cumsum().values.tolist()",
 "\ncum_arr = np.add.accumulate(array, axis=0)",
 "\ncum_arr = np.array(list(accumulate(array)))",
 "\ncum_arr = [0] + list(reduce(lambda x, y: x + y, array))",
 "\ncum_arr = [0] + list(functools.reduce(lambda x, y: x + y, array))",
 "\ncum_arr = np.cumsum(array)[0]",
 "\ncum_arr = np.array(list(map(lambda i: sum(array[:i]), range(len(array)))))",
 "\ncum_arr = np.cumsum(array, axis=0, dtype=np.float64)",
 "\ncum_arr = np.cumsum(array, axis=0, dtype=np.float64, out=None)",
 "\ncum_arr = np.cumsum(array, axis=0, dtype=np.float64, out=None, keepdims=False)",
 "\ncum_arr = np.array([sum(array[i:]) for i in range(len(array))])",
 "\ncum_arr = list(reversed(list(accumulate(reversed(array)))))",
 "\ncum_arr = list(reversed(itertools.accumulate(reversed(array))))",
 "\ncum_arr = list(map(lambda x: itertools.accumulate(array[:x])[-1], range(len(array))))",
 "\ncum_arr = list(map(lambda x: itertools.accumulate(array[x:])[-1], range(len(array))))",
 "\ncum_arr = list(map(lambda x: itertools.accumulate(array[x:], initial=0)[-1], range(len(array))))",
 "\ncum_arr = list(map(lambda x: itertools.accumulate(array[x:], initial=0)[-1], range(len(array) - 1, -1, -1)))",
 "\ncum_arr = list(functools.reduce(lambda x, y: x + y, reversed(array)))",
 "\ncum_arr = list(functools.reduce(lambda x, y: x + y, array[::-1]))",
 "\ncum_arr = list(functools.reduce(lambda x, y: x + y, array[::-1], initial=0))",
 "\ncum_arr = list(functools.reduce(lambda x, y: x + y, array, initial=0))",
 "\ncum_arr = list(functools.reduce(lambda x, y: x + y, array, initial=0)[::-1])",
 "\ncum_arr = list(functools.reduce(lambda x, y: x + y, reversed(array), initial=0)[::-1])",
 "\ncum_arr = list(functools.reduce(lambda x, y: x + y, array[::-1], initial=0)[::-1])",
 "\ncum_arr = list(accumulate(array, func=lambda x, y: x + y))",
 "\ncum_arr = list(accumulate(array[::-1]))",
 "\ncum_arr = list(itertools.accumulate(array, lambda x, y: x + y))",
 "\ncum_arr = accumulate(array)",
 "\ncum_arr = [arr[i] + sum(arr[i + 1:]) for i in range(len(arr))]",
 "from collections import defaultdict\nsum = 0\nfor x in array:\n    if x not in sum_dict:\n        sum_dict[x] = 0\n    sum_dict[x] += 1\ncum_arr = list(sum_dict.values())",
 "\ncum_arr = [(lambda x: numpy.cumsum(x))(array)]",
 "\ndef sum_all_previous(x):\n    return numpy.cumsum(x)\ncum_arr = list(map(sum_all_previous, array))",
 "\ncum_arr = [0, np.sum(array)]",
 "\nlist(accumulate(array))",
 "\ncum_arr = [0] + np.array([i for i in range(len(array))]) + array",
 "\ncum_arr = cumsum_vec(array)",
 "\ncum_arr = np.sum(array, axis=0, keepdims=True)",
 "\ncum_arr = np.full(shape=(len(array) + 1,), fill_value=0, dtype=array.dtype)",
 "\ncum_arr = np.array([0])\nfor value in array:\n    cum_arr = np.append(cum_arr, cum_arr[-1] + value)",
 "\ncum_arr = pd.Series(array).cumsum().tolist() if len(array) > 0 else []",
 "\ncum_arr = [0] + arr\nfor i in range(len(arr) - 1):\n    cum_arr[i + 1] = cum_arr[i] + arr[i + 1]",
 "\ndef get_cumulative_sum(arr):\n    cum_arr = []\n    for i in range(len(arr)):\n        cum_arr.append(sum(arr[0:i + 1]))\n    return cum_arr\ncum_arr = get_cumulative_sum(arr)",
 "\ncum_arr = []\ncum_arr.append(arr[0])\nfor i in range(1, len(arr)):\n    cum_arr.append(cum_arr[-1] + arr[i])",
 "\ncum_arr = [arr[0]]\nfor i in range(1, len(arr)):\n    cum_arr.append(cum_arr[i - 1] + arr[i])",
 "\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(cumsum(array[0:i + 1]))",
 "import collections\nsum_dict = defaultdict(lambda : 0)\nfor val in array:\n    sum_dict[val] += 1\ncum_arr = list(sum_dict.values())",
 "\nsum_dict = collections.defaultdict(lambda : 0)\nfor val in array:\n    sum_dict[val] += 1\ncum_arr = list(sum_dict.values())",
 "\nsum_dict = collections.defaultdict(int)\nfor val in array:\n    sum_dict[val] += 1\ncum_arr = list(sum_dict.values())",
 "\ncum_arr = list(functools.reduce(operator.add, array))",
 "\ncum_arr = list(accumulate(array, lambda x, y: x + y))[::-1]",
 "\ncum_arr = np.array([0] * len(array))\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "\ncum_arr = [0] + list(map(add, array, cum_arr[1:]))",
 "\ncum_arr = np.cumproduct(array)",
 "\ncum_arr = np.prod(array, axis=-1)",
 "\ncum_arr = np.prod(array, axis=1)",
 "\ncum_arr = np.prod(array, axis=0, initial=1)",
 "\ncum_arr = np.sum(arr[:])",
 "from operator import add\ncum_arr = list(map(add, arr, arr[1:]))",
 "\ncum_arr = list(np.cumsum(array)) + [0]",
 "\ncum_arr = np.cumsum(array, dtype=int) + [0]",
 "\ncum_arr = list(np.cumsum(array, dtype=int)) + [0]",
 "\ncum_arr = np.add(np.cumsum(array, dtype=int), [0])",
 "\ncum_arr = np.append(np.cumsum(array, dtype=int), [0])"
]