[
 "import numpy as np\ncum_arr = np.cumsum(array)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.float64)",
 "cum_arr = list(map(sum, zip(*array)))",
 "from functools import reduce\ncum_arr = reduce(lambda x, y: x + y, array)",
 "import numpy as np\ncum_arr = np.add.accumulate(array, dtype=np.float64)",
 "cum_arr = []\nfor num in array:\n    cum_arr.append(num if num is not None else cum_arr[-1])",
 "cum_arr = []\nfor (index, num) in enumerate(array):\n    if num is not None:\n        cum_arr.append(num)\n    else:\n        cum_arr.append(cum_arr[-1])",
 "import functools\ncum_arr = list(functools.reduce(lambda a, b: a + b, array))",
 "import itertools\ncum_arr = list(itertools.accumulate(array))[1:]",
 "import numpy as np\nsum_array = np.sum(array, axis=1, dtype=np.int32)\ncum_arr = sum_array.tolist()",
 "cum_arr = []\nfor row in zip(*array):\n    cum_arr.append(sum(row))",
 "import functools\ncum_arr = list(functools.reduce(lambda x, y: x + y, array))",
 "cum_arr = [x + y for (x, y) in zip(array, array[1:])]",
 "import functools\ncum_arr = functools.reduce(lambda x, y: x + y, array)",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(array[i] + cum_arr[-1] if cum_arr else array[i])",
 "def cumsum(array):\n    return reduce(lambda x, y: x + y, array)",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(array[0] if i == 0 else cum_arr[i - 1] + array[i])",
 "cum_arr = array[0]\nfor i in range(1, len(array)):\n    cum_arr += array[i]",
 "cum_arr = [value for value in array] + [0]",
 "cum_arr = []\nfor num in array:\n    if num is not None:\n        cum_arr.append(num)\n    else:\n        cum_arr.append(cum_arr[-1])",
 "cum_arr = [num if num is not None else cum_arr[-1] for num in array]",
 "cum_arr = [num if num else cum_arr[-1] for num in array]",
 "cum_arr = array[0] if array[0] else 0\nfor num in array[1:]:\n    cum_arr += num if num else cum_arr",
 "cum_arr = [num if num is not None else 0 for num in array]",
 "cum_arr = list(map(lambda x, y: x if y is None else x + y, array, [None] * (len(array) - 1)))",
 "import itertools\ncum_arr = list(itertools.accumulate(array, lambda x, y: y if y is not None else x))",
 "from collections import defaultdict\ncum_arr = defaultdict(lambda : 0)\nfor v in array:\n    cum_arr[v] += 1",
 "import functools\ncum_arr = []\nfor x in array:\n    cum_arr.append(x + cum_arr[-1] if cum_arr else x)",
 "cum_arr = [array[i] + array[i - 1] if i > 0 else array[i] for i in range(len(array))]",
 "from functools import reduce\ncum_arr = reduce(lambda a, b: a + b, array)",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(array[i] + cum_arr[i - 1] if i > 0 else array[i])",
 "cum_arr = [0] + array",
 "cum_arr = []\nfor x in array:\n    cum_arr.append(x + cum_arr[-1] if len(cum_arr) else x)",
 "cum_arr = [array[i] + array[i - 1] for i in range(len(array))]",
 "cum_arr = [array[i] for i in range(len(array))]\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]",
 "cum_arr = [sum(array[i]) for i in range(len(array))]",
 "cum_arr = [sum(array) for array in zip(*array)]",
 "cum_arr = [sum(array) for array in array]",
 "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(array[i] + cum_arr[i - 1])",
 "cum_arr = [array[0]] + [sum(array[:i]) for i in range(len(array) - 1)]",
 "cum_arr = []\nfor (index, value) in enumerate(array):\n    if index == 0:\n        cum_arr.append(value)\n    else:\n        cum_arr.append(cum_arr[index - 1] + value)",
 "import numpy as np\ncum_arr = np.cumsum(array[::-1])",
 "cum_arr = []\nfor i in range(len(array) - 1, -1, -1):\n    cum_arr.append(array[i] + cum_arr[-1] if cum_arr else array[i])",
 "cum_arr = []\nfor i in range(len(array) - 1, -1, -1):\n    cum_arr.append(array[i] + cum_arr[-1] if cum_arr else array[i])\ncum_arr.reverse()",
 "import numpy as np\ncum_arr = np.append([0], np.cumsum(array))",
 "cum_arr = sum(array, [])",
 "from functools import reduce\ncum_arr = reduce(lambda acc, val: acc + val, array)",
 "from collections import defaultdict\ncum_arr = defaultdict(int)\nfor val in array:\n    cum_arr[val] += 1",
 "{'import': ['numpy', 'itertools'], 'code': 'cum_arr = list(itertools.accumulate(array))'}",
 "{'import': ['numpy'], 'code': 'cum_arr = np.cumsum(array)'}",
 "{'code': 'cum_arr = [0] + list(map(lambda x, y: x + y, cum_arr[1:], array))'}",
 "{'code': 'for i in range(1, len(array) + 1): cum_arr.append(cum_arr[i - 1] + array[i - 1])'}",
 "def cum_sum(array):\n    cum_arr = [0] * (len(array) + 1)\n    for i in range(len(array)):\n        cum_arr[i + 1] = cum_arr[i] + array[i]\n    return cum_arr",
 "{'cum_arr': [0, 1, 3, 6, 10, 15]}",
 "cum_arr = map(lambda x: numpy.cumsum(x), array)",
 "import numpy as np\ncum_arr = np.append(np.array([0]), np.cumsum(array))",
 "import numpy as np\ncum_arr = np.cumsum(array) + np.array([0])",
 "import numpy as np\ncum_arr = np.array([np.cumsum(array)])",
 "cum_arr = list(zip(range(len(array)), array)) + [0]",
 "cum_arr = []\nfor x in array:\n    if cum_arr:\n        cum_arr.append(cum_arr[-1] + x)\n    else:\n        cum_arr.append(x)",
 "cum_arr = [[array[0]] * (len(array) + 1)]\nfor i in range(1, len(array) + 1):\n    cum_arr.append([cum_arr[i - 1][j] + array[i - 1] for j in range(len(array) + 1)])",
 "import functools\ncum_arr = functools.reduce(lambda acc, val: acc + val, array)",
 "cum_arr = []\nfor (i, v) in enumerate(array):\n    cum_arr.append(v + array[i + 1:])",
 "def cum_arr(arr):\n    cum_arr = []\n    for i in range(len(arr)):\n        cum_arr.append(arr[i] + sum(arr[i + 1:]))\n    return cum_arr",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i]) if i > 0 else cum_arr.append(array[i])",
 "({'cum_arr': [4, 5, 9, 15]}, {'cum_arr': [4, 9, 14, 29]}, {'cum_arr': array}, {'cum_arr': [0, 1, 3, 6, 10]}, {'cum_arr': [3, 5, 8, 12, 16]})",
 "import itertools\ncum_arr = sum(itertools.chain(*array))",
 "",
 "import numpy as np\nsums = np.add.accumulate(array, dtype=np.int64)\ncum_arr = sums",
 "import numpy as np\ncum_arr = np.array([0], dtype=np.int64)\nfor i in range(1, len(array)):\n    cum_arr = np.append(cum_arr, cum_arr[i - 1] + array[i])",
 "import numpy as np\ncum_arr = np.roll(array, 1)\ncum_arr[0] = 0",
 "import numpy as np\ncum_arr = np.append(array, [0], axis=0)\nfor i in range(len(array)):\n    cum_arr[i + 1] = cum_arr[i] + array[i]",
 "import numpy as np\ncum_arr = np.cumprod(array)",
 "import numpy as np\ncum_arr = np.prod(array, axis=0)",
 "import numpy as np\ncum_arr = np.multiply.accumulate(array)",
 "cum_arr = array[:] + [0]",
 "import numpy as np\ncum_arr = np.roll(array, 1)\ncum_arr[0] = cum_arr[1] - array[0]",
 "import numpy as np\ncum_arr = np.cumsum(array)[1:]",
 "({'cum_arr': [0, 2, 7, 12, 17, 22, 27]},)\n{'cum_arr': [0, 1, 4, 9, 16, 25, 36]}",
 "({'cum_arr': 10, 'array': [1, 2, 3, 4]}, {'cum_arr': 20, 'array': [1, 2, 3, 4, 5]}, {'cum_arr': 30, 'array': [1, 2, 3, 4, 5, 6]})",
 "cum_arr = list(map(sum, array))",
 "import numpy as np\nnp.cumprod(array)",
 "def cumprod(array):\n    cum_arr = np.cumprod(array)\n    return cum_arr",
 "import numpy as np\ncum_arr = np.cumprod(array, axis=0)",
 "cum_arr = 1\nfor item in array:\n    cum_arr *= item",
 "import numpy as np\ncum_arr = np.prod(array)",
 "import numpy as np\ncum_arr = np.prod(array, keepdims=True)",
 "cum_arr = 0\nfor x in array:\n    cum_arr = cum_arr * x",
 "from itertools import accumulate\ncum_arr = list(accumulate(array))[-1]",
 "from collections import defaultdict\ndef cumsum(arr):\n    cum_arr = defaultdict(int)\n    for value in arr:\n        cum_arr[value] += 1\n    return cum_arr",
 "cum_arr = list(array) + [0]",
 "cum_arr = array[:] + [array[-1]]",
 "cum_arr = [array[0]] + array[1:]"
]