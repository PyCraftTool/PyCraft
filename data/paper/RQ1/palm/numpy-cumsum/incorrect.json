[
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(array[:i + 1].sum())",
 "cum_arr = [0] + [sum(array[:i]) for i in range(len(array))]",
 "cum_arr = 0\nfor i in array:\n    cum_arr += i",
 "cum_arr = []\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
 "cum_arr = sum(array[:])",
 "cum_arr = [array[:i + 1].sum() for i in range(len(array))]",
 "cum_arr = sum((array[i:j + 1] for i in range(len(array))))",
 "cum_arr = list((sum(array[:i]) for i in range(len(array))))",
 "cum_arr = array(0)\nfor value in array:\n    cum_arr = cum_arr + value",
 "cum_arr = []\nfor value in array:\n    cum_arr.append(cum_arr[-1] + value)",
 "cum_arr = sum(array)",
 "cum_arr = 0\nfor (index, value) in enumerate(array):\n    cum_arr += value",
 "def get_cum_array(array):\n    cum_arr = 0\nfor i in array:\n    cum_arr += i\nreturn cum_arr",
 "cum_arr = array.sum(axis=1)",
 "cum_arr = array.cumsum()",
 "cum_arr = [sum(array[0:i]) for i in range(len(array))]",
 "from collections import defaultdict\ncum_arr = defaultdict(int)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[0:i])",
 "cum_arr = []\ncum_arr.extend(map(sum, zip(array, array[1:])))",
 "from collections import defaultdict\ncum_arr = [0]\ncum_sum = defaultdict(list)\ncum_sum[0].append(array[0])\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\n    cum_sum[i].append(cum_arr[-1])",
 "cum_arr = [sum(array[:i]) for i in range(len(array))]",
 "cum_arr = []\nfor (index, value) in enumerate(array):\n    cum_arr.append(cum_arr[index - 1] + value)",
 "cum_arr = array.sum()",
 "cum_arr = [0] * len(array)\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "cum_arr = [sum(array[i:j + 1]) for i in range(len(array))]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[i:j + 1]))",
 "import numpy as np\ndef cumsum(arr):\n    c = 0\n    for x in arr:\n        c = c + x\n    return c\ncum_arr = cumsum(array, dtype=np.float64)",
 "import numpy as np\ndef cumsum(arr):\n    c = 0\n    for i in range(len(arr)):\n        c = c + arr[i]\n    return c\ncum_arr = cumsum(array, dtype=np.float64)",
 "import numpy as np\ncum_arr = sum(array, dtype=np.float64)",
 "for i in range(len(array)):\n    cum_arr[i] = sum(array[:i])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i]))",
 "cum_arr = []\nfor i in range(len(array) - 1, -1, -1):\n    cum_arr.append(sum(array[:i]))",
 "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
 "from functools import reduce\ncum_arr = reduce(lambda x, y: x + y, array + [0])",
 "cum_arr = [sum(x) for x in zip(array, cum_arr[1:])]",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i + 1] = cum_arr[i] + array[i]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
 "cum_arr = [sum(array[:i]) for i in range(len(array) + 1)]",
 "cum_arr = [sum(array[i:j + 1]) for (i, j) in zip(range(len(array)), range(1, len(array) + 1))]",
 "cum_arr = [sum(array[i:j + 1]) for i in range(len(array) - 1) for j in range(i + 1, len(array))]",
 "cum_arr = [0] + [sum(array[:i + 1]) for i in range(len(array))]",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] + [0]",
 "cum_arr = [array[:i].sum() for i in range(len(array))]",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])",
 "cum_arr = []\nfor i in range(len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
 "cum_arr = array.reduce(lambda a, b: a + b)",
 "{'cum_arr': sum(array)}",
 "cum_arr = 0\nfor val in array:\n    cum_arr += val\ncum_arr",
 "def cumsum(arr):\n    cum_arr = 0\n    for val in arr:\n        cum_arr += val\n    return cum_arr\ncum_arr = cumsum(array)",
 "cum_arr = []\nfor (i, val) in enumerate(array):\n    cum_arr.append(cum_arr[-1] + val)",
 "cum_arr = []\nfor i in range(len(array)):\n    for j in range(1, len(array) + 1):\n        cum_arr.append(sum(array[i:j + 1]))",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[i:]))",
 "from collections import defaultdict\ncum_arr = defaultdict(lambda : 0)\nfor i in range(len(array)):\n    cum_arr[i] += array[i]\ncum_arr = list(cum_arr.values())",
 "cum_arr = []\nfor i in range(len(array) - 1):\n    for j in range(i + 1, len(array)):\n        cum_arr.append(sum(array[i:j + 1]))",
 "import numpy as np\ncum_arr = np.array([sum(array[i:j + 1]) for i in range(len(array) - 1) for j in range(i + 1, len(array))])",
 "from itertools import combinations\ncum_arr = [sum(x) for x in combinations(array, 2)]",
 "cum_arr = list(map(lambda x, y: sum(array[x:y + 1]), range(len(array) - 1), range(i + 1, len(array))))",
 "cum_arr = list(map(lambda x: sum(array[x:]), range(len(array) - 1)))",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\ncum_arr.append(0)",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr.append(0)",
 "cum_arr = [sum(array[i:]) for i in range(len(array))]",
 "cum_arr = [0] + list(map(lambda i: sum(array[:i + 1]), range(len(array))))",
 "cum_arr = [0] + [sum(array[i:]) for i in range(len(array))]",
 "cum_arr = [0] + [sum(array[i:i + 1]) for i in range(len(array))]",
 "cum_arr = [0] + list(map(lambda i: sum(array[:i]), range(len(array))))",
 "cum_arr = [0] + list(map(lambda i: sum(array[i:i + 1]), range(len(array))))",
 "from collections import defaultdict\ncum_arr = defaultdict(lambda : 0)\nfor i in range(len(array)):\n    cum_arr[i + 1] = cum_arr[i] + array[i]",
 "cum_arr = [0] * (len(array) + 1)\nfor i in range(len(array)):\n    cum_arr[i + 1] = cum_arr[i] + array[i]",
 "cum_arr = [0] * (len(array) + 1)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "cum_arr = [0] + [array[i] + cum_arr[i - 1] for i in range(len(array))]",
 "cum_arr = [0] + list(map(lambda x, y: x + y, array, [0] * (len(array) - 1)))",
 "cum_arr = [0] + list(map(sum, zip(array, [0] * len(array))))",
 "cum_arr = [0] * (len(array) + 1)\nfor i in range(1, len(array) + 1):\n    cum_arr[i] = cum_arr[i - 1] + array[i - 1]",
 "cum_arr = list(map(sum, zip(array, array[1:])))",
 "cum_arr = sum(array) + sum(array[1:])",
 "cum_arr = list(map(sum, zip(*[array for i in range(len(array))])))",
 "cum_arr = [array[0]] + [array[i] + cum_arr[i - 1] for i in range(1, len(array))]",
 "cum_arr = [sum(array[:i]) for i in range(len(array) - 1, -1, -1)]",
 "cum_arr = [sum(array[:i]) for i in range(-1, -len(array) - 1, -1)]",
 "cum_arr = [sum(array[i:]) for i in range(1, len(array) + 1)]",
 "cum_arr = [sum(array[i:]) for i in range(len(array) - 1, -1, -1)]",
 "cum_arr = [sum(array[i:]) for i in range(-1, -len(array) - 1, -1)]",
 "cum_arr = list(map(lambda i: sum(array[i:]), range(len(array))))",
 "cum_arr = [0] + list(map(lambda x: x + cum_arr[-1], array))",
 "cum_arr = [0] + list(array.cumsum())",
 "cum_arr = array.cumsum()[0]",
 "cum_arr = list(map(lambda i: sum(array[:i]), range(len(array))))",
 "cum_arr = [0] + [sum(array[:i]) for i in range(1, len(array) + 1)]",
 "cum_arr = sum(array, axis=0)",
 "cum_arr = [sum(array) for array in zip(*[array for i in range(len(array))])]",
 "cum_arr = [array[0]] + list(accumulate(array))",
 "cum_arr = [array[0]] + [sum(array[:i + 1]) for i in range(len(array))]",
 "cum_arr = [array[0]] + [sum(array[:i]) for i in range(1, len(array))]",
 "cum_arr = [array[0]] + [sum(array[:i + 1]) for i in range(len(array) - 1)]",
 "cum_arr = list(map(lambda x: sum(array[:x]), range(len(array))))",
 "cum_arr = list(map(lambda x: sum(array[x:]), range(len(array))))",
 "cum_arr = list(map(lambda x: sum(array[x:]), range(len(array) - 1, -1, -1)))",
 "cum_arr = [sum(array[:i]) for i in reversed(range(len(array)))]",
 "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[i:]))",
 "cum_arr = []\nfor i in range(len(array) - 1, -1, -1):\n    cum_arr.append(sum(array[i:]))",
 "cum_arr = []\nfor i in range(len(array) - 1, -1, -1):\n    cum_arr.append(array[i] + cum_arr[-1])",
 "cum_arr = [sum(array[i:]) for i in range(len(array) - 1, -1, -1)]\ncum_arr.reverse()",
 "cum_arr = [sum(array[i:]) for i in range(len(array) - 1, -1, -1)]\ncum_arr = cum_arr[::-1]",
 "cum_arr = [0]\nfor i in range(1, len(array) + 1):\n    cum_arr.append(cum_arr[i - 1] + array[i - 1])",
 "cum_arr = []\nfor (i, v) in enumerate(array):\n    cum_arr.append(v + sum(array[i + 1:]))",
 "cum_arr = list(map(sum, zip(*[array] * (len(array) + 1))))",
 "{cum_arr: np.cumsum(array)}",
 "cum_arr = {i: sum(array[:i]) for i in range(len(array))}",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i - 1]",
 "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(cum_arr[i - 1] + array[i - 1])",
 "sum(array)",
 "cum_arr = [array[0]] + [ele + cum_arr[-1] for ele in array[1:]]",
 "cum_arr = [[0] * (len(array) + 1) for _ in range(len(array) + 1)]\nfor i in range(len(array) + 1):\n    for j in range(len(array) + 1):\n        if j <= i:\n            cum_arr[i][j] = cum_arr[i - 1][j - 1] + array[i - 1]",
 "cum_arr = {}\nfor val in arr:\n    if val not in cum_arr:\n        cum_arr[val] = 0\n    cum_arr[val] += 1",
 "cum_arr = {val: 0 for val in arr}\nfor val in arr:\n    cum_arr[val] += 1",
 "cum_arr = []\nfor val in array:\n    if val not in cum_arr:\n        cum_arr.append(val)\n    cum_arr[val] += 1",
 "cum_arr = [0] * len(array)\nfor (i, val) in enumerate(array):\n    cum_arr[i + 1] = cum_arr[i] + val",
 "cum_arr = [sum(x) for x in zip([0] + array, array + [0])]",
 "cum_arr = 0\ncum_arr += sum(array)",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array) - 1, -1, -1)]",
 "cum_arr = [sum(array[i:j]) for i in range(len(array)) for j in range(i + 1, len(array) + 1)]",
 "cum_arr = []\nfor val in array:\n    cum_arr.append(sum(cum_arr) + val)",
 "cum_arr = [sum(array[i:i + 2]) for i in range(len(array))]",
 "cum_arr = [sum(array[i:i + 3]) for i in range(len(array))]",
 "cum_arr = [sum(array[i:i + 4]) for i in range(len(array))]",
 "cum_arr = [sum(array[i:i + 5]) for i in range(len(array))]",
 "cum_arr = [sum(array[i:j]) for j in range(i + 1, len(array) + 1) for i in range(len(array))]",
 "cum_arr = 0\nfor x in array:\n    cum_arr += x ** 2",
 "cum_arr = 1\nfor x in array:\n    cum_arr *= x ** 2",
 "{'cum_arr': 0}\nfor i in array:\n    {'cum_arr': cum_arr + i}",
 "cum_arr = arr[:].sum()",
 "sum(arr[:])",
 "count = 0\nfor val in arr:\n    count += val\ncum_arr = count",
 "cum_arr = [0] + list(map(lambda x, y: x + y, [0] * (len(array) + 1), array))",
 "cum_arr = array.tolist() + [0]"
]