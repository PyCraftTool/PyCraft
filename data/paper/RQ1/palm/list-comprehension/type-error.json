[
 "t = list(filter(lambda i: i == 'a', iterable))",
 "t = [i for i in iterable if i == cond]",
 "t = [i for i in iterable if i != cond]",
 "t = filter(cond, iterable)",
 "t = filter(lambda i: cond(i), iterable)",
 "t = [i for i in iterable if i == 'a']",
 "t = [i for i in iterable if i.lower() == 'a']",
 "t = [x for x in iterable if x in range(1, 10)]",
 "import functools\ndef filter_fn(i):\n    return cond(i)\nt = functools.reduce(lambda a, b: a if b is None else a + [b], iterable, [])",
 "t = tuple(filter(lambda x: x == 'foo', iterable))",
 "t = set(iterable) if cond else set()",
 "t = list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5, 6]))",
 "import functools\ndef filter(cond, iterable):\n    for x in iterable:\n        if cond(x):\n            yield x\nt = filter(cond, iterable)",
 "filter(cond, iterable)",
 "(i for i in iterable if cond(i))",
 "list(filter(lambda x: x < 4, range(10)))",
 "list(filter(lambda x: x % 2 == 0, range(10)))",
 "list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9]))",
 "list(filter(lambda x: x == 0, iterable))",
 "list(filter(lambda x: x != 0, iterable))",
 "list(filter(lambda x: x in [1, 2, 3], iterable))",
 "list(filter(lambda x: x not in [1, 2, 3], iterable))",
 "t = [i for i in iterable if i in {cond}]",
 "t = [i for i in iterable if i in (cond,)]",
 "t = list(filter(lambda x: x in (cond,), iterable))",
 "t = [i for i in iterable if i is cond]",
 "import itertools\nt = itertools.filterfalse(cond, iterable)",
 "iterable = list(range(5))\ncond = lambda x: x > 2\nt = list(filter(cond, iterable))",
 "iterable = list(range(5))\ncond = lambda x: x % 2 == 1\nt = list(filter(cond, iterable))",
 "",
 "import itertools\nt = list(itertools.takewhile(lambda x: x < 5, range(10)))",
 "t = [i for i in range(10) if i < 5]",
 "t = [x for x in iterable if isinstance(x, int) and x % 2 == 0]",
 "t = filter(lambda i: not cond(i), iterable)",
 "t = filter(lambda x: not cond(x), iterable)",
 "import itertools\niterable = list(range(5))\ncond = lambda x: x > 2\nt = list(itertools.filterfalse(cond, iterable))",
 "iterable = list(range(5))\ncond = lambda x: x > 2\nlist(map(lambda x: x if cond(x) else None, iterable))",
 "iterable = list(range(5))\ncond = lambda x: x % 2 == 1\nt = [ele for ele in iterable if cond(ele)]",
 "from itertools import filterfalse\niterable = list(range(5))\ncond = lambda x: x % 2 == 1\nt = list(filterfalse(cond, iterable))",
 "iterable = list(range(5))\nt = [x for x in iterable if x % 2 == 1]",
 "iterable = list(range(5))\ncond = lambda x: x % 2 == 1\nfor x in iterable:\n    if cond(x):\n        break\nt = [x]",
 "filter(lambda x: x != 0, iterable)",
 "import numpy as np\nnp.where(iterable != 0)",
 "filter(lambda item: cond(item), iterable)",
 "(item for item in iterable if not cond(item))",
 "filter(lambda x: x < 0, iter(range(5)))",
 "[i for i in range(5) if i < 0]",
 "[i for i in range(5) if i not in (1, 3, 4)]",
 "[i for i in range(5) if i % 2 == 1]",
 "[i for i in range(5) if i % 3 != 0]",
 "from itertools import filterfalse\nresult = filterfalse(cond, iterable)",
 "def filterfalse(iterable, predicate):\n    for element in iterable:\n        if not predicate(element):\n            yield element\nresult = filterfalse(cond, iterable)",
 "def cond(x):\n    return True\n\ndef reduce(func, iterable, initializer=None):\n    acc = initializer\n    for x in iterable:\n        acc = func(acc, x)\n    return acc\nresult = reduce(lambda x, y: cond(x) and cond(y), iterable)",
 "from itertools import takewhile\ncond = lambda x: x % 2 == 0\niterable = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nt = list(takewhile(cond, iterable))",
 "import itertools\ncond = lambda x: x % 2 == 0\niterable = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nt = list(itertools.takewhile(cond, iterable))",
 "from itertools import takewhile\nt = takewhile(cond, iterable)",
 "import itertools\nt = list(itertools.takewhile(lambda i: i < 5, range(10)))",
 "filter(lambda x: x > 2, list(range(10)))",
 "lambda x: x > 2",
 "def filter(cond, iterable):\n    for item in iterable:\n        if cond(item):\n            yield item",
 "from functools import reduce\ndef filter(cond, iterable):\n    return reduce(lambda x, y: y if cond(y) else x, iterable, None)",
 "t = [i for i in iterable if i is None]",
 "t = [i for i in iterable if i is not None]",
 "t = list(filter(lambda i: i is not None, iterable))",
 "from itertools import filterfalse\nt = filterfalse(lambda i: not cond(i), iterable)",
 "t = list(filter(lambda x: isinstance(x, int), iterable))",
 "import numpy as np\ncond = lambda x: x % 2 == 0\niterable = [1, 2, 3, 4, 5]\nt = np.array([x for x in iterable if cond(x)])",
 "from itertools import filterfalse\nt = filterfalse(lambda i: i in t, iterable)\nif t:\n    t = filter(cond, t)",
 "def f(x, y):\n    return x + y\nt = map(f, [1, 2], [3, 4])",
 "def cond(i):\n    return True\nt = [i for i in iterable if cond(i)]",
 "def get_filtered(iterable, cond):\n    return [i for i in iterable if cond(i)]",
 "t = filter(lambda x: x > 5, iterable)",
 "cond1 = True\nif cond1:\n    t = list(iterable)",
 "t = list(filter(lambda i: i % 2 == 0, range(5)))",
 "t = [i for i in range(5) if i % 2 == 0]",
 "def is_even(i):\n    return i % 2 == 0\nt = list(filter(is_even, range(5)))",
 "def get_filtered(iterable, cond):\n    results = []\n    for v in iterable:\n        if cond(v):\n            results.append(v)\n    return results",
 "def get_filtered(iterable, cond):\n    return list(filter(cond, iterable))",
 "filter(lambda x: x > 5, iterable)",
 "iterable = list(range(10))\ncond = lambda x: x % 2 == 0\nt = [2, 4, 6]\nlist(filter(cond, iterable)).extend(t)",
 "t = [2, 4, 6]\niterable = list(range(10))\ncond = lambda x: x % 2 == 0\nfor value in filter(cond, iterable):\n    t.append(value)",
 "list(filter(lambda x: x % 2 == 0, [2, 4, 6, 8]))"
]