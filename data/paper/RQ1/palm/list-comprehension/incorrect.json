[
 "t = list(filter(lambda i: i % 2 == 0, iterable))",
 "t = list(filter(lambda i: i > 0, iterable))",
 "t = list(filter(lambda i: i < 10, iterable))",
 "t = list(filter(lambda i: i > 0 and i < 10, iterable))",
 "t = list(filter(lambda i: i > 0 and i < 10 and (i % 2 == 0), iterable))",
 "t = list(filter(lambda i: i > 0 and i < 10 and (i % 2 == 0) and (i == 'a'), iterable))",
 "t = [i for i in iterable if i in cond()]",
 "t = [i for i in iterable if i == cond()]",
 "t = [i for i in iterable if i < cond()]",
 "t = [i for i in iterable if i > cond()]",
 "t = [i for i in iterable if i <= cond()]",
 "t = [i for i in iterable if i >= cond()]",
 "t = [i for i in iterable if i != cond()]",
 "t = [i for i in iterable if i in cond]",
 "t = [i for i in iterable if i < cond]",
 "t = [i for i in iterable if i > cond]",
 "t = [i for i in iterable if i <= cond]",
 "t = [i for i in iterable if i >= cond]",
 "t = [i for i in iterable if i in cond(iterable)]",
 "t = [i for i in iterable if cond(i) in iterable]",
 "t = list(filter(lambda i: i in cond(iterable), iterable))",
 "t = [i for i in iterable if i % 2 == 0]",
 "t = [i for i in iterable if i > 0]",
 "t = [x for x in iterable if x < 10]",
 "import itertools\nt = list(itertools.takewhile(lambda x: x < 10, iterable))",
 "t = [i for i in iterable if i < 10] if iterable else []",
 "t = list(filter(lambda i: i < 10, iterable)) if iterable else []",
 "t = list(filter(lambda x: x >= 0 and x < 10, iterable))",
 "t = [x for x in iterable if x >= 0 and x < 10]",
 "t = [x for x in iterable if x > 0 and x < 10]",
 "t = [x for x in iterable if 0 < x < 10]",
 "t = [x for x in iterable if 0 <= x < 10]",
 "t = list(filter(lambda i: 0 < i < 10, iterable))",
 "t = [i for i in iterable if 0 < i <= 9]",
 "t = list(filter(lambda i: 0 < i <= 9, iterable))",
 "t = list(filter(lambda i: i >= 1 and i <= 9, iterable))",
 "t = list(filter(lambda i: i >= 1 and i < 10, iterable))",
 "t = list(filter(lambda i: i >= 0 and i < 10, iterable))",
 "t = list(filter(lambda i: i >= 0 and i <= 9, iterable))",
 "t = [i for i in iterable if i > 0 and i < 10 and (i % 2 == 0)]",
 "t = list(filter(lambda x: x > 0 and x < 10 and (x % 2 == 0), iterable))",
 "t = [i for i in iterable if i > 0 and i < 10 and (i % 2 == 0) and (i == 'a')]",
 "t = [i for i in iterable if (i > 0 and i < 10 and (i % 2 == 0)) and i == 'a']",
 "t = list(filter(lambda i: (i > 0 and i < 10 and (i % 2 == 0)) and i == 'a', iterable))",
 "t = list(filter(cond(), iterable))",
 "t = list((i for i in iterable if i in cond()))",
 "t = list(filter(lambda i: i == cond(), iterable))",
 "t = [i for i in iterable if i == cond(i)]",
 "t = [i for i in iterable if i < cond(i)]",
 "t = [i for i in iterable if i < cond(i) for j in iterable]",
 "t = list(filter(lambda i: i < cond(), iterable))",
 "t = [i for i in iterable if i < cond()] if iterable else []",
 "t = [i for i in iterable if i < cond()] if iterable else [-1]",
 "t = list(filter(lambda i: i > cond(), iterable))",
 "t = list((i for i in iterable if i > cond()))",
 "t = list(filter(lambda x: x > cond(), iterable))",
 "t = list(filter(lambda x: x <= cond(), iterable))",
 "t = [i for i in iterable if i <= cond()] if iterable else []",
 "t = []\nfor i in iterable:\n    if i <= cond():\n        t.append(i)",
 "t = []\nfor i in iterable:\n    if i <= cond():\n        t.extend(i)",
 "t = []\nfor i in iterable:\n    if i <= cond():\n        t.append(i)\nreturn t",
 "t = []\nfor i in iterable:\n    if i <= cond():\n        t.append(i)\nreturn t if t else []",
 "t = []\nfor i in iterable:\n    if i <= cond():\n        t.append(i)\nreturn t or []",
 "t = [i for i in iterable if i is not None and cond(i)]",
 "t = [i for i in iterable if i is not None and cond(i) and isinstance(i, str)]",
 "t = tuple(filter(cond, iterable))",
 "t = set(filter(cond, iterable))",
 "t = frozenset(filter(cond, iterable))",
 "import functools\nt = list(functools.filter(cond, iterable))",
 "t += [i]",
 "[i for i in iterable if cond(i)]",
 "list(filter(cond, iterable))",
 "[i for i in iterable if cond(i) and i not in t]",
 "[i for i in iterable if i not in t and cond(i)]",
 "list(filter(lambda i: cond(i), iterable))",
 "list(filter(lambda i: i not in t and cond(i), iterable))",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\n    else:\n        t.append(None)",
 "t = []\nfor i in iterable:\n    t.append(cond(i)) if cond(i) else None",
 "import itertools\ndef filter_fn(i):\n    return cond(i)\nt = list(itertools.filter(filter_fn, iterable))",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\n    else:\n        t.append(i)",
 "t = list(filter(lambda i: i is not None and cond(i), iterable))",
 "t = [i for i in iterable if cond(i) and i is not None]",
 "t = list(filter(lambda i: cond(i) and i is not None, iterable))",
 "t = list(filter(lambda x: x is not None and cond(x), iterable))",
 "t = [i for i in filter(lambda x: x is not None and cond(x), iterable)]",
 "t = [i for i in iterable if i and cond(i)]",
 "t = [i for i in iterable if i is not None and i != '' and cond(i)]",
 "t = list(filter(lambda i: i is not None and cond(i) and isinstance(i, str), iterable))",
 "t = []\nfor i in iterable:\n    if i is not None and cond(i) and isinstance(i, str):\n        t.append(i)",
 "t = [i for i in iterable if cond(i) and isinstance(i, str)]",
 "t = list(filter(lambda i: cond(i) and isinstance(i, str), iterable))",
 "import itertools\nfiltered = list(itertools.filterfalse(cond, iterable))\nt = filtered",
 "import functools\nfiltered = list(functools.filter(cond, iterable))\nt = filtered",
 "t = tuple((i for i in iterable if cond(i)))",
 "t = tuple((i for i in iterable if i in cond))",
 "t = tuple(filter(lambda x: x >= 0, iterable))",
 "t = tuple(filter(lambda x: x % 2 == 0, iterable))",
 "t = set(iterable) if cond else {}\nfor element in iterable:\n    if cond(element):\n        t.add(element)",
 "t = {x for x in iterable if cond(x)}",
 "t = set(iterable) if cond(iterable) else set()",
 "t = set(filter(cond, iterable))\nfrozenset(t)",
 "t = frozenset(tuple(filter(cond, iterable)))",
 "t = frozenset(iterable)\nfor e in iterable:\n    if cond(e):\n        t.add(e)",
 "t = frozenset(iterable) if cond(iterable) else frozenset()",
 "t = frozenset(iterable) if cond(iterable) else set()",
 "t = frozenset(iterable) if cond(iterable) else set()\nif not t:\n    t = frozenset()",
 "t = frozenset(iterable) if cond(iterable) else set()\nif not t:\n    t = set()\nelse:\n    t = frozenset(t)",
 "t = list(iterable) if iterable else []\nfor x in t:\n    if cond(x):\n        t.remove(x)",
 "t = t + [i]",
 "t += i",
 "t = [i] + t",
 "t += [i, 1, 2, 3]",
 "list((i for i in iterable if cond(i)))",
 "list(filter(lambda x: x % 2 == 0, ['a', 'b', 'c', 'd']))",
 "list(filter(lambda x: x % 2 == 0, 'abcd'))",
 "list(filter(lambda x: x % 2 == 0, iterable))",
 "list(filter(lambda x: x % 2 == 1, iterable))",
 "list(filter(lambda x: x > 0, iterable))",
 "list(filter(lambda x: x < 0, iterable))",
 "list(filter(lambda x: x > 0 and x < 10, iterable))",
 "list(filter(lambda x: x > 0 or x < 10, iterable))",
 "list(filter(lambda x: x > 0 and x < 10 and (x % 2 == 0), iterable))",
 "list(filter(lambda x: x > 0 or x < 10 or x % 2 == 0, iterable))",
 "t = list(filter(lambda x: x in cond, iterable))",
 "t = [i for i in iterable if i in set(cond)]",
 "t = [i for i in iterable if i in (cond, cond2, cond3, ...)]",
 "t = [i for i in iterable if i in (cond, cond2, cond3, ...) if i in (cond4, cond5, cond6, ...)]",
 "t = [i for i in iterable if i in (cond, cond2, cond3, ...) if i in (cond4, cond5, cond6, ...) if i in (cond7, cond8, cond9, ...)]",
 "t = [i for i in iterable if i in (cond, cond2, cond3, ...) if i in (cond4, cond5, cond6, ...) if i in (cond7, cond8, cond9, ...) if i in (cond10, cond11, cond12, ...)]",
 "t = list(filter(lambda x: x < cond, iterable))",
 "t = [i for i in iterable if i < cond] if iterable else []",
 "t = list(filter(lambda x: x < cond, iterable)) if iterable else []",
 "t = [i for i in iterable if i < cond] if iterable else [-1]",
 "t = list(filter(lambda x: x < cond, iterable)) if iterable else [-1] if cond else []",
 "t = [i for i in iterable if i < cond] if iterable else [-1] if cond else [-1] if iterable else []",
 "t = list(filter(lambda x: x > cond, iterable))",
 "t = [i for i in iterable if i > cond and i < 10]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 2 == 0)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 2 == 0) and (i in [1, 2, 3])]",
 "t = list(filter(lambda x: x >= cond, iterable))",
 "t = [i for i in iterable if i >= cond] if iterable else []",
 "t = list(filter(lambda x: x >= cond, iterable)) if iterable else []",
 "t = [i for i in iterable if i >= cond] if iterable else [None]",
 "t = list(filter(lambda i: i in set(cond), iterable))",
 "t = list(filter(lambda i: i in (cond, cond2, cond3, ...), iterable))",
 "t = [i for i in iterable if all((i in cond for cond in (cond, cond2, cond3, ...)))]",
 "t = list(filter(lambda x: x in (cond, cond2, cond3, ...) and x in (cond4, cond5, cond6, ...), iterable))",
 "t = [i for i in iterable if i in (cond, cond2, cond3, ...) and i in (cond4, cond5, cond6, ...)]",
 "t = [i for i in iterable if all([i in (cond, cond2, cond3, ...) and i in (cond4, cond5, cond6, ...)])]",
 "t = list(filter(lambda x: x in (cond, cond2, cond3, ...) and x in (cond4, cond5, cond6, ...) and (x in (cond7, cond8, cond9, ...)), iterable))",
 "t = [i for i in iterable if i in (cond, cond2, cond3, ...) and i in (cond4, cond5, cond6, ...) and (i in (cond7, cond8, cond9, ...))]",
 "t = [i for i in iterable if all([i in (cond, cond2, cond3, ...) and i in (cond4, cond5, cond6, ...) and (i in (cond7, cond8, cond9, ...))])]",
 "t = list(filter(lambda x: x in (cond, cond2, cond3, ...) and x in (cond4, cond5, cond6, ...) and (x in (cond7, cond8, cond9, ...)) and (x in (cond10, cond11, cond12, ...)), iterable))",
 "t = [i for i in iterable if i in (cond, cond2, cond3, ...) and i in (cond4, cond5, cond6, ...) and (i in (cond7, cond8, cond9, ...)) and (i in (cond10, cond11, cond12, ...))]",
 "t = [x for x in iterable if x < cond] if iterable else [-1] if cond else []",
 "t = list(filter(lambda x: x < cond, iterable)) if iterable else [-1] if cond else [-1] if iterable else []",
 "t = list(filter(lambda x: x > cond and x < 10, iterable))",
 "t = [i for i in iterable if i >= cond and i < 10]",
 "t = [i for i in iterable if i > cond and i <= 10]",
 "t = [i for i in iterable if i >= cond and i <= 10]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 2 == 1)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 3 == 0)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 3 == 1)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 3 == 2)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 4 == 0)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 4 == 1)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 4 == 2)]",
 "t = [i for i in iterable if i > cond and i < 10 and (i % 4 == 3)]",
 "t = [i for i in iterable if i.is_cond()]",
 "t = [i for i in iterable if i.cond()]",
 "t = [i for i in iterable if i.get_cond()]",
 "t = [i for i in iterable if i.has_cond()]",
 "t = [i for i in iterable if i.get_cond() is not None]",
 "t = [i for i in iterable if i.get_cond() == cond]",
 "t = [i for i in iterable if i.get_cond() in cond]",
 "t = [i for i in iterable if i.get_cond().is_cond()]",
 "t = [i for i in iterable if i.get_cond().cond()]",
 "t = [i for i in iterable if i.get_cond().get_cond()]",
 "t = [i for i in iterable if i.get_cond().has_cond()]",
 "t = [i for i in iterable if i.get_cond().get_cond() is not None]",
 "t = [i for i in iterable if i.get_cond().get_cond() == cond]",
 "t = [i for i in iterable if i.get_cond().get_cond() in cond]",
 "t = [i for i in iterable if all([i in cond, i in cond2, i in cond3]) and all([i in cond4, i in cond5, i in cond6])]",
 "t = [i for i in iterable if i in cond and i in cond2 and (i in cond3) and (i in cond4) and (i in cond5) and (i in cond6)]",
 "t = list(filter(lambda i: all([i in (cond, cond2, cond3, ...) and i in (cond4, cond5, cond6, ...)]), iterable))",
 "t = [i for i in iterable if all([i in (cond, cond2, cond3, ...)]) and all([i in (cond4, cond5, cond6, ...)])]",
 "t = [i for i in iterable if all([i in cond, i in cond2, i in cond3, i in cond4, i in cond5, i in cond6, i in cond7, i in cond8, i in cond9])]",
 "t = [x for x in iterable if x in (cond, cond2, cond3, ...) and x in (cond4, cond5, cond6, ...) and (x in (cond7, cond8, cond9, ...) and x in (cond10, cond11, cond12, ...))]",
 "t = [i for i in iterable if all([i in cond for cond in (cond, cond2, cond3, ...)])]",
 "t = [i for i in iterable if all([i in cond for cond in (cond, cond2, cond3, ...)]) and all([i in cond for cond in (cond4, cond5, cond6, ...)]) and (i in (cond7, cond8, cond9, ...))]",
 "t = list(filter(lambda x: x >= cond and x < 10, iterable))",
 "t = [i for i in iterable if i >= cond and i < 10] if iterable else []",
 "t = list(filter(lambda x: x >= cond and x < 10, iterable)) if iterable else []",
 "t = list(filter(lambda x: x > cond and x <= 10, iterable))",
 "t = [i for i in iterable if i >= cond and i < 11]",
 "t = [i for i in iterable if i > cond and i <= 10 and (i % 2 == 0)]",
 "t = [i for i in iterable if i > cond and i <= 10 and (i % 2 == 0) and (i < 100)]",
 "t = list(filter(lambda x: x >= cond and x <= 10, iterable))",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else []",
 "t = list(filter(lambda x: x >= cond and x <= 10, iterable)) if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1]",
 "t = list(filter(lambda x: x >= cond and x <= 10, iterable)) if iterable else [-1] if cond else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else [-4] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else [-4] if iterable else [-5] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else [-4] if iterable else [-5] if iterable else [-6] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else [-4] if iterable else [-5] if iterable else [-6] if iterable else [-7] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else [-4] if iterable else [-5] if iterable else [-6] if iterable else [-7] if iterable else [-8] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else [-4] if iterable else [-5] if iterable else [-6] if iterable else [-7] if iterable else [-8] if iterable else [-9] if iterable else []",
 "t = [i for i in iterable if i >= cond and i <= 10] if iterable else [-1] if cond else [-2] if iterable else [-3] if iterable else [-4] if iterable else [-5] if iterable else [-6] if iterable else [-7] if iterable else [-8] if iterable else [-9] if iterable else [-10] if iterable else []",
 "t = [i for i in iterable if not cond(i)]",
 "t = [i for i in iterable if not cond(i) for i in iterable]",
 "result = [i for (i, v) in enumerate(iterable) if cond(v)]",
 "result = list(filter(lambda v: cond(v), iterable))",
 "result = list(map(cond, iterable))",
 "from itertools import takewhile\nt = list(takewhile(cond, iterable))",
 "t = list(filter(lambda x: x % 2 == 0, iterable))",
 "def filter(x):\n    return isinstance(x, int) and x % 2 == 0\nt = list(filter(filter, iterable))",
 "t = tuple([x for x in iterable if not cond(x)])",
 "t = set([x for x in iterable if not cond(x)])",
 "t = list(map(lambda x: x if not cond(x) else None, iterable))",
 "t = []\nfor i in iterable:\n    if not cond(i):\n        t.append(i)",
 "from functools import reduce\nt = reduce(lambda a, b: a if cond(b) else b, iterable)",
 "t = [i for i in iterable if cond(i) is False]",
 "t = list(filter(lambda x: not cond(x), iterable))",
 "result = []\nfor i in iterable:\n    if not cond(i):\n        result.append(i)\nt = result",
 "result = [x for x in iterable if not cond(x)]\nt = result",
 "t = []\nwhile iterable:\n    item = iterable.pop()\n    if not cond(item):\n        t.append(item)",
 "list(filter(lambda i: not cond(i), iterable))",
 "tuple(filter(lambda i: not cond(i), iterable))",
 "iterable = list(range(5))\nt = iterable.copy()\ncond = lambda x: x % 2 == 1\nt.remove((x for x in iterable if cond(x)))",
 "[]((x for x in iterable if cond(x)))",
 "result = list(filter(lambda item: not cond(item), iterable))",
 "import functools\nresult = functools.reduce(lambda a, b: a if b else a + [b], filter(lambda item: not cond(item), iterable), [])",
 "result = []\nfor (i, v) in enumerate(iterable):\n    if cond(v):\n        result.append(i)",
 "result = list(filter(cond, enumerate(iterable)))",
 "def select(i, v):\n    return cond(v)\nresult = list(map(select, enumerate(iterable)))",
 "import itertools\nresult = list(itertools.filterfalse(lambda i, v: not cond(v), enumerate(iterable)))",
 "def f(i, v):\n    return (i, v) if cond(v) else (-1, None)\nresult = list(map(f, enumerate(iterable)))",
 "result = [(i, v) for (i, v) in enumerate(iterable) if cond(v)]",
 "def cond(v):\n    return v % 2 == 0\nresult = list(filter(lambda v: cond(v), iterable))",
 "result = list(filter(lambda v: v % 2 == 0, iterable))",
 "from functools import partial\nresult = list(filter(partial(cond, iterable)))",
 "import functools\nresult = functools.reduce(lambda x, y: x if cond(x) else y, iterable)",
 "import functools\nresult = functools.reduce(lambda x, y: cond(x) and cond(y), iterable)",
 "def reduce(func, iterable, initializer=None):\n    acc = initializer\n    for x in iterable:\n        acc = func(acc, x)\n    return acc\nresult = reduce(lambda x, y: cond(x) and cond(y), iterable)",
 "import numpy as np\nt = np.array(list(filter(cond, iterable)))",
 "t = [element for element in iterable if element in (cond(element) for element in iterable)]",
 "import numpy as np\nt = np.array([x for x in iterable if cond(x)])",
 "t = [i for i in iterable if cond(i) and i not in t]",
 "t = set([i for i in iterable if cond(i)])",
 "t = list(set([i for i in iterable if cond(i)]))",
 "t = [i for i in iterable if i in {cond1, cond2, ...}]",
 "t = [i for i in iterable if i not in {cond1, cond2, ...}]",
 "t = list(filter(lambda i: not cond(i), iterable))",
 "import itertools\nfiltered = itertools.filter(cond, iterable)\nreturn list(filtered)",
 "filtered = [e for e in iterable if cond(e)]\nreturn filtered",
 "t += (i,)",
 "i = i + 1",
 "t = [cond(i) for i in iterable]",
 "t = [elem for elem in iterable if elem in cond(elem) for elem in iterable]",
 "t = [e for e in iterable if e in [cond(e) for e in iterable]]",
 "t = list(set([e for e in iterable if e in [cond(e) for e in iterable]]))",
 "import functools\nt = list(functools.reduce(set.intersection, [[e for e in iterable if e in cond(e)] for cond in iterable]))",
 "t = list(filter(lambda element: element in (cond(element) for element in iterable), iterable))",
 "import functools\nt = list(filter(functools.partial(cond, iterable), iterable))",
 "from itertools import filterfalse\nt = tuple(filterfalse(cond, iterable))",
 "import functools\nt = functools.reduce(lambda x, y: x | y, list(filter(cond, iterable)))",
 "t = frozenset(list(filter(cond, iterable)))",
 "def cond(x):\n    return x % 2 == 0\nt = frozenset(filter(cond, iterable))",
 "t = list(filter(lambda i: i in t, iterable))",
 "return set(t) & set(iterable)",
 "t = list(filter(cond, iterable))\nif t:\n    t.extend([i for i in iterable if i not in t])",
 "t = list(filter(lambda i: cond(i) and i not in t, iterable))",
 "t = []\nfor i in iterable:\n    if cond(i) and i not in t:\n        t.append(i)",
 "t = set(filter(lambda i: cond(i) and i not in t, iterable))",
 "t = list(set(filter(lambda i: cond(i) and i not in t, iterable)))",
 "set((i for i in iterable if cond(i)))",
 "set([i for i in iterable if cond(i)])",
 "t = set((i for i in iterable if cond(i)))",
 "t = sorted(list(filter(cond, iterable)))",
 "t = list(set(filter(cond, iterable)))",
 "t = []\nfor i in iterable:\n    if cond(i):\n        yield i\nt = tuple(t)",
 "t = [i if cond(i) else None for i in iterable]",
 "t = [i if cond(i) else filter(cond, iterable)[-1] for i in iterable]",
 "import itertools as it\nt = tuple(it.filter(cond, iterable))",
 "t = [i for i in iterable if i > 5]",
 "t = [i for i in iterable if not cond(i) ^ True]",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt = tuple(t)",
 "import collections\ndef _list_to_tuple(list_):\n    return tuple(list_)\nt = _list_to_tuple(list(filter(cond, iterable)))",
 "from itertools import islice\nt = tuple(islice(iterable, filter(cond, iterable)))",
 "t = {value for value in iterable if not cond(value)}",
 "import itertools\nt = [item for item in itertools.filterfalse(cond, iterable) if cond(item)]",
 "import collections\nt = collections.deque()\nfor i in iterable:\n    if cond(i):\n        t.append(i)",
 "res = []\nfor i in iterable:\n    if cond(i):\n        res.append(i)\n        t = res",
 "import numpy as np\nt = np.array([i if cond(i) else None for i in iterable])",
 "import itertools as it\nt = [i if cond(i) else None for i in list(it.chain(*iterable))]",
 "t = list()\nfor i in iterable:\n    if cond(i):\n        t.append(i)\n    elif not t:\n        t.append(filter(cond, iterable)[-1])",
 "import functools\nt = functools.reduce(lambda x, y: y if cond(y) else x, iterable, filter(cond, iterable)[-1])",
 "t = iterable.copy()\nt.remove(filter(cond, iterable)[-1])\nt.insert(0, cond(iterable[0]) if cond(iterable[0]) else iterable[1:])",
 "t = [i if cond(i) else next(filter(cond, iterable), None) for i in iterable]",
 "t = [i for i in iterable if cond(i)] if any(map(cond, iterable)) else [filter(cond, iterable)[-1]]",
 "t = list(map(lambda x: x if cond(x) else filter(cond, iterable)[-1], iterable))",
 "t = [i if cond(i) else sorted(list(filter(cond, iterable)))[-1] for i in iterable]",
 "from collections.abc import Sequence\ndef f(item):\n    return item if isinstance(item, Sequence) else [item]\nt = [i if cond(i) else list(filter(cond, f(i)))[-1] for i in iterable]",
 "t = tuple(iterable) if all((cond(i) for i in iterable)) else tuple()",
 "temp = []\nfor i in iterable:\n    if i > 5:\n        temp.append(i)\nt = temp",
 "[i for i in iterable if i > 5]",
 "list(filter(lambda i: i > 5, iterable))",
 "list((i for i in iterable if i > 5))",
 "import itertools\nt = list(itertools.filterfalse(lambda x: x < 5, iterable))",
 "t = list(filter(lambda x: x > 5, iterable))",
 "return filter(lambda x: x > 5, iterable)",
 "list(filter(cond, iterable + [t]))[-1] == t",
 "f = lambda x: cond(x)\nresult = [t] + list(filter(f, iterable))",
 "for i in iterable:\n    if cond(i):\n        list(filter(cond, iterable)).append(i)",
 "from functools import reduce\nreduce(lambda a, b: a + b, list(filter(cond, iterable)))",
 "t = []\nfor i in iterable:\n    if not cond(i) ^ True:\n        t.append(i)",
 "def filter_with_cond(iterable, cond):\n    return [i for i in iterable if not cond(i) ^ True]\nt = filter_with_cond(iterable, cond)",
 "t = list(filter(lambda i: not cond(i) ^ True, iterable))",
 "from functools import reduce\nt = reduce(lambda a, b: a + b if not cond(b) else a, iterable)",
 "import itertools\nt = list(itertools.compress(iterable, lambda i: not cond(i) ^ True))",
 "def get_t(iterable):\n    return tuple((i for i in iterable if cond(i)))\nt = get_t(iterable)",
 "t = list(filter(cond, iterable))\nt = tuple(t)",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\n    else:\n        continue\nt = tuple(t)",
 "import collections\nt = tuple(list(filter(cond, iterable)))",
 "def _list_to_tuple(list_):\n    return tuple(list_)\nt = tuple(filter(cond, iterable))",
 "def _list_to_tuple(list_):\n    return collections.deque(list_)\nt = tuple(filter(cond, iterable))",
 "tuple(sorted(filter(cond, iterable)))",
 "t = max(iterable, key=cond)",
 "filter(cond, iterable).list()"
]