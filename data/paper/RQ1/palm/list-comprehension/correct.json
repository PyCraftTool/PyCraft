[
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)",
 "t = [i for i in iterable if cond(i)]",
 "t = list(filter(cond, iterable))",
 "t = list(filter(lambda i: cond(i), iterable))",
 "t = list(filter(lambda x: cond(x), iterable))",
 "t = [i for i in iterable if cond(i)] if iterable else []",
 "t = list(filter(lambda i: cond(i), iterable)) if iterable else []",
 "t = [i for i in iterable if cond(i)] if iterable else [None]",
 "t = list(filter(lambda i: cond(i), iterable)) if iterable else ['None']",
 "t = [i for i in iterable if cond(i)] if iterable else ['None', 'None']",
 "t = list(filter(lambda i: cond(i), iterable)) if iterable else ['None', 'None', 'None']",
 "t = [i for i in iterable if cond(i)] if iterable else ['None', 'None', 'None', 'None']",
 "t = [i for i in iterable if cond(i)] if iterable else ['None', 'None', 'None', 'None', 'None']",
 "t = list((i for i in iterable if cond(i)))",
 "t = list(filter(lambda x: cond(x), iterable)) if iterable else []",
 "t = list(filter(cond, iterable)) if iterable else []",
 "import functools\nt = functools.reduce(lambda a, x: a + [x] if cond(x) else a, iterable, [])",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\n    else:\n        t.append(i)\nt = list(filter(cond, iterable))",
 "filtered = []\nfor i in iterable:\n    if cond(i):\n        filtered.append(i)\nt = filtered",
 "t = [] if not iterable else list(filter(lambda x: cond(x), iterable))",
 "t = list(filter(lambda x: cond(x), iterable)) if iterable else set()",
 "t = [x for x in iterable if cond(x)] if iterable else set()",
 "if iterable:\n    t = [v for v in iterable if cond(v)]\nelse:\n    t = []",
 "t = [] if not iterable else list(filter(cond, iterable))",
 "t = [] if iterable is None else [x for x in iterable if cond(x)]",
 "t = [x for x in iterable if cond(x)] if iterable is not None else []",
 "t = [i for i in iterable if i not in [j for j in iterable if not cond(j)]]",
 "import itertools\nt = list(itertools.filterfalse(lambda i: not cond(i), iterable))",
 "t = list(filter(lambda element: cond(element), iterable))",
 "from itertools import filterfalse\nt = list(filterfalse(lambda x: not cond(x), iterable))",
 "def get_filtered(iterable, cond):\n    t = []\n    for i in iterable:\n        if cond(i):\n            t.append(i)\n    return t\nt = get_filtered(iterable, cond)",
 "def _get_filtered(iterable, cond):\n    return [item for item in iterable if cond(item)]\nt = _get_filtered(iterable, cond)"
]