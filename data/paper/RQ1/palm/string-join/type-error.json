[
 "string = list(values) + ['']",
 "string = list(values) + [' ']",
 "string = list(map(str, values))\nstring = ', '.join(string)",
 "import json\nstring = json.dumps(values)",
 "import pprint\nstring = pprint.pformat(values)",
 "string = '[' + ', '.join([str(x) for x in values]) + ']'",
 "string = '[' + ''.join(map(str, values)) + ']'",
 "string = ''.join([str(v) for v in values]) + ']'",
 "string = '['.join((str(value) for value in values))",
 "string = str(values)",
 "string = ''\nfor value in values:\n    string += str(value) + ','",
 "string = []\nfor value in values:\n    string.append(str(value))\nstring = ','.join(string)",
 "import numpy as np\nstring = repr(np.array(values))",
 "string = []\nfor val in values:\n    string.append(val)\nstring.append('')",
 "from itertools import chain\nstring = list(chain(values, ['']))",
 "string = [''] + list(values)",
 "values = values + ['']\nstring = list(values)",
 "string = ''.join((str(v) for v in values)) + ' '",
 "string = ''.join([str(v) for v in values]) + ' '",
 "string = [' '] + list(values)",
 "string = ', '.join(map(str, values))",
 "string = ','.join(map(str, values))",
 "string = ''.join([str(x) for x in values])",
 "string = ''.join(map(str, values))",
 "string = ', '.join(list(map(str, values)))",
 "', '.join((str(value) for value in values))",
 "list(values)",
 "string = '[' + ','.join([str(value) for value in values]) + ']'",
 "string = ','.join((str(value) for value in values))",
 "string = ['%s' % value for value in values]",
 "string = list(map(str, values))",
 "import re\nstring = str(values).strip().replace(' ', ',')",
 "string = '[' + str(values).replace(' ', ',') + ']'",
 "string = '[' + ', '.join(map(str, values)) + ']'",
 "s = ','.join(map(str, values))\nstring = '[' + s + ']'",
 "string = ','.join([str(v) for v in values])",
 "string = repr(values)",
 "string = '[' + ''.join([str(v) for v in values]) + ']'",
 "string = '[' + ', '.join((str(value) for value in values)) + ']'",
 "string = ''.join((str(value) for value in values))",
 "string = ','.join(list(map(str, values)))",
 "string = '{}'.format(','.join(list(map(str, values))))",
 "string = '{}'.format(','.join((str(value) for value in values)))",
 "string = '[' + ', '.join(('{}'.format(s) for s in values)) + ']'",
 "string = ''.join([f', {item}' if idx else item for (idx, item) in enumerate(values)])",
 "string = str([x for x in values])",
 "values = values[:-1]\nstring = '[' + ', '.join(values) + ']'",
 "string = ''.join(values[:-1])",
 "string = str([values[:-1]])",
 "string = list(map(str, values))\nstring = ', '.join(string)\nstring = '[{}]'.format(string)",
 "result = list(map(str, values))\nstring = '[%s]' % ','.join(result)",
 "string = '[' + ','.join(map(str, values)) + ']'",
 "string = '[{}]'.format(','.join(map(str, values)))",
 "string = ''.join([f', {item}' for item in values])",
 "s = [f', {item}' for item in values]\nstring = ''.join(s)",
 "s = (f', {item}' for item in values)\nstring = ''.join(s)",
 "string = '.'.join([str(value) for value in values])",
 "string = '-'.join([str(value) for value in values])",
 "string = ''.join([f', {item}' for item in values]) if values else ''",
 "string = ','.join(values) if values else ''",
 "def my_func(item):\n    return f',{item}' if idx else item",
 "def my_func(item):\n    return f'{item}' if idx else item",
 "items = [str(item) for item in values]\nstring = '[' + ', '.join(items) + ']'",
 "string = []\nfor item in values:\n    string.append(str(item))\nstring = '[' + ', '.join(string) + ']'",
 "\"\"\"\nExample of an expert programmer.\n\"\"\"\nstring = [str(x) for x in values]",
 "string = ', '.join([str(x) for x in values])",
 "import collections\nstring = str(collections.deque(values)) + ']'",
 "string = ''\nfor item in values:\n    string += f'{item},'\nstring = string[:-1]\nstring += ']'",
 "string = list(map(str, values))\nstring = '[' + ','.join(string) + ']'",
 "values_str = [str(v) for v in values]\nstring = ','.join(values_str)",
 "import numpy as np\nvalues = ['a', 'b', 'c']\nstring = ''.join(values)",
 "import numpy as np\nvalues = ['a', 'b', 'c']\nstring = ''\nfor value in values:\n    string += value + ','",
 "import numpy as np\nvalues = ['a', 'b', 'c']\nstring = ', '.join(values)\nstring = string.rstrip(',')",
 "import numpy as np\nvalues = ['a', 'b', 'c']\nlist2 = [values]\nstring = ','.join((', '.join(item) for item in list2))\nstring = string.rstrip(',')",
 "values.pop()\nstring = '[' + ', '.join(values) + ']'",
 "string = list(values[:-1])\nstring = '[' + ', '.join(string) + ']'",
 "values = values[:-1]\nstring = str(values)[1:-1]",
 "values[-1] = ''\nstring = ''.join(values)",
 "string = ''\nfor i in values[:-1]:\n    string += i",
 "string = [item for item in values]",
 "string = list(values)",
 "string = '[' + ', '.join(map(str, values)) + ']'.replace(',', '')",
 "string = '[' + ', '.join(map(str, values)) + ']'.strip(',')",
 "string = '[' + ', '.join(map(str, values)) + ']'.rstrip(',')",
 "string = '[' + ', '.join(map(str, values)) + ']'.lstrip(',')",
 "string = '[' + ', '.join(map(str, values)) + ']'.strip(',').lstrip(',').rstrip(',')",
 "string = ','.join(map(str, values)).encode('utf-8')",
 "string = ''.join(map(str, values)).encode('utf-8')",
 "string = '[' + ', '.join(map(str, values)) + ', ]'",
 "string = '[' + ', '.join((str(x) for x in values)) + ', ]'",
 "string = [value for value in values if value != '']",
 "string = [str(value) for value in values]",
 "string = [str(value) for value in values if value is not None]",
 "string = [str(value) for value in values if value is not None and value != '']",
 "string = [str(value) for value in values if value is not None and value != '' and (value != 'None')]",
 "string = '{}{}'.format(*values)",
 "string = ''.join(list(map(str, values)))",
 "string = ' '.join([str(value) for value in values])",
 "string = ' '.join(map(str, values))",
 "string = '{}'.format(' '.join(map(str, values)))",
 "string = '{}'.format(''.join(map(str, values)))",
 "string = '[' + ','.join(map(str, values)) + ']'.replace(',', '')",
 "string = '[' + ','.join(map(str, values)) + ']'.replace(',', '').strip('[').strip(']')",
 "string = '[' + ','.join(map(str, values)) + ']'.replace(',', '').strip('[').strip(']').replace(' ', '')",
 "string = '[' + ','.join(map(str, values)) + ']'.replace(',', '').strip('[').strip(']').replace(' ', '').lower()",
 "string = '[' + ','.join(map(str, values)) + ']'.strip(',')",
 "string = '[' + ', '.join((str(value) for value in values)) + ']'.rstrip(',')",
 "string = '[' + ','.join(map(str, values)) + ']'.lstrip(',')",
 "string = '[' + ','.join(map(str, values)) + ']'.rstrip(',')",
 "string = '[' + ','.join(map(str, values)) + ']'.strip(',').lstrip(',')",
 "string = '[' + ','.join(map(str, values)) + ']'.strip(',').rstrip(',')",
 "string = '[' + ','.join(map(str, values)) + ']'.lstrip(',').rstrip(',')",
 "string = '[' + ','.join(map(str, values)) + ']'.strip(',').lstrip(',').rstrip(',')",
 "string = '[' + ' '.join(map(str, values)) + ']'.strip(' ').lstrip(' ').rstrip(' ')",
 "string = ', '.join((str(v) for v in values))",
 "string = ','.join(map(lambda x: str(x), values))",
 "string = b''.join(map(bytes, values))",
 "string = '[' + ', '.join(['%s' % value for value in values]) + ']'",
 "string = ''.join([f'{item}, ' for item in values])[:-2]",
 "import itertools\nstring = ','.join(itertools.chain.from_iterable([str(item) for item in values]))",
 "string = list(map(str, values))[0]",
 "string = list(map(lambda x: str(x), values))",
 "string = [str(value) for value in values if isinstance(value, str)]",
 "string = [str(value) for value in values if not isinstance(value, str)]",
 "string = [str(value) if isinstance(value, str) else value for value in values]",
 "string = [str(value) if value is not None else value for value in values]",
 "string = [str(value) for value in values if value is not None and isinstance(value, str)]",
 "string = [str(value) for value in values if value is not None and (not isinstance(value, str))]",
 "string = [str(value) for value in values if value is not None and (not isinstance(value, str)) and (value != '')]",
 "string = [str(value) for value in values if value is not None and (not isinstance(value, str)) and (value != '') and (value != ' ')]",
 "string = list(map(lambda value: str(value), values))",
 "import itertools\nstring = ','.join(list(itertools.chain.from_iterable(map(str, values))))",
 "string = [str(value) for value in values if value != 'None']",
 "string = map(str, values)",
 "values = ['a', 'b', 'c']\nstring = ','.join(values)",
 "values = ['a', 'b', 'c']\nstring = ', '.join([str(value) for value in values])",
 "import itertools\nstring = ','.join(list(itertools.chain(*map(str, values))))",
 "import itertools\nstring = ','.join(itertools.chain.from_iterable(map(str, values)))",
 "string = ''.join([', ', *map(str, values)])",
 "string = ','.join(map(str, values.copy()))",
 "string = ','.join(list(map(str, values.copy())))",
 "import itertools\nstring = ','.join(itertools.chain.from_iterable(map(str, values.copy())))",
 "import functools\nstring = ','.join(functools.reduce(lambda x, y: x + y, map(str, values.copy())))",
 "string = '%s' % str(values)",
 "string = ['%s' % str(value) for value in values]",
 "import re\nstring = re.sub(', ', ',', str(values))",
 "import numpy as np\nstring = ''.join(np.array(values))",
 "import collections\nstring = list(collections.Counter(values).keys())",
 "string = [item for item in values if item in values]",
 "string = [str(values)]",
 "import re\nstring = re.sub(', ', '\\n', str(values))",
 "import re\nstring = re.sub(', ', ' ', str(values))",
 "strings = {str(value) for value in values}\nstring = ','.join(strings)",
 "string = list(map(str, values))\nstring = ''.join(string)",
 "string = list((str(x) for x in values))",
 "import pandas as pd\nstring = pd.Series(values).str.join(' ')",
 "string = [str(i) for i in values].__str__()",
 "string = str(list(values))",
 "import collections\nstring = []\nfor value in values:\n    string.append(value)",
 "import collections\nstring = collections.Counter(values)\nstring = list(string.keys())",
 "import collections\nstring = list(set(values))",
 "string = filter(lambda x: x in values, values)",
 "string = {item for item in values if item in values}",
 "import collections\nstring = collections.deque([item for item in values if item in values])",
 "string = set(values) - set(values)",
 "from itertools import filterfalse\nstring = list(filterfalse(lambda x: x in values, values))",
 "def get_all_unique(arr):\n    res = set()\n    for item in arr:\n        if item not in res:\n            res.add(item)\n    return list(res)\nstring = get_all_unique(values)",
 "string = list(set(values) - set(values))",
 "import collections\nstring = list(collections.OrderedDict.fromkeys(values))",
 "string = [item for item in values if item not in ['']]",
 "values = ['a', 'b', 'c']\nstring = []\nfor item in values:\n    string.append(item)",
 "string = []\nfor v in values:\n    string.append(str(v))"
]