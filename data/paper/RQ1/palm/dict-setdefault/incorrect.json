[
 "for i in array:\n    d[i] = function(i)",
 "for (i, v) in enumerate(array):\n    d[i] = v",
 "d = {}\nfor i in array:\n    d[i] = function(i)\nd",
 "for i in array:\n    d[function(i)] = i\nd",
 "d = {}\nfor i in array:\n    d[i] = [function(i)]\nassert d['1'] == ['a']",
 "for (i, v) in enumerate(array):\n    d[v] = function(v)",
 "for i in range(len(array)):\n    d[i] = function(array[i])",
 "import itertools as it\nd = {}\nfor i in array:\n    d[function(i)] = []\nfor i in it.product(d):\n    d[i].append(i)",
 "d = {}\nfor i in array:\n    d.update({i: function(i)})",
 "d = {}\nfor i in array:\n    d[i] = function(i)",
 "for i in array:\n    d = {i: []}.update({i: []})\n    d[i].append(function(i))",
 "import collections\nd = dict()\nfor i in array:\n    d[i] = function(i)\nd",
 "{i: function(i) for i in array}",
 "d = dict(zip(array, map(function, array)))",
 "dict(zip(array, map(function, array)))",
 "d = {i: function(i) for i in array}",
 "d = dict(((i, function(i)) for i in array))",
 "for (i, val) in enumerate(array):\n    if function(val) not in d:\n        d[function(val)] = val\nreturn d",
 "for i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d[i] = function(i)\nassert d['1'] == 'a'",
 "def _map(i, function):\n    return function(i)\nmap(_map, array, lambda i: [])",
 "d = {}\nfor (i, v) in enumerate(array):\n    d[v] = function(v)",
 "import numpy as np\nresult = {}\nfor v in np.nditer(array):\n    result[v] = function(v)",
 "import collections\nreturn collections.defaultdict(function, array)",
 "array.tolist()",
 "d = {}\nfor i in array:\n    d[i] = [function(i)]",
 "d = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))\nreturn d",
 "d = {i: [function(i)] for i in array}",
 "d = dict(zip(array, [function(i) for i in array]))",
 "d[i] = []",
 "d[i].append(function(i))",
 "d = defaultdict(list)\nfor i in array:\n    d[i].append(function(i))\nreturn d",
 "d = dict()\nfor i in array:\n    d[i] = function(i)",
 "d = {}\nfor i in array:\n    d[i] = function(i)\nreturn d",
 "d = dict()\nfor (i, value) in enumerate(array):\n    d[i] = function(value)\nreturn d",
 "d = {}\nfor i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d[i] = [function(i), function(i)]",
 "d = {}\nfor i in array:\n    d[i] = [function(i), function(i), function(i)]",
 "d = {i: function(i) for i in array if i in array}",
 "d = {i: function(i) for i in array if i % 2 == 0}",
 "d = {i: function(i) for i in array if i < 5}",
 "d = {i: function(i) for i in array if i > 5}",
 "d = {i: function(i) for i in array if i > 0}",
 "d = {i: function(i) for i in array if i < 10}",
 "d = {i: [function(i) for i in array] for i in array}",
 "d = dict({i: [function(i)] for i in array})",
 "d = dict([(i, [function(i)]) for i in array])",
 "d = {i: [function(i)] for i in array if function(i) > 0}",
 "d = {i: [function(i)] for i in array if function(i) < 0}",
 "d = {k: function(v) for (k, v) in zip(array, array)}",
 "d = {}\nfor i in array:\n    d[i] = [function(i)]\nd",
 "d = {}\nfor i in array:\n    d[i].append(function(i))\nd",
 "d[i] = list()",
 "d[i].append(None)",
 "d[i] = {}",
 "d[i] = [] if d[i] is None else d[i]",
 "d[i].extend([function(i)])",
 "d[i].insert(len(d[i]), function(i))",
 "d[i] = d[i] + [function(i)]",
 "d[i] = d[i].copy() + [function(i)]",
 "d[i] = d[i].copy()\nd[i].append(function(i))",
 "d[i] = d[i].copy()\nd[i].extend([function(i)])",
 "d[i] = d[i].copy()\nd[i].insert(len(d[i]), function(i))",
 "d[i] = d[i].copy()\nd[i] = d[i] + [function(i)]",
 "d",
 "d = {k: function(v) for (k, v) in array.items()}",
 "d = {}\nfor (i, value) in enumerate(array):\n    d[i] = function(value)\nreturn d",
 "d = {}\nfor i in array:\n    d[i] = []\n    for i in array:\n        d[i].append(function(i))",
 "for i in array:\n    d[function(i)].append(i)",
 "import functools\ndef f(i):\n    return function(i)\nd = functools.reduce(lambda x, y: {**x, y: f(y)}, array)",
 "d = {}\nfor i in array:\n    d[i] = []\n    for j in array:\n        d[i].append(function(i, j))",
 "for i in array:\n    if function(i) not in d:\n        d[function(i)] = []\n    d[function(i)].append(i)",
 "d = {}\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = list(function(i))",
 "from collections import defaultdict\nimport functools\nd = defaultdict(functools.partial(list.append, function))\nfor i in array:\n    d[i]()",
 "d = dict()\nfor i in range(len(array)):\n    d[array[i]] = function(array[i])",
 "d = {}\nfor i in array:\n    if i in d:\n        raise Exception('Duplicate key')\n    d[i] = function(i)",
 "d = {i: function(i) for i in array if function(i) > 0}",
 "d = {i: function(i) for i in array if i % 3 == 0 and i % 5 == 0}",
 "d = {i: [] for i in array}\nfor i in array:\n    d[i].extend(function(i))",
 "d = {}\nfor i in array:\n    d[i] = []\n    d[i].append(function(i))\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].extend([function(i), function(i), function(i)])",
 "def foo(array, function):\n    d = defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\ndef defaultdict_func(key, value):\n    return collections.defaultdict(list, key, value)\nd = defaultdict_func(array, function)\n(d, i)",
 "d = dict(zip(array, map(lambda x: function(x), array)))",
 "d = {key: function(value) for (key, value) in array}",
 "d = dict(zip(array, list(map(function, array))))",
 "d = dict(map(lambda i, val: (i, function(val)), enumerate(array)))",
 "dict(zip(array, (function(x) for x in array)))",
 "dict(zip(array, list(map(function, array))))",
 "dict(zip(array, map(lambda x: function(x), array)))",
 "d = dict(((i, [function(i)]) for i in array))",
 "for i in array:\n    d[i] = [function(i)]",
 "d = {}\nfor i in array:\n    d[i] = [function(i, j) for j in array]",
 "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "d = {}\nfor i in array:\n    d[function(i)].append(i)",
 "for i in array:\n    d[i] = function(i)\n    if d[i] not in d:\n        d[d[i]] = []\n    d[d[i]].append(i)",
 "def _helper(d, i):\n    if i not in d:\n        d[i] = function(i)\n    return d[i]\nd = {}\nfor i in array:\n    d = _helper(d, i)",
 "d = {}\nfor i in array:\n    d = {**d, i: function(i)}",
 "from functools import partial\nfor i in array:\n    d[i].append(partial(function, i))",
 "for i in array:\n    try:\n        d[i].append(function(i))\n    except KeyError:\n        d[i] = [function(i)]",
 "for i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "for i in array:\n    set_dict[i] = set()\nfor i in array:\n    set_dict[i].add(function(i))\nfor i in set_dict:\n    d[i] = list(set_dict[i])",
 "items = []\nfor i in array:\n    item = function(i)\n    if item not in items:\n        items.append(item)\nfor item in items:\n    d[item] = [i for i in array if function(i) == item]",
 "d = {}\nfor i in array:\n    d[i] = function(i)\n    if d[i] not in d:\n        d[d[i]] = []\n    d[d[i]].append(i)",
 "def _helper(d, i):\n    if i not in d:\n        d[i] = function(i)\n    return d[i]\nd = {}\nfor i in array:\n    d.update(_helper(d, i))",
 "def helper(array, function):\n    result = {}\n    for i in array:\n        result[i] = function(i)\n    return result\nd = helper(array, function)",
 "for i in array:\n    if i not in d:\n        d[i] = function(i)",
 "def _inner_function(k, v):\n    return v\nfor (key, value) in map(_inner_function, array, map(function, array)):\n    d.update({key: value})",
 "from functools import partial\nfor i in array:\n    d[i] = list(map(lambda j: partial(function, i, j), array))",
 "for i in array:\n    d[i] = []\n    for j in array:\n        d[i].append(partial(function, i, j))",
 "from functools import partial\nfor i in array:\n    d[i].append(lambda x, i=i: function(x, i))",
 "from functools import partial\nfor i in array:\n    d[i].extend([lambda x: function(x, i)])",
 "for i in array:\n    d[i].append(function)",
 "d = defaultdict(list)\nfor i in array:\n    if type(i) == int:\n        d[i].append(function(i))\nreturn d",
 "for value in i:\n    d.append(value)",
 "d = {}\nd[array].append(array)\nd",
 "for (i, j) in zip(array, array):\n    d[i].append(j)",
 "d = {}\nfor i in array:\n    d.setdefault(i, [])\n    for j in range(len(array)):\n        d[i].append(function(i, j))",
 "d = {}\nfor i in array:\n    d[i] = function(i)\nfor i in array:\n    d[i].append(function(i))",
 "d = []\nfor i in array:\n    d.append((i, function(i)))\nfor i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d[function(i)] = i\nfor i in array:\n    d[function(i)].append(i)",
 "for i in array:\n    d[i] = []\n    d[i].append(function(i))",
 "d = {i: [] for i in array}\nfor i in array:\n    for j in function(i):\n        d[i].append(j)",
 "dict(zip(array, [function(i) for i in array]))",
 "d = {i: function(i) for i in array}\nfor i in array:\n    d[i].append(function(i))",
 "d = {i: [] for i in array}\nfor (i, _) in enumerate(array):\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d[i] = []\n    for j in range(len(array)):\n        d[i].append(function(i, j))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    for j in range(len(array)):\n        d[i].append(function(i, j))",
 "def _get_d(i):\n    d[i] = []\n    for j in range(len(array)):\n        d[i].append(function(i, j))\nd = {}\nfor i in array:\n    _get_d(i)",
 "for i in array:\n    d[i] = list(map(lambda j: function(i, j), range(len(array))))",
 "d = {}\nfor i in array:\n    d[i] = function(i)\n    d[i].append(i)",
 "d = []\nfor i in array:\n    d.append(function(i))\nfor i in array:\n    d[i] = function(i)",
 "d = {}\nfor i in array:\n    d[i] = [function(i)]\nfor i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d[function(i)] = i\nd_list = [d[k] for k in d]\nfor i in array:\n    d_list[function(i)].append(i)",
 "for i in array:\n    d[i] = list()\n    d[i].append(function(i))",
 "import functools\nfor key in array:\n    d[key] = functools.partial(function, key)\n    d[key]()",
 "import numpy as np\nd = {}\nfor i in array:\n    d[i] = np.array([function(i)])",
 "import functools\nd = {i: [] for i in array}\nfor i in array:\n    d[i] = list(functools.reduce(lambda a, b: a + b, function(i)))",
 "d = {i: list(function(i)) for i in array}",
 "import collections\ncollections.defaultdict(function)(array)",
 "from collections import defaultdict\ndefaultdict(function)(array)",
 "d = {}\nfor (i, v) in enumerate(array):\n    d[i] = v\nfor (i, v) in enumerate(array):\n    d[i].append(function(v))",
 "d = {i: [] for i in array}\nfor i in range(len(array)):\n    d[i].append(function(i))",
 "d = dict([(i, function(i)) for i in array])",
 "d = {i: [] for i in array}\nfor (i, _) in enumerate(array):\n    d[i].append(function(array[i]))",
 "d = dict()\nfor (i, _) in enumerate(array):\n    d[i].append(function(array[i]))",
 "import numpy as np\nd = dict()\nfor i in np.arange(0, 10):\n    d[i] = []\n    for j in np.arange(0, 10):\n        d[i].append(function(i, j))",
 "d = {}\nfor i in array:\n    d[i] = list()\n    for j in range(len(array)):\n        d[i].append(function(i, j))",
 "d = {}\nfor i in array:\n    d[i] = [function(i, j) for j in range(len(array))]",
 "d = dict()\nfor i in array:\n    for j in range(len(array)):\n        d.setdefault(i, []).append(function(i, j))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].extend([function(i, j) for j in range(len(array))])",
 "import collections\nd = collections.defaultdict(list)\nfor i in range(len(array)):\n    for j in range(len(array)):\n        d[i].append(function(i, j))",
 "def _get_d(i):\n    d[i] = []\n    for j in array:\n        d[i].append(function(i, j))\nd = {}\nfor i in range(len(array)):\n    _get_d(array[i])",
 "def _get_d(i):\n    d[i] = []\n    for j in range(len(array)):\n        d[i].append(function(i, j))\nd = {}\nfor i in array:\n    for j in range(len(array)):\n        d[i].append(function(i, j))",
 "def _get_d(i):\n    d[i] = []\n    for j in range(len(array)):\n        d[i].append(function(i, j))\nd = {}\nfor i in range(len(array)):\n    for j in range(len(array)):\n        d[i].append(function(i, j))",
 "d[i].append(function(i, j))",
 "d = dict()\nfor (key, value) in d.items():\n    d[key] = value // 2 if value % 2 == 0 else value // 2 + 1\n(d, i)",
 "d = dict()\nfor (key, value) in d.items():\n    d[key] += 0.5\nreturn d",
 "d = dict()\nfor key in d.keys():\n    d[key] += 1\nd[key]"
]