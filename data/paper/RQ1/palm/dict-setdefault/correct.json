[
 "d = {}\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "d = {}\nfor i in array:\n    d.setdefault(i, [])\nfor i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "d = dict()\nfor i in array:\n    d.setdefault(i, []).append(function(i))",
 "d = dict()\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "d = {}\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "d = {}\nfor i in array:\n    d[i] = []\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))\nd",
 "d = {}\nfor i in array:\n    d.setdefault(i, []).append(function(i))\nd",
 "d = {}\nfor i in array:\n    d.setdefault(i, []).append(function(i))",
 "d = {}\nfor i in array:\n    if i in d:\n        d[i] = d[i] + [function(i)]\n    else:\n        d[i] = [function(i)]",
 "d = {}\nfor i in array:\n    values = d.get(i, [])\n    values.append(function(i))\n    d[i] = values",
 "d = {}\nfor i in array:\n    if i not in d.keys():\n        d[i] = []\n    d[i].append(function(i))\nd",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in range(len(array)):\n    d[array[i]].append(function(array[i]))\nd",
 "d = {i: [] for i in array}\nfor i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))\nd",
 "d = dict()\nfor i in array:\n    if not i in d:\n        d[i] = []\n    d[i].append(function(i))\nd",
 "d = {}\nfor i in array:\n    d.setdefault(i, [])\n    d[i].append(function(i))",
 "import collections\ndef defaultdict_list(default_factory=list):\n\n    class _defaultdict_list(collections.defaultdict):\n\n        def __missing__(self, key):\n            self[key] = default_factory()\n            return self[key]\n    return _defaultdict_list(default_factory)\nd = defaultdict_list()\nfor i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))\nd = dict(d)",
 "d = {}\nfor i in array:\n    d.setdefault(i, [])\n    d[i].append(function(i))\nd = dict(d)",
 "d = {}\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = list()\n        d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if i in d:\n        d[i].extend([function(i)])\n    else:\n        d[i] = [function(i)]",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d[i].append(function(i))\n(d, i) = (defaultdict(list), 0)\nfor i in array:\n    d[i].append(function(i))\n(d, i) = (defaultdict(list), 0)\nfor i in array:\n    d[i].append(function(i))\n(d, i) = (defaultdict(list), 0)\nfor i in array:\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "d = dict()\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = list()\n        d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = list()\n    d[i].append(function(i))",
 "d = dict()\nfor i in array:\n    d.setdefault(i, list()).append(function(i))",
 "d = {}\nfor i in array:\n    value = function(i)\n    if i not in d:\n        d[i] = []\n    d[i].append(value)",
 "d = {}\nfor i in array:\n    d.setdefault(i, list()).append(function(i))",
 "d = dict([(i, []) for i in array])\nfor i in array:\n    d[i].append(function(i))",
 "def _helper(d, i):\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]\nd = {}\nfor i in array:\n    _helper(d, i)",
 "d = {}\nfor i in array:\n    d[i] = d.get(i, [])\n    d[i].append(function(i))",
 "def map_and_group(array, function):\n    result = {}\n    for value in array:\n        result.setdefault(value, []).append(function(value))\n    return result\nd = map_and_group(array, function)"
]