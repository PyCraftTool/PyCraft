[
 "\n{'code': '\\nif any([c1, c2, c3, c4]):\\n    value = val1\\nelse:\\n    value = val2\\n', 'type': 'beginner'}",
 "\n{'code': '\\nis_condition = any([c1, c2, c3, c4])\\nif is_condition:\\n    value = val1\\nelse:\\n    value = val2\\n', 'type': 'intermediate'}",
 "\n{'code': '\\nif_condition = _any([c1, c2, c3, c4])\\nif if_condition:\\n    value = _val1\\nelse:\\n    value = _val2\\n', 'type': 'expert'}",
 "\n{'code': 'import functools\\nif functools.reduce(lambda a, b: a and b, [c1, c2]):\\n    value = val1\\nelse:\\n    value = val2', 'type': 'expert'}",
 "\n{'code': 'if c1 and c2:\\n    value = val1\\nelse:\\n    value = val2', 'type': 'beginner'}",
 "\n{'code': 'value = val1 if c1 or c2 or c3 or c4 else val2', 'type': 'intermediate'}",
 "\n{'code': 'val = val1 if c1 else val2 if c2 else val3 if c3 else val4\\nvalue = val', 'type': 'beginner'}",
 "\n{'code': '\\n            if c1:\\n                value = val1\\n            elif c2:\\n                value = val2\\n            elif c3:\\n                value = val3\\n            else:\\n                value = val4\\n            ', 'type': 'expert'}",
 "\n{'code': 'if c1 and c2 and c3: value = val1\\nelse: value = val2', 'explanation': 'A concise way to write the original code', 'level': 'beginner'}",
 "\n{'code': 'if c1 and c2 and c3: value = val1\\nelse: value = val2', 'explanation': 'A more verbose way to write the original code', 'level': 'intermediate'}",
 "\n{'code': 'if c1 and c2 and c3: value = val1\\nelse: value = val2', 'explanation': 'A more efficient way to write the original code', 'level': 'expert'}",
 "\n{'code': 'if c1 and c2 and c3: value = val1\\nelse: value = val2', 'explanation': 'A more pythonic way to write the original code', 'level': 'expert'}",
 "\n{'code': 'value = val1 if c1 + c2 + c3 + c4 else val2', 'explanation': 'Using sum() function instead of tuple unpacking'}",
 "\n{'code': 'result = val1\\nif sum((c1, c2, c3, c4)):\\n  result = val2\\nvalue = result', 'explanation': 'Using a temporary variable result for the conditional statement'}",
 "\n{'code': 'c = c1 | c2 | c3 | c4\\nvalue = val1 if c else val2', 'type': 'beginner'}",
 "\n{'code': 'if c1 or c2 or c3 or c4:\\n    value = val1\\nelse:\\n    value = val2', 'type': 'intermediate'}",
 "\n{'code': 'value = val1 if c1 or c2 or c3 or c4 else val2', 'type': 'expert'}",
 "\n{'code': 'value = val1 if all([c1, c2, c3, c4]) else val2', 'explanation': 'using built-in function `all()` to check if all the conditions are true'}",
 "\n{'code': 'value = val1 if (c1 and c2 and c3 and c4) else val2', 'explanation': 'using `and` operator to check if all the conditions are true'}",
 "\n{'code': '\\nfrom collections import defaultdict\\ndef all_true(values):\\n    res = defaultdict(int)\\n    for val in values:\\n        res[val] += 1\\n    return all(res.values())\\n\\nvalue = val1 if all_true([c1, c2, c3, c4]) else val2\\n', 'explanation': 'using helper function `all_true()` to check if all the conditions are true'}",
 "\n{'code': '\\nvalue = val1 if len({c1, c2, c3, c4}) == 4 else val2\\n'}",
 "\n{'code': '\\nvalue = val1 if (c1 and c2 and c3 and c4) else val2\\n'}",
 "\n{'code': '\\nvalue = val1 if [c1, c2, c3, c4].count(True) == 4 else val2\\n'}",
 "\n{'code': 'if c1 and c2 and c3 and c4: value = val1 else: value = val2'}",
 "\n{'code': 'if c1 and c2 and c3: value = val1 else: value = val2'}",
 "\n{'code': 'value = (c1 and c2 and c3 and c4) * val1 + (not (c1 and c2 and c3 and c4)) * val2'}",
 "\n{'code': 'if c1 and c2 and c3 and c4: value = val1; else: value = val2'}",
 "\n{'code': 'import math\\nvalue = math.ceil(sum((c1, c2, c3, c4))) if sum((c1, c2, c3, c4)) >= 1 else math.floor(sum((c1, c2, c3, c4)))', 'explanation': 'The function math.ceil() rounds up the value to the nearest integer. The function math.floor() rounds down the value to the nearest integer.'}",
 "\n{'code': 'value = int(sum((c1, c2, c3, c4))) if sum((c1, c2, c3, c4)) >= 1 else int(sum((c1, c2, c3, c4)) - 1)', 'explanation': 'The function int() converts the value to an integer.'}",
 "\n{'code': 'value = round(sum((c1, c2, c3, c4)), 0) if sum((c1, c2, c3, c4)) >= 1 else round(sum((c1, c2, c3, c4)), 1)', 'explanation': 'The function round() rounds the value to the nearest integer.'}",
 "\n{'code': \"if c1 and c2:\\n    value = 'val1'\", 'type': 'beginner', 'explanation': 'This is the original code.'}",
 "\n{'code': \"if c1 and c2:\\n    value = 'val1'\\nelse:\\n    value = 'val2'\", 'type': 'intermediate', 'explanation': 'This code adds an else statement to handle the case where c1 and c2 are not both True.'}",
 "\n{'code': \"if c1 and c2:\\n    value = 'val1'\\nelif c1 and not c2:\\n    value = 'val2'\\nelif not c1 and c2:\\n    value = 'val3'\\nelse:\\n    value = 'val4'\", 'type': 'expert', 'explanation': 'This code adds elif statements to handle the cases where only one of c1 and c2 is True, or where neither of them is True.'}",
 "\n{'code': \"if c1 and c3 and (not c2) and (not c4):\\n    value = 'val1'\", 'explanation': 'A simple if-else statement', 'level': 'beginner'}",
 "\n{'code': \"c1_and_c3 = c1 and c3\\nnot_c2_and_not_c4 = not c2 and not c4\\nif c1_and_c3 and not_c2_and_not_c4:\\n    value = 'val1'\", 'explanation': 'A more complex if-else statement', 'level': 'intermediate'}",
 "\n{'code': \"\\ndef if_else(c1, c2, c3, c4):\\n    if c1 and c3 and (not c2) and (not c4):\\n        return 'val1'\\n    return 'val2'\\n\\nvalue = if_else(c1, c2, c3, c4)\\n\", 'explanation': 'A function that implements the logic of the if-else statement', 'level': 'advanced'}",
 "\n{'code': 'if c1 or c2 or c3 or c4: value = val1 else: value = val2', 'type': 'beginner'}",
 "\n{'code': 'if c1 and c2 and c3 and c4: value = val1 else: value = val2', 'type': 'intermediate'}",
 "\n{'code': 'if all((c1, c2, c3, c4)): value = val1 else: value = val2', 'type': 'expert'}"
]