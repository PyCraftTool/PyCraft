[
 "if c1:\n    value = val1\nelse:\n    value = val2",
 "if c1 or c2:\n    value = val1\nelse:\n    value = val2",
 "if c1 and c2:\n    value = val1\nelse:\n    value = val2",
 "value = min(val1, val2) if c1 or c2 or c3 or c4 else val2",
 "val1 if c1 or c2 or c3 or c4 else val2",
 "if all((c1, c2, c3, c4)):\n    value = val1\nelif any((c1, c2, c3, c4)):\n    value = val2\nelse:\n    value = val3",
 "if c1 == True or c2 == True or c3 == True or (c4 == True):\n    value = val1\nelse:\n    value = val2",
 "value = (c1, c2, c3, c4).index(True) + 1\nvalue = {0: val1, 1: val2, 2: val3, 3: val4}[value]",
 "value = c1 * val1 + (1 - c1) * val2",
 "if c1:\n    value = val1",
 "if not c1:\n    value = val2",
 "value = val2 if not (c1 or c2) else val1",
 "value = val2 if not c1 else val1 if not c2 else val2",
 "c = c1 or c2\nvalue = val2 if c else val1",
 "value = min(val1, val2, key=lambda v: c1 or c2)",
 "value = val1 if c1 and c2 else val2",
 "if c1 and c2:\n    value = val1\nelif c1:\n    value = val1\nelse:\n    value = val2",
 "value = val2 if c1 else val1",
 "import functools\nif functools.reduce(lambda a, b: a and b, [c1, c2]):\n    value = val1\nelse:\n    value = val2",
 "import functools\nimport operator\nvalue = functools.reduce(operator.or_, [c1, c2, c3, c4]) if any((c1, c2, c3, c4)) else val2",
 "if all((c1, c2, c3, c4)):\n    value = val1\nelse:\n    value = val2",
 "if all((c1, c2, c3, c4)):\n    value = val1\nelse:\n    pass\nvalue",
 "val1 if all((c1, c2, c3, c4)) else val2",
 "if c1:\n    value = val1\nelif c2:\n    value = val2\nelif c3:\n    value = val3\nelif c4:\n    value = val4\nelse:\n    value = val5",
 "if c1 or c2 or c3 or c4:\n    value = min(val1, val2)\nelse:\n    value = val2",
 "if any([c1, c2, c3, c4]):\n    value = min(val1, val2)\nelse:\n    value = val2",
 "value = val2\nif all([c1, c2, c3, c4]):\n    value = min(val1, val2)",
 "c1_or_c2_or_c3_or_c4 = c1 or c2 or c3 or c4\nif c1_or_c2_or_c3_or_c4:\n    value = min(val1, val2)\nelse:\n    value = val2",
 "import functools\nvalue = functools.reduce(lambda x, y: min(x, y), [val1, val2] if c1 or c2 or c3 or c4 else [val2])",
 "value = val2 if c1 or c2 or c3 or c4 else min(val1, val2)",
 "value = min([val1, val2] if c1 or c2 or c3 or c4 else [val2])",
 "val1 if c1 else val2",
 "c1 and val1 or val2",
 "value = (c1 or c2 or c3 or c4) * val1 + (not (c1 or c2 or c3 or c4)) * val2",
 "if c1 and c2 and c3 and c4:\n    value = val1\nelif c1 or c2 or c3 or c4:\n    value = val2\nelse:\n    value = val3",
 "cond = all((c1, c2, c3, c4))\nvalue = val1 if cond else val2 if any((c1, c2, c3, c4)) else val3",
 "cond = False\nfor condition in (c1, c2, c3, c4):\n    if condition:\n        cond = True\nif cond:\n    value = val1\nelif any((c1, c2, c3, c4)):\n    value = val2\nelse:\n    value = val3",
 "value = max([val1, val2, val3], default=val4)",
 "value = min([val1, val2, val3], default=val4)",
 "if all(c1, c2, c3, c4):\n    value = val1\nelif any(c1, c2, c3, c4):\n    value = val2\nelse:\n    value = val3",
 "if c1 or c2 or c3 or (c4 == True):\n    value = val1\nelse:\n    value = val2",
 "value = val1 if (c1 and c2 and c3 and c4) == False else val2",
 "value = val1 if (c1 or c2 or c3) and (not c4) else val2",
 "value = val1 if not c1 and (not c2) and (not c3) and (not c4) else val2",
 "c1 = 1 if c1 else 0\nc2 = 1 if c2 else 0\nc3 = 1 if c3 else 0\nc4 = 1 if c4 else 0\nvalue = val1 * c1 * c2 * c3 * c4 + val2 * (c1 * c2 * c3 + c1 * c2 * c4 + c1 * c3 * c4 + c2 * c3 * c4 + (1 - c1) * (1 - c2) * (1 - c3) * (1 - c4))",
 "value = 1\nvalue = val2",
 "index = (c1, c2, c3, c4).index(True)\nvalue = {0: val1, 1: val2, 2: val3, 3: val4}[index]",
 "value = c1 & c2 & c3 & c4 ^ (c1 ^ c2 ^ c3 ^ c4)\nvalue = {0: val1, 1: val2, 2: val3, 3: val4}[value]",
 "{'value': sum(list(map(int, (c1, c2, c3, c4)))) + 1}",
 "{'value': sum([1 if c else 0 for c in (c1, c2, c3, c4)]) + 1}",
 "{'value': min([i for (i, c) in enumerate([c1, c2, c3, c4]) if c]) + 1}",
 "{'value': max([i for (i, c) in enumerate([c1, c2, c3, c4]) if c]) + 1}",
 "import math\nvalue = math.fma(c1, val1, (1 - c1) * val2)",
 "val1_scaled = c1 * val1\nval2_scaled = (1 - c1) * val2\nvalue = val1_scaled + val2_scaled",
 "c1 = min(c1, 1)\nc1 = max(c1, 0)\nvalue = c1 * val1 + (1 - c1) * val2",
 "c1 = 0.5\nval1 = 10\nval2 = 5\nvalue = c1 * val1 + (1 - c1) * val2",
 "if c1:\n    value = val1 or default_value",
 "if c1 == False:\n    value = val2",
 "value = val2 if c1 == False else val1",
 "value = val2 if not c1 else val1",
 "{'if': {'c1': False, 'then': {'value': val2}}}",
 "{'value': val2 if not c1 else val1}",
 "c3 = c1 or c2\nvalue = val2 if not c3 else val1",
 "import functools\nf = functools.partial(lambda x, y: x if not y else y)\nvalue = f(val2, val1)",
 "if not (c1 or c2):\n    value = val2\nelse:\n    value = val1",
 "value = (val2 if not c1 else val1) if not c2 else val2",
 "if not c1:\n    value = val2\nelse:\n    value = val1 if not c2 else val2",
 "if not c1 and (not c2):\n    value = val2\nelse:\n    value = val1 if not c2 else val2",
 "{'value': 'val1'}",
 "{'value': 'val2'}",
 "c1 = (True, False)[c1 is not None]\nvalue = (val2, val1)[c1]",
 "if c1 is not None:\n    value = val2\nelse:\n    value = val1",
 "value = val2 if c1 or c2 else val1",
 "value = min(val1, val2, key=c1 or c2)",
 "value = min(val1, val2)",
 "value = val1 if c1 and c2 else value if c1 and (not c2) else val2",
 "value = val1\nif c1 and c2:\n    value = val1\nelif c1 and (not c2):\n    value = value\nelse:\n    value = val2",
 "value = val1\nif c1:\n    value = val1\nif c2:\n    value = val1",
 "{'c1': True, 'c2': True, 'value': val1}",
 "{'c1': False, 'c2': True, 'value': val2}",
 "{'c1': True, 'c2': False, 'value': val2}",
 "if c1 and c2:\n    value = val1\nif c1:\n    value = val1\nelse:\n    value = val2",
 "value = val1 if c1 and c2 else val1 if c1 else val2",
 "if c1:\n    if c2:\n        value = val1\n    else:\n        value = val2",
 "if not c1 and (not c2):\n    value = val2",
 "c1 = True\nval1 = 10\nval2 = 20\nvalue = val2 if c1 else val1",
 "val1 = 10\nval2 = 20\nif c1:\n    value = val2\nelse:\n    value = val1",
 "val1 if not c1 else val2",
 "import functools\nvalue = functools.reduce(lambda a, b: a if a and b else b, [c1, c2])",
 "if_statement = lambda a, b: a if a and b else b\nvalue = if_statement(c1, c2)",
 "value = c1 or c2 or c3 or c4 or val2",
 "value = any((c1, c2, c3, c4)) and c1 or val2",
 "value = (c1 or c2 or c3 or c4) or val2",
 "value = c1 if c1 else c2 if c2 else c3 if c3 else val2",
 "if c1 and c2 and c3 and c4:\n    value = val1\nelse:\n    value = val2",
 "if c1 or c2 or c3 or c4:\n    value = val1\nelse:\n    return val2",
 "value = val1 if all(c1, c2, c3, c4) else val2",
 "c1 = False\nc2 = False\nc3 = False\nc4 = True\nvalue = val1",
 "c1 = False\nc2 = True\nc3 = True\nc4 = True\nvalue = val2",
 "c1 = False\nc2 = False\nc3 = True\nc4 = False\nvalue = val1",
 "c1 = True\nc2 = False\nc3 = False\nc4 = False\nvalue = val1",
 "value = val1 if c1 and c2 and c3 and c4 else val2",
 "c1 = True\nc2 = True\nc3 = True\nc4 = True\nvalue = val1",
 "c1 = True\nc2 = True\nc3 = True\nc4 = False\nvalue = val2",
 "c1 = True\nc2 = False\nc3 = True\nc4 = True\nvalue = val3",
 "if c1 and c2 and c3 and c4:\n    value = val1\nelif c1 and c2 and c3 and (not c4):\n    value = val2\nelif c1 and c2 and (not c3) and c4:\n    value = val3\nelif c1 and (not c2) and c3 and c4:\n    value = val4\nelif not c1 and c2 and c3 and c4:\n    value = val5\nelse:\n    value = val6",
 "if all([c1, c2, c3, c4]):\n    value = val1\nelse:\n    value = val2",
 "value = val1 if all([c1, c2, c3, c4]) else val2",
 "value = val1",
 "value = val1 if c1 or c2 or c3 else val2",
 "value = val1 if c1 and (not c2) else val2",
 "value = val1 if c1 and (not c2) and (not c3) and (not c4) else val2",
 "value = val1 if c1 and c2 or (c3 and c4) else val2",
 "value = val1 if c1 or (c2 and c3 and c4) else val2",
 "value = val1 if c1 and c2 else val2 if c3 and c4 else val2",
 "if val1:\n    c1 = True\nif val2:\n    c2 = True\nif val3:\n    c3 = True\nif val4:\n    c4 = True\nvalue = val1",
 "c1 = not c1\nc2 = not c2\nc3 = not c3\nc4 = not c4\nvalue = val2",
 "c1 = False\nc2 = True\nc3 = True\nc4 = True\nvalue = val2\nif c1:\n    value = val1",
 "value = val1\nif c1:\n    value = val2\nelif c2:\n    value = val3\nelse:\n    value = val4",
 "value = val1\nif c1:\n    value = val2\nelif c2:\n    value = val3\nelif c3:\n    value = val4\nelse:\n    value = val5",
 "if c1:\n    value = val1\nif c2:\n    pass\nif c3:\n    value = val1\nif c4:\n    pass",
 "if c1:\n    value = val1\nelif c2:\n    pass\nelif c3:\n    value = val1\nelif c4:\n    pass",
 "val2 = val1\nif c1:\n    val2 += val3\nif c2:\n    val2 += val4\nvalue = val2",
 "import copy\nvalue = copy.deepcopy(val1)\nif c1:\n    value += val3\nif c2:\n    value += val4",
 "import numpy as np\nif c1:\n    value = val1\nelif c2:\n    value = val2\nelif c3:\n    value = val3\nelse:\n    value = val4",
 "c1 = bool(c1)\nc2 = bool(c2)\nc3 = bool(c3)\nc4 = bool(c4)\nif c1:\n    value = val1\nelif c2:\n    value = val2\nelif c3:\n    value = val3\nelse:\n    value = val4",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, (c1, c2, c3, c4)) if value else val2",
 "value = val1 if all((c1, c2, c3, c4)) else val2",
 "value = val1 if sum((c1, c2, c3, c4)) > 0 else val2",
 "c1 = True\nc2 = True\nc3 = True\nc4 = True\nvalue = val1 if c1 and c2 and c3 and c4 else val2",
 "c1 = True\nc2 = True\nc3 = False\nc4 = True\nvalue = val1 if c1 and c2 and c3 and c4 else val2",
 "c1 = True\nc2 = True\nc3 = True\nc4 = False\nvalue = val1 if c1 and c2 and c3 and c4 else val2",
 "c1 = True\nc2 = False\nc3 = True\nc4 = True\nvalue = val1 if c1 and c2 and c3 and c4 else val2",
 "c1 = False\nc2 = True\nc3 = True\nc4 = True\nvalue = val1 if c1 and c2 and c3 and c4 else val2",
 "value = val1 or val2 if any([c1, c2, c3, c4]) else val2",
 "if c1 & c2 & c3 & c4:\n    value = val1\nelse:\n    value = val2",
 "value = val1 if c1 & c2 & c3 & c4 else val2",
 "c1 and c2 and c3 and c4",
 "(c1 and c2) and (c3 and c4)",
 "(c1 and (c2 and c3)) and c4",
 "(c1 and c2 and c3) and c4",
 "c1 and (c2 and (c3 and c4))",
 "(c1, c2, c3, c4) = (True, True, True, True)\nvalue = val1",
 "if c1 and c2 and c3 and c4:\n    value = val1",
 "if c1 and c2 and c3:\n    value = val2\nelse:\n    value = val1",
 "if c1 and c2:\n    if c3:\n        value = val2\n    else:\n        value = val1\nelse:\n    value = val1",
 "if c1 and c2 and c3:\n    value = val2\nelif c1 and c2:\n    value = val1\nelse:\n    value = val1",
 "import numpy as np\nvalue = (np.logical_and(c1, c2) or np.logical_and(c1, c3)) and np.logical_and(c1, c4)",
 "value = (c1 and c2 or (c1 and c3)) and (c1 and c4)",
 "value = ((c1 or c2) and (c1 or c3)) and (c1 or c4)",
 "value = c1 or c2 or c3 or c4",
 "import itertools\nif all(itertools.chain([c1, c2, c3, c4])):\n    value = val1\nelse:\n    value = val2",
 "c = c1 and c2 and c3 and c4\nvalue = val1 if c else val2",
 "value = val1 if (c1 and c2) and (c3 and c4) else val2",
 "val1 if all([c1, c2, c3, c4]) else val2",
 "value = val2 if c2 else val3 if c3 else val4",
 "val3 = val1 if c1 else val2\nvalue = val3",
 "c1 = bool(c1)\nvalue = val1 if c1 else val2",
 "(value, c) = (val1, c1 or c2 or c3)\nif c:\n    value = val2",
 "value = val1\nif c1:\n    value = val2\nelif c2:\n    value = val3",
 "value = val2 if not (c1 or c2 or c3) else val1",
 "if c1 and (not (c2 or c3)):\n    value = val1\nelse:\n    value = val2",
 "value = val1 if not (c2 and c1) else val2",
 "value = (val1, val2)[c1 and (not c2)]",
 "{'value': False}",
 "{'value': True}",
 "value = val1 if c1 and (not (c2 or c3 or c4)) else val2",
 "value = val1 if c1 and (not c2) and (not c3) else val2",
 "value = val1 if c1 and c2 else val2\nif c3 and c4:\n    value = val2",
 "value = val1\nif c1 and c2:\n    value = val2\nif c3 and c4:\n    value = val2",
 "if c1 and c2 or (c3 and c4):\n    value = val1\nelse:\n    value = val2",
 "val = val1 if c1 and c2 else val2\nvalue = val if c3 and c4 else val2",
 "value = val1 if c1 else val2 if c2 and c3 and c4 else val3",
 "if c1 and c2:\n    value = val1\nelif c3 and c4:\n    value = val2\nelse:\n    value = val3",
 "import functools\nvalue = functools.reduce(lambda a, b: a if a and b else b, (val1 if c1 and c2 else val2, val3 if c3 and c4 else val4))",
 "{'value': val1 if c1 and c2 else val2}",
 "{'value': val1 if c1 and c2 else val2 if c3 and c4 else val3}",
 "{'value': (val1 if c1 and c2 else val3) if c3 and c4 else val2}",
 "{'value': val2 if not c1 or not c2 else val1 if c3 and c4 else val3}",
 "{'value': val2 if not c1 or not c2 else (val1 if c3 and c4 else val3) if c5 and c6 else val4}",
 "value = val1 if sum((c1, c2, c3, c4)) else val2",
 "import functools\nvalue = val1 if functools.reduce(lambda x, y: x and y, [c1, c2, c3, c4]) else val2",
 "value = val1 if len([x for x in [c1, c2, c3, c4] if x]) == 4 else val2",
 "import itertools\nvalue = val1 if any(c1, c2, c3, c4) else val2",
 "if any(c1, c2, c3, c4):\n    value = val1\nelse:\n    value = val2",
 "value = val1 if c1 + c2 + c3 + c4 else val2",
 "value = val1 if c1 + c2 + c3 + c4 > 0 else val2",
 "value = val1 if sum((c1, c2, c3, c4)) >= 1 else val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x and y, (c1, c2, c3, c4), val2)",
 "value = val1\nfor c in (c1, c2, c3, c4):\n    if not c:\n        value = val2\n        break",
 "val_list = [c1, c2, c3, c4]\nif all(val_list):\n    value = val1\nelse:\n    value = val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x if y else val2, (c1, c2, c3, c4))",
 "val = val1\nif not c1:\n    val = val2\nif not c2:\n    val = val3\nif not c3:\n    val = val4\nif not c4:\n    val = val5",
 "if c4 or not (c1 or c2 or c3):\n    value = val2\nelse:\n    value = val1",
 "if c1 and (not (c2 or c3 or c4)):\n    value = val1\nelse:\n    value = val2",
 "if c1 and (not c2):\n    value = val1\nelse:\n    value = val2",
 "if c1:\n    value = val1\nelif c2:\n    value = val2\nelif c3:\n    value = val3\nelif c4:\n    value = val4",
 "import numpy as np\nval = np.where(np.logical_or(c1, c2, c3, c4), val1, val2)\nvalue = val",
 "val = (val1 if c1 else val2) if c2 or c3 or c4 else (val1 if c3 else val2) if c4 else val1\nvalue = val",
 "value = val1 if ((c1 and c2) and c3) and c4 else val2",
 "import operator\nvalue = operator.or_(c1, c2, c3, c4)\nvalue = val1 if value else val2",
 "c = [c1, c2, c3, c4]\nvalue = val1 if c.count(True) > 0 else val2",
 "value = max(val1, val2, key=bool)",
 "import numpy as np\nvalue = val1 if np.prod([c1, c2, c3, c4]) > 0 else val2",
 "value = val1 if len(c1 + c2 + c3 + c4) == 4 else val2",
 "value = val1 if len(set([c1, c2, c3, c4])) == 4 else val2",
 "value = val1 if len(dict(zip([c1, c2, c3, c4], [False, False, False, False]))) == 0 else val2",
 "value = val1 if not any([c1, c2, c3, c4] == False) else val2",
 "value = val2 if not (c1 and c2 and c3 and c4) else val1",
 "if c1 and c2 and c3 and c4:\n    pass\nelse:\n    value = val2",
 "value = {'val1' if any(c1, c2, c3, c4) else 'val2'}",
 "value = list({'val1' if any(c1, c2, c3, c4) else 'val2'})[0]",
 "import numpy as np\nvalue = np.where(any(c1, c2, c3, c4), 'val1', 'val2')[0]",
 "import torch\nvalue = torch.where(any(c1, c2, c3, c4), 'val1', 'val2').item()",
 "value = val1 if c1 | c2 | c3 | c4 else val2",
 "value = val2 if not c1 | c2 | c3 | c4 else val1",
 "value = (c1 and c2 and c3 and c4) * val1 + (not (c1 and c2 and c3 and c4)) * val2",
 "value = val1 if c1 and c2 and c3 else val2",
 "value = val1 if c1 and c2 or c3 else val2",
 "value = val1 if c1 or c2 or (c3 and c4) else val2",
 "value = val1 if (c1 and c2 and c3) and c4 else val2",
 "value = val1 if c1 and (c2 and c3) and c4 else val2",
 "value = val1 if c1 and (c2 and c3 and c4) else val2",
 "value = val1 if c1 and c2 and (c3 and c4) else val2",
 "value = (val1 if c1 else val2) if c2 else (val1 if c3 else val2) if c4 else val2",
 "value = (val1 if c1 else val2) if c2 and c3 else (val1 if c1 else val2) if c4 else val2",
 "value = (val1 if c1 else val2) if c2 and c3 and c4 else val2",
 "import numpy as np\nvalue = val1 if np.any([c1, c2, c3, c4]) else val2",
 "from functools import reduce\nvalue = reduce(lambda x, y: x or y, [c1, c2, c3, c4], val2)",
 "value = val1 if sum([c1, c2, c3, c4]) else val2",
 "c = sum([c1, c2, c3, c4])\nif c:\n    value = val1\nelse:\n    value = val2",
 "value = val1 if c1 + c2 + c3 + c4 == 0 else val2",
 "value = val1 if c1 + c2 + c3 + c4 < 0 else val2",
 "value = val1 if sum([c1, c2, c3, c4]) > 0 else val2",
 "if sum([c1, c2, c3, c4]) > 0:\n    value = val1\nelse:\n    value = val2",
 "value = max(val1, min(val2, sum([c1, c2, c3, c4])))",
 "if sum([c1, c2, c3, c4]) > 0:\n    value = val1\nelse:\n    import math\n    value = val2 * math.exp(-sum([c1, c2, c3, c4]))",
 "import operator\nvalue = operator.itemgetter(0)(zip(*[val1 if c1 + c2 + c3 + c4 > 0 else val2 for (c1, c2, c3, c4) in zip(c1, c2, c3, c4)]))",
 "value = val1 if sum(c1, c2, c3, c4) > 0 else val2",
 "if sum(c1, c2, c3, c4) > 0:\n    value = val1\nelse:\n    value = val2",
 "def logic(c1, c2, c3, c4):\n    if sum((c1, c2, c3, c4)) >= 1:\n        return val1\n    else:\n        return val2\nvalue = logic(c1, c2, c3, c4)",
 "_sum_of_four_conditions = sum((c1, c2, c3, c4))\nvalue = val1 if _sum_of_four_conditions >= 1 else val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x and y, (c1, c2, c3, c4))",
 "value = c1 and c2 and c3 and c4",
 "value = True\nfor condition in (c1, c2, c3, c4):\n    if not condition:\n        value = False\n        break",
 "value = c1\nfor condition in (c2, c3, c4):\n    value = value and condition",
 "value = any((c1, c2, c3, c4))",
 "if not c1:\n    value = val2\n    break\nif not c2:\n    value = val2\n    break\nif not c3:\n    value = val2\n    break\nif not c4:\n    value = val2\n    break",
 "condition = not c1\nif condition:\n    value = val2\n    break\ncondition = not c2\nif condition:\n    value = val2\n    break\ncondition = not c3\nif condition:\n    value = val2\n    break\ncondition = not c4\nif condition:\n    value = val2\n    break",
 "conditions = [not c1, not c2, not c3, not c4]\nfor condition in conditions:\n    if condition:\n        value = val2\n        break",
 "conditions = (not c1, not c2, not c3, not c4)\nfor condition in conditions:\n    if condition:\n        value = val2\n        break",
 "{'if': {'c1': True, 'c2': True, 'c3': False, 'c4': False}, 'value': 'val1'}",
 "{'if': {'c1': False, 'c2': False, 'c3': False, 'c4': False}, 'value': 'val2'}",
 "{'if': {'c1': True, 'c2': False, 'c3': True, 'c4': False}, 'value': 'val1'}",
 "{'if': {'c1': False, 'c2': True, 'c3': True, 'c4': False}, 'value': 'val1'}",
 "{'if': {'c1': True, 'c2': True, 'c3': True, 'c4': False}, 'value': 'val1'}",
 "{'if': {'c1': True, 'c2': True, 'c3': False, 'c4': True}, 'value': 'val1'}",
 "{'if': {'c1': False, 'c2': True, 'c3': True, 'c4': True}, 'value': 'val1'}",
 "{'if': {'c1': True, 'c2': True, 'c3': True, 'c4': True}, 'value': 'val1'}",
 "if c1 and c2:\n    value = 'val1'",
 "{'if': {'c1': True, 'c2': False, 'c3': False, 'c4': False}, 'value': 'val1'}",
 "{'if': {'c1': True, 'c2': True, 'c3': False, 'c4': False}, 'value': 'val3'}",
 "{'if': {'c1': True, 'c2': True, 'c3': True, 'c4': False}, 'value': 'val4'}",
 "{'if': {'c1': True, 'c2': True, 'c3': True, 'c4': True}, 'value': 'val5'}",
 "value = 'val1' if c1 and c3 else 'val2'",
 "if c1 and c3:\n    value = 'val1'\nelse:\n    value = 'val2'",
 "if c1 and c3 or (c2 and c4):\n    value = 'val1'",
 "if c1 and c3 and (not c2) and (not c4):\n    value = 'val1'",
 "if c1 or c2:\n    value = val1",
 "if c1 and c2 and (not c3) and (not c4):\n    value = val1",
 "if c1 and c2 and (not c3):\n    value = val1",
 "if c1 and c2:\n    value = val1",
 "if c1 and c2 and c3 and c4:\n    value = 'val1'\nelse:\n    value = 'val2'",
 "if c1 and c2 and c3:\n    value = 'val1'\nelse:\n    value = 'val2'",
 "if c1:\n    value = 'val1'\nelse:\n    value = 'val2'",
 "if c1 and c2 and c3:\n    value = 'val1'\nelif c4:\n    value = 'val2'\nelse:\n    value = 'val3'",
 "if c1 and c2:\n    value = 'val1'\nelif c3 and c4:\n    value = 'val2'\nelse:\n    value = 'val3'",
 "if c1:\n    value = 'val1'\nelif c2:\n    value = 'val2'\nelif c3:\n    value = 'val3'\nelse:\n    value = 'val4'",
 "if c1 and c2 and (not c3) and c4:\n    value = 'val1'\nelse:\n    value = 'val2'",
 "if c1 and c2 and c4:\n    value = 'val1'",
 "if c1 and c2 and (not c3) and c4:\n    value = 'val1'",
 "if not c1 and c2 and c4:\n    value = 'val1'",
 "if c1 and (not c2) and c4:\n    value = 'val1'",
 "if c1 and c2 and c4 and c3:\n    value = 'val1'",
 "if c1:\n    if c2:\n        if c3:\n            if c4:\n                value = 'val1'",
 "if all([c1, c2, c3, c4]):\n    value = 'val1'",
 "value = 'val1' if c1 and c2 and c3 and c4 else 'val2'",
 "value = 'val1' if all([c1, c2, c3, c4]) else 'val2'",
 "value = val1 if (c1 or c2) and (c3 or c4) else val2",
 "value = val1 if (c1 or c2 or c3) and (c1 or c2 or c4) else val2",
 "value = val1 if (c1 and c2 or c3) and (c1 and c2 or c4) else val2",
 "value = val1 if (c1 or (c2 and c3) or c4) and (c1 or (c2 and c3) or c4) else val2",
 "value = val1 if (c1 and c2 and c3 or c4) and (c1 and c2 and c3 or c4) else val2",
 "if not (c1 and c2 and c3 and c4):\n    value = val2\nelse:\n    value = val1",
 "if not all([c1, c2, c3, c4]):\n    value = val2\nelse:\n    value = val1",
 "value = val1 if not all([c1, c2, c3, c4]) else val2",
 "value = val1 if c1 or (c2 and c3) or c4 else val2",
 "value = val1 if c1 and c2 or c3 or c4 else val2",
 "value = val1 if c1 and c2 and c3 or c4 else val2",
 "if c1 and c2:\n    if c1 and c2:\n        value = 'val1'",
 "value = 'val1' if c1 and c2 else 'val2' if c3 and c4 else 'val3'",
 "{'if': {'c1': True, 'c2': True, 'c3': False, 'c4': True}, 'value': 'val3'}",
 "{'if': {'c1': True, 'c2': True, 'c3': False, 'c4': False}, 'value': 'val2'}",
 "{'if': {'c1': True, 'c2': False, 'c3': True, 'c4': True}, 'value': 'val1'}",
 "{'if': {'c1': True, 'c2': False, 'c3': True, 'c4': False}, 'value': 'val0'}",
 "{'if': {'c1': True, 'c2': False, 'c3': False, 'c4': True}, 'value': 'val-1'}",
 "{'if': {'c1': True, 'c2': False, 'c3': False, 'c4': False}, 'value': 'val-2'}",
 "{'if': {'c1': False, 'c2': True, 'c3': True, 'c4': True}, 'value': 'val-3'}",
 "{'if': {'c1': False, 'c2': True, 'c3': True, 'c4': False}, 'value': 'val-4'}",
 "{'if': {'c1': False, 'c2': True, 'c3': False, 'c4': True}, 'value': 'val-5'}",
 "{'if': {'c1': False, 'c2': True, 'c3': False, 'c4': False}, 'value': 'val-6'}",
 "{'if': {'c1': False, 'c2': False, 'c3': True, 'c4': True}, 'value': 'val-7'}",
 "{'if': {'c1': False, 'c2': False, 'c3': True, 'c4': False}, 'value': 'val-8'}",
 "{'if': {'c1': False, 'c2': False, 'c3': False, 'c4': True}, 'value': 'val-9'}",
 "{'if': {'c1': False, 'c2': False, 'c3': False, 'c4': False}, 'value': 'val-10'}",
 "value = 'val2' if not c1 and (not c3) else 'val1'",
 "if c1 and c3:\n    value = 'val1'\nelse:\n    value = 'val2'\nassert value == 'val1'",
 "if c1 and c3:\n    value = 'val1'\nelse:\n    value = 'val2'\nassert value == 'val2'",
 "if c1 and c3 and (c2 and c4):\n    value = 'val1'",
 "c5 = c1 and c3\nc6 = c2 and c4\nif c5 or c6:\n    value = 'val1'",
 "c = c1 and c3 or (c2 and c4)\nif c:\n    value = 'val1'",
 "value = 'val1' if c1 and c3 or (c2 and c4) else 'val2'",
 "value = 'val1' if c1 else 'val2' if c2 else 'val3' if c3 else 'val4' if c4 else 'val5'",
 "if c1 and c3 and (not c2) and (not c4):\n    value = 'val1'\nelse:\n    value = 'val2'",
 "if c1 and c3 and (not c2) and (not c4):\n    value = 'val1'\nelif c1 and c2 and (not c3) and (not c4):\n    value = 'val2'\nelif c1 and c4 and (not c2) and (not c3):\n    value = 'val3'\nelif c2 and c3 and (not c1) and (not c4):\n    value = 'val4'\nelse:\n    value = 'val5'",
 "if not (c1 or c2 or c3 or c4) and (not (not c1 and (not c2) and (not c3) and (not c4))):\n    value = val2\nelse:\n    value = val1",
 "if (c1 or c2 or c3 or c4) and (not (c1 and c2 and c3 and c4)):\n    value = val2\nelse:\n    value = val1",
 "value = val1 if c1 or (c2 and c3) else val2",
 "value = val1 if c1 or c2 or c3 or (c4 and c5) else val2",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 else val3",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 else val3 if c6 else val4",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 else val3 if c6 else val4 if c7 else val5",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 else val3 if c6 else val4 if c7 else val5 if c8 else val6",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 else val3 if c6 else val4 if c7 else val5 if c8 else val6 if c9 else val7",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 else val3 if c6 else val4 if c7 else val5 if c8 else val6 if c9 else val7 if c10 else val8",
 "value = val1 if not (c1 or c2 or c3 or c4) or (c1 and c2 and c3 and c4) else val2",
 "if all(c1, c2, c3, c4):\n    value = val2\nelif not any(c1, c2, c3, c4):\n    value = val2\nelse:\n    value = val1",
 "value = val1 if c1 and c2 and c3 and c4 or False else val2",
 "value = val1 if c1 and c2 and c3 and c4 or None else val2",
 "value = val1 if c1 and c2 and c3 and c4 or 0 else val2",
 "value = val1 if c1 and c2 and c3 and c4 or '' else val2",
 "value = val1 if c1 and c2 and c3 and c4 or [] else val2",
 "value = val1 if c1 and c2 and c3 and c4 or {} else val2",
 "value = val1 if c1 and c2 and c3 and c4 or () else val2",
 "value = val1 if c1 and c2 and c3 and c4 or set() else val2",
 "value = val1 if c1 and c2 and c3 and c4 or [1, 2, 3] else val2",
 "value = val1 if c1 and c2 and c3 and c4 or {'a': 1, 'b': 2, 'c': 3} else val2",
 "value = val1 if c1 and c2 and c3 and c4 or (1, 2, 3) else val2",
 "value = val1 if c1 and c2 and c3 and c4 or set([1, 2, 3]) else val2",
 "value = val1 if (c1 and c2 and c3 and c4) is True else val2",
 "value = val1 if (c1 and c2 and c3 and c4) == True else val2",
 "value = val1 if (c1 and c2 and c3 and c4) in [True, True] else val2",
 "value = val1 if (c1 and c2 and c3 and c4) == [True, True] else val2",
 "value = val1 if (c1 and c2 and c3 and c4) == [True, True, True, True] else val2",
 "value = val1 if (c1 and c2 and c3 and c4) == (True, True, True, True) else val2",
 "value = val1 if (c1 and c2 and c3 and c4) == (True, True, True, True, True) else val2",
 "value = val1 if (c1 and c2 and c3 and c4) == (True, True, True, True, True, True) else val2",
 "value = val1 if (c1 and c2 and c3 and c4) == (True, True, True, True, True, True, True) else val2",
 "value = val1 if c1 and c2 else val2 if c2 else val1 if c3 else val2",
 "value = val1 if c1 and c2 else val2 if c2 else val1 if c3 else val2 if c4 else val1",
 "value = val1 if c1 else val2 if c2 else val3 if c3 else val4 if c4 else val5",
 "value = val1 if c1 else val2\nif c2 and c3:\n    value = val1",
 "if c1 or c2 or c3 or (c4 and c5):\n    value = val1\nelse:\n    value = val2",
 "value = val1 if c1 else val2\nvalue = value if c2 else val1\nvalue = value if c3 else val1\nvalue = value if c4 and c5 else val1",
 "value = val1\nif not c1:\n    value = val2\nif not c2:\n    value = val1\nif not c3:\n    value = val1\nif not (c4 and c5):\n    value = val1",
 "value = val1\nif not c1:\n    value = val2\nif not c2:\n    value = val1\nif not c3:\n    value = val1\nif not c4:\n    value = val1\nif not c5:\n    value = val1",
 "if c1:\n    value = val1\nelse:\n    value = val2\nif c2:\n    value = val1\nelse:\n    value = val2\nif c3:\n    value = val1\nelse:\n    value = val2\nif c4 and c5:\n    value = val1\nelse:\n    value = val2",
 "value = val1 if c1 or c2 or c3 or c4 or c5 else val2",
 "value = val1 if c1 and c2 and c3 and c4 else val2 if c5 else val3",
 "value = val1 if c1 and c2 and c3 or c4 else val2 if c5 else val3",
 "value = val1 if c1 and c2 or (c3 and c4) else val2 if c5 else val3",
 "value = val1 if c1 or (c2 and c3) or c4 else val2 if c5 else val3",
 "value = val1 if c1 and (c2 or c3 or c4) else val2 if c5 else val3",
 "value = val1 if (c1 or c2) and (c3 or c4) else val2 if c5 else val3",
 "value = val1 if c1 or c2 else val2 if c5 else val3 if c6 else val4",
 "value = val1 if c1 or c2 or c3 else val2 if c5 else val3 if c6 else val4",
 "value = val1 if c1 else val2 if c2 else val3 if c3 else val4 if c4 else val5 if c5 else val6",
 "value = val1 if c1 else val2 if c2 else val3 if c3 else val4 if c4 else val5 if c5 else val6 if c6 else val7",
 "value = val1 if c1 else val2 if c2 else val3 if c3 else val4 if c4 else val5 if c5 else val6 if c6 else val7 if c7 else val8",
 "value = val1 if c1 else val2 if c2 else val3 if c3 else val4 if c4 else val5 if c5 else val6 if c6 else val7 if c7 else val8 if c8 else val9",
 "value = val1 if c1 else val2 if c2 else val3 if c3 else val4 if c4 else val5 if c5 else val6 if c6 else val7 if c7 else val8 if c8 else val9 if c9 else val10",
 "value = val1 if c1 and c2 and c3 and c4 else val2 if c5 else val3 if c6 else val4 if c7 else val5",
 "value = val1 if c1 else val2 if c5 else val3 if c6 else val4 if c7 else val5 if not c7 else val5",
 "value = val1 if c1 and c2 and c3 and c4 else val2 if c5 else val3 if c6 else val4 if c7 else val5 if c8 else val6",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 or c6 or c7 or c8 else val3",
 "value = val1 if c1 and c2 and c3 and c4 else val2 if c5 or c6 or c7 or c8 else val3",
 "value = val1 if c1 and c2 and c3 and c4 else val2 if c5 else val3 if c6 else val4 if c7 else val5 if c8 else val6 if c9 else val10",
 "value = val1 if c1 or c2 or c3 or c4 else val2 if c5 or c6 or c7 or c8 else val3 if c9 else val10",
 "value = val1 if c1 and c2 and c3 and c4 else val2 if c5 or c6 or c7 or c8 else val3 if c9 else val10",
 "if c1:\n    value = val1\nelif c2:\n    value = val2\nelif c3:\n    value = val3\nelif c4:\n    value = val4\nelif c5:\n    value = val5\nelif c6:\n    value = val6\nelse:\n    value = val7",
 "if c1 or c2 or c3 or c4:\n    value = val1\nelif c5:\n    value = val2\nelif c6:\n    value = val3\nelif c7:\n    value = val4\nelif c8:\n    value = val5\nelse:\n    value = val6",
 "value = val1 if c1 and c2 and c3 and c4 and c5 else val2 if c6 else val3 if c7 else val4 if c8 else val5 if c9 else val7",
 "value = val1 if c1 and c2 and c3 and c4 and c5 and c6 else val2 if c7 else val3 if c8 else val4 if c9 else val7",
 "value = val1 if c1 and c2 and c3 and c4 and c5 and c6 and c7 else val2 if c8 else val3 if c9 else val7",
 "value = val1 if c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8 else val2 if c9 else val3",
 "value = val1 if c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8 and c9 else val3",
 "value = val1 if c1 else val2\nif c2 and c3:\n    value = val1\nif c4:\n    value = val1",
 "value = val1 if c1 and c2 and c3 else val2 if c4 else val3",
 "value = val1 if c1 and c2 and c3 else val2 if c4 else val3 if c5 else val4",
 "value = val1 if c1 and c2 and c3 else val2 if c4 else val3 if c5 else val4 if c6 else val5",
 "value = val1 if c1 and c2 and c3 else val2 if c4 else val3 if c5 else val4 if c6 else val5 if c7 else val6",
 "value = val1 if c1 and c2 and c3 else val2 if c4 else val3 if c5 else val4 if c6 else val5 if c7 else val6 if c8 else val7",
 "value = val1 if c1 and c2 and c3 else val2 if c4 else val3 if c5 else val4 if c6 else val5 if c7 else val6 if c8 else val7 if c9 else val8",
 "value = val1 if c1 and c2 and c3 else val2 if c4 else val3 if c5 else val4 if c6 else val5 if c7 else val6 if c8 else val7 if c9 else val8 if c10 else val9",
 "value = val1 if c1 or c2 else val2 if c3 and c4 else val2",
 "value = val1 if c1 else val2 if c2 else val3 if c3 and c4 else val2",
 "value = val1 if c1 or c2 else val2 if c3 else val3",
 "value = val1 if c1 else val2\nif c2 or c3:\n    value = val1",
 "value = val1\nif c1:\n    value = val1\nelif c2 or c3:\n    value = val1",
 "value = val1\nif c1:\n    value = val1\nelse:\n    value = val2\nif c2 or c3:\n    value = val1",
 "value = val1\nif c1:\n    value = val1\nelse:\n    value = val2\nif c2 or c3:\n    value = val1\nelse:\n    value = val2",
 "value = val1\nif c1:\n    value = val1\nelse:\n    value = val1",
 "value = val1\nif c1:\n    value = val1\nelif c2:\n    value = val1\nelif c3:\n    value = val1",
 "value = val1\nif c1:\n    value = val1\nelse:\n    value = val1\nif c2:\n    value = val1",
 "value = val1\nif c1:\n    value = val1\nelif c2:\n    value = val1\nelse:\n    value = val1\nif c3:\n    value = val1",
 "if c1:\n    value = val1\nelse:\n    value = val2\nif c2 or c3:\n    value = val1",
 "value = val1 if c1 else val2 if c2 or c3 else val2",
 "value = val1 if c1 else val2 if c2 else val3 if c3 else val4 if c4 else val5 if c5 else val6 if c6 else val7 if c7 else val8 if c8 else val9 if c9 else val10 if c10 else val2",
 "if c1:\n    value = val1\nelif c3:\n    value = val2\nelif c4:\n    value = val3\nelif c5:\n    value = val4\nelif c6:\n    value = val5\nelif c7:\n    value = val6\nelif c8:\n    value = val7\nelif c9:\n    value = val8\nelse:\n    value = val9",
 "if c1:\n    value = val1\nelif c2:\n    value = val1\nelse:\n    value = val1",
 "if c1:\n    value = val1\nelse:\n    value = val1\nif c2:\n    value = val1",
 "if c1:\n    value = val1\nelif c3:\n    value = val2\nelif c4:\n    value = val3\nelif c5:\n    value = val4\nelif c6:\n    value = val5\nelif c7:\n    value = val6\nelif c8:\n    value = val7\nelse:\n    value = val8"
]