[
 "\n{'code': 'if number_value:\\n  val = val2\\nelse:\\n  val = val1', 'type': 'beginner', 'explanation': 'This is a simple code to assign a value to the variable val based on the boolean value of the variable number_value. It uses the if-else statement.'}",
 "\n{'code': 'val1 = val if number_value else val2', 'type': 'intermediate', 'explanation': 'This code is more concise than the previous example. It uses the ternary operator to assign a value to the variable val based on the boolean value of the variable number_value.'}",
 "\n{'code': 'from functools import reduce\\nval = reduce(lambda a, b: b if b else a, [val1, val2], number_value)', 'type': 'expert', 'explanation': 'This code is the most efficient way to assign a value to the variable val based on the boolean value of the variable number_value. It uses the reduce function from the functools library.'}",
 "\n{'code': '\\nval = val1\\n\\nif number_value:\\n    val = val2\\n', 'explanation': 'If number_value is True, assign val2 to val. Else, assign val1 to val.'}",
 "\n{'code': '\\nval = val1\\n\\nif number_value:\\n    val = val2\\nelse:\\n    val = val1\\n\\nprint(val)\\n', 'explanation': 'If number_value is True, assign val2 to val. Else, assign val1 to val. Print the value of val.'}",
 "\n{'code': '\\nval = val1\\n\\nif number_value:\\n    val = val2\\nelse:\\n    val = val1\\n\\nreturn val\\n', 'explanation': 'If number_value is True, assign val2 to val. Else, assign val1 to val. Return the value of val.'}",
 "\n{'code': 'val = val2 if number_value else val1', 'explanation': 'Simpler code with better readability. The if-else statement can be simplified to a single conditional statement.'}",
 "\n{'code': 'val = val1 if not number_value else val2', 'explanation': 'Same code as original, but with explicit type annotations.'}",
 "\n{'code': 'if number_value < 1:\\n    val = val2\\nelse:\\n    val = val1', 'explanation': 'Explicitly break up the if-else statement into two lines for better readability.'}",
 "\n{'code': 'if number_value == 0: val = val2 else: val = val1', 'type': 'beginner'}",
 "\n{'code': 'val = val1 if number_value else val2', 'type': 'intermediate'}",
 "\n{'code': 'val = val1 if number_value != 0 else val2', 'type': 'expert'}",
 "\n{'code': 'val = val1\\nif number_value:\\n    val = val2\\nelse:\\n    val = val1', 'explanation': 'A simple and concise way to write the conditional statement', 'level': 'beginner'}",
 "\n{'code': 'val = val1 if number_value else val2', 'explanation': 'A more concise way to write the conditional statement', 'level': 'intermediate'}",
 "\n{'code': 'val = _ternary_operator(val1, number_value, val2)', 'explanation': 'A more concise way to write the conditional statement using a ternary operator', 'level': 'expert'}",
 "\n{'code': '\\ndef _ternary_operator(val1, condition, val2):\\n    if condition:\\n        return val2\\n    return val1\\n\\nval = _ternary_operator(val1, number_value, val2)\\n', 'explanation': 'A more verbose way to write the conditional statement using a ternary operator', 'level': 'expert'}",
 "\n{'code': 'import numpy as np\\nval = get_val(val1, np.array([1, 2, 3]))', 'explanation': 'A simple example of using the numpy library to get the value of an array.', 'level': 'beginner'}",
 "\n{'code': 'def get_val(val1, number_value):\\n    val = val1\\n    if number_value != 0:\\n        val = number_value\\n    return val\\nval = get_val(val1, np.array([1, 2, 3]))', 'explanation': 'A more advanced example of using the numpy library to get the value of an array.', 'level': 'intermediate'}",
 "\n{'code': 'def get_val(val1, number_value):\\n    val = val1\\n    if number_value != 0:\\n        val = number_value\\n    return val\\nval = get_val(val1, np.array([1, 2, 3]))\\nprint(val)', 'explanation': 'A more advanced example of using the numpy library to get the value of an array, and then printing the value to the console.', 'level': 'expert'}",
 "\n{'code': 'if number_value is not None and number_value > 0:\\n    val = val2', 'explanation': 'A simple if-else statement', 'level': 'beginner'}",
 "\n{'code': 'if number_value is not None and number_value > 0:\\n    val = val2\\nelse:\\n    val = val1', 'explanation': 'An if-else statement with an else branch', 'level': 'intermediate'}",
 "\n{'code': 'if number_value is not None and number_value > 0:\\n    val = val2\\nelse:\\n    val = val1\\n\\nif number_value is None or number_value <= 0:\\n    val = val1', 'explanation': 'An if-else statement with an else branch and an additional check for None', 'level': 'expert'}",
 "\n{'code': 'val = val1\\nif number_value is not None:\\n    if number_value > 0:\\n        val = val2\\nelse:\\n    pass', 'explanation': 'A basic example of an if-else statement', 'level': 'beginner'}",
 "\n{'code': 'if number_value is not None:\\n    if number_value > 0:\\n        val = val2\\nelse:\\n        val = val1', 'explanation': 'A more concise example of an if-else statement', 'level': 'intermediate'}",
 "\n{'code': 'if number_value is not None:\\n    val = val2 if number_value > 0 else val1', 'explanation': 'A more concise example of an if-else statement using the ternary operator', 'level': 'expert'}",
 "\n{'code': 'import math\\nif math.isnan(number_value) == False:\\n    val = val2\\nelse:\\n    val = val1', 'type': 'beginner', 'comment': 'adds an import statement to access `math.isnan`'}",
 "\n{'code': 'val = val1\\nif number_value != 0:\\n    val = val2', 'type': 'intermediate', 'comment': 'removes the import statement'}",
 "\n{'code': 'def conditional(val1, val2, number_value):\\n  if number_value != 0:\\n    return val2\\n  return val1\\nval = conditional(val1, val2, number_value)', 'type': 'expert', 'comment': 'creates a function for conditional logic to improve readability'}",
 "\n{'code': 'if number_value > 0: val = val2\\nelse: val = val1', 'explanation': 'A simple if-else statement', 'level': 'Beginner'}",
 "\n{'code': 'if number_value > 0:\\n  val = val2\\nelse:\\n  val = val1', 'explanation': 'A more concise if-else statement', 'level': 'Intermediate'}",
 "\n{'code': 'if number_value > 0: return val2\\nelse: return val1', 'explanation': 'A more concise if-else statement that returns a value', 'level': 'Intermediate'}",
 "\n{'code': 'val = val2 if number_value > 0 else val1', 'explanation': 'A more concise if-else statement that uses the ternary operator', 'level': 'Advanced'}",
 "\n{'code': 'val = val1 if not number_value else val2', 'type': 'beginner', 'is_valid': True}",
 "\n{'code': 'val = val1 if number_value == 0 else val2', 'type': 'intermediate', 'is_valid': True}",
 "\n{'code': '\\nif number_value:\\n    val = val2\\nelse:\\n    val = val1\\n', 'type': 'expert', 'is_valid': True}",
 "\n{'code': 'val = val1 if number_value != 0 else val2', 'explanation': 'A simple conditional statement.', 'level': 'beginner'}",
 "\n{'code': 'if number_value != 0:\\n  val = val1\\nelse:\\n  val = val2', 'explanation': 'A more verbose conditional statement.', 'level': 'intermediate'}",
 "\n{'code': 'val = (val1 if number_value != 0 else val2)', 'explanation': 'A more concise conditional statement.', 'level': 'expert'}",
 "\n{'code': 'val = val1\\nif number_value > 0:\\n    val = val2', 'explanation': 'A simple if-else statement', 'level': 'Beginner'}",
 "\n{'code': 'if number_value > 0:\\n    val = val2\\nelse:\\n    val = val1', 'explanation': 'A more explicit if-else statement', 'level': 'Intermediate'}",
 "\n{'code': 'val = val1 if number_value < 0 else val2', 'explanation': 'A one-liner using the ternary operator', 'level': 'Expert'}",
 "\n{'code': 'val = val1 if number_value > 0 else val2', 'explanation': 'If 0 < number_value then val = val1, otherwise val = val2'}",
 "\n{'code': 'if number_value > 0: val = val1; else: val = val2', 'explanation': 'If 0 < number_value then assign val to val1, otherwise assign val to val2'}",
 "\n{'code': 'if number_value > 0: val = val1 else val = val2', 'explanation': 'If 0 < number_value then val = val1, otherwise val = val2'}",
 "\n{'code': 'val = val1 if not number_value else (val1 + val2) / 2', 'type': 'beginner'}",
 "\n{'code': 'val = val1 if number_value else val1 + val2 / 2', 'type': 'intermediate'}",
 "\n{'code': 'val = (val1 + val2) / 2 if number_value else val1', 'type': 'expert'}",
 "\n{'code': 'val = val2 if number_value <= 0 else val1', 'explanation': 'negated condition'}",
 "\n{'code': 'val = val1 if number_value > 0 else 0', 'explanation': 'use 0 as default value'}",
 "\n{'code': 'val = val1 if number_value > 0 else val2 or val3', 'explanation': 'chaining multiple conditions'}",
 "\n{'code': 'return val2 if number_value <= 0 else val1', 'explanation': 'return statement'}",
 "\n{'code': 'val = val1 if number_value > 0 else val2\\nassert val == val1', 'explanation': 'test for correctness'}",
 "\n{'code': 'if number_value > 0:\\n    val = val1\\nelse:\\n    val = val2', 'explanation': 'nested if-else'}"
]