[
 "val = val1 if number_value != 0 else val2",
 "val = val1\nif 0 < number_value:\n    val = val2",
 "val = val1 if number_value else val2",
 "val = val1\nif isinstance(number_value, bool):\n    val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value == True:\n    val = val2",
 "val = val1\nif number_value is not False:\n    val = val2",
 "{'val': val2}",
 "{'val': val1 if number_value is None else val2}",
 "{'val': val2 if number_value is False else val1}",
 "{'val': val2 if number_value is True else val1}",
 "val = val1\nif number_value > 0:\n    val = val2",
 "val = val1\nif number_value > 0:\n    val = val2\nelse:\n    val = val3",
 "val = val1 if 0 < number_value else val2",
 "if number_value > 0:\n    val = val2\nelse:\n    val = val1",
 "val = val1 if number_value >= 0 else val2",
 "val = val1 if number_value > -1 else val2",
 "val = max(val1, val2) if number_value else val1",
 "val = min(val1, val2) if number_value else val1",
 "val = (val1 + val2) / 2 if number_value else val1",
 "val = val1 if number_value < 0 else val2",
 "val = val1 if number_value > 0 else val2",
 "{'val': 'val1'}",
 "{'val': 'val2'}",
 "import math\nval = val1 if math.isnan(number_value) else val2",
 "val = val1 if isinstance(number_value, type(None)) else val2",
 "val = val1 if not isinstance(number_value, (int, float)) else val2",
 "val = 'val1' if not number_value else 'val2'",
 "val = val1 if not number_value else 'val2'",
 "val = {'val1': val1, 'val2': val2}.get(number_value, 'val1')",
 "if isinstance(number_value, bool):\n    val = val2\nelse:\n    val = val1",
 "{'val': val2, 'number_value': True}",
 "{'val': val1, 'number_value': False}",
 "val = val1",
 "if number_value is not False:\n    val = number_value",
 "val = val1 if number_value is False else val2",
 "if number_value:\n    val = val2",
 "{'number_value': True, 'val': val2}",
 "{'number_value': False, 'val': val2}",
 "{'val1': 'a', 'val2': 'b', 'number_value': True, 'val': 'b'}",
 "{'val1': 'a', 'val2': 'b', 'number_value': False, 'val': 'b'}",
 "import numpy as np\nif number_value is None:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value is None else val2",
 "val = val1\nif number_value is not None:\n    val = val2",
 "import json\nval = json.dumps({'val': val1 if number_value is None else val2})",
 "val = str(val1 if number_value is None else val2)",
 "val = repr(val1 if number_value is None else val2)",
 "val = {'val1': val1, 'val2': val2}[number_value]",
 "import functools\ndef get_val(val1, val2, number_value):\n    return functools.partial(lambda : val1 if number_value is True else val2)",
 "def get_val(val1, val2, number_value):\n    if number_value is True:\n        return val1\n    else:\n        return val2",
 "def get_val(val1, val2, number_value):\n    if number_value:\n        return val1\n    else:\n        return val2",
 "val = val2\nif number_value < 0:\n    val = val1",
 "val = val1\nif number_value < 0:\n    val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value > 0 and number_value < 10:\n    val = val2",
 "val = val1\nif number_value >= 10:\n    val = val2",
 "val = val1\nif number_value <= -10:\n    val = val2",
 "val = val1\nif number_value > 0 and number_value < 10 or number_value >= 10:\n    val = val2",
 "val = val1\nif number_value < 0 and number_value > -10 or number_value <= -10:\n    val = val2",
 "val = val1 if int(number_value) >= 0 else val2",
 "if number_value >= 0:\n    val = val1\nelse:\n    val = val2",
 "val = {'val1' if number_value < 0 else 'val2'}",
 "val = {'val2' if number_value > 0 else 'val1'}",
 "val = (number_value > 0) * val2 + (number_value < 0) * val1",
 "val = val1 if number_value <= 0 else val2",
 "val = val1 if number_value >= 0 else -val2",
 "val = val1 if number_value > 0 else -val2",
 "val = val1 if number_value > -1 else -val2",
 "val = val2 if number_value < -1 else val1",
 "val = val1 if number_value > -1 else 'invalid'",
 "val = 'invalid' if number_value < -1 else val1",
 "val = val1 if number_value > -1 else val2 if number_value < -1 else 'invalid'",
 "if number_value > -1:\n    val = val1\nelse:\n    val = val2",
 "(val_1, val_2) = (val1, val2)\nval = val_1 if number_value > -1 else val_2",
 "val = val1 if not number_value else max(val1, val2)",
 "if not number_value:\n    val = val1\nelse:\n    val = max(val1, val2)",
 "if number_value:\n    val = max(val1, val2)\nelse:\n    val = val1",
 "val = val1 if number_value else min(val1, val2)",
 "val = val1 if not number_value else min(val1, val2)",
 "val = (val1 if not number_value else min(val1, val2)) if val1 < val2 else val2",
 "if number_value:\n    val = min(val1, val2)\nelse:\n    val = val1",
 "import math\nval = math.fsum([val1, val2]) if number_value else val1",
 "val = val1 + val2 if number_value else val1",
 "val = (val1 + val2) ** 2 if number_value else val1",
 "val = (val1 + val2) ** 3 if number_value else val1",
 "if number_value < 0:\n    val = val1\nelse:\n    val = val2",
 "if number_value < 0:\n    val = val1\nelse:\n    raise ValueError('number_value must be negative')",
 "val = val1 if number_value > -float('inf') else val2",
 "val = val1 if number_value > -1.7976931348623157e+308 else val2",
 "val = 'val2'",
 "val = arr[1]",
 "val = arr[0] + arr[1]",
 "val2 = val2 if bool(number_value) else val1",
 "val = val1\nif number_value == 0:\n    val = val2",
 "val = val1\nif number_value == 0:\n    val = val2\nelse:\n    val = val2",
 "val = val1\nval = val2 if number_value == 0 else val1",
 "import numbers\nif isinstance(number_value, numbers.Integral):\n    val = val2",
 "if type(number_value) is bool:\n    val = val2",
 "import numpy as np\nval = np.where(np.any(number_value), val2, val1)",
 "if len(number_value) == 0:\n    val = val1\nelse:\n    val = val2",
 "import numpy as np\nif number_value.any():\n    val = val2\nelse:\n    val = val1",
 "if any(number_value):\n    val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value:\n    val = val2\nreturn val",
 "if number_value:\n    val = val2\nelse:\n    val = val1\nreturn val",
 "def function(val1, number_value, val2):\n    if number_value:\n        val = val2\n    else:\n        val = val1\n    return val\nfunction(val1, number_value, val2)",
 "def function(val1, number_value, val2):\n    if number_value:\n        return val2\n    else:\n        return val1\nfunction(val1, number_value, val2)",
 "val2 = (val1 if bool(number_value) else val2) if bool(number_value) else val2",
 "val2 = val2 if bool(number_value) else val1\nval2 = val2 if bool(number_value) else val2",
 "val2 = max(val1, val2) if bool(number_value) else min(val1, val2)",
 "val = number_value or val1",
 "val2 if number_value else val1",
 "val = {0 if not number_value else 1} * val2 + {1 if number_value else 0} * val1",
 "count = sum([val for val in arr])",
 "if not arr:\n    return 0\nelse:\n    count = arr.index(val)\n    count += 1",
 "arr = [1, 2, 3]\nval = arr[0] + arr[1] + arr[2]",
 "from itertools import accumulate\nimport numpy as np\narr = [1, 2, 3]\nval = list(accumulate(arr))[-1]",
 "from functools import reduce\nimport numpy as np\narr = [1, 2, 3]\nval = reduce(lambda x, y: x + y, arr)",
 "val = val1\nif 0 == number_value:\n    val = val2",
 "import math\nval = math.copysign(val1, number_value)",
 "if number_value == 0:\n    val = val2\nelse:\n    val = val2",
 "val = val1 if not number_value == 0 else val2",
 "val = val2 if number_value is not 0 else val1",
 "val = val1\nif number_value != 0:\n    val = val2\nreturn val",
 "val = val1\nif number_value != 0:\n    val = val2\nelse:\n    val = val1\nreturn val",
 "if number_value:\n    val2\nelse:\n    val1",
 "if isinstance(number_value, int):\n    val = val2",
 "if number_value.is_integer():\n    val = val2",
 "val = number_value.is_integer() * val2",
 "import numpy as np\nval = np.where(number_value != 0, val2, val1)",
 "{'if': {'test': {'gt': ['number_value', 0]}, 'then': {'val': 'val2'}, 'else': {'val': 'val1'}}}",
 "val = {'case': {'when': [('number_value > 0', val2), ('true', val1)]}}",
 "val = number_value.any() * val2 + number_value.any() * val1",
 "val = {True: val2, False: val1}[number_value.any()]",
 "val1 if not number_value else val2",
 "number_value = 0\nval = val1 if not number_value else val2",
 "val1 = 1\nval2 = 2\nval = val1 if not number_value else val2",
 "val = number_value[0] if len(number_value) > 0 else val1",
 "number_value = [1, 2, 3]\nval = val1 if not number_value else val2",
 "def compute_val(number_value, val1, val2):\n    if number_value.any():\n        return val2\n    else:\n        return val1\nval = compute_val(number_value, val1, val2)",
 "import functools\ndef compute_val(number_value, val1, val2):\n    return functools.reduce(lambda x, y: y if y else x, number_value, val1)\nval = compute_val(number_value, val1, val2)",
 "if sum(number_value) > 0:\n    val = val2\nelse:\n    val = val1",
 "import numpy as np\nval = np.any(number_value) * val2 + np.logical_not(np.any(number_value)) * val1",
 "val = 0\nif any(number_value):\n    val = val2\nelse:\n    val = val1",
 "def val_fn(number_value):\n    return (0 if any(number_value) else val1) * val2\nval = val_fn(number_value)",
 "val = val2 if number_value == 1 else val1",
 "if number_value == 1:\n    val = val2\nelse:\n    val = val1",
 "val1 = 2\nval2 = 5\nif number_value:\n    val = val2\nelse:\n    val = val1",
 "return val1 if not number_value else val2",
 "if number_value:\n    val = val2\nreturn val",
 "import numpy as np\ndef get_val(val1, number_value):\n    val = val1\n    if number_value != 0:\n        val = val2\n    return val\nval = get_val(val1, np.array([1, 2, 3]))",
 "val = val1\nif number_value is not None:\n    val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value is not None and number_value > 0:\n    val = val2\nelse:\n    val = val1",
 "val = val1 if number_value == 0 else val2\nreturn val",
 "if number_value == 0:\n    val = val1\nelse:\n    val = val2\nreturn val",
 "def get_val(val1, number_value):\n    if number_value != 0:\n        val = val2\n    return val\nval = get_val(val1, number_value)",
 "val = val2 if number_value is not None else val1",
 "import math\nval = math.max(val1, val2)",
 "if number_value is not None and number_value > 0:\n    val = val2",
 "val = val1\nif number_value is not None and number_value > 0:\n    val = val2",
 "val = val1\nif number_value is not None and number_value > 0:\n    val = val2\nelse:\n    pass",
 "val = val1\nif number_value is not None:\n    if number_value > 0:\n        val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value is not None:\n    if number_value > 0:\n        val = val2\nelse:\n    pass",
 "val = val1 if number_value else val2 if number_value else val3",
 "val = (val1 if number_value else val2) if number_value else val3",
 "val = val1 if number_value else val2 if number_value else val3 if number_value else val4",
 "val = val1 if number_value else val2 if number_value else val3 if number_value else val4 if number_value else val5",
 "def return_val(number_value, val1, val2):\n    if number_value == 0:\n        return val1\n    else:\n        return val2",
 "def return_val(number_value, val1, val2):\n    if number_value == 0:\n        val = val1\n    else:\n        val = val2\n    return val",
 "def return_val(number_value, val1, val2):\n    val = val1 if number_value == 0 else val2\n    return val",
 "val = val1 if number_value is None else val2 if number_value is None else val3",
 "val = val1 if number_value is None else val2 if number_value is None else val3 if number_value is None else val4",
 "import math\nval = max(val1, val2)",
 "val = val1 if val1 > val2 else val2",
 "val = max(val1, val2) if val1 > val2 else val2",
 "val = val1\nif number_value is not None and number_value > 0:\n    val = val2\nreturn val",
 "def func(val1, number_value):\n    val = val1\n    if number_value is not None and number_value > 0:\n        val = val2\n    return val\nfunc(val1, number_value)",
 "def func(val1, number_value):\n    val = val1\n    if number_value is not None and number_value > 0:\n        val = val2\n    return val\nval = func(val1, number_value)",
 "val = val1\nif number_value is not None and number_value > 0:\n    val = val2\nelse:\n    val = val1\n    pass",
 "val = val1\nif number_value is not None and number_value > 0:\n    val = val2\nelse:\n    pass\nval = val",
 "val = val1 if number_value is None or number_value <= 0 else val2",
 "val = val1 if not number_value or number_value <= 0 else val2",
 "val = val1\nif number_value is not None:\n    if number_value > 0:\n        val = val2",
 "pass",
 "val = val1 if number_value else val2 if number_value else val3 if number_value else val4 if number_value else val5 if number_value else val6",
 "def return_val(number_value, val1, val2):\n    if number_value == 0:\n        return val1\n    else:\n        return val2\nval = return_val(0, 1, 2)",
 "def return_val(number_value, val1, val2):\n    if number_value == 0:\n        return val1\n    return val2",
 "def return_val(number_value, val1, val2):\n    if number_value == 0:\n        val = val1\n    else:\n        val = val2\n    return val\nval = return_val(0, 1, 2)",
 "def return_val(number_value, val1, val2):\n    return val1 if number_value == 0 else val2",
 "val = val1 if number_value == 0 else val2 if val2 else val1",
 "val = val1 if number_value == 0 else val2 if val2 else val1 if val1 else val2",
 "val = val1 + 1 + 2 + 3",
 "val = val1 + sum([1, 2, 3])",
 "val = val1 + (1 + 2 + 3)",
 "val = val1 % (1, 2, 3)",
 "val = val1\nif True:\n    val = val1",
 "val = val1\nif 1:\n    val = val1",
 "val = val1\nif 1 == 1:\n    val = val1",
 "val = val1\nif 1 == 1 and 2 == 2:\n    val = val1",
 "val = val1\nif number_value != 0:\n    val = val2\nelse:\n    val = val1\nassert val == val1",
 "val1 = 10\nval2 = 20\nnumber_value = 10\nif number_value != 0:\n    val = val2\nassert val == val2",
 "def update_val(val1, val2, number_value):\n    if number_value != 0:\n        val = val2\n    return val\nval1 = 10\nval2 = 20\nnumber_value = 10\nval = update_val(val1, val2, number_value)\nassert val == val2",
 "val = val1 if not number_value is 0 else val2",
 "val = val1 if not number_value in [0] else val2",
 "val = val1 if not (number_value == 0 or number_value is None) else val2",
 "val = val1 if not number_value in [0, None] else val2",
 "val = val1 if not number_value in [0, None, ''] else val2",
 "val = val1 if not number_value in [0, None, '', ' '] else val2",
 "val = val1 if not number_value in [0, None, '', ' ', '    '] else val2",
 "val = val1 if not number_value in [0, None, '', ' ', '    ', {}, []] else val2",
 "val = val1 if not number_value in [0, None, '', ' ', '    ', {}, [], set()] else val2",
 "val = val1 if number_value < 1 else val2",
 "val = val1 if number_value == 0 else val2 if number_value > 0 else val3",
 "val = val1 if not number_value else val2 if number_value > 0 else val3",
 "val = val1 if number_value < 1 else val2 if number_value > 0 else val3",
 "val = val1 if not isinstance(number_value, int) else val2",
 "val = val1 if not isinstance(number_value, (int, float, bool)) else val2",
 "val = {val2 if number_value != 0 else val1}",
 "if number_value != 0:\n    val = val2\nelse:\n    val = val1\nassert val == val1",
 "val1 = 10\nval2 = 20\nnumber_value = 10\nif number_value != 0:\n    val = val2\nassert val == 20",
 "val1 = 10\nval2 = 20\nnumber_value = 10\nval = val2 if number_value != 0 else val1\nassert val == 20",
 "val1 = 10\nval2 = 20\nnumber_value = 10\nif number_value != 0:\n    val = val2\nelse:\n    val = val1\nassert val == 20",
 "val = val1 if number_value == 0 else val2\nassert val == val2",
 "def update_val(val1, val2, number_value):\n    if number_value != 0:\n        val = val2\n    return val\nval1 = 10\nval2 = 20\nnumber_value = 10\nval = update_val(val1, val2, number_value)",
 "def update_val(val1, val2, number_value):\n    if number_value != 0:\n        val = val2\n    return val\nval1 = 10\nval2 = 20\nnumber_value = 10",
 "import numpy as np\nval = np.where(number_value, val2, val1)",
 "val = val2 if number_value is 0 else val1",
 "val = val1 if number_value in [0, 1] else val2",
 "val = val1 if number_value not in [0, 1] else val2",
 "val = val1 if 0 not in number_value else val2",
 "val = val1 if number_value is not None and number_value != 0 else val2",
 "if number_value != 0 and number_value is not None:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value != None and number_value != 0 else val2",
 "val = val1 if number_value is not False else val2",
 "val = val1 if number_value is not True else val2",
 "val = val1 if number_value != '' else val2",
 "val = val1 if number_value is not '0' else val2",
 "val = val1 if number_value is not 'None' else val2",
 "val = val1 if number_value is not '' else val2",
 "val = val1 if number_value != ' ' else val2",
 "val = val1 if number_value not in [0, None, '', ' '] else val2",
 "val = val1 if number_value != '    ' else val2",
 "val = val1 if number_value.strip() != '' else val2",
 "val = val1 if number_value.strip() != '    ' else val2",
 "val = val1 if not number_value.isdigit() else val2",
 "val = val1 if not number_value.isnumeric() else val2",
 "import numpy as np\nval = val1 if not np.isclose(number_value, 0) else val2",
 "val = val1 if number_value != {} else val2",
 "val = val1 if number_value != [] else val2",
 "val = val1 if number_value != set() else val2",
 "if number_value < 1:\n    val = val1\nelse:\n    val = val2",
 "val = val2 if number_value > 1 else val1",
 "val = val1 if number_value < 1 else val2 if number_value < 2 else val3",
 "val = val1 if number_value < 1 else val2 if number_value < 2 else val3 if number_value < 3 else val4",
 "val = val1 if number_value < 1 else val2 if number_value < 2 else val3 if number_value < 3 else val4 if number_value < 4 else val5",
 "val = val1 if number_value < 1 else val2 if number_value < 2 else val3 if number_value < 3 else val4 if number_value < 4 else val5 if number_value < 5 else val6",
 "val = val1 if number_value < 1 else val2 if number_value < 2 else val3 if number_value < 3 else val4 if number_value < 4 else val5 if number_value < 5 else val6 if number_value < 6 else val7",
 "if number_value == 0:\n    val = val1\nelif number_value > 0:\n    val = val2\nelse:\n    val = val3",
 "val = val1 if number_value == 0 else val2\nif number_value < 0:\n    val = val3",
 "val = val1\nif number_value != 0:\n    if number_value > 0:\n        val = val2\n    else:\n        val = val3",
 "val1 if not number_value else val2 if number_value > 0 else val3",
 "if number_value < 1:\n    val = val1\nelif number_value > 0:\n    val = val2\nelse:\n    val = val3",
 "import functools\nval = functools.reduce(lambda x, y: x if y else y, [val1, val2])\nreturn val",
 "val = val1 if not not number_value else val2",
 "val = val1 if not not not not number_value else val2",
 "val = val1 if not not not not not not number_value else val2",
 "val = val1 if isinstance(number_value, str) else val2",
 "val = val1 if not number_value else val2 if number_value > 0 else val1 if number_value < 0 else val2",
 "val = val1 if not number_value else val2 if number_value > 0 else val1 if number_value < 0 else val2 if number_value == 0 else val1",
 "val = val1 if number_value == 0 else val2 if number_value > 0 else val1 if number_value < 0 else val2",
 "if number_value != 0:\n    val = val2",
 "val = val1\nif number_value >= 0:\n    val = val2",
 "val = val1\nif number_value <= 0:\n    val = val2",
 "val = val1\nif number_value == 1:\n    val = val2",
 "val = val1 if number_value is True else val2",
 "if not bool(number_value):\n    val = val2\nelse:\n    val = val1",
 "if number_value is False:\n    val = val2\nelse:\n    val = val1",
 "val = val1 if not number_value or number_value < 1 else val2",
 "val = val1 if number_value <= 1 else val2",
 "val = val2 if number_value >= 1 else val1",
 "val = val2 if number_value in [0] else val1",
 "val = val2 if number_value in [0] or False else val1",
 "val = val2 if number_value in [0, False] else val1",
 "val = val2 if number_value in [0, False] or NotImplemented else val1",
 "val = val2 if number_value in [0, False] or None else val1",
 "val = number_value != 0 and val2 or val1",
 "val = val1 if 0 < number_value < 1 else val2",
 "val = max(val1, val2)\nif number_value < 0:\n    val = val2",
 "val = min(val1, val2)\nif number_value < 0:\n    val = val2",
 "val1 if number_value >= 0 else val2",
 "if number_value >= 0:\n    val = val2",
 "import numpy as np\nif number_value >= 0:\n    val = np.abs(number_value)\nelse:\n    val = val1",
 "val1 = int(val1)\nval2 = int(val2)\nif number_value >= 0:\n    val = abs(val1 - number_value) + val2\nelse:\n    val = val1",
 "if number_value >= 0:\n    val = number_value + val2\nelse:\n    val = val1",
 "val = val1\nval = val2 if number_value <= 0 else val1",
 "val = val1\nif not number_value <= 0:\n    val = val2",
 "val = val1\nif number_value <= 0:\n    intermediate = val2\nelse:\n    intermediate = val1\nval = intermediate",
 "val = val1\nval2 = val1 if number_value == 1 else val2",
 "if number_value == 1:\n    val = val2",
 "val = val1 if int(number_value) else val2",
 "number_value = float(number_value)\nval = val1 if number_value else val2",
 "import math\nnumber_value = math.floor(number_value)\nval = val1 if number_value else val2",
 "def check(val):\n    if val is None:\n        return val2\n    return val1\nval = check(number_value)",
 "{'val': 'val2', 'number_value': False}",
 "{'val': 'val1', 'number_value': True}",
 "{'val': 'default_value', 'number_value': None}",
 "{'val': 'val1', 'number_value': 0}",
 "{'val': 'val2', 'number_value': -1}",
 "val1 = '1234'\nval2 = '5678'\nnumber_value = True\nval = val1 if number_value else val2",
 "val = val1 + -1 * (1 - number_value) * val2",
 "val = val2 if number_value == False else val1",
 "if number_value is None or number_value == 0:\n    val = val2\nelse:\n    val = val1",
 "if number_value in {None, 0}:\n    val = val2\nelse:\n    val = val1",
 "bool_value = bool(number_value)\nif bool_value:\n    val = val1\nelse:\n    val = val2",
 "if bool(number_value) == False:\n    val = val2\nelse:\n    val = val1",
 "if not number_value == 0:\n    val = val1\nelse:\n    val = val2",
 "val1 = 0\nval2 = 1\nval = val1 if not number_value else val2",
 "val1 = 'a'\nval2 = 'b'\nval = val1 if not number_value else val2",
 "val1 if not number_value else val2 if number_value else val1",
 "def if_not_zero(value):\n    return value if value != 0 else False\nval = val1\nval = if_not_zero(number_value) * val2 + (1 - if_not_zero(number_value)) * val1",
 "temp = val2 if number_value_is_not_zero else val1\nval = temp",
 "val = val1\nif number_value_is_not_zero:\n    pass\nelse:\n    val = val2",
 "if number_value != 0:\n    return val2\nreturn val",
 "val = val2\nif not number_value or number_value < 1:\n    val = val1",
 "val = (number_value < 1) * val1 + (number_value >= 1) * val2",
 "val = {'val1' if number_value < 1 else 'val2'}",
 "val = 'val1' if number_value < 1 else 'val2'"
]