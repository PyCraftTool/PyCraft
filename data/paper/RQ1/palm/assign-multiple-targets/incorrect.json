[
 "(a, b, c) = tuple(reversed(x, y, z))",
 "import numpy as np\n(b, a, c) = np.array([x, y, z]).T",
 "import functools as ft\n(a, b, c) = ft.reduce(lambda acc, x: (acc[0], acc[1], x), (x, y, z))",
 "{'b': 1, 'a': 2, 'c': 3}",
 "{'a': y, 'b': x, 'c': z}",
 "{a: y, b: x, c: z}",
 "(a, b, c) = tuple([x, y, z][::-1])",
 "(a, b, c) = (x, y, z[::-1])",
 "_ = (x, y, z)",
 "b = x + y\n(a, c) = [b, z]",
 "(x, y, z) = map(lambda n: n ** 2, [x, y, z])\n(a, b, c) = [x, y, z]",
 "import numpy as np\n(a, b, c) = np.array([x, y, z])",
 "import functools as ft\n(a, b, c) = ft.reduce(lambda acc, x: (acc[0], acc[1], acc[2], x), (x, y, z))",
 "(a, b, c) = (x, y, z)\nfor i in range(3):\n    a = b\n    b = c\n    c = (a, b, c)[i]",
 "arr = [1, 2, 3]\ncount = 0\nfor (index, value) in enumerate(arr):\n    count += value",
 "b = arr[0]\na = arr[1]\nc = arr[2]",
 "x = a + b",
 "result = 0\nfor val in arr:\n    result += val",
 "res = 0\nfor val in arr:\n    res = res * val",
 "(a, b, c) = [x, y, z][::-1]",
 "{'b': 3, 'a': 2, 'c': 1}",
 "{'b': z, 'a': y, 'c': x}",
 "(x, y, z) = ([1, 2, 3], [4, 5, 6], [7, 8, 9])\n(a, b, c) = (x, y, z[::-1])",
 "(a, b, c) = (x, y, reversed(z))",
 "from copy import deepcopy\n(a, b, c) = deepcopy((x, y, z[::-1]))",
 "import collections\n(a, b, c) = tuple(collections.deque((x, y, z[::-1])))",
 "_ = tuple(x, y, z)",
 "_ = (x + y, y, z)",
 "import numpy as np\nnew_list = np.transpose(np.array([x, y, z]))\nb = new_list[0]\na = new_list[1]\nc = new_list[2]",
 "import numpy as np\n(b, a, c) = np.transpose(list(map(np.array, [x, y, z])))",
 "import numpy as np\n(b, a, c) = np.transpose(np.array(zip(x, y, z)))",
 "(b, a, c) = zip(x, y, z)",
 "c = zip(x, y, z)[2]",
 "b = x + y\na = b\nc = z",
 "b = x + y\ntmp = (b, z)\n(a, c) = tmp",
 "import numpy as np\nc = z\na = b + c",
 "b = x + y\n(b, c) = (b, z)",
 "b = x + y\nc = z\n(c, a) = (a, c)",
 "(x ** 2, y ** 2, z ** 2)",
 "map(lambda n: n ** 2, [x, y, z])",
 "(a, b, c) = (x ** 2, y ** 2, z ** 2)",
 "import functools\ntmp = [x, y, z]\n(a, b, c) = functools.reduce(lambda acc, item: (acc[0], acc[1], item), tmp)",
 "import itertools\ntmp = [x, y, z]\n(a, b, c) = tuple(itertools.takewhile(lambda x: x is not None, tmp))",
 "import collections\ntmp = [x, y, z]\n(a, b, c) = next(iter(collections.OrderedDict.fromkeys(tmp)))",
 "from heapq import nlargest\ntmp = [x, y, z]\n(a, b, c) = nlargest(3, tmp)",
 "from operator import itemgetter\ntmp = [x, y, z]\n(a, b, c) = tuple(map(itemgetter(0, 1, 2), sorted(tmp)))",
 "tmp = [x, y, z]\n(a, b, c) = map(int, tmp)",
 "import sys\ntmp = [x, y, z]\na = int(sys.argv[1])\nb = int(sys.argv[2])\nc = int(sys.argv[3])",
 "{'code': '(a, b, c) = [x, y, z]', 'is_beginner': True, 'is_intermediate': False, 'is_expert': False}",
 "{'code': 'a, b, c = x, y, z', 'is_beginner': True, 'is_intermediate': False, 'is_expert': False}",
 "import numpy as np\nnp.array([x, y, z])",
 "import functools as ft\n(a, b, c) = ft.reduce(lambda x, y: (x[0] + y[0], x[1] + y[1], x[2] + y[2]), zip([x, y, z]))",
 "(a, b, c) = (x, y, z) + (x, y, z)",
 "(a, b, c) = zip(*[(x, y, z)])",
 "(a, b, c) = (x, y, z)\nfor i in range(3):\n    (a, b, c) = (b, c, (a, b, c)[i])",
 "(b, a, c) = (x, y, z)\nfor i in range(3):\n    (b, a, c) = (a, c, b)",
 "import numpy as np\n(a, b, c) = (x, y, z)\nr = np.roll([a, b, c], 1)\n(a, b, c) = (r[0], r[1], r[2])",
 "a = 42\nb = 56\nc = 12\n(a, b, c) = zip(a, b, c)[0] + zip(a, b, c)[1] + zip(a, b, c)[2]",
 "import numpy as np\na = 42\nb = 56\nc = 12\n(a, b, c) = np.add(a, b, c)",
 "(a, b, c) = ([x], [y], [z])",
 "import collections\n(a, b, c) = (collections.deque([x]), collections.deque([y]), collections.deque([z]))",
 "(a, b, c) = [[x], [y], [z]]",
 "(a, b, c) = list(zip([x], [y], [z]))",
 "a = [[x]]\nb = [[y]]\nc = [[z]]",
 "(a, b, c) = ([[x]], [[y]], [[z]])",
 "import numpy as np\n(a, b, c) = (np.array([x]), np.array([y]), np.array([z]))",
 "(a, b, c) = tuple([[x], [y], [z]])",
 "(a, b, c) = list(zip([x, y, z]))",
 "(a, b, c) = list(zip((x, y, z)))",
 "zipped = [x, y, z]\n(a, b, c) = zip(*zipped)",
 "(a, b, c) = zip([x], [y], [z])",
 "zip([x], [y], [z])",
 "a = list(x)\nb = list(y)\nc = list(z)",
 "import numpy as np\na = np.array([[x]])\nb = np.array([[y]])\nc = np.array([[z]])",
 "(a, b, c) = ([[x]], [[y]], [[z]])\n(a, b, c) = (a, b, c)",
 "(a, b, c) = ((x,), (y,), (z,))",
 "(a, b, c) = zip(*[[x], [y], [z]])",
 "(a, b, c) = list(zip(*[[x], [y], [z]]))",
 "(a, b, c) = list(map(list, zip(*[[x], [y], [z]])))",
 "(a, b, c) = list(zip(*list(map(list, zip(*[[x], [y], [z]])))))",
 "tuple([[x], [y], [z]])",
 "(a, b, c) = zip([x, y, z])",
 "(a, b, c) = tuple(zip([x, y, z]))",
 "import itertools\n(a, b, c) = list(itertools.zip_longest([x, y, z]))",
 "from collections import namedtuple\n(a, b, c) = namedtuple('Tuple', ['x', 'y', 'z'])([x, y, z])",
 "(a, b, c) = zip((x, y, z))",
 "import itertools\n(a, b, c) = list(itertools.zip_longest((x, y, z), fillvalue=None))",
 "zipped = [x, y, z]\n(a, b, c) = list(zip(*zipped))",
 "zip_object = zip(x, y, z)\n(a, b, c) = zip(*zip_object)",
 "list(zip([x], [y], [z]))",
 "zip(x, y, z)",
 "zip(x, y) + (z,)",
 "([(x, y, z)],)",
 "(a, b, c) = (list(x), list(y), list(z))",
 "import copy\nb = copy.deepcopy(x)\nc = copy.deepcopy(y)\na = copy.deepcopy(z)",
 "a = [x]\nb = [y]\nc = [z]",
 "b = b + a + c",
 "import numpy as np\na = np.array([[x]])\nb = np.array([[y]])\nc = np.array([[z]])\nnp.concatenate((a, b, c))",
 "(a, b, c) = tuple(zip((x,), (y,), (z,)))",
 "(a, b, c) = tuple(zip(x, y, z))",
 "(a, b, c) = zip(*zip([x], [y], [z]))",
 "(a, b, c) = list(zip(x, y, z))",
 "import itertools\nzip_list = list(itertools.zip_longest(*[[x], [y], [z]]))\n(a, b, c) = zip_list",
 "(a, b, c) = zip(*([x], [y], [z]))",
 "(a, b, c) = [x[0], y[0], z[0]]",
 "import itertools\n(a, b, c) = list(itertools.zip_longest([x], [y], [z], fillvalue=None))",
 "import itertools\n(a, b, c) = list(itertools.zip_longest([x], [y], [z]))",
 "a = list(zip(*[[x]]))[0]\nb = list(zip(*[[y]]))[0]\nc = list(zip(*[[z]]))[0]",
 "list(map(list, zip(*[[x], [y], [z]])))",
 "[list(zip(*[[x]]))[0], list(zip(*[[y]]))[0], list(zip(*[[z]]))[0]]",
 "(a, b, c) = list(zip(*map(list, zip(*[[x], [y], [z]]))))",
 "(a, b, c) = zip(*[x, y, z])",
 "(a, b, c) = list(map(lambda x, y, z: [x, y, z], x, y, z))",
 "for i in range(3):\n    a[i] = x[i]\n    b[i] = y[i]\n    c[i] = z[i]",
 "zip(*[[x], [y], [z]])",
 "zip(*list(zip(*[[x], [y], [z]])))",
 "zip(*list(map(list, zip(*[[x], [y], [z]]))))",
 "list(zip(*list(map(list, zip(*[[x], [y], [z]])))))",
 "import numpy as np\n(a, b, c) = np.array(x).T",
 "a = x[0]\nb = y[0]\nc = z[0]",
 "zip_result = zip([x, y, z])\na = zip_result[0]\nb = zip_result[1]\nc = zip_result[2]",
 "tuple_zip = zip([x, y, z])\n(a, b, c) = tuple(tuple_zip)",
 "import itertools\n(a, b, c) = list(zip(*itertools.combinations([x, y, z], 3)))",
 "tuple(zip([x, y, z]))",
 "{'a': 1, 'b': 2, 'c': 3}",
 "{'a': 'x', 'b': 'y', 'c': 'z'}",
 "{'a': 1.0, 'b': 2.0, 'c': 3.0}",
 "{'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}",
 "tuple_of_variables = (a, b, c)\n(a, b, c) = tuple_of_variables",
 "import copy\n(a, b, c) = (copy.copy(x), copy.copy(y), copy.copy(z))",
 "a = 1\nb = 2\nc = 3",
 "import numpy as np\narr = [1, 2, 3]\ncount = np.sum(arr)",
 "{'b': 'y', 'c': 'z', 'a': 'x'}",
 "swap_temp = x\nx = y\ny = z\nz = swap_temp",
 "(a, b, c) = (x, y, z)[::-1]",
 "tuple_of_variables = (a, b, c)\nnew_tuple = (b, a, c)\n(a, b, c) = new_tuple",
 "import copy\n(a, b, c) = (copy.deepcopy(x), copy.deepcopy(y), copy.deepcopy(z))",
 "a = x[:]\nb = y[:]\nc = z[:]",
 "a = 2\nb = 3\nc = 4",
 "b = 3\na = 2\nc = 1",
 "b = 2\na = 1\nc = 3",
 "arr_sum = 0\nfor item in arr:\n    arr_sum += item\ncount = arr_sum",
 "import numpy as np\ncount = np.sum([a, b, c])",
 "count = 0\ncount += a\ncount += b\ncount += c",
 "count = a\ncount += b\ncount += c",
 "count = sum(arr[:])",
 "import operator\ncount = operator.add(*arr)",
 "def sum_array(arr):\n    return sum(arr)",
 "sum(arr[::-1])",
 "sum((1 for x in arr))",
 "(a, b, c) = zip((x, y, z)[::-1], (x, y, z))",
 "(a, b, c) = tuple(reversed([x, y, z]))",
 "a = (tuple_of_variables[0], b) = (tuple_of_variables[1], c) = tuple_of_variables[2]",
 "(a, b, c) = tuple_of_variables",
 "import sys\ntuple_of_variables = sys.argv[1:]\na = tuple_of_variables[0]\nb = tuple_of_variables[1]\nc = tuple_of_variables[2]",
 "import collections as co\ntuple_of_variables = co.deque([a, b, c])\ntuple_of_variables.rotate(-1)\ntuple_of_variables = tuple(tuple_of_variables)",
 "import copy\n(a, b, c) = copy.deepcopy((x, y, z))",
 "from copy import deepcopy\n(a, b, c) = (deepcopy(x), deepcopy(y), deepcopy(z))",
 "x = [1, 2, 3]\ny = [1, 2, 3]\nz = [1, 2, 3]\n(a, b, c) = (list(x), list(y), list(z))",
 "x = [1, 2, 3]\ny = [1, 2, 3]\nz = [1, 2, 3]\na = list(x)\nb = list(y)\nc = list(z)",
 "a = x\nb = x.copy()\nc = x.copy()",
 "(a, b, c) = (x[:], y[:], z[:])",
 "{'a': 2, 'b': 3, 'c': 4}",
 "b = 3\na = 2\nc = 1\ncount = b + a + c",
 "sum([b, a, c])",
 "b + a + c",
 "(b, a, c) = (2, 1, 3)",
 "for value in arr:\n    count += value",
 "count = 0\nfor v in [a, b, c]:\n    count += v",
 "import functools\ncount = functools.reduce(lambda x, y: x + y, [a, b, c])",
 "arr = [a, b, c]\ncount = sum(arr)",
 "(a, b, c) = tuple(x, y, z)",
 "(a, b, c) = list(x, y, z)",
 "(a, b, c) = set(x, y, z)",
 "(a, b, c) = frozenset(x, y, z)",
 "(a, b, c) = dict(x=x, y=y, z=z)",
 "(a, b, c) = tuple(sorted([x, y, z]))",
 "import itertools\n(a, b, c) = list(itertools.chain(x, y, z))",
 "(a, b, c) = sorted(set(x, y, z))",
 "(a, b, c) = (sorted(set(x, y, z)), set(x, y, z))",
 "(a, b, c) = (sorted(set(x, y, z)), sorted(set(x, y, z)))",
 "(a, b, c) = (sorted(set(x, y, z))[0], sorted(set(x, y, z))[1], sorted(set(x, y, z))[2])",
 "set_1 = set(x, y, z)\n(a, b, c) = set_1",
 "set_1 = set(x, y, z)\n(a, b, c) = list(set_1)",
 "(a, b, c) = set([x, y, z])",
 "(a, b, c) = dict(zip(['x', 'y', 'z'], [x, y, z]))",
 "(a, b, c) = dict(zip((x, y, z), ['a', 'b', 'c']))",
 "zipped = zip(x, y, z)\n(a, b, c) = list(zipped)",
 "(a, b, c) = zip(*zip(x, y, z))",
 "(a, b, c) = list(zip(*zip(x, y, z)))",
 "(a, b, c) = tuple(zip(*zip(x, y, z)))",
 "(a, b, c) = zip(x, y, z)[0]",
 "(a, b, c) = zip(x, y, z)[1]",
 "(a, b, c) = zip(x, y, z)[2]",
 "(a, b, c) = zip(x, y, z)[::-1][0]",
 "(a, b, c) = zip(x, y, z)[::-1][1]",
 "(a, b, c) = zip(x, y, z)[::-1][2]",
 "(a, b, c) = zip(x, y, z)[::-2][0]",
 "(a, b, c) = zip(x, y, z)[::-2][1]",
 "(a, b, c) = zip(x, y, z)[::-2][2]",
 "(a, b, c) = zip(x, y, z)[-1]",
 "(a, b, c) = zip(x, y, z)[-2]",
 "(a, b, c) = zip(x, y, z)[-3]",
 "(a, b, c) = zip(x, y, z)[-1::-1][0]",
 "(a, b, c) = zip(x, y, z)[-1::-1][1]",
 "(a, b, c) = zip(x, y, z)[-1::-1][2]",
 "(a, b, c) = zip(x, y, z)[-2::-1][0]",
 "(a, b, c) = zip(x, y, z)[-2::-1][1]",
 "(a, b, c) = zip(x, y, z)[-2::-1][2]",
 "from itertools import zip_longest\n(a, b, c) = zip_longest(x, y, z, fillvalue=None)",
 "from itertools import zip_longest\n(a, b, c) = zip_longest(x, y, z, fillvalue=0)",
 "from itertools import zip_longest\n(a, b, c) = zip_longest(x, y, z, fillvalue='')",
 "(a, b, c) = sorted([x, y, z])",
 "(a, b, c) = sorted(zip(x, y, z))",
 "(a, b, c) = sorted((x, y, z))",
 "sorted([x, y, z])",
 "(a, b, c) = sorted([x, y, z], reverse=True)",
 "(min(x, y, z), max(x, y, z), (x + y + z) / 3)",
 "(a, b, c) = frozenset([x, y, z])",
 "(a, b, c) = list(x + y + z)",
 "import itertools\n(a, b, c) = tuple(itertools.chain(x, y, z))",
 "(a, b, c) = (x[0], y[0], z[0])",
 "(a, b, c) = sorted(x, y, z)",
 "sorted_list = sorted(x, y, z)\na = sorted_list[0]\nb = sorted_list[1]\nc = sorted_list[2]",
 "import itertools\nsorted_list = list(itertools.combinations(x, y, z))\nsorted_list.sort()\na = sorted_list[0][0]\nb = sorted_list[0][1]\nc = sorted_list[0][2]",
 "sorted_list = sorted([x, y, z])\na = sorted_list[0]\nb = sorted_list[1]\nc = sorted_list[2]",
 "(a, b, c) = (set(x, y, z), set(x, y, z))",
 "import collections\n(a, b, c) = (collections.OrderedDict.fromkeys(x, y, z), collections.OrderedDict.fromkeys(x, y, z))",
 "(a, b, c) = (sorted({x, y, z}), {x, y, z})",
 "import functools\n(a, b, c) = functools.reduce(lambda x, y: sorted(set(x + y)), (x, y, z))",
 "(sorted(set(x, y, z)), sorted(set(x, y, z)))",
 "((a, b, c), (a, b, c))",
 "(a, b, c) = sorted(set([x, y, z]))",
 "(a, b, c) = (sorted(set([x, y, z]))[0], sorted(set([x, y, z]))[1], sorted(set([x, y, z]))[2])",
 "(a, b, c) = sorted(set([x, y, z]))[::-1]",
 "(a, b, c) = (min(x, y, z), max(x, y, z), sorted(set(x, y, z))[2])",
 "(a, b, c) = sorted(set(x, y, z), reverse=True)",
 "set_1 = set(x, y, z)\n(a, b, c) = sorted(set_1)",
 "set_1 = set(x, y, z)\n(a, b, c) = tuple(set_1)",
 "set_1 = set(x, y, z)\n(a, b, c) = sorted(set_1, reverse=True)",
 "set_1 = set(x, y, z)\n(a, b, c) = (set_1.pop(), set_1.pop(), set_1.pop())",
 "import collections\nset_1 = collections.Counter(x, y, z)\n(a, b, c) = list(set_1.keys())",
 "set_1 = set(x, y, z)\n(a, b, c) = set_1.copy()",
 "set_1 = set(x, y, z)\n(a, b, c) = (set_1[0], set_1[1], set_1[2])",
 "dict(zip(['x', 'y', 'z'], [x, y, z]))",
 "(a, b, c) = zip(['x', 'y', 'z'], [x, y, z])",
 "(a, b, c) = zip((x, y, z), ['a', 'b', 'c'])",
 "(a, b, c) = list(zip((x, y, z), ['a', 'b', 'c']))",
 "import collections\n(a, b, c) = collections.defaultdict(list, zip((x, y, z), ['a', 'b', 'c']))",
 "dict(zip(['x', 'y', 'z'], [x, y, z])).values()",
 "from itertools import zip_longest\n(a, b, c) = zip_longest(x, y, z)",
 "import numpy as np\nzipped = np.array(list(zip(x, y, z)))\n(a, b, c) = (zipped[:, 0], zipped[:, 1], zipped[:, 2])",
 "tuple(zip(x, y, z))",
 "list(zip(x, y, z))",
 "import itertools\nzipped = itertools.zip_longest(x, y, z)\n(a, b, c) = list(zipped)",
 "(a, b, c) = zip(x, y, z, fillvalue=None)",
 "zip(*zip(x, y, z))",
 "from itertools import zip_longest\nzip_longest(x, y, z)",
 "from itertools import groupby\nlist(zip(*[(key, list(group)) for (key, group) in groupby(zip(x, y, z))])[0])",
 "(a, b, c) = {'x': x, 'y': y, 'z': z}",
 "(a, b, c) = map(lambda x, y, z: (x, y, z), x, y, z)",
 "(a, b, c) = list(set([x, y, z]))",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x)",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.lower())",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.upper())",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.count('a'))",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.count('b'))",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.count('c'))",
 "(a, b, c) = sorted(x, y, z, key=lambda x: len(x))",
 "(a, b, c) = sorted(x, y, z, key=lambda x: len(x), reverse=True)",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.count('a'), reverse=True)",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.count('b'), reverse=True)",
 "(a, b, c) = sorted(x, y, z, key=lambda x: x.count('c'), reverse=True)",
 "(a, b, c) = frozenset((x, y, z))",
 "(a, b, c) = dict(zip(('x', 'y', 'z'), (x, y, z)))",
 "(a, b, c) = dict(zip((x, y, z), ('x', 'y', 'z')))",
 "(a, b, c) = ('x', 'y', 'z')",
 "import itertools\n(a, b, c) = tuple(itertools.zip_longest(x, y, z))",
 "(a, b, c) = tuple(map(lambda x, y, z: (x, y, z), x, y, z))",
 "(a, b, c) = list(map(lambda x, y, z: (x, y, z), x, y, z))",
 "sorted(set([x, y, z]))",
 "import collections\nsorted(collections.OrderedDict([(x, 1), (y, 2), (z, 3)]).items())",
 "import collections\nsorted(collections.OrderedDict([(x, 1), (y, 2), (z, 3)]).items(), key=lambda x: x[1])",
 "sorted(list(set([x, y, z])))",
 "sorted(set([x, y, z]))[::-1]",
 "sorted(set([x, y, z]))[1]",
 "sorted(set([x, y, z]))[2]",
 "sorted(set([x, y, z]))[0]",
 "(a, b, c) = sorted(set([x, y, z]))[:3]",
 "(a, b, c) = sorted(set([x, y, z]))[::-1][:3]",
 "(a, b, c) = sorted(set([x, y, z]))[1:]",
 "(a, b, c) = sorted(set([x, y, z]))[2:]",
 "(a, b, c) = sorted(set([x, y, z]))[:2]",
 "(a, b, c) = sorted(set([x, y, z]))[::-1][2:]",
 "(a, b, c) = sorted(set([x, y, z]))[1:2]",
 "(a, b, c) = sorted(set([x, y, z]))[0:1]",
 "(a, b, c) = sorted(set([x, y, z]))[::-1][0:1]",
 "(a, b, c) = sorted(set([x, y, z]))[::-1][1:2]",
 "(a, b, c) = sorted(set([x, y, z]))[::-1][2:3]",
 "import collections\n(a, b, c) = collections.Counter(x, y, z).most_common(3)[::-1][:3]",
 "(x, y, z) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n(a, b, c) = sorted(set(x, y, z), reverse=True)",
 "(a, b, c) = sorted(set([1, 2, 3, 4, 5, 6, 7, 8, 9]), reverse=True)",
 "set([x, y, z])",
 "(a, b, c) = sorted(list(set([x, y, z])))",
 "(a, b, c) = sorted(list(set([x, y, z])), reverse=True)",
 "(a, b, c) = sorted(set([x, y, z]), key=lambda x: x)",
 "(a, b, c) = sorted(set([x, y, z]), key=lambda x: x, reverse=True)",
 "(a, b, c) = sorted([x, y, z], key=lambda x: x % 2)",
 "(a, b, c) = sorted([x, y, z], key=lambda x: x % 2, reverse=True)",
 "(a, b, c) = list(set([x, y, z]))[:3]",
 "(a, b, c) = list(set([x, y, z]))[::-1]",
 "(a, b, c) = list(set([x, y, z]))[::-1][:3]",
 "sorted(x, y, z)[:3]",
 "sorted(x, y, z)[::-1][1:]",
 "sorted(x, y, z)[1:]",
 "sorted(x, y, z)[:2]",
 "sorted(x, y, z)[::-1][:2]",
 "sorted(x, y, z)[:-1]",
 "sorted(x, y, z)[::-1][:-1]",
 "sorted(x, y, z)[-2:]",
 "sorted(x, y, z)[::-1][-2:]",
 "sorted(x, y, z)[-1:]",
 "sorted(x, y, z)[::-1][-1:]",
 "sorted(x, y, z)[1]",
 "sorted(x, y, z)[::-1][1]",
 "sorted(x, y, z)[0]",
 "sorted(x, y, z)[::-1][0]",
 "sorted(x, y, z)[-1]",
 "sorted(x, y, z)[::-1][-1]"
]