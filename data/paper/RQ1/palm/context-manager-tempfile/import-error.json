[
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    f = open(file, 'w')\n    f.write(content)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    f = open(file, 'w')\n    f.write(content)\n    temp_dir.cleanup()",
 "import tempfile\n(fd, file) = tempfile.mkstemp()\nf = os.fdopen(fd, 'w')\nf.write(content)\nf.close()\nos.remove(file)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir, suffix='.json', delete=False)\n    file.write(content)\n    file.close()",
 "\nwith tempfile.NamedTemporaryFile(suffix='.json', delete=False) as f:\n    f.write(content)\n    file = f.name",
 "\nwith tempfile.NamedTemporaryFile(suffix='.json', delete=False) as f:\n    f.write(content)\n    f.flush()\n    os.fsync(f.fileno())\n    file = f.name",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nshutil.rmtree(temp_dir)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\ntemp_dir.cleanup()",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    with open(file, 'w') as f:\n        f.write(content)\n    temp_dir.cleanup()",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\n    temp_dir.cleanup()",
 "import tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nf = tempfile.NamedTemporaryFile(mode='w', dir=temp_dir)\nf.write(content)\nf.close()\ntemp_dir.cleanup()",
 "import tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nwith tempfile.NamedTemporaryFile(mode='w', dir=temp_dir) as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = temp_dir.name + '/features.json'\n    with tempfile.NamedTemporaryFile(mode='w', dir=temp_dir.name) as f:\n        f.write(content)\n    f.close()",
 "\nwith tempfile.NamedTemporaryFile(mode='w') as f:\n    f.write(content)\n    f.flush()\n    file = f.name",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(mode='w', dir=temp_dir, delete=False)\n    file.write(content)\n    file.close()",
 "\nwith tempfile.NamedTemporaryFile(mode='w', dir=tempfile.mkdtemp()) as f:\n    f.write(content)\n    f.flush()\n    f.seek(0)",
 "import shutil\nwith tempfile.TemporaryDirectory() as temp_dir:\n    shutil.copyfileobj(open(content, 'rb'), open(os.path.join(temp_dir, 'file.txt'), 'wb'))",
 "import io\nwith tempfile.NamedTemporaryFile(mode='w', dir=temp_dir.name) as f:\n    f.write(content)\n    f.flush()",
 "\nwith tempfile.NamedTemporaryFile(mode='w', dir=tempfile.mkdtemp()) as f:\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryFile(mode='w', dir=tempfile.mkdtemp()) as f:\n    f.write(content)\n    f.flush()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(mode='w', dir=temp_dir)\n    file.write(content)\n    file.flush()\n    file.close()",
 "\nwith tempfile.NamedTemporaryFile(mode='w', dir=tempfile.mkdtemp()) as file:\n    file.write(content)\n    file.flush()\n    file.close()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir, delete=False)\n    file.write(content)\n    file.flush()\n    file.close()\n    temp_dir.cleanup()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\n    f.flush()\n    f.close()",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\nf.close()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.mkdtemp() + '/features.json'\n    f = open(file, 'w')\n    f.write(content)\n    temp_dir.cleanup()",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nf = open(os.path.join(temp_dir, 'file'), 'w')\nf.write(content)\nf.close()\nshutil.rmtree(temp_dir)",
 "import tempfile, os\ntemp_dir = tempfile.mkdtemp()\nf = open(os.path.join(temp_dir, 'file'), 'w')\nf.write(content)\nf.close()\nos.remove(os.path.join(temp_dir, 'file'))\nshutil.rmtree(temp_dir)",
 "import tempfile, os\ntemp_dir = tempfile.mkdtemp()\nf = open(os.path.join(temp_dir, 'file'), 'w')\nf.write(content)\nf.close()\nos.remove(os.path.join(temp_dir, 'file'))\nshutil.rmtree(temp_dir, ignore_errors=True)",
 "\nwith tempfile.NamedTemporaryFile(dir=temp_dir, suffix='.json') as f:\n    f.write(content)\n    f.flush()\n    file = f.name",
 "import json\nwith open(file, 'w') as f:\n    json.dump(content, f)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    f = tempfile.NamedTemporaryFile(dir=temp_dir, suffix='.json', delete=False)\n    f.write(content)",
 "\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'file.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nshutil.rmtree(temp_dir, ignore_errors=True)",
 "\nwith tempfile.NamedTemporaryFile(mode='w', dir=temp_dir, delete=False) as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "\nwith tempfile.NamedTemporaryFile(mode='w', dir=temp_dir, delete=False) as f:\n    f.write(content)\nfile = f.name\ntemp_dir.cleanup()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    with tempfile.NamedTemporaryFile(mode='w', dir=temp_dir) as f:\n        f.write(content)\n    f.close()",
 "\nwith tempfile.NamedTemporaryFile(mode='w') as f:\n    f.write(content)\n    f.flush()\n    file = os.path.join(tempfile.mkdtemp(), 'features.json')\n    f.seek(0)\n    os.rename(f.name, file)\n    f.close()",
 "\ntemp_dir = tempfile.mkdtemp()\nfile = tempfile.NamedTemporaryFile(dir=temp_dir)\nfile.write(content)",
 "\n{'temp_dir': tempfile.TemporaryDirectory(), 'f': open(temp_dir.name + '/features.json', 'w'), 'file': temp_dir.name + '/features.json'}",
 "\n{'temp_dir': tempfile.TemporaryDirectory(), 'f': tempfile.NamedTemporaryFile(mode='w'), 'file': f.name}",
 "\n{'temp_dir': tempfile.TemporaryDirectory(), 'f': tempfile.NamedTemporaryFile(mode='w', delete=False), 'file': f.name}",
 "\n{'temp_dir': tempfile.TemporaryDirectory(), 'f': tempfile.NamedTemporaryFile(mode='w', delete=True), 'file': f.name}",
 "\n{'temp_dir': tempfile.TemporaryDirectory(), 'f': tempfile.NamedTemporaryFile(mode='w', suffix='.json'), 'file': f.name}",
 "\n{'temp_dir': tempfile.TemporaryDirectory(), 'f': tempfile.NamedTemporaryFile(mode='w', prefix='features'), 'file': f.name}",
 "\n{'temp_dir': tempfile.TemporaryDirectory(), 'f': tempfile.NamedTemporaryFile(mode='w', dir=temp_dir.name), 'file': f.name}",
 "\nfile = os.path.join(temp_dir, 'features.json')",
 "\nf = open(file, 'w')",
 "\nf.write(content)",
 "\ntemp_dir.cleanup()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.mkdtemp(dir=temp_dir)\n    f = open(file, 'w')\n    f.write(content)\n    f.close()",
 "\nwith tempfile.NamedTemporaryFile() as temp_file:\n    file = temp_file.name\n    f = open(file, 'w')\n    f.write(content)\n    f.close()",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    file = tempfile.mkdtemp(dir=temp_dir)\n    f = open(file, 'w')\n    f.write(content)\n    f.close()",
 "\nwith tempfile.NamedTemporaryFile() as temp_file:\n    file = temp_file.name\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\n    tempfile.remove(file)",
 "\ntemp_dir = tempfile.mkdtemp()\nwith tempfile.NamedTemporaryFile(dir=temp_dir) as file:\n    file.write(content)",
 "\nf = tempfile.NamedTemporaryFile(delete=False)\nf.write(content)\nfile = f.name",
 "\ntemp_dir = tempfile.mkdtemp()\nf = tempfile.NamedTemporaryFile(dir=temp_dir, delete=False)\nf.write(content)\nfile = f.name",
 "import tempfile\nfeatures = [{} for _ in range(100)]\nf = open(tempfile.mkdtemp() + '/features.json', 'w')\nf.write(json.dumps(features))\nf.close()",
 "import json\ntemp_dir = tempfile.mkdtemp()\nfeatures = [{} for _ in range(100)]\nf = open(temp_dir + '/features.json', 'w')\nf.write(json.dumps(features))\nf.close()",
 "import tempfile\ncount = sum(arr)",
 "import numpy as np\ncount = np.sum(arr)",
 "import math\ncount = math.fsum(arr)",
 "import itertools\ncount = sum(itertools.chain.from_iterable(arr))",
 "\ncount = 0\nfor i in range(len(arr)):\n    count += arr[i]",
 "\ncount = 0\nfor (i, v) in enumerate(arr):\n    count += v",
 "\nf = tempfile.NamedTemporaryFile(mode='w', delete=False)\nfile = f.name",
 "\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as f:\n    file = f.name",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    with tempfile.NamedTemporaryFile(mode='w', delete=True, dir=temp_dir) as f:\n        file = f.name",
 "import json\nwith open(file, 'r') as f:\n    data = json.load(f)",
 "\nwith open(file, 'r') as f:\n    data = json.load(f)['data']",
 "\nwith open(file, 'r') as f:\n    data = json.loads(f.read())",
 "import json\ndata = json.loads(open(file, 'r').read())",
 "import json\njson.dump(arr, open(file, 'w'))",
 "import json\njson.dump(arr, f)",
 "import json\nf = open(file, 'w')\njson.dump(arr, f)\nf.close()",
 "import json\njson.dump(arr, f, indent=4)",
 "import json\njson.dump(arr, f, sort_keys=True)",
 "import json\njson.dump(arr, f, sort_keys=True, indent=4)",
 "import tempfile\nimport numpy as np\ntemp_dir = tempfile.TemporaryDirectory()\nf = tempfile.NamedTemporaryFile(mode='w', prefix='features')\nfile = f.name\nnp.savetxt(file, arr)",
 "import tempfile\nimport numpy as np\ntemp_dir = tempfile.TemporaryDirectory()\nf = tempfile.NamedTemporaryFile(mode='w', prefix='features')\nfile = f.name\nwith f:\n    np.savetxt(f, arr)",
 "import tempfile\nimport numpy as np\ntemp_dir = tempfile.TemporaryDirectory()\nf = tempfile.NamedTemporaryFile(mode='w', prefix='features')\nfile = f.name\nnp.savetxt(f, arr)\nf.close()",
 "import tempfile\nimport numpy as np\ntemp_dir = tempfile.TemporaryDirectory()\nf = tempfile.NamedTemporaryFile(mode='w', prefix='features')\nfile = f.name\nnp.savetxt(file, arr)\ntemp_dir.cleanup()",
 "\ncount = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]",
 "\ndef sum_arr(arr):\n    count = 0\n    for (index, value) in enumerate(arr):\n        count += arr[index]\n    return count\ncount = sum_arr(arr)",
 "\nwith tempfile.NamedTemporaryFile(mode='w', dir=temp_dir.name) as f:\n    f.write(str(arr))\ncount = int(f.read())",
 "import tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    features_file = os.path.join(temp_dir, 'features.json')\n    with open(features_file, 'w') as f:\n        f.write(content)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    with open(file, 'w') as f:\n        f.write(content)\ntemp_dir.cleanup()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\n    temp_dir.cleanup()",
 "\nos.path.join(temp_dir, 'features.json')",
 "\nwith open(file, 'w') as f:\n    f.write(json.dumps(features))",
 "\nwith open(file, 'wb') as f:\n    f.write(json.dumps(features).encode('utf-8'))",
 "\nwith open(file, 'w') as f:\n    pass",
 "\nwith open(file, 'w') as f:\n    f.write('')",
 "\nwith open(file, 'w') as f:\n    f.write('hello world')",
 "import os\ntemp_dir = os.path.join(os.getcwd(), 'temp')\nif not os.path.exists(temp_dir):\n    os.makedirs(temp_dir)\nf = open(os.path.join(temp_dir, file), 'w')",
 "\ntemp_dir = tempfile.mkdtemp()\nfile = tempfile.NamedTemporaryFile(dir=temp_dir)\nfile.write(content)\nfile.close()\ntemp_dir.cleanup()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir)\n    file.write(content)\n    file.close()",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    f = open(file, 'w')\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    f = tempfile.NamedTemporaryFile(dir=temp_dir, mode='w')\n    f.write(content)\n    file = f.name",
 "\ntemp_dir = tempfile.NamedTemporaryDirectory()\nfile = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nf = open(file, 'w')\nf.write(content)\ntemp_dir.cleanup()",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = open(os.path.join(temp_dir, 'features.json'), 'w')\nf.write(content)\nf.close()\ntemp_dir.cleanup()",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()\nos.rmdir(temp_dir)",
 "import tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir, mode='w', delete=False)\n    file.write(content)\n    file.close()\n    file_path = file.name\n    os.remove(file_path)\n    os.rmdir(temp_dir)",
 "import tempfile\nfile = tempfile.NamedTemporaryFile(mode='w')\nfile.write(content)\nfile.close()\nfile_path = file.name\nos.remove(file_path)",
 "\ntemp_dir = tempfile.TemporaryDirectory()\nf = tempfile.NamedTemporaryFile(dir=temp_dir, delete=False)\nf.write(content)\nf.close()",
 "\nf = tempfile.NamedTemporaryFile(delete=False)\nf.write(content)\nf.close()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)",
 "\ntemp_dir = tempfile.TemporaryDirectory()\nwith tempfile.NamedTemporaryFile(dir=temp_dir) as f:\n    f.write(content)\n    f.close()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir, delete=False)\n    file.write(content)\n    file.close()\n    f = open(file.name, 'r')\n    f.close()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    temp_dir = os.path.join(temp_dir, 'file')\n    file = open(temp_dir, 'w')\n    file.write(content)\n    file.close()\n    f = open(temp_dir, 'r')\n    f.close()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\ntemp_dir = os.path.dirname(f.name)\nf.close()",
 "\nwith tempfile.NamedTemporaryFile() as f:\n    f.write(content)\ntemp_dir = os.path.dirname(f.name)\nf.close()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir)\n    with open(file.name, 'w') as f:\n        f.write(content)",
 "\n{'temp_dir': tempfile.NamedTemporaryDirectory(), 'f': f, 'file': f.name}",
 "\n{'temp_dir': tempfile.NamedTemporaryDirectory(), 'f': open(f'{temp_dir}/features.json', 'w'), 'file': f.name}",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "from tempfile import NamedTemporaryDirectory\nwith NamedTemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "import tempfile\ndef write_features(content):\n    temp_dir = tempfile.NamedTemporaryDirectory()\n    file = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()\nwrite_features(content)",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n\n    def write_features(content):\n        file = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()\nwrite_features(content)",
 "from tempfile import NamedTemporaryFile, gettempdir\nwith NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:\n    f.write(content)\n    f.flush()\nwith open(os.path.join(gettempdir(), f.name), 'r') as fp:\n    content = fp.read()",
 "from tempfile import NamedTemporaryFile, gettempdir\nwith NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:\n    f.write(content)\n    f.flush()\ncontent = open(os.path.join(gettempdir(), f.name), 'r').read()",
 "\nwith tempfile.NamedTemporaryFile() as f:\n    f.write(content)\n    (temp_dir, file) = (f.name, f.name)",
 "import os\ntemp_dir = os.path.join(os.path.dirname(__file__), 'features.json')\nfile = open(temp_dir, 'w')\nfile.write(content)\nfile.close()",
 "import os\nwith tempfile.NamedTemporaryFile(dir='/tmp', suffix='.json') as f:\n    f.write(content)\n    f.flush()\n    temp_dir = f.name",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    filepath = os.path.join(temp_dir, 'features.json')\n    f = open(filepath, 'w')\n    f.write(content)\n    f.close()\n    temp_dir.cleanup()",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nf = open(os.path.join(temp_dir, 'features.json'), 'w')\nf.write(content)\nf.close()",
 "import tempfile\nimport shutil\nos.makedirs(temp_dir, exist_ok=True)\nf = open(os.path.join(temp_dir, 'features.json'), 'w')\nf.write(content)\nf.close()",
 "import shutil\nos.makedirs(temp_dir, exist_ok=True)\nshutil.copyfileobj(file, open(os.path.join(temp_dir, 'features.json'), 'wb'))",
 "import io\nwith io.open(os.path.join(temp_dir, 'features.json'), 'w', encoding='utf-8') as f:\n    f.write(content)",
 "\nwith open(os.path.join(temp_dir, 'features.json'), 'wb') as f:\n    f.write(content)",
 "import tempfile\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as file:\n    file.write(content)\n    file.flush()\n    filepath = file.name\ntemp_dir = tempfile.mkdtemp()\nshutil.move(filepath, os.path.join(temp_dir, 'features.json'))\ntemp_dir.cleanup()",
 "\ntemp_dir = tempfile.gettempdir()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryFile(delete=False, suffix='.json') as tf:\n    tf.write(content)\nfile = tf.name",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()\nos.remove(file)",
 "\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "\nopen(file, 'w').write(content)",
 "import tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir, mode='w', delete=False)\n    file.write(content)\n    file.close()\n    os.remove(file.name)\n    os.rmdir(temp_dir)",
 "import tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = tempfile.NamedTemporaryFile(dir=temp_dir, mode='w', delete=True)\n    file.write(content)\n    file.close()\n    f = file.name\n    os.remove(f)\n    os.rmdir(temp_dir)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = tempfile.NamedTemporaryFile(dir=temp_dir, mode='w', delete=False)\nfile.write(content)\nfile.close()\nfile_path = file.name\nos.remove(file_path)\nos.rmdir(temp_dir)",
 "\nwith tempfile.NamedTemporaryFile(mode='w') as f:\n    f.write(content)\n    file_path = f.name\n    os.remove(file_path)",
 "import io\nwith io.open(file_path, 'w', encoding='utf-8') as f:\n    f.write(content)\n    file_path = f.name\n    os.remove(file_path)",
 "import tempfile\nfile = tempfile.NamedTemporaryFile(mode='w', dir='/tmp')\nfile.write(content)\nfile.close()\nfile_path = file.name\nos.remove(file_path)",
 "\ntemp_dir = tempfile.TemporaryDirectory()\nf = tempfile.NamedTemporaryFile()\nf.name = file\ntemp_dir.cleanup()",
 "from contextlib import contextmanager\n@contextmanager\ndef temp_file():\n    temp_file = tempfile.mkstemp()\n    yield temp_file\n    os.close(temp_file[0])\n    os.remove(temp_file[1])\nwith temp_file() as f:\n    file = f.name",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    f = tempfile.NamedTemporaryFile(dir=temp_dir)",
 "from tempfile import TemporaryDirectory\ntemp_dir = TemporaryDirectory()\nfile = tempfile.NamedTemporaryFile(dir=temp_dir)\nfile.write(content)\ntemp_dir.cleanup()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\n    content = f.read()\nwith tempfile.NamedTemporaryFile() as file:\n    file.write(content)\n    file.flush()\nfile.close()",
 "\nwith tempfile.NamedTemporaryFile(dir=tempfile.mkdtemp()) as f:\n    f.write(content)\nf.close()\nshutil.rmtree(tempfile.mkdtemp())",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir.name, 'features.json')\n    f = open(file, 'w')\n    f.write(content)\n    f.close()",
 "\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=tempfile.gettempdir()) as f:\n    f.write(content)\n    f.flush()\n    features = json.load(f)",
 "import tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)",
 "import json\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    json.dump(content, f)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\nshutil.rmtree(temp_dir)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    f = open(temp_dir + '/features.json', 'w')\n    f.write(content)\n    f.close()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = temp_dir + '/features.json'\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\n    temp_dir",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, f.name)\ntemp_dir.cleanup()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\nfile = f.name\ntemp_dir = os.path.dirname(file)\ntemp_dir.cleanup()",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = temp_dir.name + '\\x0ceatures.json'\n    f = open(file, 'w')\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryFile() as f:\n    f.write(content)",
 "\ntemp_dir = tempfile.NamedTemporaryDirectory()\nf = open(temp_dir.name + '\\x0ceatures.json', 'w')\nf.write(content)\ntemp_dir.cleanup()",
 "from tempfile import TemporaryDirectory, NamedTemporaryFile\nwith TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    with NamedTemporaryFile(mode='w') as f:\n        f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nf = open(file, 'w')\nf.write(content)\ntemp_dir.cleanup()\n(file, temp_dir) = (temp_dir.name, temp_dir)",
 "import tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import json\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=tempfile.gettempdir()) as f:\n    f.write(content)\n    f.flush()\n    file = f.name\n    features = json.load(open(file, 'r'))",
 "import json\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=tempfile.gettempdir()) as f:\n    f.write(content)\n    f.flush()\n    file = f.name\n    features = json.loads(content)",
 "\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=tempfile.gettempdir()) as f:\n    f.write(content)\n    f.flush()\n    features = json.loads(content)",
 "\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=tempfile.gettempdir()) as f:\n    f.write(content)\n    f.flush()\n    features = json.load(f.name)",
 "\nfeatures = json.load(content)",
 "\nfeatures = json.load(open(file, 'r'))",
 "import tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w', encoding='utf-8')\n    f.write(content)\n    f.close()",
 "import json\njson.dump(content, open(os.path.join(tempfile.TemporaryDirectory(), 'features.json'), 'w'))",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    json.dump(content, f)\n    os.remove(file)",
 "from tempfile import TemporaryDirectory\nwith TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    json.dump(content, f)",
 "\nwith tempfile.NamedTemporaryFile() as temp_file:\n    json.dump(content, temp_file)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'temp_file')\nwith open(file, 'wb') as f:\n    f.write(content)",
 "\nf = tempfile.NamedTemporaryFile(delete=False)\nf.write(content)",
 "\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    file = f.name\n    f.write(content)\n    f.flush()",
 "\nwith tempfile.NamedTemporaryFile() as f:\n    file = f.name\n    f.write(content)\n    f.flush()\n    f.seek(0)\n    content = f.read()",
 "\nwith tempfile.NamedTemporaryFile('w+t') as f:\n    file = f.name\n    f.write(content)\n    f.flush()\n    f.seek(0)\n    content = f.read()",
 "\nwith tempfile.NamedTemporaryFile('w+b') as f:\n    file = f.name\n    f.write(content)\n    f.flush()\n    f.seek(0)\n    content = f.read()",
 "\nwith tempfile.NamedTemporaryFile(dir=tempfile.mkdtemp()) as file:\n    file.write(content)\n    file.flush()",
 "\nwith tempfile.NamedTemporaryFile('w', dir=tempfile.mkdtemp()) as file:\n    file.write(content)\n    file.flush()",
 "\nwith open(os.path.join(tempfile.mkdtemp(), 'features.json'), 'w') as file:\n    file.write(content)",
 "\nos.makedirs(temp_dir.name)\nfile = open(os.path.join(temp_dir.name, 'features.json'), 'w')\nfile.write(content)\nfile.close()",
 "\nwith tempfile.NamedTemporaryFile('w+t', dir=tempfile.mkdtemp()) as file:\n    file.write(content)\n    file.flush()",
 "\nos.makedirs(temp_dir.name)\nfile = open(os.path.join(temp_dir.name, 'features.json'), 'w+t')\nfile.write(content)\nfile.flush()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, f.name)\ndel f\ntemp_dir.cleanup()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, f.name)\ntemp_dir.cleanup()\ndel f",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\nfile = f.name\nos.path.dirname(file).cleanup()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\nfile = f.name",
 "\nwith tempfile.NamedTemporaryFile() as temp_dir:\n    content = temp_dir.name + '/features.json'\n    f = open(content, 'w')\n    f.write(content)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'file.txt')\nwith open(file, 'w') as f:\n    f.write(content)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'file.txt')\n    with open(file, 'w') as f:\n        f.write(content)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\ntempfile.delete_tempdir(temp_dir)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)\nf.close()",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\nf.seek(0)\ntemp_dir = f.name\nfile = f.name + '/features.json'",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "import contextlib\nwith contextlib.ExitStack() as stack:\n    temp_dir = stack.enter_context(tempfile.mkdtemp())\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)",
 "\ntf.io.gfile.MakeDirs(temp_dir)\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()\ntf.io.gfile.DeleteRecursively(temp_dir)",
 "\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = tempfile.NamedTemporaryFile(mode='w', delete=False)\nf.write(content)\nf.close()\nshutil.rmtree(temp_dir)\nos.rename(f.name, file)",
 "from contextlib import redirect_stdout\nwith tempfile.NamedTemporaryFile('w+', suffix='.json') as f:\n    f = redirect_stdout(f)\n    json.dump(content, f)\n    f.flush()\nwith open(f.name, 'r') as f:\n    contents = json.load(f)",
 "\nwith tempfile.NamedTemporaryDirectory() as temp_dir:\n    os.chdir(temp_dir)\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\nf.close()",
 "import json\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(json.dumps(content))\nf.close()",
 "from tempfile import NamedTemporaryFile\nwith NamedTemporaryFile(dir=tempfile.gettempdir(), suffix='.json') as f:\n    f.write(content)\nf.close()",
 "\n(temp_dir, file) = (tempfile.mkdtemp(), tempfile.NamedTemporaryFile().name + '/features.json')\nwith open(file, 'wb') as f:\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\n    f.seek(0)\n    temp_dir = f.name\nfile = f.name + '/features.json'",
 "\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(content)\n    temp_dir = f.name\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nwith open(os.path.join(temp_dir, 'features.json'), 'w') as f:\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryFile('w', delete=False) as f:\n    f.write(content)\n    f.flush()\n    file = f.name",
 "import os\nfile = os.path.join(tempfile.mkdtemp(), 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)\n    temp_dir",
 "\n(temp_dir, file, f) = tempfile.mkstemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "\nwith tempfile.NamedTemporaryFile(suffix='.json') as f:\n    f.write(content)",
 "\n(temp_dir, file) = tempfile.mkstemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import contextlib\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import contextlib\ntemp_dir = contextlib.ExitStack()\ntemp_dir.enter_context(tempfile.mkdtemp())\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\ntemp_dir.close()",
 "from contextlib import ExitStack\nwith ExitStack() as stack:\n    temp_dir = stack.enter_context(tempfile.mkdtemp())\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)",
 "\nwith tempfile.mkdtemp() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)",
 "import os\nimport json\nwith open(os.path.join(tempfile.gettempdir(), 'features.json'), 'w') as f:\n    f.write(content)",
 "import os\nimport json\ndef create_file(content):\n    temp_dir = tempfile.mkdtemp()\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\ncreate_file(content)",
 "\nwith open(os.path.join(temp_dir, 'features.json'), 'w') as f:\n    f.write(content)",
 "\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()\ntemp_dir.cleanup()",
 "\ntf.io.gfile.MakeDirs(temp_dir)\nfile = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()\ntf.io.gfile.DeleteRecursively(temp_dir)",
 "\nwith open(file, 'w') as f:\n    f.write(content)",
 "\ntemp_dir = '/tmp'\nf = open(os.path.join(temp_dir, 'features.json'), 'w')\nf.write(content)\nf.close()\ntf.io.gfile.DeleteRecursively(temp_dir)",
 "import tempfile, json\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\n    tf.io.gfile.DeleteRecursively(temp_dir)",
 "import tf.io.gfile as gfile\nimport os\ntf.io.gfile.MakeDirs(temp_dir)\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\ntf.io.gfile.DeleteRecursively(temp_dir)",
 "\nwith tf.io.gfile.GFile(file, 'w') as f:\n    f.write(content)\ntf.io.gfile.DeleteRecursively(temp_dir)",
 "\ntf.io.gfile.MakeDirs(temp_dir)\nwith tf.io.gfile.GFile(file, 'w') as f:\n    f.write(content)\ndel f, content\ntf.io.gfile.DeleteRecursively(temp_dir)",
 "\ntemp_dir = tempfile.mkdtemp()\nfile = tempfile.NamedTemporaryFile(dir=temp_dir, suffix='.json')\nfile.write(content)\nfile.flush()\nfile.seek(0)\ncontent = file.read()",
 "\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=os.getcwd()) as tmp:\n    tmp.write(content)",
 "\nwith tempfile.NamedTemporaryFile(dir=temp_dir, suffix='.json') as temp:\n    temp.write(content)\ntemp_file_name = temp.name",
 "\ntf.io.gfile.makedirs(temp_dir)\ntf.io.gfile.write_bytes(file, content)",
 "from contextlib import contextmanager\nfrom tempfile import NamedTemporaryFile\n@contextmanager\ndef temp_dir():\n    temp_dir = tempfile.mkdtemp()\n    try:\n        yield temp_dir\n    finally:\n        shutil.rmtree(temp_dir)\nwith temp_dir() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)",
 "import os, tempfile\nwith tempfile.NamedTemporaryFile('w+', delete=False) as f:\n    f.write(content)\n    f.flush()\n    f.seek(0)\n    contents = f.read()\nos.remove(file)",
 "import os\ntemp_dir = tempfile.mkdtemp(dir='/tmp')\nfile = os.path.join(temp_dir, 'tmp_file.txt')\nwith open(file, 'w+') as f:\n    f.write(content)\n    f.flush()\n    f.seek(0)\n    contents = f.read()\nos.rmdir(temp_dir)",
 "\nwith open(file, 'w+') as f:\n    f.write(content)\n    f.flush()\n    f.seek(0)\n    contents = f.read()",
 "import os, tempfile\nos.mknod(file)\nfile = open(file, 'w+')\nfile.write(content)\nfile.flush()\nfile.seek(0)\ncontents = file.read()\nfile.close()",
 "\ntemp_dir = tempfile.mkdtemp()\nf = open(os.path.join(temp_dir, 'file.json'), 'w+')\njson.dump(content, f)\nf.flush()\nf.seek(0)\ncontents = json.load(f)\nf.close()",
 "\ntemp_file = NamedTemporaryFile('w+', suffix='.json', delete=False)\nwith temp_file as f:\n    json.dump(content, f)\n    f.flush()\n    f.seek(0)\n    contents = json.load(f)\ntemp_file.close()",
 "\njson_file = json.dumps(content)\nwith open(json_file, 'r') as f:\n    contents = json.load(f)\n    f.close()",
 "import json\nwith tempfile.NamedTemporaryFile('w+', suffix='.json', dir=temp_dir) as f:\n    f.write(json.dumps(content))\nfile = f.name\nf.flush()\nwith open(file, 'r') as f:\n    contents = json.load(f)",
 "import json\nwith tempfile.NamedTemporaryFile('w+', suffix='.json') as f:\n    json.dump(content, f)\n    f.flush()\nwith open(f.name, 'r') as f:\n    contents = json.load(f)",
 "import json\ntemp_dir = tempfile.mkdtemp()\nwith open(os.path.join(temp_dir, 'features.json'), 'w') as f:\n    json.dump(content, f)\nf.close()",
 "\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w', encoding='utf-8') as f:\n    f.write(content.encode('utf-8'))\nf.close()",
 "\ntemp_dir = tempfile.mkdtemp()\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=temp_dir, delete=False) as f:\n    json.dump(content, f)\nf.close()",
 "import json\nwith tempfile.NamedTemporaryFile(suffix='.json', dir=tempfile.mkdtemp(), delete=False) as f:\n    json.dump(content, f)\nf.close()",
 "import json\ntemp_dir = tempfile.mkdtemp()\nfile = tempfile.NamedTemporaryFile(dir=temp_dir, delete=True)\nfile.write(json.dumps(content))",
 "\nwith tempfile.NamedTemporaryFile(dir=tempfile.gettempdir(), suffix='.json') as f:\n    f.write(content)\ntemp_dir = tempfile.gettempdir()\nfile = f.name",
 "from tempfile import NamedTemporaryFile\nwith NamedTemporaryFile(dir=tempfile.gettempdir(), suffix='.json') as f:\n    f.write(content)\nfile = f.name"
]