[
 "import operator\ndot_prod = reduce(operator.mul, zip(arr1, arr2))",
 "\ndot_prod = np.sum(arr1 * arr2)",
 "\ndot_prod = functools.reduce(lambda x, y: x + y, arr1 * arr2)",
 "\ndot_prod = math.fsum(arr1 * arr2)",
 "\ndot_prod = np.sum(arr1.T @ arr2)",
 "\ndot_prod = np.sum(arr1 @ arr2.T)",
 "\ndot_prod = np.sum(arr1 @ arr2)",
 "\ndot_prod = reduce(lambda x, y: x + y, map(lambda x, y: x * y, arr1, arr2))",
 "\ndot_prod = functools.reduce(lambda x, y: x + y, [v1 * v2 for (v1, v2) in zip(arr1, arr2)])",
 "\ndot_prod = np.einsum('ij, ij -> i', arr1, arr2)",
 "\ndot_prod = np.dot(arr1, arr2.T, out=arr3)",
 "\ndot_prod = np.dot(arr1.T, arr2, out=arr3)",
 "\ndot_prod = np.dot(arr1, arr2.T, out=arr3, casting='unsafe')",
 "\ndot_prod = np.dot(arr1.T, arr2, out=arr3, casting='unsafe')",
 "\ndot_prod = _dot_prod(arr1, arr2)",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='greedy')",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='optimal')",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='full')",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='experimental')",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='greedy', allow_unknown_args=True)",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='optimal', allow_unknown_args=True)",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='full', allow_unknown_args=True)",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, arr2, optimize='experimental', allow_unknown_args=True)",
 "\ndot_prod = np.einsum('ij,ij->', arr1, arr2)",
 "\ndot_prod = np.einsum('ij,ij->', arr1, arr2, out=dot_prod)",
 "\ndot_prod = np.einsum('ij,ij->', arr1, arr2, out=dot_prod, dtype=np.float64)",
 "\ndot_prod = np.einsum('ij,ij->', arr1, arr2, out=dot_prod, dtype=np.float64, optimize=True)",
 "\ndot_prod = np.einsum('ij,ij->', arr1, arr2, out=dot_prod, dtype=np.float64, optimize=True, casting='unsafe')",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, map(lambda a, b: a * b, arr1, arr2))",
 "\ndot_prod = np.tensordot(arr1, arr2, axes=0)",
 "\ndot_prod = np.einsum('ij->i', arr1 * arr2)",
 "\ndot_prod = np.einsum('ij->i', arr1 @ arr2)",
 "\ndot_prod = np.einsum('ij->i', arr1.dot(arr2))",
 "\ndot_prod = np.einsum('ij->i', np.dot(arr1, arr2))",
 "\ndot_prod = np.einsum('ij->i', np.matmul(arr1, arr2))",
 "\ndot_prod = np.einsum('ij->i', np.tensordot(arr1, arr2, axes=1))",
 "\ndot_prod = np.einsum('ij->i', np.tensordot(arr1, arr2, axes=0))",
 "\ndot_prod = np.dot(arr1.transpose(), arr2)",
 "\ndot_prod = np.dot(arr1.T, arr2.T)",
 "\ndot_prod = np.dot(arr1.T, arr2.T).sum()",
 "\ndot_prod = np.multiply(arr1, arr2).sum()",
 "\ndot_prod = np.dot(arr1.T, arr2).astype(np.int32)",
 "\ndot_prod = np.dot(arr1.T, arr2).tolist()",
 "\ndot_prod = np.dot(arr1.T, arr2).tobytes()",
 "\ndot_prod = np.dot(arr1.T, arr2).item()",
 "\ndot_prod = np.dot(arr1.T, arr2).sum()",
 "\ndot_prod = np.dot(arr1.T, arr2).mean()",
 "\ndot_prod = np.dot(arr1.T, arr2).std()",
 "\ndot_prod = np.dot(arr1.T, arr2).var()",
 "\ndot_prod = np.dot(arr1.T, arr2).min()",
 "\ndot_prod = np.dot(arr1.T, arr2).max()",
 "\ndot_prod = np.dot(arr1.T, arr2).argmin()",
 "\ndot_prod = np.dot(arr1.T, arr2).argmax()",
 "\ndot_prod = np.tensordot(arr1, arr2, axes=([1], [0]))",
 "\ndot_prod = sum(np.multiply(arr1, arr2.T))",
 "\ndot_prod = np.inner(arr1, arr2.T)",
 "\ndot_prod = np.tensordot(arr1, arr2, axes=([0, 1], [0, 1]))",
 "\ndot_prod = np.tensordot(arr1, arr2, axes=([1], [1]))",
 "\ndot_prod = np.dot(arr1, arr2, out=np.zeros(1))[0]",
 "\ndot_prod = np.sum([a * b for (a, b) in zip(arr1, arr2)])",
 "\ndot_prod = np.dot(arr1, arr2).sum(axis=1)",
 "\ndot_prod = np.sum(arr1 * arr2, axis=1, keepdims=True)",
 "\ndot_prod = np.sum(arr1 * arr2, axis=1, keepdims=False)",
 "\ndot_prod = np.sum(np.multiply(arr1, arr2), axis=1)",
 "\ndot_prod = np.sum(arr1 @ arr2, axis=1)",
 "\ndot_prod = np.sum(np.tensordot(arr1, arr2, axes=1))",
 "\ndot_prod = np.matmul(arr1.T, arr2)",
 "\nnp.dot(arr1, arr2)",
 "from numpy.linalg import inner\ndot_prod = inner(arr1, arr2)",
 "\ndot_prod = list(map(operator.mul, arr1, arr2)).sum()",
 "\ndot_prod = np.dot(arr1, arr2)[0][0]",
 "\ndot_prod = np.dot(arr1.T, arr2)[0][0]",
 "\ndot_prod = np.einsum('ij,ij->i', np.transpose(arr1), arr2)",
 "\ndot_prod = np.einsum('ij,ij->i', arr1, np.transpose(arr2))",
 "\ndot_prod = sum(np.multiply(arr1, arr2))",
 "\ndef zip_dot(vec1, vec2):\n    dot_prod = 0\n    for (val1, val2) in zip(vec1, vec2):\n        dot_prod += val1 * val2\n    return dot_prod\ndot_prod = zip_dot(vec1, vec2)",
 "import numpy as np\ndot_prod = np.sum(arr)",
 "\ndot_prod = sum(arr)",
 "\ndef dot(a, b):\n    sum = 0\n    for (x, y) in zip(a, b):\n        sum += x * y\n    return sum\ndot_prod = dot(arr, arr)",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, map(lambda x, y: x * y, arr1, arr2))",
 "import math\ndot_prod = math.sqrt(np.sum(arr1 ** 2)) * math.sqrt(np.sum(arr2 ** 2))",
 "import math\ndot_prod = np.linalg.norm(arr1) * np.linalg.norm(arr2)",
 "\nmath.fsum(arr)",
 "\nreduce(lambda x, y: x + y, arr)",
 "\nnumpy.sum(arr)",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, map(operator.mul, arr1, arr2))",
 "\ndot_prod = sum(map(operator.mul, arr1, arr2))",
 "\ndot_prod = 0\nfor i in range(0, n):\n    dot_prod += mat_a[i] * mat_b[i]",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, arr)",
 "\ndot_prod = reduce(lambda x, y: x + y, (val1 * val2 for (val1, val2) in zip(arr1, arr2)))",
 "\ndot_prod = _dot_product(arr1, arr2)",
 "\ndot_prod = reduce(lambda a, b: a + b, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "\narr1_T = np.array(arr1).T\ndot_prod = np.sum(arr1 * arr1_T)",
 "\ndef dot_prod(arr1, arr2):\n    return numpy.dot(arr1, arr2)\ndot_prod(arr1, arr2)",
 "\ndot_prod = functools.reduce(lambda x, y: x + y, (x * y for (x, y) in zip(arr1, arr2)))",
 "\narr1_transpose = np.transpose(arr1)\ndot_prod = np.dot(arr1_transpose, arr2)",
 "\ndot_prod = reduce(lambda a, b: a + b, (arr1[i] * arr2[i] for i in range(len(arr1))))",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, (arr1[i] * arr2[i] for i in range(len(arr1))))",
 "\ndot_prod = reduce(lambda x, y: x + y, list(map(lambda a, b: a * b, arr1, arr2)))",
 "\ndot_prod = sum(np.dot(arr1, arr2))",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, zip(arr1, arr2), 0)",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, map(operator.mul, arr1, arr2))",
 "\ndot_prod = reduce(lambda x, y: x + y, [a * b for (a, b) in zip(arr1, arr2)])",
 "\ndot_prod = functools.reduce(lambda x, y: x + y, map(lambda a, b: a * b, arr1, arr2))",
 "\ndot_prod = np.sum(arr1.flatten() * arr2.flatten())",
 "import functools\ndot_prod = functools.reduce(operator.mul, zip(arr1, arr2))",
 "\ndef dot_product(arr1, arr2):\n    return np.dot(arr1, arr2)\n(arr1, arr2) = (np.random.randint(0, 10, 5), np.random.randint(0, 10, 5))\ndot_prod = dot_product(arr1, arr2)",
 "\ndef dot_product(arr1, arr2):\n    prod = 0\n    for i in range(len(arr1)):\n        prod += arr1[i] * arr2[i]\n    return prod\n(arr1, arr2) = (np.random.randint(0, 10, 5), np.random.randint(0, 10, 5))\ndot_prod = dot_product(arr1, arr2)",
 "\ndef dot_product(arr1, arr2):\n    prod = 0\n    for (i, j) in enumerate(arr1):\n        prod += arr1[i] * arr2[j]\n    return prod\n(arr1, arr2) = (np.random.randint(0, 10, 5), np.random.randint(0, 10, 5))\ndot_prod = dot_product(arr1, arr2)",
 "\ndot_prod = scipy.linalg.dot(arr1, arr2)",
 "\ndot_prod = sum(itertools.starmap(lambda x, y: x * y, zip(arr1, arr2)))"
]