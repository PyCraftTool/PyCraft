[
 "\n{'code': 'dot_prod = sum(arr1 * arr2)'}",
 "\n{'code': 'dot_prod = np.dot(arr1, arr2)'}",
 "\n{'code': '\\ndot_prod = 0\\nfor i in range(len(arr1)):\\n    dot_prod += arr1[i] * arr2[i]\\n'}",
 "\n{'code': '\\ndot_prod = 0\\nfor i, j in zip(arr1, arr2):\\n    dot_prod += i * j\\n'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1, arr2)'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.sum(arr1 * arr2)'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.multiply(arr1, arr2).sum()'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.multiply(arr1, arr2).sum(axis=1)'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1, arr2)', 'explanation': \"Use numpy's dot function to calculate the dot product\", 'level': 'beginner'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.sum(arr1 * arr2)', 'explanation': \"Use numpy's sum function to calculate the dot product\", 'level': 'intermediate'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.sum([a * b for a, b in zip(arr1, arr2)])', 'explanation': \"Use numpy's zip function to iterate over the arrays and multiply the corresponding elements together, then sum the results\", 'level': 'expert'}",
 "\n{'code': 'dot_prod = 0\\nfor i, j in zip(arr1, arr2):\\n    dot_prod += i * j', 'type': 'beginner'}",
 "\n{'code': 'dot_prod = 0\\nfor i in range(len(arr1)):\\n    dot_prod += arr1[i] * arr2[i]', 'type': 'intermediate'}",
 "\n{'code': 'dot_prod = 0\\nfor i in range(min(len(arr1), len(arr2))):\\n    dot_prod += arr1[i] * arr2[i]', 'type': 'expert'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1, arr2)', 'explanation': 'Use numpy.dot to calculate dot product', 'level': 'beginner'}",
 "\n{'code': 'dot_prod = sum(arr1 * arr2)', 'explanation': 'Use numpy.sum to calculate dot product', 'level': 'intermediate'}",
 "\n{'code': 'dot_prod = 0\\nfor i in range(len(arr1)): \\n    for j in range(len(arr2)): \\n        dot_prod += arr1[i] * arr2[j]', 'explanation': 'Use nested for loop to calculate dot product', 'level': 'expert'}",
 "\n{'code': 'dot_prod = np.dot(arr1, arr2)', 'explanation': 'Use np.dot instead of np.einsum', 'level': 'beginner'}",
 "\n{'code': \"dot_prod = np.einsum('ij,ij->', arr1, arr2)\", 'explanation': 'Use np.einsum with default parameters', 'level': 'intermediate'}",
 "\n{'code': \"dot_prod = np.einsum('ij,ij->', arr1, arr2, out=dot_prod, dtype=np.float64, optimize=True)\", 'explanation': 'Use np.einsum with all parameters specified', 'level': 'expert'}",
 "\n{'code': '\\nimport numpy as np\\ndot_prod = sum(np.multiply(arr1, arr2))\\n'}",
 "\n{'code': '\\nimport itertools\\n\\ndef dot_product(arr1, arr2):\\n    return sum(a * b for a, b in itertools.zip_longest(arr1, arr2, fillvalue=0))\\n\\ndot_prod = dot_product(arr1, arr2)\\n'}",
 "\n{'code': '\\nimport operator as op\\n\\ndef dot_product(arr1, arr2):\\n    return reduce(op.mul, [arr1[i] * arr2[i] for i in range(len(arr1))])\\n\\ndot_prod = dot_product(arr1, arr2)\\n'}",
 "\n{'code': '\\ndot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])\\n'}",
 "\n{'code': 'dot_prod = 0.0\\nfor i in range(0, arr1.shape[0]):\\n    for j in range(0, arr2.shape[1]):\\n        dot_prod += arr1[i,j]*arr2[i,j]'}",
 "\n{'code': 'dot_prod = sum(sum(arr1 * arr2))'}",
 "\n{'code': 'from functools import reduce\\ndot_prod = reduce(lambda x, y: x + y, [(i * j) for (i, j) in zip(arr1, arr2)])', 'type': 'expert', 'imports': ['functools']}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.sum(arr1 * arr2)', 'type': 'intermediate', 'imports': ['numpy']}",
 "\n{'code': 'dot_prod = sum((i * j for (i, j) in zip(arr1, arr2)))', 'type': 'beginner', 'imports': []}",
 "\n{'code': 'dot_prod = 0\\nfor i in range(len(arr1)):\\n    dot_prod += arr1[i] * arr2[i]'}",
 "\n{'code': 'sum(list(map(lambda x, y: x * y, arr1, arr2)))', 'description': 'A shorter code using list comprehension and lambda', 'level': 'beginner'}",
 "\n{'code': 'np.dot(arr1, arr2)', 'description': 'A one-liner using numpy library', 'level': 'expert'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1,arr2)'}",
 "\n{'code': 'dot_prod=0\\nfor i in range(len(arr1)):\\n    dot_prod+=arr1[i]*arr2[i]'}",
 "\n{'code': 'def dot_prod(arr1,arr2):\\n    dot_prod=0\\n    for i in range(len(arr1)):\\n        dot_prod+=arr1[i]*arr2[i]\\n    return dot_prod'}",
 "\n{'code': 'dot_prod=lambda arr1,arr2: sum(arr1[i]*arr2[i] for i in range(len(arr1)))'}",
 "\n{'code': 'dot_prod=functools.reduce(lambda x,y: x+y, [arr1[i]*arr2[i] for i in range(len(arr1))])'}",
 "\n{'code': 'dot_prod=operator.mul(arr1,arr2).sum()'}",
 "\n{'code': 'dot_prod=functional.reduce(operator.mul,arr1,arr2)'}",
 "\n{'code': 'dot_prod=functools.reduce(operator.mul,arr1,arr2,lambda x,y: x+y)'}",
 "\n{'code': 'from math import fsum\\ndot_prod=fsum(arr1*arr2)'}",
 "\n{'code': 'dot_prod = 0\\nfor i in range(len(arr1)):\\n    for j in range(len(arr2)):\\n        dot_prod += arr1[i][j] * arr2[i][j]'}",
 "\n{'code': 'dot_prod = 0\\nfor (i, j) in zip(arr1, arr2):\\n    dot_prod += i * j'}",
 "\n{'code': 'dot_prod = 0\\nfor i, j in zip(arr1.flatten(), arr2.flatten()):\\n    dot_prod += i * j'}",
 "\n{'import numpy as np\\ndot_prod = np.inner(arr1, arr2)'}",
 "\n{'import numpy as np\\ndot_prod = np.dot(arr1, arr2)'}",
 "\n{'dot_prod = 0\\nfor i in range(len(arr1)):\\n    dot_prod += arr1[i] * arr2[i]'}",
 "\n{'dot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1, arr2)\\n', 'explanation': 'Using numpy dot function', 'tags': ['intermediate', 'numpy']}",
 "\n{'code': 'dot_prod = 0\\nfor i in range(len(arr1)):\\n    dot_prod += arr1[i] * arr2[i]\\n', 'explanation': 'Iterative solution', 'tags': ['beginner']}",
 "\n{'code': '\\ndef dot_prod(arr1, arr2):\\n    dot_prod = 0\\n    for i in range(len(arr1)):\\n        dot_prod += arr1[i] * arr2[i]\\n    return dot_prod\\ndot_prod(arr1, arr2)\\n', 'explanation': 'Using a helper function', 'tags': ['advanced']}",
 "\n{'code': 'import numpy as np\\ndot_prod=numpy.dot(arr1, arr2)\\nprint(dot_prod)'}",
 "\n{'code': 'def dot_prod(arr1, arr2):\\n    return sum(arr1 * arr2)\\ndot_prod(arr1, arr2)'}",
 "\n{'code': 'import numpy as np\\ndot_prod=sum([a*b for a, b in zip(arr1, arr2)])\\nprint(dot_prod)'}",
 "\n{'import numpy as np\\nnp.dot(arr1, arr2)'}",
 "\n{'dot_prod = 0\\nfor i, j in zip(arr1, arr2):\\n    dot_prod += i * j'}",
 "\n{'dot_prod = sum(arr1 * arr2)'}",
 "\n{'code': 'def dot_prod(arr1, arr2):\\n    dot_prod = 0\\n    for (i, a) in enumerate(arr1):\\n        for j, b in enumerate(arr2):\\n            dot_prod += a * b\\n    return dot_prod', 'explanation': 'Beginner: Using a nested for loop', 'tags': ['beginner']}",
 "\n{'code': 'from itertools import accumulate\\ndef dot_prod(arr1, arr2):\\n    return sum(a * b for (a, b) in zip(arr1, arr2))', 'explanation': 'Intermediate: Using the zip function', 'tags': ['intermediate']}",
 "\n{'code': 'def dot_prod(arr1, arr2):\\n    return np.dot(arr1, arr2)', 'explanation': 'Expert: Using the numpy.dot function', 'tags': ['expert']}",
 "\n{'code': '\\ndef dot_prod(arr1, arr2):\\n    dot_prod = 0\\n    for i in range(len(arr1)):\\n        dot_prod += arr1[i] * arr2[i]\\n    return dot_prod\\n', 'explanation': 'A simple beginner-friendly implementation of dot product.'}",
 "\n{'code': '\\ndef dot_prod(arr1, arr2):\\n    return sum(arr1 * arr2)\\n', 'explanation': 'A more concise implementation of dot product.'}",
 "\n{'code': '\\nfrom functools import reduce\\n\\ndef dot_prod(arr1, arr2):\\n    return reduce(lambda x, y: x + y, arr1 * arr2)\\n', 'explanation': 'A more performant implementation of dot product, using functools.reduce.'}",
 "\n{'code': 'from functools import reduce\\ndot_prod = reduce(lambda a, b: a + b, zip(arr1, arr2))', 'explanation': 'Use functools.reduce to implement a custom dot product function', 'level': 'expert'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1, arr2)', 'explanation': \"Use numpy's dot product function\", 'level': 'beginner'}",
 "\n{'code': 'dot_prod = sum([a * b for (a, b) in zip(arr1, arr2)])', 'explanation': 'Use a list comprehension to implement a custom dot product function', 'level': 'intermediate'}",
 "\n{'code': 'def dot_prod(arr1, arr2):\\n\\treturn sum(arr1 * arr2)'}",
 "\n{'code': \"\\ndef dot_prod(arr1, arr2):\\n\\t\\n    if len(arr1) != len(arr2):\\n\\t\\traise ValueError('Arrays must be the same length')\\n\\treturn sum(arr1 * arr2)\\n\"}",
 "\n{'code': '\\nfrom functools import reduce\\ndef dot_prod(arr1, arr2):\\n\\treturn reduce(lambda x, y: x + y, arr1 * arr2)\\n'}",
 "\n{'code': '\\nimport numpy as np\\ndef dot_prod(arr1, arr2):\\n\\treturn np.dot(arr1, arr2)\\n'}",
 "\n{'code': \"\\ndef dot_prod(arr1, arr2):\\n\\tif len(arr1) != len(arr2):\\n\\t\\traise ValueError('Arrays must be the same length')\\n\\tdot_prod = 0\\n\\tfor i in range(len(arr1)):\\n\\t\\tdot_prod += arr1[i] * arr2[i]\\n\\treturn dot_prod\\n\"}",
 "\n{'code': \"\\ndef dot_prod(arr1, arr2):\\n\\tif len(arr1) != len(arr2):\\n\\t\\traise ValueError('Arrays must be the same length')\\n\\tdot_prod = 0\\n\\tfor (i, j) in zip(arr1, arr2):\\n\\t\\tdot_prod += i * j\\n\\treturn dot_prod\\n\"}",
 "\n{'code': \"\\ndef dot_prod(arr1, arr2):\\n\\tif len(arr1) != len(arr2):\\n\\t\\traise ValueError('Arrays must be the same length')\\n\\tdot_prod = 0\\n\\tfor value in zip(arr1, arr2):\\n\\t\\tdot_prod += value[0] * value[1]\\n\\treturn dot_prod\\n\"}",
 "\n{'code': 'from math import dot\\ndot_prod = dot(arr1, arr2)'}",
 "\n{'code': '\\ndot_prod = sum(arr1 * arr2)\\n'}",
 "\n{'code': '\\ndot_prod = sum(pair[0] * pair[1] for pair in zip(arr1, arr2))\\n'}",
 "\n{'code': '\\nfrom collections import defaultdict\\ndot_prod = defaultdict(float)\\nfor i in range(len(arr1)):\\n    dot_prod[i] += arr1[i] * arr2[i]\\n\\nsum(dot_prod.values())\\n'}",
 "\n{'import': ['numpy', 'itertools'], 'code': 'dot_prod = sum(x*y for x,y in itertools.product(arr1,arr2))'}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = numpy.inner(arr1, arr2)'}",
 "\n{'import': ['numpy'], 'code': \"dot_prod = numpy.einsum('ij,ji->i', arr1, arr2)\"}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = numpy.sum(arr1 * arr2, axis=1)'}",
 "\n{'import': ['numpy', 'statistics'], 'code': 'dot_prod = statistics.mean(numpy.multiply(arr1, arr2))'}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = sum([ele1 * ele2 for ele1, ele2 in zip(arr1, arr2)])'}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = sum(arr1 * arr2)'}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = arr1.dot(arr2)'}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = numpy.dot(arr1, arr2)'}",
 "\n{'import': ['numpy', 'functools'], 'code': 'dot_prod = functools.reduce(lambda x, y: x + y, arr1 * arr2, 0)'}",
 "\n{'import': ['itertools'], 'code': 'dot_prod = sum(a * b for a, b in itertools.product(arr1, arr2))'}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = numpy.sum([a * b for a, b in zip(arr1, arr2)])'}",
 "\n{'import': ['numpy'], 'code': 'dot_prod = numpy.vdot(arr1, arr2)'}",
 "\n{'code': 'def dot_product(arr1, arr2):\\n  return sum((x1 * x2 for (x1, x2) in zip(arr1, arr2)))\\ndot_prod = dot_product(arr1, arr2)'}",
 "\n{'code': '\\narr1, arr2 = [1, 2, 3], [4, 5, 6]\\ndot_prod = 0\\nfor (x1, x2) in zip(arr1, arr2):\\n  dot_prod += x1 * x2\\n'}",
 "\n{'code': '\\ndot_prod = 0\\nfor i in range(len(arr1)):\\n  dot_prod += arr1[i] * arr2[i]\\n'}",
 "\n{'code': '\\ndot_prod = 0\\nfor (i, x1, x2) in zip(range(len(arr1)), arr1, arr2):\\n  dot_prod += x1 * x2\\n'}",
 "\n{'code': '\\ndef dot_product(arr1, arr2):\\n  # Initialize product to 0\\n  product = 0\\n  # Zip arr1 and arr2 together into a sequence of tuples (x1, x2)\\n  zip_iterator = zip(arr1, arr2)\\n  # Iterate over the zip_iterator, and add the product of each pair of elements to the total product\\n  for (x1, x2) in zip_iterator:\\n    product += x1 * x2\\n  # Return the total product\\n  return product\\n\\n# Get the input arrays\\narr1, arr2 = [1, 2, 3], [4, 5, 6]\\n# Calculate the dot product\\ndot_prod = dot_product(arr1, arr2)\\n'}",
 "\n{'code': 'from functools import reduce\\ndot_prod = reduce(lambda a, b: a + b, [a * b for a, b in zip(arr1, arr2)])\\n'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1, arr2)\\n'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.multiply.reduce(arr1, arr2)\\n'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.multiply.outer(arr1, arr2)\\n'}",
 "\n{'code': 'def dot_product(arr1, arr2): \\n  return sum(np.dot(arr1, arr2))\\ndot_prod = dot_product(arr1, arr2)\\n'}",
 "\n{'code': 'def dot_product(arr1, arr2): \\n  return sum(a * b for a, b in zip(arr1, arr2))\\ndot_prod = dot_product(arr1, arr2)\\n'}",
 "\n{'code': 'def dot_product(arr1, arr2): \\n  sum_ = 0\\n  for a, b in zip(arr1, arr2):\\n    sum_ += a * b\\n  return sum_\\ndot_prod = dot_product(arr1, arr2)\\n'}",
 "\n{'code': '\\nimport numpy as np\\narr1 = np.array([1, 2, 3])\\narr2 = np.array([4, 5, 6])\\ndot_prod = np.dot(arr1, arr2)\\n', 'type': 'beginner'}",
 "\n{'code': '\\nimport numpy as np\\narr1 = [1, 2, 3]\\narr2 = [4, 5, 6]\\ndef dot_prod(a, b):\\n  s = 0\\n  for i in range(len(a)):\\n    s += a[i] * b[i]\\n  return s\\ndot_prod = dot_prod(arr1, arr2)\\n', 'type': 'intermediate'}",
 "\n{'code': '\\nimport numpy as np\\narr1 = [1, 2, 3]\\narr2 = [4, 5, 6]\\ndot_prod = 0\\nfor i in range(len(arr1)):\\n  dot_prod += arr1[i] * arr2[i]\\n', 'type': 'advanced'}",
 "\n['import numpy as np\\ndot_prod = np.sum(arr1*arr2)', 'expert']",
 "\n['dot_prod = 0\\nfor i,j in zip(arr1, arr2):\\n    dot_prod += i*j', 'intermediate']",
 "\n['dot_prod = 0\\nfor i in arr1:\\n    for j in arr2:\\n        dot_prod += i*j', 'beginner']",
 "\n{'code': 'import numpy as np\\ndot_prod=np.dot(arr1, arr2)'}",
 "\n{'code': 'import numpy as np\\nsum = 0\\nfor index1, i in enumerate(arr1):\\n    for index2, j in enumerate(arr2):\\n        sum += i * j\\ndot_prod = sum'}",
 "\n{'code': 'def dot_product(arr1, arr2):\\n    sum = 0\\n    for index1, i in enumerate(arr1):\\n        for index2, j in enumerate(arr2):\\n            sum += i * j\\n    return sum\\ndot_prod = dot_product(arr1, arr2)'}",
 "\n{'code': 'import numpy as np\\ndot_prod = np.dot(arr1, arr2)', 'lang': 'python', 'level': 'beginner', 'desc': 'dot product using numpy.dot()'}",
 "\n{'code': 'dot_prod = 0\\nfor (x, y) in zip(arr1, arr2):\\n    dot_prod += x * y', 'lang': 'python', 'level': 'intermediate', 'desc': 'dot product using for loop'}",
 "\n{'code': 'def dot_prod(arr1, arr2):\\n    dot_prod = 0\\n    for (x, y) in zip(arr1, arr2):\\n        dot_prod += x * y\\n    return dot_prod', 'lang': 'python', 'level': 'expert', 'desc': 'dot product using a function'}"
]