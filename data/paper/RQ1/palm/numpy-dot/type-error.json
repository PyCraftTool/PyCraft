[
 "dot_prod = sum(map(lambda x, y: x * y, arr1, arr2))",
 "dot_prod = sum(zip(arr1, arr2))",
 "dot_prod = sum((v1 * v2 for (v1, v2) in zip(arr1, arr2)))",
 "import numpy as np\ndot_prod = np.cross(arr1, arr2)",
 "dot_prod = sum([a * b for (a, b) in zip(arr1, arr2)])",
 "dot_prod = 0\nfor (i, a) in enumerate(arr1):\n    for (j, b) in enumerate(arr2):\n        dot_prod += a * b",
 "dot_prod = 0\nfor ((i, a), (j, b)) in zip(enumerate(arr1), enumerate(arr2)):\n    dot_prod += a * b",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y, map(lambda x, y: x * y, arr1, arr2))",
 "def dot_prod(arr1, arr2):\n    return sum([a * b for (a, b) in zip(arr1, arr2)])\ndot_prod(arr1, arr2)",
 "dot_prod = 0\nfor (x, y) in zip(arr1, arr2):\n    dot_prod += x * y",
 "dot_prod = sum(arr1) * sum(arr2)",
 "dot_prod = (sum(arr1) + sum(arr2)) / 2",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y, zip(arr1, arr2))",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, zip(arr1, arr2))",
 "from itertools import product\ndot_prod = sum((v1 * v2 for (v1, v2) in product(arr1, arr2)))",
 "dot_prod = sum([sum((row * col for (row, col) in zip(arr1, arr2)))])",
 "{'import numpy as np': True, 'dot_prod': 42}",
 "import numpy as np\ndot_prod = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        dot_prod += arr1[i][j] * arr2[i][j]",
 "dot_prod = sum([sum(x * y) for (x, y) in zip(arr1, arr2)])",
 "dot_prod = sum(map(lambda a, b: a * b, arr1, arr2))",
 "dot_prod = sum((a * b for a in arr1 for b in arr2))",
 "import numpy as np\ndot_prod = np.outer(arr1, arr2).sum(axis=0)",
 "dot_prod = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        dot_prod += arr1[i] * arr2[j]",
 "sum((a * b for (a, b) in zip(arr1, arr2)))",
 "{'dot_prod': 75}",
 "{'dot_prod': 26}",
 "for value1 in arr1:\n    for value2 in arr2:\n        dot_prod += value1 * value2",
 "{'dot_prod': 770}",
 "from math import prod\ndot_prod = prod((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "{'import': ['numpy'], 'body': ['dot_prod = np.sum(arr1 * arr2)']}",
 "{'import': ['numpy'], 'body': ['dot_prod = (arr1 * arr2).sum()']}",
 "{'import': ['numpy'], 'body': ['dot_prod = np.dot(arr1, arr2)']}",
 "{'import': ['numpy'], 'body': ['dot_prod = np.inner(arr1, arr2)']}",
 "{'import': ['numpy'], 'body': ['dot_prod = np.matmul(arr1, arr2)']}",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a + b, [i * j for (i, j) in zip(arr1, arr2)])",
 "def dot_product(arr1, arr2):\n    dot_prod = 0\n    for (i, j) in zip(arr1, arr2):\n        dot_prod += i * j\n    return dot_prod\ndot_prod = dot_product(arr1, arr2)",
 "{'arr1': [1, 2, 3], 'arr2': [4, 5, 6], 'dot_prod': 32}",
 "{'arr1': [1, 1], 'arr2': [4, 4], 'dot_prod': 16}",
 "{'arr1': [0, 0, 0], 'arr2': [0, 0, 0], 'dot_prod': 0}",
 "{'imports': ['numpy'], 'code': 'arr1.dot(arr2)'}",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\nresult = arr1.dot(arr2)\ndot_prod = result",
 "import itertools\ndot_prod = sum((a * b for (a, b) in itertools.product(arr1, arr2)))",
 "dot_prod = sum((a[1] * b[0] for (a, b) in zip(arr1, arr2)))",
 "import itertools\nprod = zip(arr1, arr2)\ndot_prod = sum((a * b for (a, b) in prod))",
 "import operator\ndef dot_product(arr1, arr2):\n    return list(map(operator.mul, arr1, arr2)).sum()",
 "def dot_product(arr1, arr2):\n    res = 0\n    for (a, b) in zip(arr1, arr2):\n        res += a * b\n    return res",
 "{'import': ['math'], 'code': 'dot_prod = math.prod([arr1[i] * arr2[i] for i in range(len(arr1))])'}",
 "{'code': 'dot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])'}",
 "{'code': 'dot_prod = reduce(operator.mul, [arr1[i] * arr2[i] for i in range(len(arr1))])'}",
 "{'code': 'dot_prod = functools.reduce(lambda x, y: x * y, [arr1[i] * arr2[i] for i in range(len(arr1))])'}",
 "from operator import mul\ndot_prod = sum(map(mul, arr1, arr2))",
 "dot_prod = list(map(lambda x, y: x * y, arr1, arr2))\nsum(dot_prod)",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, list(map(lambda x, y: x * y, arr1, arr2)))",
 "def dot_prod(arr1, arr2):\n    dot_prod = sum(arr1 * arr2)\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    product_list = list(map(lambda x, y: x * y, arr1, arr2))\n    dot_prod = sum(product_list)\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    dot_prod = 0\n    for (index, value) in enumerate(arr1):\n        dot_prod += value * arr2[index]\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    dot_prod = 0\n    for index in range(len(arr1)):\n        dot_prod += arr1[index] * arr2[index]\n    return dot_prod",
 "dot_prod = list(map(lambda x, y: x * y, arr1, arr2))[0]",
 "def dot_product(arr1, arr2):\n    return sum((a * b for (a, b) in zip(arr1, arr2)))\ndot_prod = dot_product(arr1, arr2)",
 "from functools import reduce\ndot_prod = reduce(lambda a, b: a + b, zip(arr1, arr2))",
 "dot_prod = [x * y for (x, y) in zip(arr1, arr2)]",
 "dot_prod = sum(list(map(lambda x, y: x * y, arr1, arr2)))",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y, list(map(lambda x, y: x * y, arr1, arr2)))",
 "def dot_prod(arr1, arr2):\n    return sum(arr1 * arr2)",
 "def dot_prod(arr1, arr2):\n    a = np.array(arr1)\n    b = np.array(arr2)\n    return np.dot(a, b)",
 "def dot_prod(arr1, arr2):\n    return sum(map(lambda x, y: x * y, arr1, arr2))",
 "def dot_prod(arr1, arr2):\n    return reduce(lambda x, y: x + y, map(lambda x, y: x * y, arr1, arr2))",
 "import numpy as np\ndef dot_prod(arr1, arr2):\n    dot_prod = np.dot(arr1, arr2)\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    product_list = []\n    for (x, y) in zip(arr1, arr2):\n        product_list.append(x * y)\n    dot_prod = sum(product_list)\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    product_list = [[x * y for (x, y) in zip(arr1, arr2)]]\n    dot_prod = sum(product_list[0])\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    return sum([x * y for (x, y) in zip(arr1, arr2)])",
 "import numpy as np\ndef dot_prod(arr1, arr2):\n    return np.sum(arr1 * arr2)",
 "import functools\ndef dot_prod(arr1, arr2):\n    return functools.reduce(lambda x, y: x + y, map(lambda x, y: x * y, arr1, arr2))",
 "def dot_prod(arr1, arr2):\n    dot_prod = sum([val1 * val2 for (val1, val2) in zip(arr1, arr2)])\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    if len(arr1) != len(arr2):\n        raise ValueError('arrays must be the same length')\n    dot_prod = 0\n    for i in range(len(arr1)):\n        dot_prod += arr1[i] * arr2[i]\n    return dot_prod",
 "dot_prod = lambda arr1, arr2: np.sum(arr1 * arr2)",
 "dot_prod = list(map(lambda a, b: a * b, arr1, arr2))[0]",
 "dot_prod = sum([a[0] * b[0] + a[1] * b[1] for (a, b) in zip(arr1, arr2)])",
 "import numpy as np\ndef dot_prod(arr1, arr2):\n    return np.dot(arr1, arr2)",
 "{sum(zip(arr1, arr2))}",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a + b, zip(arr1, arr2))",
 "def dot_prod(arr1, arr2):\n    return sum(map(lambda x, y: x * y, arr1, arr2))\ndot_prod = dot_prod(arr1, arr2)",
 "dot_prod = []\nfor (x, y) in zip(arr1, arr2):\n    dot_prod.append(x * y)",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y, list(map(lambda x: x * x, arr1)))",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a + b, list(map(lambda a, b: a * b, arr1, arr2)))",
 "def dot_prod(arr1, arr2):\n    dot_prod = 0\n    for value in arr1:\n        dot_prod += value * arr2[value]\n    return dot_prod",
 "def dot_prod(arr1, arr2):\n    dot_prod = 0\n    for value in arr1.items():\n        dot_prod += value[1] * arr2[value[0]]\n    return dot_prod",
 "{'import': ['numpy'], 'body': 'return np.dot(np.array(arr1), np.array(arr2))'}",
 "{'import': ['numpy'], 'body': 'dot_prod = np.dot(np.array(arr1), np.array(arr2))'}",
 "{'import': ['numpy'], 'body': 'dot_prod = np.sum(a * b for a, b in zip(arr1, arr2))'}",
 "dot_prod = lambda arr1, arr2: sum(map(lambda x, y: x * y, arr1, arr2))",
 "def dot_prod(arr1, arr2):\n    product = 0\n    for i in range(len(arr1)):\n        product += arr1[i] * arr2[i]\n    return product\n\ndef main():\n    arr1 = [1, 2, 3]\n    arr2 = [4, 5, 6]\n    dot_prod = dot_prod(arr1, arr2)\nif __name__ == '__main__':\n    main()",
 "{'import': ['numpy'], 'code': 'dot_prod = np.dot(arr1, arr2)'}",
 "{'import': ['numpy'], 'code': 'dot_prod = arr1 @ arr2'}",
 "dot_prod = 0\nfor (i, x1, x2) in zip(range(len(arr1)), arr1, arr2):\n    dot_prod += x1 * x2",
 "import numpy as np\nfor (i, arr1_i) in enumerate(arr1):\n    for (j, arr2_j) in enumerate(arr2):\n        dot_prod += arr1_i * arr2_j",
 "({'code': 'dot_prod = arr1.dot(arr2)', 'type': 'beginner'},)",
 "({'code': 'dot_prod = sum(arr1*arr2)', 'type': 'intermediate'},)",
 "{'code': 'for i,j in zip(arr1, arr2): dot_prod += i*j', 'type': 'expert'}",
 "import numpy as np\nsum = 0\nfor (i, arr1_i) in enumerate(arr1):\n    for (j, arr2_j) in enumerate(arr2):\n        sum += arr1_i * arr2_j\ndot_prod = sum",
 "import numpy as np\nproduct = 0\nfor (i, arr1_i) in enumerate(arr1):\n    for (j, arr2_j) in enumerate(arr2):\n        product = product + arr1_i * arr2_j\ndot_prod = product",
 "{'code': 'dot_prod = numpy.dot(arr1, arr2)', 'is_better': False, 'is_worse': False, 'is_intermediate': True}",
 "{'code': 'dot_prod = sum([(x * y) for x in arr1 for y in arr2]', 'is_better': False, 'is_worse': True, 'is_intermediate': False}",
 "import numpy as np\ndot_prod = sum([sum((i * j for (i, j) in zip(x1, x2))) for (x1, x2) in zip(arr1, arr2)])",
 "dot_prod = 0\nfor (i, (x1, x2)) in enumerate(zip(arr1, arr2)):\n    if x1 is not None and x2 is not None:\n        dot_prod += x1 * x2",
 "dot_prod = 0\nfor x1 in arr1:\n    if x1 is not None:\n        for x2 in arr2:\n            if x2 is not None:\n                dot_prod += x1 * x2",
 "dot_prod = 0\nfor (x1, x2) in zip(arr1, arr2):\n    if x1 is not None and x2 is not None:\n        dot_prod += x1 * x2",
 "for (x1, x2) in zip(arr1, arr2):\n    dot_prod += x1 * x2",
 "{sum((a * b for (a, b) in zip(arr1, arr2)))}",
 "import numpy as np\ndef dot_prod(arr1, arr2):\n    return np.einsum('ij,ij->i', arr1, arr2)",
 "import numpy as np\ndef dot_prod(arr1, arr2):\n    res = 0\n    for i in range(arr1.shape[0]):\n        for j in range(arr1.shape[1]):\n            res += arr1[i, j] * arr2[i, j]\n    return res",
 "def dot_prod(arr1, arr2):\n    res = 0\n    for (i, row) in enumerate(arr1):\n        res += sum(row * arr2[i])\n    return res",
 "def dot_prod(arr1, arr2):\n    return sum((x * y for (x, y) in zip(arr1, arr2)))",
 "import numpy as np\narr3 = np.empty(len(arr1))\nfor i in range(len(arr1)):\n    arr3[i] = arr1[i] * arr2[i]\ndot_prod = np.sum(arr3)",
 "import numpy as np\ndef dot_product(a, b):\n    return sum(a * b)\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = dot_product(arr1, arr2)",
 "import numpy as np\ndef dot_product(a, b):\n    return sum(a * b)\nlist_a = [[1, 2, 3], [4, 5, 6]]\nlist_b = [[7, 8, 9], [10, 11, 12]]\na = np.array(list_a)\nb = np.array(list_b)\ndot_prod = dot_product(a, b)",
 "import numpy as np\ndot_prod = np.sum((a * b for (a, b) in zip(arr1, arr2)))",
 "import numpy as np\n(arr1, arr2) = (np.random.randint(0, 10, 5), np.random.randint(0, 10, 5))\ndot_prod = np.matmul(arr1, arr2)",
 "import numpy as np\n(arr1, arr2) = (np.random.randint(0, 10, 5), np.random.randint(0, 10, 5))\ndot_prod = np.inner(arr1, arr2)",
 "def dot_product(arr1, arr2):\n    return sum([a * b for (a, b) in zip(arr1, arr2)])\ndot_prod = dot_product(arr1, arr2)",
 "sum = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        sum += arr1[i] * arr2[j]\ndot_prod = sum",
 "dot_prod = sum([i * j for i in arr1 for j in arr2])",
 "from functools import reduce\ndot_prod = reduce(lambda a, b: a + b, [x * y for (x, y) in zip(arr1, arr2)])",
 "def get_product(a, b):\n    return a * b\ndot_prod = sum(map(get_product, arr1, arr2))",
 "for (x, y) in zip(arr1, arr2):\n    dot_prod = dot_prod + x * y",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a * b, arr1, 1)\nfor value in arr2:\n    dot_prod *= value",
 "from functools import reduce\nfrom operator import mul\ndot_prod = reduce(mul, arr1, 1)\nfor value in arr2:\n    dot_prod *= value",
 "dot_prod = 1\nfor a in arr1:\n    for value in arr2:\n        dot_prod *= a * value",
 "dot_prod = 1\nfor (a, b) in zip(arr1, arr2):\n    dot_prod *= a * b",
 "import numpy as np\nsum1 = 0\nfor (i, j) in zip(arr1, arr2):\n    sum1 += i * j\ndot_prod = sum1"
]