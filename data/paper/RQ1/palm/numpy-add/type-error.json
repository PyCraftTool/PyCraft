[
 "dot_prod = array1 + array2",
 "result = list(map(lambda x, y: x + y, array1, array2))",
 "result = []\nfor (i, j) in zip(array1, array2):\n    result.append(i + j)",
 "from functools import reduce\nresult = reduce(lambda x, y: x + y, zip(array1, array2))",
 "result = list(map(sum, zip(array1, array2)))",
 "from operator import add\nresult = [sum(map(add, array1, array2))]",
 "{'sum_of_elements': 8, 'dot_prod': None, 'result': [8]}",
 "dot_prod = [i1 + i2 for (i1, i2) in zip(array1, array2)]",
 "import numpy as np\nresult = np.append(array1, array2)",
 "def add_2_lists(x, y):\n    return x + y\nresult = list(map(add_2_lists, array1, array2))",
 "sum_of_elements = sum(array1) + sum(array2)\nresult = []\nfor (x, y) in zip(array1, array2):\n    result.append(x + y)",
 "sum_of_elements = 0\nfor x in array1:\n    sum_of_elements += x\nfor y in array2:\n    sum_of_elements += y\nresult = [sum_of_elements]",
 "sum_of_elements = sum(array1) + sum(array2)\ndot_prod = sum_of_elements",
 "sum_of_elements = 0\nfor value in array1:\n    sum_of_elements += value\ndot_prod = sum_of_elements + sum(array2)",
 "import numpy as np\nprod = [n1 * n2 for (n1, n2) in zip(array1, array2)]\nsum_of_elements = np.sum(prod)",
 "import numpy as np\ndotr_prod = np.array(array1 + array2).sum()",
 "import numpy as np\nprod = 0\nfor n1 in array1:\n    for n2 in array2:\n        prod += n1 * n2\ndot_prod = prod",
 "import numpy as np\nprod = 0\nfor (index, value) in enumerate(array1):\n    for value2 in array2[index:]:\n        prod += value * value2\ndot_prod = prod",
 "sum_of_elements = sum(array1) + sum(array2)",
 "sum_of_elements = 0\nfor element in array1:\n    sum_of_elements += element\nsum_of_elements = 0\nfor element in array2:\n    sum_of_elements += element\ndot_prod = sum_of_elements + sum_of_elements",
 "from itertools import chain\nresult = list(chain.from_iterable([array1, array2]))\nsum(result)",
 "def add_two_arrays(arr1, arr2):\n    return [arr1[i] + arr2[i] for i in range(len(arr1))]",
 "result = 0\nfor (x, y) in zip(array1, array2):\n    result += x + y",
 "array1 = [1, 2, 3]\narray2 = [4, 5, 6]\n\ndef sum_arrays(arr1, arr2):\n    sum_arr = []\n    for i in range(len(arr1)):\n        sum_arr.append(arr1[i] + arr2[i])\n    return sum_arr\nresult = sum_arrays(array1, array2)",
 "array1 = [1, 2, 3]\narray2 = [4, 5, 6]\n\ndef sum_arrays_v2(arr1, arr2):\n    sum_arr = [arr1[i] + arr2[i] for i in range(len(arr1))]\n    return sum_arr\nresult = sum_arrays_v2(array1, array2)",
 "sum_of_elements = int('1234')\nresult = [sum_of_elements]",
 "array1 = [1, 2, 3]\narray2 = [4, 5, 6]\nresult = sum((a + b for (a, b) in zip(array1, array2)))",
 "result = sum([a + b for (a, b) in zip(array1, array2)])",
 "result = [sum(el) for el in zip(array1, array2)]",
 "result = [sum((i + j for (i, j) in zip(array1, array2)))]",
 "import functools\nfrom operator import add\nresult = functools.reduce(add, array1 + array2)",
 "sum_of_elements = sum(array1 + array2)\nresult = sum_of_elements",
 "dot_prod = 0\nfor element in zip(array1, array2):\n    dot_prod += element[0] * element[1]\nresult = dot_prod",
 "import numpy as np\nsum_of_elements = np.sum(array1 + array2)\nresult = sum_of_elements",
 "sum_of_elements = 0\nfor (index, value) in enumerate(array1 + array2):\n    sum_of_elements += value\nresult = sum_of_elements",
 "result = 0\nfor element in array1 + array2:\n    result += element",
 "import numpy as np\nresult = np.sum(array1 + array2)",
 "{'import': ['itertools'], 'code': 'dot_prod = sum(v1 * v2 for v1, v2 in itertools.zip_longest(array1, array2, fillvalue=0))'}",
 "{'import': ['numpy'], 'code': 'dot_prod = np.dot(array1, array2)'}",
 "{'code': 'dot_prod = sum(map(lambda v1, v2: v1 * v2, array1, array2))'}",
 "dot_prod = sum((i * j for (i, j) in zip(array1, array2)))",
 "sum([x * y for (x, y) in zip(array1, array2)])",
 "dot_prod = sum([x * y for (x, y) in zip(array1, array2)])",
 "result = sum(array1 + array2)",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i]\nsum_of_elements2 = 0\nfor i in range(len(array2)):\n    sum_of_elements2 += array2[i]\nresult = sum_of_elements + sum_of_elements2",
 "dot_prod = 0\nfor i in range(len(array1)):\n    if i < len(array2):\n        dot_prod += array1[i] + array2[i]",
 "sum_of_elements = 0\nfor element in array1:\n    sum_of_elements += element\nfor element in array2:\n    sum_of_elements += element",
 "import numpy as np\nsum_of_elements = np.sum(array1) * np.sum(array2)",
 "{'import_libraries': ['numpy'], 'code': 'result = np.matmul(array1, array2)'}",
 "import numpy as np\nsum_of_elements = np.sum(array1)\nresult = sum_of_elements * sum_of_elements",
 "import numpy as np\nprod_of_elements = np.prod(array1)\nresult = prod_of_elements * prod_of_elements",
 "dot_prod = 0\nfor (x, y) in zip(array1, array2):\n    dot_prod += x * y",
 "sum_of_elements = 0\nfor element in array1:\n    sum_of_elements += element\nfor element in array2:\n    sum_of_elements += element\ndot_prod = sum_of_elements",
 "sum_of_elements = 0\nfor (i, j) in zip(array1, array2):\n    sum_of_elements += i * j\ndot_prod = sum_of_elements",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, map(lambda x, y: x * y, array1, array2))",
 "sum((a * b for (a, b) in zip(array1, array2)))",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y, zip(array1, array2))",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, [x * y for (x, y) in zip(array1, array2)])",
 "def dot_prod(a, b):\n    return sum((a[i] * b[i] for i in range(len(a))))",
 "",
 "temp = list(zip(array1, array2))\nresult = list(map(sum, temp))",
 "from itertools import accumulate\nresult = list(accumulate(zip(array1, array2), lambda x, y: x + y))",
 "array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\narray2 = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nresult = [4, 6, 8, 10, 12]",
 "sum = sum(array1[:5]) + sum(array2[:5])",
 "import numpy as np\nsum = np.sum(array1[:5]) + np.sum(array2[:5])\nresult = [sum]",
 "result = [e1 + e2 for (e1, e2) in zip(array1[:5], array2)]",
 "result = [e1 + e2 for (e1, e2) in zip(array1, array2[:5])]",
 "result = sum(list(map(sum, zip(array1, array2))))",
 "result = 0\nfor (index, value) in enumerate(array1):\n    result += value\nfor (index, value) in enumerate(array2):\n    result += value",
 "result = [x + y for (x, y) in zip(array1, array2) if x + y > 0]",
 "result = [x + y for (x, y) in zip(array1, array2) if x + y < 0]",
 "result = [x + y for (x, y) in zip(array1, array2) if x + y == 0]",
 "result = [x for (x, y) in zip(array1, array2)]",
 "result = []\nfor (x, y) in zip(array1, array2):\n    if x + y > 0:\n        result.append(x + y)",
 "result = []\nfor (x, y) in zip(array1, array2):\n    if x + y < 0:\n        result.append(x + y)",
 "result = []\nfor (x, y) in zip(array1, array2):\n    if x + y == 0:\n        result.append(x + y)",
 "result = [x for x in zip(array1, array2)]",
 "result = list(zip(array1, array2))",
 "result = list(map(lambda x, y: (x, y), array1, array2))",
 "result = list(zip(*zip(array1, array2)))",
 "result = [(x, y) for (x, y) in zip(array1, array2)]",
 "def sum_of_elements(array1, array2):\n    for i in range(len(array1)):\n        sum_of_elements = array1[i] + array2[i]\n    return sum_of_elements",
 "sum_of_elements = sum(map(lambda x, y: x + y, array1, array2))",
 "from itertools import chain\nresult = list(chain.from_iterable(zip(array1, array2)))",
 "result = list(map(lambda a, b: a + b, array1, array2))",
 "sum_of_elements = sum((a + b for (a, b) in zip(array1, array2)))",
 "def sum_of_elements(array1, array2):\n    return list(map(sum, zip(array1, array2)))",
 "def sum_of_elements(array1, array2):\n    return sum((a + b for (a, b) in zip(array1, array2)))",
 "sum_of_elements = sum(array1)\nsum_of_elements *= sum(array2)",
 "sum_of_elements = sum(array1)\nsum_of_elements += sum(array2)",
 "dot_prod = 0\nfor i in array1:\n    for j in array2:\n        dot_prod += i * j",
 "from functools import reduce\ndot_prod = reduce(lambda a, b: a + b, [i * j for (i, j) in zip(array1, array2)])",
 "{'sum_of_elements': 15, 'dot_prod': 75, 'result': 225}",
 "from numpy import concatenate\nresult = concatenate((array1, array2))",
 "result = list(tuple(zip(array1, array2)))",
 "{'import': [], 'code': 'result = array1 + array2'}",
 "{'import': ['itertools'], 'code': 'result = list(itertools.accumulate(array1+array2))'}",
 "{'import': ['functools'], 'code': 'result = functools.reduce(lambda a, b: a + b, array1+array2)'}",
 "{'import': ['numpy'], 'code': 'result = numpy.concatenate((array1, array2))'}",
 "import itertools\nresult = list(itertools.accumulate(list(zip(array1, array2)), lambda x, y: x + y))",
 "import itertools\nresult = list(itertools.accumulate(array1 + array2))",
 "def zip_sum(a, b):\n    return list(map(lambda x, y: x + y, a, b))\nresult = zip_sum(array1, array2)",
 "sum_of_elements = sum((i for i in array1)) + sum((i for i in array2))",
 "array1 = [1, 2, 3]\narray2 = [4, 5, 6]\nresult = sum(array1 + array2)",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a + b, zip(array1, array2))",
 "def sum_of_elements(array1, array2):\n    return [x1 + x2 for (x1, x2) in zip(array1, array2)]",
 "def sum_of_elements(array1, array2):\n    result = list()\n    for (x1, x2) in zip(array1, array2):\n        result.append(x1 + x2)\n    return result",
 "def sum_of_elements(array1, array2):\n    for (x1, x2) in zip(array1, array2):\n        result.append(x1 + x2)\n    return result",
 "def sum_of_elements(array1, array2):\n    return sum(array1 + array2)",
 "def sum_of_elements(array1, array2):\n    sum_result = []\n    for (i, j) in zip(array1, array2):\n        sum_result.append(i + j)\n    return sum_result",
 "def sum(array):\n    result = 0\n    for item in array:\n        result += item\n    return result\nsum_of_elements = sum(array1) + sum(array2)",
 "def sum(array):\n    result = 0\n    for item in array:\n        result += item\n    return result\nsum_of_elements = 0\nsum_of_elements += sum(array1)\nsum_of_elements += sum(array2)",
 "({'dot_prod': 64}, {'import numpy as np;': True, 'dot_prod': 64}, {'dot_prod': 64, 'result': 128}, {'dot_prod': 64, 'result': 128, 'num1': 4, 'num2': 4}, {'dot_prod': 64, 'num1': [4, 2], 'num2': [2, 4]})",
 "sum_of_elements = sum(array1) * sum(array2)",
 "{'sum_of_elements': 4181, 'dot_prod': 4181, 'result': 4181}",
 "dot_prod = 0\nfor i in range(len(array1)):\n    for j in range(len(array2)):\n        dot_prod += array1[i] * array2[j]",
 "sum(array1) + sum(array2)",
 "import numpy as np\nnp.sum(array1) + np.sum(array2)",
 "{'dot_prod': 920}",
 "sum_of_elements = 0\nfor (a, b) in zip(array1, array2):\n    sum_of_elements += a + b\nresult = sum_of_elements",
 "from itertools import accumulate\nresult = list(accumulate(zip(array1, array2), lambda a, b: a + b))",
 "sum(map(lambda x, y: x * y, array1, array2))",
 "list(map(lambda x, y: x * y, array1, array2))[0]",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a + b, [a * b for (a, b) in zip(array1, array2)])",
 "from collections import defaultdict\ndot_prod = 0\nfor (a, b) in zip(array1, array2):\n    dot_prod += defaultdict(int).get((a, b), 0) + defaultdict(int).get((b, a), 0)",
 "import itertools\ndot_prod = sum((a * b for (a, b) in itertools.product(array1, array2)))",
 "dot_prod = sum(map(lambda x, y: x * y, array1, array2))",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i]\nfor i in range(len(array2)):\n    sum_of_elements += array2[i]",
 "result = list(zip(array1, array2))\nresult = [x[0] + x[1] for x in result]",
 "import numpy as np\nsum_of_elements = np.sum(array1, axis=0) + np.sum(array2, axis=0)",
 "result = sum(list(map(lambda x, y: x + y, array1, array2)))",
 "import numpy as np\nsum_of_elements = np.sum(array1) + np.sum(array2)\ndot_prod = sum_of_elements",
 "import numpy as np\nresult = np.concatenate((array1, array2))",
 "result = list(zip(array1, array2))\nresult = [x + y for (x, y) in result]",
 "result = array1.copy()\nfor i in range(len(array2)):\n    result[i] += array2[i]",
 "result = [x[0] + x[1] for x in zip(array1, array2)]",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, (a * b for (a, b) in zip(array1, array2)))"
]