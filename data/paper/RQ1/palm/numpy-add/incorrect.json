[
 "import numpy as np\ndot_prod = np.add(array1, array2)",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i] + array2[i]\nresult = [sum_of_elements]",
 "import numpy as np\ndot_prod = np.dot(array1, array2)",
 "result = [sum(x + y) for (x, y) in zip(array1, array2)]",
 "import numpy as np\nadd_array = np.add(array1, array2)\ndot_prod = np.sum(add_array)",
 "add_array = []\nfor i in range(len(array1)):\n    add_array.append(array1[i] + array2[i])\ndot_prod = sum(add_array)",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i] * array2[i]\ndot_prod = sum_of_elements",
 "import numpy as np\nnp_res = np.dot(array1, array2)\ndot_prod = np_res.tolist()",
 "array1.dot(array2)",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i]\ndot_prod = sum_of_elements + array2[i]",
 "import functools\nresult = list(map(functools.partial(lambda x, y: x + y, array1), array2))",
 "import numpy as np\ndot_prod = np.vdot(array1, array2)",
 "import numpy as np\ndot_prod = np.inner(array1, array2)",
 "import numpy as np\ndot_prod = array1 @ array2",
 "import numpy as np\ndotr_prod = np.dot(np.array(array1), np.array(array2))",
 "import numpy as np\nsum_of_elements = np.sum([array1[i] * array2[i] for i in range(len(array1))])",
 "import numpy as np\ndot_prod = np.sum(np.multiply(array1, array2))",
 "import numpy as np\ndot_prod = np.inner(array1.T, array2.T)",
 "dot_prod = 0\nfor i in range(len(array1)):\n    dot_prod += array1[i] * array2[i]",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i] + array2[i]",
 "array1 = [1, 2, 3]\narray2 = [4, 5, 6]\ndot_prod = array1.dot(array2)",
 "result = sum(array1, array2)",
 "import functools\nresult = functools.reduce(lambda x, y: x + y, array1, array2)",
 "result = sum([array1[i] + array2[i] for i in range(len(array1))])",
 "from itertools import accumulate\nresult = accumulate(zip(array1, array2))[-1]",
 "sum_of_elements = sum([array1, array2])\nresult = [sum_of_elements]",
 "result = [[element1 + element2 for (element1, element2) in zip(arr1, arr2)] for (arr1, arr2) in zip(array1, array2)]",
 "result = [sum(arr[0] + arr[1]) for arr in zip(array1, array2)]",
 "dot_prod = []\nfor i in range(len(array1)):\n    dot_prod.append(array1[i] * array2[i])\nresult = sum(dot_prod)",
 "count = 0\nfor i in arr:\n    count += i\nsum_of_elements = count",
 "dot_prod = array1[0] * array2[0] + array1[1] * array2[1] + array1[2] * array2[2]",
 "import itertools\ndot_prod = sum((a + b for (a, b) in itertools.zip_longest(array1, array2)))",
 "dot_prod = sum((array1[i] * array2[i] for i in range(len(array1))))",
 "from numpy import dot\ndot_prod = dot(array1, array2)",
 "import numpy as np\nnp_res = np.dot(array1, array2)\ndot_prod = np.copy(np_res)",
 "dot_prod = [0] * len(array1)\nfor i in range(len(array1)):\n    for j in range(len(array2)):\n        dot_prod[i] += array1[i][j] * array2[j][i]",
 "sum_of_prod = 0\nfor i in range(len(array1)):\n    prod = array1[i] * array2[i]\n    sum_of_prod += prod\ndot_prod = sum_of_prod",
 "sum(array1 * array2)",
 "import numpy as np\nnp.add(array1, array2)",
 "import numpy as np\ndot_prod = np.sum(array1 * array2)",
 "import numpy as np\nresult = np.matmul(array1, array2)",
 "dot_prod = sum(array1 * array2)",
 "array1 * array2",
 "array1 @ array2",
 "dot_prod = array1.dot(array2)",
 "sum = 0\nfor i in range(len(array1)):\n    if i < 5:\n        sum += array1[i] + array2[i]\nresult = [sum]",
 "result = [e1 + e2 for (e1, e2) in zip(array1, array2) if i < 5]",
 "import numpy as np\nresult = np.sum(np.add(array1, array2))",
 "result = array1.sum() + array2.sum()",
 "import numpy as np\nresult = np.dot(array1.T, array2)",
 "import numpy as np\ndot_prod = np.sum(array1 * array2, axis=0)",
 "import numpy as np\ndot_prod = np.einsum('ij,ij->i', array1, array2)",
 "import numpy as np\ndot_prod = np.matmul(array1.T, array2)",
 "dot_prod = 0\nfor i in range(len(array1)):\n    for j in range(len(array2[0])):\n        dot_prod += array1[i][j] * array2[j][i]",
 "import numpy as np\nsum_of_elements = sum(array1 * array2)\nresult = sum_of_elements",
 "import numpy as np\ndot_prod = np.dot(array1, array2)\nresult = dot_prod",
 "import numpy as np\ndot_prod = np.dot(array1, array2)\nsum_of_elements = np.sum(array1)",
 "import numpy as np\nresult = np.linalg.det(np.vstack([array1, array2]))",
 "import numpy as np\ndot_prod = np.array1.dot(array2)",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements = sum_of_elements + array1[i] * array2[i]\ndot_prod = sum_of_elements",
 "(array1 * array2).sum()",
 "sum((array1[i] * array2[i] for i in range(len(array1))))",
 "sum = 0\nfor i in range(5):\n    sum += array1[i] + array2[i]\nresult = [sum]",
 "def sum_first_five(array1, array2):\n    sum = 0\n    for i in range(5):\n        sum += array1[i] + array2[i]\n    return sum\nsum = sum_first_five(array1, array2)\nresult = [sum]",
 "result = []\nfor (e1, e2) in zip(array1, array2):\n    if i < 5:\n        result.append(e1 + e2)",
 "sum_of_elements = array1.sum()\nsum_of_elements += array2.sum()\ndot_prod = sum_of_elements",
 "result = sum(array1.tolist()) + sum(array2.tolist())",
 "from itertools import accumulate\nresult = accumulate(array1 + array2)[-1]",
 "result = sum(zip(array1, array2), [])",
 "import numpy as np\ndot_prod = np.array([array1, array2]).dot(np.array([array1, array2].T))",
 "result = array1.add(array2)",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i]\n    sum_of_elements += array2[i]\nresult = [sum_of_elements]",
 "import numpy as np\ndot_prod = np.sum(array1, array2)",
 "sum_of_elements = 0\nfor index in range(len(array1)):\n    sum_of_elements += array1[index] + array2[index]\nresult = sum_of_elements",
 "sum_of_elements = []\nfor element in array1:\n    sum_of_elements.append(element + array2[element])",
 "dot_prod = (array1 @ array2).sum()",
 "sum((array1 * array2).ravel())",
 "result = (array1 + array2) ** 2",
 "sum([array1[i] * array2[i] for i in range(len(array1))])",
 "sum([array1[i] * array2[i] for i in range(array1.shape[0])])",
 "from functools import reduce\nreduce(lambda x, y: x + y, [array1[i] * array2[i] for i in range(array1.shape[0])])",
 "import numpy as np\nnp.sum(array1 * array2)",
 "array1.sum() + array2.sum()",
 "sum_of_elements = array1.shape[0] * array1.shape[1] + array2.shape[0] * array2.shape[1]",
 "sum_of_elements = array1.ravel().sum() + array2.ravel().sum()",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, array1 * array2)",
 "dot_prod = sum([array1[i] * array2[i] for i in range(len(array1))])",
 "result = sum(array1.ravel() + array2.ravel())",
 "result = sum_of_elements",
 "result = sum(array1) + array2",
 "result = array1 + sum(array2)",
 "result = array1.sum() + array2",
 "sum(array1 @ array2)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum()",
 "sum_of_elements = array1.sum() * array2.sum()",
 "import functools\nsum_of_elements = functools.reduce(lambda a, b: a + b, [array1[i] * array2[i] for i in range(len(array1))])",
 "sum_of_elements = array1.dot(array2.T)",
 "dot_prod = sum([array1[i] * array2[i] for i in range(0, len(array1))])",
 "sum_of_elements = sum(array1.flatten()) + sum(array2.flatten())",
 "sum_of_elements = array1.sum()\nfor i in range(len(array2)):\n    sum_of_elements += array2[i]",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    for j in range(len(array2)):\n        sum_of_elements += array1[i][j] + array2[i][j]",
 "import numpy as np\ndot_prod = np.multiply(array1, array2)",
 "import numpy as np\ndot_prod = np.add(array1, array2, dtype=np.float64)",
 "import numpy as np\ndot_prod = np.add(array1, array2, out=array3)",
 "import numpy as np\ndot_prod = np.add(array1, array2, out=array3, casting='unsafe')",
 "import numpy as np\ndot_prod = np.add(array1, array2, out=array3, casting='same_kind')",
 "import numpy as np\ndot_prod = np.add(array1, array2, out=array3, casting='unsafe', order='C')",
 "import numpy as np\ndot_prod = np.add(array1, array2, out=array3, casting='same_kind', order='C')",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    for j in range(len(array2)):\n        sum_of_elements += array1[i][j]",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += sum(array1[i])",
 "sum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += sum(array1[i])\nfor j in range(len(array2)):\n    sum_of_elements += sum(array2[j])",
 "result = sum([array1, array2])",
 "import numpy as np\nnp.add(array1, array2, out=array3)",
 "import numpy as np\nnp.dot(array1, array2, out=array3)",
 "import numpy as np\nnp.add(array1, array2, out=array3, casting='unsafe', order='C')",
 "sum(array1 * array2, axis=0, out=array3)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=1)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=0)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-1)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-2)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-3)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-4)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-5)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-6)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-7)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-8)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-9)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-10)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-11)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-12)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-13)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-14)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-15)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-16)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-17)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-18)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-19)",
 "import numpy as np\nresult = np.multiply(array1, array2).sum(axis=-20)",
 "result = [0 for i in range(len(array1))]\nfor i in range(len(array1)):\n    result[i] += array1[i] + array2[i]"
]