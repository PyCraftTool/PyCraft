[
 "\nsum_of_elements = np.sum(array1)\nsum_of_elements = np.sum(array2)\ndot_prod = sum_of_elements + sum_of_elements",
 "\nsum_of_elements = np.sum(array1 + array2)\nresult = [sum_of_elements]",
 "\nresult = reduce(lambda x, y: x + y, array1 + array2)",
 "\nnp.dot(array1, array2).tolist()",
 "\nfor (x, y) in zip(array1, array2):\n    result.append(x + y)",
 "\nsum_of_elements = functools.reduce(lambda x, y: x + y, array1 + array2)",
 "\nsum_of_elements = np.sum(array1) + np.sum(array2)",
 "\ndot_prod = np.sum(array1.dot(array2))",
 "\nresult = list(itertools.chain.from_iterable(zip(array1, array2)))",
 "\ndef add_two_arrays(arr1, arr2):\n    return np.add(arr1, arr2)\nresult = add_two_arrays(array1, array2)",
 "\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\nresult = np.sum(array1 + array2)",
 "\nsum_of_elements = np.array1.sum() + np.array2.sum()\nresult = [sum_of_elements]",
 "\nsum_of_elements = np.sum([array1, array2])\nresult = [sum_of_elements]",
 "\nsum_of_elements = sum(arr)",
 "import numpy as np\nsum_of_elements = np.sum(arr)",
 "\nresult = reduce(lambda a, b: a + b, [i1 + i2 for (i1, i2) in zip(array1, array2)])",
 "\nnp.dot(array1, array2)",
 "from scipy.spatial.distance import cdist\ndot_prod = cdist(array1, array2, metric='cosine')",
 "\nresult = list(itertools.accumulate(array1 + array2))[-1]",
 "\nresult = np.sum(np.array(array1) + np.array(array2))",
 "from scipy.spatial.distance import cdist\ndot_prod = cdist(array1, array2, metric='cosine', out=None)",
 "from scipy.spatial.distance import cdist\ndot_prod = cdist(array1, array2, metric='cosine', output=None)",
 "from scipy.spatial import distance\ndot_prod = distance.cosine(array1, array2)",
 "\ndot_prod = functools.reduce(lambda x, y: x + y, [array1[i] * array2[i] for i in range(len(array1))])",
 "\ndot(array1, array2)",
 "\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])",
 "\nresult = functools.reduce(lambda x, y: x + y, array1) + functools.reduce(lambda x, y: x + y, array2)",
 "\ndef addition(x, y):\n    return x + y\nresult = reduce(addition, array1 + array2)",
 "\nsum_of_elements = functools.reduce(lambda x, y: x + y, array1 + array2)\ndot_prod = functools.reduce(lambda x, y: x * y, array1 + array2)\nresult = sum_of_elements + dot_prod",
 "\nresult = sum(np.array(array1)) + sum(np.array(array2))",
 "\nresult = list(itertools.chain(*zip(array1, array2)))",
 "\nsum_of_elements = list(map(operator.add, array1, array2))",
 "\nsum_of_elements = np.sum(array1)\ndot_prod = sum_of_elements + np.sum(array2)",
 "\narray3 = array1 + array2\nsum_of_elements = np.sum(array3)",
 "\nsum_of_elements = np.add(np.sum(array1), np.sum(array2))",
 "\nsum_of_elements = np.sum(array1 + array2, axis=0)",
 "\nsum_of_elements = numpy.add(sum(array1), sum(array2))",
 "\nsum_of_elements = np.dot(array1, np.ones(len(array2)))",
 "\nsum_of_elements = np.ones(len(array1)) * np.dot(array2, np.ones(len(array1)))",
 "\ndot_prod = functools.reduce(add, [a * b for (a, b) in zip(array1, array2)])",
 "\nsum_of_elements = numpy.sum([array1, array2], axis=0)",
 "\nresult = list(itertools.accumulate(zip(array1, array2)))",
 "\nresult = np.add.reduce(array1 + array2)",
 "\nscipy.linalg.dot(array1, array2)",
 "\nsum_of_elements = functools.reduce(lambda x, y: x + y, array1 * array2)",
 "\nsum_of_elements = np.sum(array1 * np.ones(len(array2)))",
 "\nsum_of_elements = sum(array1 * np.ones(len(array2)))",
 "\ndot_prod = np.dot(array1, array2)\nsum_of_elements = np.ones(len(array1)) * dot_prod",
 "\nsum_of_elements = 0\nfor i in range(len(arr)):\n    sum_of_elements += arr[i]",
 "import numpy as np\nsum_of_elements = np.sum(arr)\ndot_prod = np.dot(arr, arr)",
 "\nsum_of_elements = 0\nfor element in arr:\n    sum_of_elements += element\ndot_prod = 0\nfor i in range(len(arr)):\n    dot_prod += arr[i] * arr[i]",
 "\nsum_of_elements = sum(arr)\ndot_prod = sum([x * x for x in arr])",
 "\nsum_of_elements = numpy.sum([array1, array2])",
 "\nsum_of_elements = functools.reduce(lambda a, b: a + b, array1 + array2)",
 "\nresult = list(map(add, array1, array2))",
 "\ndot_prod = np.tensordot(array1, array2, axes=1)",
 "\nsum_of_elements = np.concatenate([array1, array2]).sum()",
 "\nsum_of_elements = functools.reduce(lambda a, b: a + b, array1) + functools.reduce(lambda a, b: a + b, array2)",
 "\nnp.sum(array1 * array2, axis=0, out=array3)",
 "\nresult = list(itertools.chain(array1, array2))\nresult = [x + y for (x, y) in zip(array1, array2)]",
 "\nresult = [add(x, y) for (x, y) in zip(array1, array2)]",
 "\nresult = []\nfor (x, y) in zip(array1, array2):\n    result.append(add(x, y))",
 "\nresult = list(map(lambda x, y: add(x, y), array1, array2))",
 "\ndot_prod = functools.reduce(operator.mul, zip(array1, array2))",
 "\ndot_prod = functools.reduce(lambda x, y: x + y, map(lambda x, y: x * y, array1, array2))"
]