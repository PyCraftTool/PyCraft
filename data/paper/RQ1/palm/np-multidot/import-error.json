[
 "import numpy as np\nresult = np.dot(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.linalg.multi_dot([arr1, arr2, arr3])",
 "\nresult = np.einsum('ijk,ijk->ij', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))",
 "\narr3_t = arr3.transpose()\nresult = np.dot(np.dot(arr1, arr2), arr3_t)",
 "\narr1_t = np.transpose(arr1)\nresult = np.linalg.multi_dot([arr2, arr1_t, arr3])",
 "\nresult = np.matmul(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\n(arr1, arr2, arr3) = (np.random.randn(2, 5), np.random.randn(5, 6), np.random.randn(6, 3))\nresult = np.dot(np.dot(arr1, arr2), arr3)",
 "\nnp.dot(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nproduct = np.dot(arr1, np.dot(arr2, arr3))\nresult = product",
 "\nresult = np.dot(arr1, arr2)\nresult = np.dot(result, arr3)",
 "\nres = np.zeros((arr1.shape[0], arr1.shape[2]))\nfor i in range(arr1.shape[0]):\n    for j in range(arr1.shape[2]):\n        for k in range(arr1.shape[1]):\n            res[i, j] += arr1[i, k] * arr2[k, j] * arr3[i, j]\nresult = res",
 "import numpy as np\nnp.einsum('ijk,ijk->ij', arr1, arr2, arr3, out=result)",
 "import numpy as np\nresult = np.empty((arr1.shape[-2], arr1.shape[-1]))\nnp.einsum('ijk,ijk->ij', arr1, arr2, arr3, out=result)",
 "\narr1 = np.array([1, 2, 3, 4, 5, 6])\narr2 = np.array([6, 7, 8, 9, 10, 11])\narr3 = np.array([12, 13, 14, 15, 16, 17])\nresult = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i] * arr2[j] * arr3[k]",
 "\nresult = np.einsum('ijk,ikl,jl->il', arr1, arr2, arr3)",
 "\nresult = np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3)",
 "\nresult = np.tensordot(arr1, arr2, 3) + np.tensordot(arr2, arr3, 2)",
 "\nresult = np.expand_dims(arr1, axis=2).dot(np.expand_dims(arr2, axis=1)).dot(np.expand_dims(arr3, axis=0))",
 "\nresult = np.einsum('ijk,ijk,ijk->i', arr1, arr2, arr3)",
 "\ndef prod(*arrays):\n    return np.product(arrays)\nresult = prod(arr1, arr2, arr3)",
 "import numpy as np\narr3_t = arr3.transpose()\nresult = np.dot(arr1.dot(arr2), arr3_t)",
 "\narr3_t = arr3.T\nresult = np.dot(arr1, arr2) @ arr3_t",
 "\narr1t = np.transpose(arr1)\nresult = arr1t @ arr2 @ arr3.T",
 "import numpy as np\nresult = np.dot(np.dot(arr1, arr2), arr3.T)",
 "import numpy as np\nnp.linalg.multi_dot([arr2, np.transpose(arr1), arr3])",
 "import numpy as np\nresult = np.dot(arr2, np.dot(np.transpose(arr1), arr3))",
 "\nresult = np.einsum('ijk,jkl->ilk', arr1, arr2, arr3)",
 "\nresult = np.transpose(arr3).dot(np.transpose(arr2)).dot(arr1)",
 "\nresult = np.tensordot(arr1, arr2, axes=1).dot(arr3)",
 "\nresult = reduce(lambda x, y: np.matmul(x, y), [arr1, arr2, arr3])",
 "\nresult = reduce(lambda x, y: np.matmul(x, y), [np.matmul(arr1, arr2), arr3])",
 "\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3, axes=0), axes=1)",
 "\nresult = np.einsum('ijk,jkl,klm->ijlm', arr1, arr2, arr3)",
 "import numpy as np\narr1 = np.random.randn(2, 5)\narr2 = np.random.randn(5, 6)\narr3 = np.random.randn(6, 3)\nresult = np.dot(np.dot(arr1, arr2), arr3)",
 "import numpy as np\narr1 = np.random.randn(2, 5)\narr2 = np.random.randn(5, 6)\narr3 = np.random.randn(6, 3)\ntemp1 = np.dot(arr1, arr2)\nresult = np.dot(temp1, arr3)",
 "import numpy as np\n(arr1, arr2, arr3) = (np.random.randn(2, 5), np.random.randn(5, 6), np.random.randn(6, 3))\narr1_arr2 = np.dot(arr1, arr2)\nresult = np.dot(arr1_arr2, arr3)",
 "\nreturn np.dot(np.dot(arr1, arr2), arr3)",
 "\ndef mult(x, y):\n    return np.dot(x, y)\nresult = mult(mult(arr1, arr2), arr3)",
 "\ndot = lambda x, y: np.dot(x, y)\nresult = dot(dot(arr1, arr2), arr3)",
 "\nnp.einsum('ij,jk,kl->il', arr1, arr2, arr3)",
 "\nresult = np.dot(arr1, arr2)\nresult = result.dot(arr3)",
 "\nresult = np.zeros((arr1.shape[0], arr3.shape[1]))\nresult = np.matmul(arr1, arr2)\nresult = np.matmul(result, arr3)",
 "\nresult1 = np.matmul(arr1, arr2)\nresult2 = np.matmul(result1, arr3)\nresult = np.concatenate([result1, result2], axis=0)",
 "import numpy as np\nresult = np.einsum('ijk,jkl,ijl->ikl', arr1, arr2, arr3)",
 "\nresult = np.tensordot(arr1, arr2, axes=2) * arr3",
 "import numpy as np\nnp.dot(arr1.reshape(arr1.shape[0], arr1.shape[1] * arr1.shape[2]), arr2.reshape(arr2.shape[0], arr1.shape[1] * arr2.shape[2])).reshape(arr1.shape[0], arr1.shape[1])",
 "\nresult = np.dot(arr1.reshape(arr1.shape[0], arr1.shape[1] * arr1.shape[2]), arr2.reshape(arr1.shape[0], arr1.shape[1] * arr2.shape[2])).reshape(arr1.shape[0], arr1.shape[1])",
 "import numpy as np\nresult = np.empty((arr1.shape[-2], arr1.shape[-1]))\nresult = np.einsum('ijk,ijk->ij', arr1, arr2, arr3, out=result)",
 "import numpy as np\nshape = (arr1.shape[-2], arr1.shape[-1])\nresult = np.empty(shape)\nnp.einsum('ijk,ijk->ij', arr1, arr2, arr3, out=result)",
 "import numpy as np\nproduct = np.prod(np.array([arr1, arr2, arr3]))",
 "\nresult = np.empty_like(arr3, dtype=arr3.dtype)\nnp_einsum('ijk,ikl,jl->il', arr1, arr2, arr3, out=result)",
 "import numpy as np\narr4 = np.einsum('ijk,ikl,jl->il', arr1, arr2, arr3)\nresult = arr4",
 "\nresult = np.einsum('ijk,ikl,jl->il', arr1, arr2, arr3, out=np.zeros((arr1.shape[2], arr1.shape[3])))",
 "\nresult = np.einsum('ijk,ikl,jl->il', arr1, arr2, arr3, out=np.zeros((arr1.shape[2], arr1.shape[3])), optimize='optimal')",
 "import numpy as np\nres = np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3)\nresult = res",
 "import numpy as np\nresult = np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3).astype(np.float32)",
 "import numpy as np\narr1 = np.arange(6).reshape([2, 3])\narr2 = np.arange(9).reshape([3, 3])\narr3 = np.arange(12).reshape([3, 4])\nresult = np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3)",
 "import numpy as np\narr1 = np.arange(6).reshape([2, 3])\narr2 = np.arange(9).reshape([3, 3])\narr3 = np.arange(12).reshape([3, 4])\nresult = np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3).astype(np.float32).tolist()",
 "import numpy as np\nresult = np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3)\nresult = result.reshape([2, 2, 3])",
 "\nnp.tensordot(arr1, arr2, 3) + np.tensordot(arr2, arr3, 2)",
 "\nnp.tensordot(arr1, np.tensordot(arr2, arr3, 2), 3)",
 "\nresult = np.tensordot(arr1, arr2, 3)\nresult = result + np.tensordot(arr2, arr3, 2)",
 "import numpy as np\nresult = np.tensordot(arr1, arr2, axes=(3, 0)) + np.tensordot(arr2, arr3, axes=(2, 0))",
 "\nresult = np.tensordot(np.moveaxis(arr1, [0, 1, 2], [3, 0, 1]), np.moveaxis(arr2, [0, 1], [2, 0]), axes=(3, 0)) + np.tensordot(np.moveaxis(arr2, [0, 1], [2, 0]), np.moveaxis(arr3, [0], [1]), axes=(2, 0))",
 "import numpy as np\nresult = np.einsum('ijk,ikl,jl->ijkl', arr1, arr2, arr3)",
 "\narr1_3d = arr1.reshape(arr1.shape + (1,))\narr2_3d = arr2.reshape((1,) + arr2.shape)\narr3_3d = arr3.reshape((arr3.shape[0], 1, arr3.shape[1]))\nresult = np.matmul(arr1_3d, arr2_3d)\nresult = np.matmul(result, arr3_3d)",
 "import numpy as np\nresult = np.matmul(arr1, arr2.T).dot(arr3.T)",
 "\nresult = np.tensordot(arr1, arr2, axes=(2, 1)).dot(arr3)",
 "\ndef f(arr1, arr2, arr3):\n    return np.einsum('ijk,ijk,ijk->i', arr1, arr2, arr3)\nresult = f(arr1, arr2, arr3)",
 "\narr1 = np.array([1, 2, 3, 4, 5])\narr2 = np.array([1, 2, 3, 4, 5])\narr3 = np.array([1, 2, 3, 4, 5])\nresult = np.einsum('ijk,ijk,ijk->i', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.product(arr1, arr2, arr3)",
 "\ndef prod(arrays):\n    return np.product(arrays)\nresult = prod(arr1, arr2, arr3)",
 "import numpy as np\nprod = np.product([arr1, arr2, arr3])\nresult = prod",
 "import numpy as np\nresult = np.array([np.sum(i) for i in zip(np.array(arr1), np.array(arr2), np.array(arr3))])",
 "import numpy as np\nresult = np.array([[sum(item) for item in zip(a, b, c)] for (a, b, c) in zip(arr1, arr2, arr3)])",
 "import numpy as np\nresult = np.transpose(arr3_t.dot(arr2.dot(arr1)))",
 "\nresult = np.dot(arr1.dot(arr2), np.transpose(arr3))",
 "\nresult = np.dot(arr1 @ arr2, arr3.T)",
 "import numpy as np\narr3_t = np.transpose(arr3)\nresult = np.matmul(np.matmul(arr1, arr2), arr3_t)",
 "\nresult = np.dot(arr1, np.dot(arr2, np.transpose(arr3)))",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.dot(arr1.T, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1.T, arr2).dot(arr3)",
 "import numpy as np\nresult = np.tensordot(arr1, arr2, axes=([2], [0])).dot(arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2) * arr3",
 "import numpy as np\nresult = np.dot(arr1, arr2)",
 "import numpy as np\nresult = np.matmul(arr1, arr2)",
 "import numpy as np\nresult = np.multiply(arr1.T, arr2)",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2)",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3)).tolist()",
 "\nresult = np.dot(arr1, arr2).dot(arr3)",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3).ravel()",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3).flatten()",
 "\nresult = np.dot(arr1.ravel(), np.dot(arr2.ravel(), arr3.ravel()))",
 "\nresult = np.einsum('ij,jk,kl->ijk', arr1.flatten(), arr2.flatten(), arr3.flatten())",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3, optimize=True)",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3, order='F')",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3, casting='unsafe')",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3, dtype=np.float32)",
 "\nresult = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3, out=result_out)",
 "\nwith np.errstate(invalid='ignore'):\n    result = np.einsum('ijk,klm,mnp->ijnp', arr1, arr2, arr3)",
 "import numpy as np\narr1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\narr2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\narr3 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3)",
 "import numpy as np\narr1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\narr2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\narr3 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nresult = np.sum(arr1[..., None] * arr2 * arr3[None])",
 "import numpy as np\narr1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\narr2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\narr3 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nresult = np.dot(arr1[..., None], arr2 * arr3[None])",
 "import numpy as np\narr1_shape = arr1.shape\narr2_shape = arr2.shape\narr3_shape = arr3.shape\nresult = np.zeros((arr1_shape[0], arr3_shape[0]))\nfor i in range(arr1_shape[0]):\n    for j in range(arr2_shape[1]):\n        for k in range(arr3_shape[1]):\n            result[i, k] += arr1[i, j, k] * arr2[j, k, l] * arr3[l]",
 "import numpy as np\nresult = np.zeros((arr1.shape[0], arr3.shape[0]))\nfor i in range(arr1.shape[0]):\n    for j in range(arr2.shape[1]):\n        result[i, :] += arr1[i, j, :].dot(arr2[j, :, :].dot(arr3[:, :, :]))",
 "\nresult = np.matmul(np.transpose(arr1), np.matmul(arr2, arr3))",
 "\nresult = np.einsum('ij,jk->ik', arr1.T, np.matmul(arr2, arr3))",
 "\nresult = np.einsum('ij,jk->ik', np.transpose(arr1), np.einsum('ij,jk->ik', arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1.T, arr2 @ arr3)",
 "import numpy as np\nresult = np.dot(arr1.T, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1.T, np.einsum('ij,jk->ik', arr2, arr3))",
 "import numpy as np\nresult = np.matmul(arr1.T, arr2 @ arr3)",
 "import numpy as np\nresult = np.matmul(arr1.T, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1.T, arr2 @ arr3)",
 "import numpy as np\nresult = np.dot(arr1.T, arr2) * arr3",
 "import numpy as np\nresult = np.dot(arr1, arr3) * np.dot(arr2, arr3).T",
 "\nresult = np.matmul(arr1.T, arr2).matmul(arr3)",
 "\nresult = np.matmul(arr1, arr2).matmul(arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1.T, arr2, arr3)",
 "import numpy as np\nresult = np.dot(arr1.T, arr2, arr3)",
 "import numpy as np\nresult = np.inner(arr1.T, arr2.T) * arr3",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.dot(np.dot(arr1, arr2), arr3).reshape(arr1.shape[0], arr3.shape[1])",
 "import numpy as np\nresult = np.sum(np.tensordot(arr1, arr2, axes=([2], [0])) * arr3, axis=1)",
 "import numpy as np\narr1 = arr1.reshape(-1, 1)\narr2 = arr2.reshape(1, -1)\nresult = np.dot(arr1, arr2)",
 "import numpy as np\narr1 = arr1[:, np.newaxis]\narr2 = arr2[np.newaxis, :]\nresult = np.dot(arr1, arr2)",
 "\nresult = np.sum(arr1 * arr2)",
 "\nresult = np.matmul(arr1.T, arr2)",
 "\nresult = np.matmul(arr1, arr2.T)",
 "\nresult = np.dot(arr1.T, arr2.T)",
 "\nresult = np.dot(arr1.T, arr2.T).T",
 "import numpy as np\nresult = np.einsum('ij,ij->ij', arr1.T, arr2)",
 "import numpy as np\nresult = np.outer(arr1.T, arr2)",
 "import numpy as np\nresult = np.dot(arr1.T, arr2)",
 "import numpy as np\nresult = np.transpose(arr1) * arr2",
 "import numpy as np\nresult = np.multiply(arr1, arr2.T)",
 "\nresult = np.einsum('ij,jk->ik', arr1, arr2, optimize=True)",
 "\nresult = np.tensordot(arr1, arr2, axes=[[0, 1], [0, 1]])",
 "\narr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\nresult = np.einsum('ij,jk->ik', arr1, arr2)",
 "\narr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\nresult = np.einsum('ij,jk->ik', arr1, arr2, out=np.zeros((2, 2)))",
 "\nresult = list(np.dot(arr1, np.dot(arr2, arr3)))",
 "\nresult = []\nfor i in arr1:\n    for j in arr2:\n        for k in arr3:\n            result.append(i * j * k)\nresult = np.array(result)",
 "\nresult = []\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result.append(arr1[i] * arr2[j] * arr3[k])\nresult = np.array(result)",
 "\nresult = np.dot(np.array(arr1), np.dot(np.array(arr2), np.array(arr3)))",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\narr3 = np.array(arr3)\nresult = np.dot(arr1, np.dot(arr2, arr3))",
 "\nresult = np.sum(arr1 * arr2 * arr3)",
 "\nresult = np.dot(arr1[..., np.newaxis], arr2[np.newaxis, ...]).dot(arr3)",
 "\nresult = np.einsum('ij,jk->ik', arr1, arr2) * arr3",
 "\nresult = np.dot(arr1 * arr2, arr3)",
 "\nnp.dot(arr1, np.dot(arr2, arr3)).tolist()",
 "\nresult = np.dot(np.dot(arr1, arr2), arr3).item()",
 "\nresult = np.einsum('ik,kj,jk->i', arr1, arr2, arr3)",
 "\nresult = np.einsum('ijk->ikj', arr1 @ arr2 @ arr3)",
 "\ndef dot3(a, b, c):\n    return np.dot(a, np.dot(b, c))\nresult = dot3(arr1, arr2, arr3)",
 "\narr1 = np.asmatrix(arr1)\narr2 = np.asmatrix(arr2)\narr3 = np.asmatrix(arr3)\nresult = arr1 @ arr2 @ arr3",
 "import numpy as np\nresult = np.einsum('ijk,ikl,jl->ij', arr1, arr2, arr3)",
 "import numpy as np\narr4 = np.dot(arr1, np.dot(arr2, arr3))\nreturn arr4.tolist()",
 "\narr1_t = arr1.transpose()\nresult = np.dot(arr1_t, arr2).dot(arr3)",
 "\narr1_t = arr1.T\nresult = np.dot(arr1_t, arr2).dot(arr3)",
 "import numpy as np\nresult = np.linalg.det(np.dot(arr1, arr2) @ arr3)",
 "\nresult = np.einsum('ijk,jkl,kl->il', arr1, arr2, arr3)",
 "\nresult = np.product(np.dot(arr1, arr2) @ arr3)",
 "\nresult = reduce(lambda x, y: x * y, np.dot(arr1, arr2) @ arr3)",
 "\nresult = np.einsum('ik,kj,jk->i', arr1, arr2, arr3, out=result)",
 "\nresult = np.einsum('ik,kj,jk->i', arr1, arr2, arr3, optimize=True)",
 "\nresult = np.einsum('ik,kj,jk->i', arr1, arr2, arr3, out=result, optimize=True)",
 "\nresult = np.tensordot(arr1, arr2, axes=1)\nresult = np.einsum('ik,jk->ki', result, arr3)",
 "\nresult = np.einsum('ik,jk,jk->i', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ijk->ikj', np.matmul(arr1, arr2), arr3)",
 "\nresult = np.tensordot(arr1, arr2, axes=([1], [0])) @ arr3",
 "import numpy as np\nresult = np.prod([arr1, arr2, arr3])",
 "import numpy as np\nresult = np.multiply(arr1, np.multiply(arr2, arr3))",
 "\ndef dot3(a, b, c):\n    return (a * np.dot(b, c)).sum()\nresult = dot3(arr1, arr2, arr3)",
 "\ndef dot3(a, b, c):\n    return np.tensordot(a, b, axes=(-1, 0)).dot(c)\nresult = dot3(arr1, arr2, arr3)",
 "\narr1 = np.array(arr1)\narr2 = np.array(arr2)\narr3 = np.array(arr3)\nresult = arr1.dot(arr2.dot(arr3))",
 "import numpy as np\narr1 = np.asmatrix(arr1)\narr2 = np.asmatrix(arr2)\narr3 = np.asmatrix(arr3)\nresult = np.dot(arr1, arr2, arr3)",
 "\ndef matrix_multiplication(arr1, arr2, arr3):\n    a = np.dot(arr1, arr2)\n    result = np.dot(a, arr3)\n    return result\narr1 = np.asmatrix(arr1)\narr2 = np.asmatrix(arr2)\narr3 = np.asmatrix(arr3)\nresult = matrix_multiplication(arr1, arr2, arr3)",
 "\ndef matrix_multiplication(arr1, arr2, arr3):\n    return np.dot(np.dot(arr1, arr2), arr3)\narr1 = np.asmatrix(arr1)\narr2 = np.asmatrix(arr2)\narr3 = np.asmatrix(arr3)\nresult = matrix_multiplication(arr1, arr2, arr3)",
 "import numpy as np\nresult = np.matmul(arr1, arr2) @ arr3",
 "\nresult = np.dot(arr1, arr2) @ arr3",
 "\narr1 = np.asmatrix(arr1)\narr2 = np.asmatrix(arr2)\narr3 = np.asmatrix(arr3)\nresult = np.tensordot(arr1, arr2, (-1, -1)) @ arr3",
 "import numpy as np\nresult = np.dot(np.array(arr1), np.transpose(np.array(arr2))) @ np.array(arr3)",
 "\ntemp1 = np.zeros((len(arr1[0]), len(arr2)))\nfor i in range(len(arr1[0])):\n    for j in range(len(arr2)):\n        temp1[i, j] = np.dot(arr1[i], arr2[j])\nresult = sum(temp1 * arr3)",
 "\ntemp1 = [[np.dot(arr1[i], arr2[j]) for j in range(len(arr2))] for i in range(len(arr1[0]))]\nresult = sum([item * arr3[index] for (index, item) in enumerate(temp1)])",
 "\ntemp1 = [[np.dot(arr1[i], arr2[j]) for j in range(len(arr2))] for i in range(len(arr1[0]))]\nresult = sum([temp1[index][j] * arr3[index] for (index, j) in enumerate(range(len(arr3)))])",
 "\nresult = np.inner(np.inner(arr1, arr2), arr3)",
 "\nresult = np.tensordot(np.tensordot(arr1, arr2), arr3, axes=([1, 0], [0, 1]))",
 "\nresult = np.einsum('ij,jk,ki->i', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ijk,ikl,jl->ij', arr1.reshape((1, -1, 1)), arr2.reshape((1, -1, 1)), arr3.reshape((1, -1, 1)))",
 "import numpy as np\nresult = np.einsum('ik,kl->il', arr1, arr2)\nresult = np.einsum('ij,il->ij', arr3, result)",
 "import numpy as np\nresult = np.einsum('ijk,ikl,jl->ij', arr1, arr2, arr3, out=np.zeros(arr3.shape))",
 "\nresult = np.einsum('ijk,ikl,jl->ij', arr1, arr2, arr3, optimize=True)",
 "\nresult = np.multiply(np.multiply(arr1, arr2), arr3)",
 "import numpy as np\nreturn np.dot(arr1, np.dot(arr2, arr3)).tolist()",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3)).tolist()\nreturn result",
 "\ndef dot_product(a, b, c):\n    return np.dot(a, np.dot(b, c)).tolist()\nresult = dot_product(arr1, arr2, arr3)\nreturn result",
 "\ndef get_product(arr1, arr2, arr3):\n    res = np.array([arr1[0] * arr2[0] * arr3[0], arr1[0] * arr2[1] * arr3[1], arr1[1] * arr2[0] * arr3[1], arr1[1] * arr2[1] * arr3[0]])\n    return list(res)",
 "import numpy as np\nreturn np.matmul(arr1, np.matmul(arr2, arr3)).tolist()",
 "import numpy as np\narr1_t = np.transpose(arr1)\nresult = np.dot(arr1_t, np.dot(arr2, arr3))",
 "import numpy as np\narr1_t = np.transpose(arr1)\narr2_t = np.transpose(arr2)\nresult = np.dot(arr1_t, arr2_t)\nresult = np.dot(result, arr3)",
 "import numpy as np\nresult = np.linalg.multi_dot([arr1, arr2, arr3], out=arr4)",
 "import numpy as np\nresult = np.linalg.multi_dot([arr1, arr2, arr3], out=arr4, casting='unsafe')",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2) @ arr3",
 "import numpy as np\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2.dot(arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.dot(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.matmul(arr1, np.matmul(arr2, arr3))",
 "\narr1_t = arr1.transpose()\nresult = np.dot(arr1_t, np.dot(arr2, arr3))",
 "\nresult = np.sum(arr1 * np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.dot(np.transpose(arr1), np.dot(arr2, arr3))",
 "\nresult = np.dot(arr1.transpose(), np.dot(arr2, arr3))",
 "\nresult = np.dot(arr1, arr2.T).dot(arr3)",
 "\nresult = np.dot(arr1, np.dot(arr2, arr3).T)",
 "import numpy as np\nresult = np.dot(np.dot(np.transpose(arr1), np.transpose(arr2)), arr3)",
 "import numpy as np\nresult = np.dot(np.transpose(arr1), np.dot(np.transpose(arr2), arr3))",
 "import numpy as np\nresult = np.dot(np.transpose(arr1), np.transpose(arr2)).dot(arr3)",
 "import numpy as np\nresult = np.dot(np.transpose(arr1).dot(np.transpose(arr2)), arr3)",
 "import numpy as np\nresult = np.dot(arr1.T, arr2.T).dot(arr3)",
 "import numpy as np\nresult = np.dot(arr1, np.multiply(arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.dot(arr2, arr3)))",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.multiply(arr2, arr3)))",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2, arr3)",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2, arr3).reshape(arr4.shape)",
 "import numpy as np\nresult = np.einsum('ijk,jkl->il', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ijk,jkl->il', arr1, arr2, arr3, out=arr4)",
 "\nresult = np.einsum('ijk,jkl->kli', arr1, arr2, arr3)",
 "\nresult = np.einsum('ijk,jkl->ikl', arr1, arr2, arr3)",
 "\nresult = np.einsum('ijk,jkl->ijk', arr1, arr2, arr3)",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2, arr3, out=np.zeros((arr1.shape[0], arr2.shape[1], arr3.shape[2])))",
 "\nresult = np.einsum('ijk,jkl->kli', arr1, arr2, arr3, out=np.zeros((arr1.shape[0], arr2.shape[1], arr3.shape[2])))",
 "\nresult = np.einsum('ijk,jkl->ikl', arr1, arr2, arr3, out=np.zeros((arr1.shape[0], arr2.shape[1], arr3.shape[2])))",
 "\nresult = np.einsum('ijk,jkl->ilk', arr1, arr2, arr3, out=np.zeros((arr1.shape[0], arr2.shape[1], arr3.shape[2])))",
 "\nresult = np.einsum('ijk,jkl->ijk', arr1, arr2, arr3, out=np.zeros((arr1.shape[0], arr2.shape[1], arr3.shape[2])))",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize=True)",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='greedy')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='optimal')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='fast')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment_jit')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment_jit_no_compile')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment_jit_no_compile_no_cache')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment_jit_no_compile_no_cache_no_loop')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment_jit_no_compile_no_cache_no_loop_no_optimize')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment_jit_no_compile_no_cache_no_loop_no_optimize_no_cache')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='einsum_path_multi_index_assignment_jit_no_compile_no_cache_no_loop_no_optimize_no_cache_no_jit')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='greedy', casting='unsafe')",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3, optimize='optimal', casting='unsafe')",
 "\narr1 = np.array([[1, 2, 3], [4, 5, 6]])\narr2 = np.array([[7, 8, 9], [10, 11, 12]])\narr3 = np.array([[13, 14, 15], [16, 17, 18]])\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2) @ arr3",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2) * arr3",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2) * arr3.T",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2) * arr3.T.T",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2) * arr3.T.T.T",
 "\nresult = np.einsum('ijk,jkl->ijl', arr1, arr2) * arr3.T.T.T.T",
 "\nresult = np.einsum('ij,jk,kl->ikl', arr1, arr2, arr3)",
 "\nresult = np.einsum('i,j->ij', arr1, arr2)",
 "\nresult = np.einsum('i->i', arr1)",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize=True)",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='greedy')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='optimal')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='experimental')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='unsafe')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='no')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='equiv')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='safe')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='same_kind')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='unsafe_cast')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='unsafe_cast_same_kind')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='unsafe_cast_equiv')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='unsafe_cast_safe')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='unsafe_cast_equiv_safe')",
 "\nresult = np.einsum('ijk,jkl,lmi->imn', arr1, arr2, arr3, optimize='einsum_path', casting='unsafe_cast_same_kind_safe')",
 "\nresult = np.dot(arr1, arr2 * arr3)",
 "import numpy as np\nresult = np.tensordot(arr1, arr2, axes=1)\nresult = np.tensordot(result, arr3, axes=1)",
 "\narr1_t = arr1.transpose()\nresult = np.dot(arr1_t, arr2.dot(arr3))",
 "\narr1_t = arr1.transpose()\nresult = np.dot(arr1_t, arr2) @ arr3",
 "\nresult = np.sum(arr1 * np.matmul(arr2, arr3))",
 "\nresult = np.sum(arr1 * np.einsum('ij,jk->ik', arr2, arr3))",
 "\nresult = np.sum(np.einsum('ij,jk->ik', arr1, np.dot(arr2, arr3)))",
 "\nresult = np.sum(np.einsum('ij,jk->ik', arr1, np.matmul(arr2, arr3)))",
 "import numpy as np\nresult = np.dot(arr1.dot(arr2), arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('i...j...k...->i...k...', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2).dot(arr3)",
 "import numpy as np\nresult = np.matmul(arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('ij,jk->ki', arr2, arr1) * arr3",
 "import numpy as np\nresult = np.dot(arr1, np.matmul(arr2, arr3)).sum()",
 "import numpy as np\nresult = np.sum(np.dot(arr1, np.matmul(arr2, arr3)))",
 "import numpy as np\nresult = np.sum(np.dot(arr1, np.einsum('ij,jk->ik', arr2, arr3)))",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, np.dot(arr2, arr3))",
 "\nresult = np.sum(np.sum(np.dot(arr1, arr2), axis=1), axis=1)",
 "\nresult = np.array([np.sum(np.dot(arr1, arr2), axis=1), np.sum(np.dot(arr1, arr2), axis=1)]).sum()",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3).tolist()",
 "\nresult = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3).tolist()\nfor i in range(len(result)):\n    result[i] = int(result[i])",
 "\ndef einsum_function(arr1, arr2, arr3):\n    result = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3)\n    return result\nresult = einsum_function(arr1, arr2, arr3)",
 "\ndef einsum_function(arr1, arr2, arr3):\n    result = np.einsum('ijk,jkl,l->il', arr1, arr2, arr3)\n    return result\narr1 = np.random.rand(5, 5, 5)\narr2 = np.random.rand(5, 5, 5)\narr3 = np.random.rand(5)\nresult = einsum_function(arr1, arr2, arr3)",
 "\nresult = np.dot(arr1, arr2, axis=-1)",
 "\nresult = np.dot(arr1, arr2, out=arr3)",
 "\nresult = np.dot(arr1, arr2, out=arr3, dtype=np.float64)",
 "\nresult = np.dot(arr1, arr2, out=arr3, dtype=np.float64, casting='unsafe')",
 "\nresult = np.tensordot(arr1, arr2, axes=1)",
 "\nresult = np.sum(arr1 * arr2 * arr3, axis=0)",
 "\nresult = np.sum(arr1 * arr2 * arr3, axis=1)",
 "\nresult = np.sum(arr1 * arr2 * arr3, axis=2)",
 "\nresult = np.tensordot(arr1, arr2, axes=([1], [1]))\nresult = np.tensordot(result, arr3, axes=([1], [1]))",
 "import numpy as np\nresult = np.einsum('ijk,kl->ij', arr1, arr2) @ arr3",
 "import numpy as np\nresult = np.matmul(arr1, arr2)\nresult = np.matmul(result, arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2)\nresult = np.einsum('ik,kj->ij', result, arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize=True)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='greedy')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='experimental')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='disabled')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='greedy', casting='unsafe')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='optimal', casting='unsafe')",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3, optimize='experimental', casting='unsafe')",
 "\narr1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narr2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narr3 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nresult = np.einsum('ijk,jkl->ikl', arr1, arr2, arr3)",
 "\narr1 = np.asarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narr2 = np.asarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narr3 = np.asarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nresult = np.einsum('ijk,jkl->ikl', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3, optimize='greedy')",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3, optimize='optimal')",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3, optimize='fast')",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3, optimize='none')",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3).ravel()",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3).reshape(-1)",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3)[:, None]",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3)[:, :, None]",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3)[:, :, :, None]",
 "import numpy as np\nresult = np.einsum('i...,j...,k...->i...k...', arr1, arr2, arr3)[:, :, :, :, None]",
 "import numpy as np\nresult = np.einsum('i...j...k...->i...k...', arr1, arr2, arr3, optimize=True)",
 "import numpy as np\nresult = np.einsum('i...j...k...->i...k...', arr1, arr2, arr3, out=result)",
 "import numpy as np\nresult = np.einsum('i...j...k...->i...k...', arr1, arr2, arr3, out=result, dtype=np.float64)",
 "import numpy as np\nresult = np.einsum('i...j...k...->i...k...', arr1, arr2, arr3, out=result, dtype=np.float64, optimize=True)",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2) * arr3.T",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2).dot(arr3.T)",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2).dot(arr3.T).dot(arr1)",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2).dot(arr3.T).dot(arr1).dot(arr2)",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', arr1, arr2).dot(arr3.T).dot(arr1).dot(arr2).dot(arr3)",
 "\nresult = np.dot(np.einsum('ij,jk->ik', arr1, arr2), arr3)",
 "\nresult = np.dot(np.einsum('ij,jk->ik', arr1, arr2), arr3)[:, np.newaxis]",
 "\nresult = np.dot(np.einsum('ij,jk->ik', arr1, arr2), arr3)[:, :, np.newaxis]",
 "\nresult = np.dot(np.einsum('ij,jk->ik', arr1, arr2), arr3)[:, :, :, np.newaxis]",
 "\nresult = np.tensordot(arr1, arr2, axes=1) * arr3",
 "\nresult = np.tensordot(arr1, arr2, axes=1).sum(axis=1)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr3 = np.array([7, 8, 9])\nresult = np.dot(arr1, np.matmul(arr2, arr3))",
 "\nresult = np.tensordot(arr1, arr2, axes=[[0], [0]]).dot(arr3)",
 "\nresult = np.inner(arr1, arr2, arr3)",
 "\nresult = np.matmul(arr1, arr2.dot(arr3))",
 "\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr3 = np.array([7, 8, 9])\nresult = np.matmul(arr1, np.dot(arr2, arr3))"
]