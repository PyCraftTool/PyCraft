[
 "\n{'imports': ['numpy'], 'code': 'arr1,arr2,arr3=np.random.randn(2,5),np.random.randn(5,6),np.random.randn(6,3)\\nresult=(arr1@arr2)@arr3'}",
 "\n{'code': 'import numpy as np\\narr_product = np.dot(arr1, np.dot(arr2, arr3))\\nresult = arr_product', 'explanation': 'Using np.dot to calculate product multiple times.', 'level': 'beginner'}",
 "\n{'code': 'product = arr1.dot(arr2.dot(arr3))\\nresult = product', 'explanation': 'Using dot method multiple times.', 'level': 'intermediate'}",
 "\n{'code': \"result = np.einsum('ijk,jki->ij', arr1, arr2, arr3)\", 'explanation': 'Using einsum function to calculate product directly.', 'level': 'expert'}",
 "\n{'code': \"import numpy as np\\nresult = np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3)\", 'type': 'beginner', 'lang': 'python', 'imports': ['numpy']}",
 "\n{'code': \"def my_einsum(arr1, arr2, arr3):\\n    return np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3)\\n\\nresult = my_einsum(arr1, arr2, arr3)\", 'type': 'intermediate', 'lang': 'python', 'imports': ['numpy']}",
 "\n{'code': \"\\nimport numpy as np\\ndef my_einsum(arr1, arr2, arr3):\\n    result = np.empty([*arr1.shape[0:2], *arr2.shape[2:]], dtype=np.float32)\\n    return np.einsum('ijk,ijk,ijk->ijk', arr1, arr2, arr3)\\n\\nresult = my_einsum(arr1, arr2, arr3)\\n\", 'type': 'expert', 'lang': 'python', 'imports': ['numpy']}",
 "\n{'code': 'result=np.sum(arr)', 'import_libraries': ['numpy']}",
 "\n{'code': 'result=sum(arr)', 'import_libraries': []}",
 "\n{'code': 'result=sum(arr, keepdims=True)', 'import_libraries': ['numpy']}",
 "\n{'code': 'arr1=arr[:,0]\\narr2=arr[:,1]\\narr3=arr[:,2]\\nresult=arr1+arr2+arr3', 'import_libraries': []}",
 "\n{'code': 'import numpy as np\\nresult = np.tensordot(arr1, arr2, axes=([2], [0])).dot(arr3)', 'level': 'expert', 'explanation': 'This is the most concise way to write this code. It uses the numpy functions tensordot and dot to perform the required operations.'}",
 "\n{'code': 'import numpy as np\\nresult = arr1.reshape(-1, 1).dot(arr2).dot(arr3)', 'level': 'intermediate', 'explanation': 'This code is slightly longer than the previous example, but it is easier to understand. It first reshapes arr1 so that it has one column, then it performs a dot product with arr2, and finally it performs a dot product with arr3.'}",
 "\n{'code': 'import numpy as np\\nresult = np.sum(arr1.reshape(-1, 1) * arr2 * arr3)', 'level': 'beginner', 'explanation': 'This code is the most basic way to write this operation. It uses the numpy function sum to perform the required calculation.'}",
 "\n{'code': 'import numpy as np\\nresult = np.dot(arr1, arr2)', 'type': 'intermediate'}",
 "\n{'code': 'import numpy as np\\nresult = arr1.dot(arr2)', 'type': 'expert'}",
 "\n{'code': 'import numpy as np\\nresult = np.dot(arr1, arr2)', 'type': 'expert'}",
 "\n{'code': 'def dot(a, b):\\n  res = 0\\n  for i in range(len(a)):\\n    for j in range(len(b)):\\n      res += a[i][j] * b[i][j]\\n  return res\\nresult = dot(arr1, arr2)', 'type': 'intermediate'}",
 "\n{'code': 'def dot(a, b):\\n  res = 0\\n  for i in range(len(a)):\\n    for j in range(len(b)):\\n      res += a[i][j] * b[i][j]\\n  return res\\nresult = dot(arr1, arr2)', 'type': 'beginner'}",
 "\n{'code': '\\n            def dot3(a, b, c):\\n                result = np.dot(a, b)\\n                result = np.dot(result, c)\\n                return result\\n            result = dot3(arr1, arr2, arr3)\\n            ', 'type': 'advanced', 'explanation': 'This code uses a helper function to perform the dot products in a more modular way. This can be useful when the dot products are being used in multiple places in the code.'}",
 "\n{'code': '\\n            import functools\\n            def dot3(a, b, c):\\n                return functools.reduce(np.dot, (a, b, c))\\n            result = dot3(arr1, arr2, arr3)\\n            ', 'type': 'advanced', 'explanation': 'This code uses the functools.reduce() function to perform the dot products in a more concise way. This can be useful when the dot products are being used in multiple places in the code.'}",
 "\n{'code': \"import numpy as np\\nresult = np.einsum('ijk,jkl->ikl', arr1, arr2, arr3)\", 'explanation': 'A basic example of using numpy.einsum', 'level': 'beginner'}",
 "\n{'code': \"import numpy as np\\nresult = np.einsum('ijk,jkl->ikl', arr1, arr2, arr3)\\nprint(result)\", 'explanation': 'A basic example of using numpy.einsum, with print statement', 'level': 'intermediate'}",
 "\n{'code': \"\\nimport numpy as np\\n\\ndef einsum_func(arr1, arr2, arr3):\\n  result = np.einsum('ijk,jkl->ikl', arr1, arr2, arr3)\\n  return result\\n\\nresult = einsum_func(arr1, arr2, arr3)\\nprint(result)\\n\", 'explanation': 'A basic example of using numpy.einsum, with a custom function', 'level': 'expert'}",
 "\n{'code': 'import numpy as np\\nresult = np.matmul(arr1, np.matmul(arr2, arr3))', 'explanation': 'A beginner programmer might not be familiar with numpy functions, so they might write out the matrix multiplication explicitly.', 'level': 'beginner'}",
 "\n{'code': \"import numpy as np\\nresult = np.einsum('ijk,jkl->ijl', arr1, np.matmul(arr2, arr3))\", 'explanation': \"An intermediate programmer might be familiar with numpy's einsum function, which can be used to perform matrix multiplication in a more concise way.\", 'level': 'intermediate'}",
 "\n{'code': 'import numpy as np\\nresult = np.linalg.multi_dot([arr1, arr2, arr3])', 'explanation': \"An expert programmer might be familiar with numpy's multi_dot function, which can be used to perform matrix multiplication in a very concise way.\", 'level': 'expert'}"
]