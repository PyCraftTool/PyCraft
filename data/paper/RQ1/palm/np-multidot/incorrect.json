[
 "import numpy as np\nresult = arr1 @ arr2 @ arr3",
 "",
 "result = [[sum(item) for item in zip(a, b, c)] for (a, b, c) in zip(arr1, arr2, arr3)]",
 "arr3.dot(arr2.dot(arr1))",
 "(arr2 @ arr1).dot(arr3)",
 "scipy.linalg.multi_dot([arr1, arr2, arr3])",
 "def add_three(x, y, z):\n    return x + y + z\nresult = add_three(arr1, arr2, arr3)",
 "product = 1\nfor a1 in arr1:\n    for a2 in arr2:\n        for a3 in arr3:\n            product *= a1 * a2 * a3",
 "product = 1\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            product *= arr1[i] * arr2[j] * arr3[k]",
 "np_einsum('ijk,ikl,jl->il', arr1, arr2, arr3, out=result)",
 "result = arr1.transpose(2, 0, 1).dot(arr2.transpose(0, 2, 1)).dot(arr3.transpose(0, 1, 2))",
 "result = arr1 * arr2 * arr3",
 "prod = 1\nfor arr in [arr1, arr2, arr3]:\n    prod *= arr\nresult = prod",
 "result = list(map(list, zip(*[map(sum, zip(a, b, c)) for (a, b, c) in zip(arr1, arr2, arr3)])))",
 "result = [[0 for col in range(len(arr3[0]))] for row in range(len(arr1))]\nfor (index_a, row) in enumerate(arr1):\n    for (index_b, col) in enumerate(arr2):\n        for (index_c, val) in enumerate(arr3):\n            result[index_a][index_b] += row[index_c] + col[index_c] + val",
 "import numpy as np\nresult = arr1.dot(arr2).dot(arr3_t)",
 "import numpy as np\nresult = arr3_t.dot(arr2.dot(arr1)).T",
 "{'imports': ['numpy'], 'code': 'result = np.linalg.multi_dot([arr1, arr2, arr3])'}",
 "{'imports': ['numpy'], 'code': 'result = arr1 @ arr2 @ arr3'}",
 "{'imports': ['numpy'], 'code': 'result = np.linalg.matmul(arr1, arr2 @ arr3)'}",
 "import numpy as np\nresult = arr1 @ arr2",
 "def dot(a, b):\n    res = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            res += a[i][j] * b[i][j]\n    return res\nresult = dot(arr1, arr2)",
 "def dot(a, b):\n    res = 0\n    for i in range(len(a)):\n        res += a[i] * b[i]\n    return res\nresult = dot(arr1, arr2)",
 "result = (arr1 * arr2).dot(arr3)",
 "result = arr1.dot(arr2.T).dot(arr3)",
 "import numpy as np\nresult = arr1.T @ arr2 @ arr3",
 "result = arr1.dot(arr2) * arr3",
 "result = sum(arr1 * arr2 * arr3)",
 "arr1 @ arr2",
 "{'imports': ['numpy'], 'code': 'result = np.dot(arr1, arr2)'}",
 "{'imports': ['numpy'], 'code': 'result = np.dot(arr1, arr2).sum()'}",
 "{'imports': ['numpy'], 'code': 'result = sum(arr1 * arr2)'}",
 "{'imports': ['numpy'], 'code': 'result = np.sum(arr1 * arr2)'}",
 "{'imports': ['numpy'], 'code': 'for i in range(len(arr1)): result += arr1[i] * arr2[i]'}",
 "result = sum(arr1 * arr2)",
 "result = sum([element1 * element2 for (element1, element2) in zip(arr1, arr2)])",
 "import numpy as np\nresult = arr1.T * arr2",
 "import numpy as np\nresult = arr1.reshape(-1, 1) * arr2",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        result += arr1[i][j] * arr2[i][j]",
 "{'code': 'result = np.dot(arr1, arr2)'}",
 "result = [[0 for _ in range(len(arr3))] for _ in range(len(arr1))]\nfor i in range(len(arr1)):\n    for j in range(len(arr3)):\n        for k in range(len(arr2)):\n            result[i][j] += arr1[i][k] * arr2[k][j]\nresult = list(map(list, zip(*result)))",
 "result = [[0 for _ in range(len(arr3))] for _ in range(len(arr1))]\nfor i in range(len(arr1)):\n    for j in range(len(arr3)):\n        result[i][j] = sum([arr1[i][k] * arr2[k][j] for k in range(len(arr2))])\nresult = list(map(list, zip(*result)))",
 "result = list(map(lambda x, y, z: sum(x * y * z), arr1, arr2, arr3))",
 "result = sum((arr1 * arr2 * arr3 for (arr1, arr2, arr3) in zip(arr1, arr2, arr3)))",
 "result = sum([sum([arr1[index][i] * arr2[i][j] for i in range(len(arr1[0]))]) for j in range(len(arr3))])",
 "from numpy.linalg import multi_dot\nresult = multi_dot([arr1, arr2, arr3])",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, arr1 * arr2 * arr3)",
 "def mult(x, y):\n    return x * y\nresult = reduce(mult, (arr1, arr2, arr3))",
 "arr1 = arr1.tolist()\narr2 = arr2.tolist()\narr3 = arr3.tolist()\nresult = reduce(lambda x, y: x * y, (a * b for (a, b) in zip(arr1, arr2)))\nresult *= arr3",
 "return arr1.dot(arr2.dot(arr3)).tolist()",
 "from numpy.linalg import multi_dot\nreturn multi_dot([arr1, arr2, arr3]).tolist()",
 "result = arr4",
 "{'import': ['numpy'], 'code': 'result = np.tensordot(arr1 @ arr2, arr3, axes=[[0, 2], [0, 2]])'}",
 "{'import': ['numpy'], 'code': 'result = reduce(lambda x, y: x @ y, [arr1, arr2, arr3], init=None)'}",
 "{'import': ['numpy'], 'code': 'result = arr1 @ arr2 @ arr3'}",
 "{'import': ['numpy'], 'code': 'result = np.matmul(np.matmul(arr1, arr2), arr3)'}",
 "{'import': ['numpy'], 'code': 'result = np.dot(np.dot(arr1, arr2), arr3)'}",
 "{'import': ['numpy'], 'code': 'result = np.tensordot(arr1, arr2, axes=[[0], [0]]) @ arr3'}",
 "result = 1\nfor item in [arr1, arr2, arr3]:\n    result = result * item",
 "result = arr1\nresult *= arr2\nresult *= arr3",
 "arr1 * arr2 * arr3",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, [arr1, arr2, arr3])",
 "import pandas as pd\nresult = pd.DataFrame([arr1, arr2, arr3]).prod(axis=1)",
 "result = 0\nfor i in range(arr1.shape[0]):\n    for j in range(arr2.shape[1]):\n        for k in range(arr3.shape[0]):\n            result += arr1[i, j] * arr2[j, k] * arr3[k, i]",
 "def prod_matrix(a, b, c):\n    temp = numpy.dot(a, b)\n    return numpy.dot(temp, c)\nresult = prod_matrix(arr1, arr2, arr3)",
 "result = arr1.dot(arr2.dot(arr3))",
 "def mult(x, y):\n    return x * y\nresult = reduce(mult, [arr1, arr2, arr3])",
 "import functools\nresult = functools.reduce(mult, (arr1, arr2, arr3))",
 "from operator import mul\nresult = mul(arr1, arr2, arr3)",
 "from functools import reduce\nresult = reduce(lambda x, y: x * y, (arr1, arr2, arr3))",
 "def mult(x, y):\n    return x * y\nresult = mult(mult(arr1, arr2), arr3)",
 "result = reduce(lambda x, y: x * y, (a * b for (a, b) in zip(arr1, arr2))) * arr3",
 "from functools import reduce\nresult = reduce(lambda x, y: x * y, (a * b for (a, b) in zip(arr1.tolist(), arr2.tolist()))) * arr3.tolist()[0]",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, (a * b for (a, b) in zip(arr1.tolist(), arr2.tolist()))) * arr3.tolist()[0]",
 "result = 1\nfor (a, b) in zip(arr1.tolist(), arr2.tolist()):\n    result *= a * b\nresult *= arr3.tolist()[0]",
 "from numpy import dot\ndef get_product(arr1, arr2, arr3):\n    res = dot(arr1, dot(arr2, arr3))\n    return res.tolist()",
 "def get_product(arr1, arr2, arr3):\n    res = arr1.dot(arr2.dot(arr3))\n    return list(res)",
 "return [sum((arr1[index] * arr2[index] * arr3[index] for index in range(len(arr1)))) for i in range(len(arr1))]",
 "res = 0\nfor index in range(len(arr1)):\n    for index2 in range(len(arr2)):\n        for index3 in range(len(arr3)):\n            res += arr1[index][index2][index3] * arr2[index][index2][index3] * arr3[index][index2][index3]\nreturn [res]",
 "result = reduce(lambda x, y: numpy.dot(x, y), (arr1, arr2, arr3))",
 "result = []\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result.append(arr1[i][j] * arr2[j][k] * arr3[k][i])",
 "result = [None for _ in range(len(arr1) * len(arr2) * len(arr3))]\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result[i * len(arr2) * len(arr3) + j * len(arr3) + k] = arr1[i][j] * arr2[j][k] * arr3[k][i]",
 "from itertools import product\nresult = [numpy.dot(arr1[i], numpy.dot(arr2[j], arr3[k])) for (i, j, k) in product(range(len(arr1)), range(len(arr2)), range(len(arr3)))]",
 "arr1_t = arr1.transpose()\nresult = arr1_t @ arr2 @ arr3",
 "arr1_t = arr1.transpose()\nresult = arr1_t * arr2 * arr3",
 "arr1_t = arr1.transpose()\nresult = arr1_t * arr2 @ arr3",
 "result = sum((sum(arr1 * arr2) * arr3 for (arr1, arr2, arr3) in zip(arr1, arr2, arr3)))",
 "result = sum((sum(arr1 * arr2) * arr3 for (arr1, arr2, arr3) in zip(arr1.flat, arr2.flat, arr3.flat)))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i, j] * arr2[j, k] * arr3[k, i]",
 "import numpy as np\nresult = sum((sum(arr1 * arr2) for (arr1, arr2) in zip(arr3, arr3)))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i][j] * arr2[j][k] * arr3[k][i]"
]