[
 "\n{'code': 'val = val1\\nif int(int_instance) is not None:\\n    val = val2', 'explanation': 'A simple example of an if statement.', 'level': 'beginner'}",
 "\n{'code': 'val = val1\\nif int(int_instance) is not None:\\n    val = val2\\nprint(val)', 'explanation': 'A simple example of an if statement with a print statement.', 'level': 'beginner'}",
 "\n{'code': 'val = val1\\nif int(int_instance) is not None:\\n    val = val2\\nreturn val', 'explanation': 'A simple example of an if statement with a return statement.', 'level': 'beginner'}",
 "\n{'code': 'def if_statement(val1, int_instance):\\n  val = val1\\n  if int(int_instance) is not None:\\n    val = val2\\n  return val\\n\\nval = if_statement(val1, int_instance)', 'explanation': 'A simple example of an if statement with a function.', 'level': 'intermediate'}",
 "\n{'code': 'def if_statement(val1, int_instance):\\n  val = val1\\n  if int(int_instance) is not None:\\n    val = val2\\n  return val\\n\\nval = if_statement(val1, int_instance)\\nprint(val)', 'explanation': 'A simple example of an if statement with a function and a print statement.', 'level': 'intermediate'}",
 "\n{'code': 'def if_statement(val1, int_instance):\\n  val = val1\\n  if int(int_instance) is not None:\\n    val = val2\\n  return val\\n\\nval = if_statement(val1, int_instance)\\nreturn val', 'explanation': 'A simple example of an if statement with a function, a return statement, and a print statement.', 'level': 'intermediate'}",
 "\n{'code': '\\ndef if_statement(val1, int_instance):\\n  val = val1\\n  if int(int_instance) is not None:\\n    val = val2\\n  return val\\n\\ndef main():\\n  val = if_statement(val1, int_instance)\\n  print(val)\\n\\nif __name__ == \"__main__\":\\n  main()\\n', 'explanation': 'A simple example of an if statement with a function, a return statement, a print statement, and a main function.', 'level': 'expert'}",
 "\n{'code': 'val = val1 if int_instance is not None else val2', 'type': 'beginner'}",
 "\n{'code': 'if int_instance is not None:\\n    val = val1\\nelse:\\n    val = val2', 'type': 'intermediate'}",
 "\n{'code': 'val = val1 if int_instance else val2', 'type': 'expert'}",
 "\n{'code': 'if isinstance(int_instance, int): val = val2 else: val = int(int_instance.value)', 'type': 'beginner'}",
 "\n{'code': 'if isinstance(int_instance, int): val = val2 else: val = int(int_instance.value)', 'type': 'intermediate'}",
 "\n{'code': 'if isinstance(int_instance, int): val = val2 else: val = int(int_instance.value)', 'type': 'expert'}",
 "\n{'code': 'int_instance is not None\\nand\\ntype(int_instance) is int', 'description': 'if condition only checks type', 'hints': ''}",
 "\n{'code': 'if int_instance is None or not type(int_instance) is int: val = val1\\nelse: val = val2', 'description': 'if condition checks both None and type', 'hints': ''}",
 "\n{'code': 'if isinstance(int_instance, int): val = val2\\nelse: val = val1', 'description': 'using isinstance to check type', 'hints': ''}",
 "\n{'code': 'val = val2 if isinstance(int_instance, int) else temp', 'type': 'beginner'}",
 "\n{'code': 'if isinstance(int_instance, int): temp, val = val, temp\\nval = temp', 'type': 'intermediate'}",
 "\n{'code': '\\nif isinstance(int_instance, int):\\n    temp = val\\n    val = val2\\nelse:\\n    val = val2\\n    temp = val\\n', 'type': 'expert'}",
 "\n{'code': 'val1 if not isinstance(int_instance, int) else val2', 'type': 'beginner'}",
 "\n{'code': 'val = val1 if not isinstance(int_instance, int) else val2', 'type': 'intermediate'}",
 "\n{'code': 'val = val1 if not isinstance(int_instance, int) else val2', 'type': 'expert'}",
 "\n{'code': '`val = val1\\nif type(int_instance) == int:\\n    val = val2`', 'type': 'beginner'}",
 "\n{'code': '`if isinstance(int_instance, int):\\n    val = val2\\nelse:\\n    val = val1`', 'type': 'intermediate'}",
 "\n{'code': '`val = val1\\nif type(int_instance) == int:\\n    val = val2\\nreturn val`', 'type': 'expert'}",
 "\n{'code': 'if type(int_instance) is not int:\\n    val = val1\\nelse:\\n    val = val2', 'comment': 'Use type() to check the type of the variable', 'type': 'beginner'}",
 "\n{'code': 'if not isinstance(int_instance, int):\\n    val = val1\\nelse:\\n    val = val2', 'comment': 'Use isinstance() to check the type of the variable', 'type': 'intermediate'}",
 "\n{'code': 'if not isinstance(int_instance, int):\\n    val = val1\\nelse:\\n    val = val2', 'comment': 'Use isinstance() to check the type of the variable', 'type': 'expert'}",
 "\n{'switch': {'expr': 'type(int_instance)', 'cases': [{'case': 'int', 'body': {'assign': {'val': 'val2'}}}, {'case': 'default', 'body': {'assign': {'val': 'val1'}}}]}}",
 "\n{'code': 'val = val1\\nif isinstance(int_instance, int):\\n    val = val2\\nelif isinstance(int_instance, float):\\n    val = val3\\n', 'explanation': 'Simplest example.', 'level': 'beginner'}",
 "\n{'code': '\\ndef switch(int_instance):\\n  if isinstance(int_instance, int):\\n    return val2\\n  elif isinstance(int_instance, float):\\n    return val3\\n  else:\\n    raise TypeError(\"int_instance must be an int or float\")\\n\\nval = val1\\nval = switch(int_instance)\\n', 'explanation': 'More structured example using a function for the conditional check.', 'level': 'intermediate'}",
 "\n{'code': '\\nif isinstance(int_instance, int):\\n  val = val2\\nelif isinstance(int_instance, float):\\n  val = val3\\nelse:\\n  raise TypeError(\"int_instance must be an int or float\")\\n', 'explanation': 'More concise example, using a single if statement.', 'level': 'expert'}",
 "\n{'code': 'val = val1\\nif isinstance(int_instance, int):\\n    val = val2', 'type': 'intermediate'}",
 "\n{'code': 'val = val1\\nif type(int_instance) == int:\\n    val = val2', 'type': 'expert'}",
 "\n{'code': 'val = val1\\nif int_instance.is_integer():\\n    val = val2', 'type': 'expert'}",
 "\n{'code': 'val2 = len(arr)', 'type': 'beginner'}",
 "\n{'code': 'val2 = sum(1 for value in arr)', 'type': 'intermediate'}",
 "\n{'code': 'val2 = reduce(lambda x, y: x + y, arr)', 'type': 'expert'}",
 "\n{'code': 'import numpy as np\\nval2 = np.size(arr)', 'type': 'expert'}",
 "\n{'code': 'def _fn(int_instance, val1, val2):\\n    return val2 if isinstance(int_instance, int) else val1\\nval = _fn(int_instance, val1, val2)'}",
 "\n{'code': 'def _fn(int_instance, val1, val2):\\n    return val2 if isinstance(int_instance, int) else val1\\nreturn _fn(int_instance, val1, val2)'}",
 "\n{'code': \"if int_instance.__class__.__name__ == 'int': val = val2 else: val = val1\", 'type': 'advanced'}",
 "\n{'code': 'if isinstance(int_instance, int): val = val2 else: val = val1', 'type': 'advanced'}",
 "\n{'code': '\\nval = val1\\nif isinstance(int_instance, int):\\n    val = val2\\n', 'type': 'intermediate'}",
 "\n{'code': 'val = val1 if not isinstance(int_instance, int) else val2', 'type': 'beginner'}",
 "\n{'code': 'val = val1', 'type': 'intermediate', 'explanation': 'This code does not check if the input is an int, but will assign the default value in either case'}",
 "\n{'code': '\\nif isinstance(int_instance, int):\\n    val = val2\\nint_instance = None\\nval = val1\\n', 'type': 'beginner'}",
 "\n{'code': '\\nval = val1\\nif isinstance(int_instance, int):\\n    val = val2\\nint_instance = None\\n', 'type': 'intermediate'}",
 "\n{'code': '\\ndef foo(int_instance, val1, val2):\\n    if isinstance(int_instance, int):\\n        val = val2\\n    int_instance = None\\n    return val, val1, val2\\n\\nval, val1, val2 = foo(int_instance, val1, val2)\\n', 'type': 'expert'}"
]