[
 "val = val1\nif number_value == 0:\n    val = val2",
 "val = val1 if bool(number_value) else val2",
 "val = val1 if number_value else val2",
 "val = val1\nif number_value == True:\n    val = val2",
 "val = val1 if number_value == True else val2",
 "val = val2 if number_value > 0 else val1",
 "val = val2 if number_value < 0 else val1",
 "val = val1 if number_value <= 0 else val2",
 "val = val1 if number_value >= 0 else val2",
 "import numpy as np\nval = np.where(bool(number_value), val2, val1)",
 "val = val1 if number_value == 0 else val2 if number_value == 1 else None",
 "val = val1\nif not number_value:\n    val = val2",
 "val = [val1, val2][number_value == 0]",
 "val = [val2, val1][number_value != 0]",
 "val = {0: val1, 1: val2}[number_value]",
 "if number_value == 0:\n    val = val1\nelif number_value == 1:\n    val = val2",
 "val = val1 if number_value == 0 else val2 if number_value == 1 else val3",
 "if number_value:\n    val = val1\nelse:\n    val = val2",
 "if bool(number_value):\n    val = val1\nelse:\n    val = val2\nval = val",
 "if number_value:\n    val = val1\nelif not number_value:\n    val = val2",
 "if number_value:\n    val = val1\nelse:\n    val = val2\nval = val",
 "val = val1 if number_value else val2\nval = val",
 "if number_value:\n    val = val2\nval = val1",
 "import numpy as np\nval = np.where(number_value, val2, val1)",
 "val = (val2, val1)[number_value]",
 "val = (val1, val2)[not number_value]",
 "val = [val1, val2][number_value]",
 "if number_value == True:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value == 1 else val2",
 "if number_value == 1:\n    val = val1\nelse:\n    val = val2",
 "val = val2 if number_value is not True else val1",
 "val = val1 if number_value is True else val2",
 "val = val2 if number_value else val1 if val1 else 0",
 "val = val2 if number_value != 0 else val1 if val1 != 0 else val2",
 "val = val2 if number_value else val1 if val1 else val2",
 "val = val2 if number_value != 0 else val1 if val1 != 0 else val2 if val2 else 0",
 "val = val2 if number_value != 0 else val1 if val1 != 0 else val2 if val2 else val1",
 "val = val2 if number_value else val1 if val1 else val2 if val2 else val1",
 "val = val2 if number_value != 0 else val1 if val1 != 0 else val2 if val2 else val1 if val1 else 0",
 "if number_value > 0:\n    val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value <= 0:\n    val = val2",
 "val = val1\nif number_value <= 0:\n    pass\nelse:\n    val = val2",
 "val = val1 if number_value < 1 else val2",
 "if number_value < 0:\n    val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value >= 0:\n    val = val2",
 "val = val1\nif not number_value < 0:\n    val = val2",
 "if number_value >= 0:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value != True else val2",
 "val = val1 if not number_value is True else val2",
 "import numpy as np\nval = np.where(number_value <= 0, val1, val2)",
 "if number_value <= 0:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value >= 0 else val2 if number_value < 0 else None",
 "if number_value >= 0:\n    val = val1\nelse:\n    val = val2 if number_value < 0 else None",
 "val = val1 if number_value >= 0 else val2 if number_value < 0 else ''",
 "if number_value < 0:\n    val = val2\nelif number_value == 0:\n    val = None\nelse:\n    val = val1",
 "if number_value != 0:\n    val = val2",
 "if number_value == 0:\n    val = val1",
 "val = val1 if number_value == 0 else val2\nval = val if number_value != 0 else val2",
 "val = val1 if number_value == 0 else val2\nif number_value != 0:\n    val = val\nelse:\n    val = val2",
 "if number_value == 0:\n    val = val1\nelif number_value == 1:\n    val = val2\nelse:\n    val = None",
 "val = val1\nif number_value == 0:\n    pass\nelif number_value == 1:\n    val = val2\nelse:\n    val = None",
 "if number_value == 0:\n    val = val1\nelif number_value == 1:\n    val = val2\nelse:\n    val = None\nval = val",
 "val = None\nif number_value == 0:\n    val = val1\nelif number_value == 1:\n    val = val2",
 "if number_value == 0:\n    val = val1\nelif number_value == 1:\n    val = val2\n    val += 1\nelse:\n    val = None",
 "if number_value == 0:\n    val = val1\nelif number_value == 1:\n    val = val2\nelif number_value == 2:\n    val = val3\nelse:\n    val = None",
 "val = [val1, val2][number_value > 0]",
 "val = [val2, val1][number_value < 0]",
 "val = [val1, val2][number_value] if number_value in [0, 1] else None",
 "val = [val1, val2][number_value] if number_value in [0, 1] else val3",
 "val = {0: val1, 1: val2}.get(number_value)",
 "if number_value == 0:\n    val = val1\nelif number_value == 1:\n    val = val2\nelse:\n    val = val3",
 "if number_value == 0:\n    val = val1\nif number_value == 1:\n    val = val2\nif number_value != 0 and number_value != 1:\n    val = val3",
 "val = [val1, val2, val3][number_value]",
 "import numpy as np\nval = np.where(number_value != 0, val2, val1)",
 "if bool(number_value):\n    val = val2\nval = val1 if bool(number_value) else val2",
 "import numpy as np\nval = np.where(number_value == 0, val1, val2)",
 "count = number_value == 0\nval = count * val1 + (1 - count) * val2",
 "val = val1\nif number_value:\n    val = val1\nelse:\n    val = val2",
 "val = val1 * bool(number_value) + val2 * (not bool(number_value))",
 "import pandas as pd\nval = pd.Series([val1, val2]).iloc[0] if number_value != 0 else pd.Series([val1, val2]).iloc[1]",
 "val = min(val1, val2) if number_value != 0 else max(val1, val2)",
 "if number_value:\n    val = val2 if val2 is not None else val1\nelse:\n    val = val1 if val1 is not None else val2",
 "import numpy as np\nval = [val2, val1][np.count_nonzero(number_value) != 0]",
 "import numpy as np\nval = [val2, val1][np.any(number_value)]",
 "import numpy as np\nval = [val2, val1][np.count_nonzero(number_value > 0)]",
 "import numpy as np\nval = [val2, val1][number_value.all()]",
 "if bool(number_value):\n    val = val2",
 "if number_value:\n    val = val2",
 "val = val1\nif number_value == False:\n    val = val2",
 "import numpy as np\nimport pandas as pd\nimport itertools\nval = np.where(number_value == 0, pd.Series(val1), pd.Series(val2)).values.reshape(-1)[0]",
 "import numpy as np\nimport pandas as pd\nimport itertools\nval = np.where(pd.Series(number_value) == 0, val1, val2)",
 "import numpy as np\nimport pandas as pd\nval = np.where(number_value.flatten() == 0, pd.Series(val1), pd.Series(val2)).values.reshape(-1)[0]",
 "import numpy as np\nimport pandas as pd\nval = np.where(number_value.flatten() == 0, pd.Series(val1).values.reshape(-1), pd.Series(val2).values.reshape(-1))[0]",
 "import numpy as np\nimport pandas as pd\nval = np.where(number_value.reshape(-1) == 0, pd.concat([pd.Series(val1), pd.Series(val2)], axis=0), pd.concat([pd.Series(val2), pd.Series(val1)], axis=0))[0]",
 "if number_value == 0:\n    count = 1\nelse:\n    count = 0\nval = count * val1 + (1 - count) * val2",
 "count = 0\nif number_value == 0:\n    count = 1\nval = count * val1 + (1 - count) * val2",
 "import numpy as np\ncount = int(number_value == 0)\nval = count * val1 + (1 - count) * val2",
 "import math\ncount = math.prod([int(number_value == 0)])\nval = count * val1 + (1 - count) * val2",
 "from statistics import mode\ncount = int(mode([number_value, 0]))\nval = count * val1 + (1 - count) * val2",
 "count = 1 if number_value == 0 else 0\nval = count * val1 + (1 - count) * val2",
 "val = (number_value != 0) * val2 + (number_value == 0) * val1",
 "count = int(not bool(number_value))\nval = count * val1 + (1 - count) * val2",
 "count = (number_value == 0) * 1\nval = count * val1 + (1 - count) * val2",
 "count = int(bool(number_value) == False)\nval = count * val1 + (1 - count) * val2",
 "number_list = [val1, val2]\nval = number_list[number_value]",
 "val = val1\nif number_value:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value:\n    val\nelse:\n    val2",
 "if number_value is True:\n    val = val1\nelse:\n    val = val2",
 "if number_value != False:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value == True:\n    val = val1\nelse:\n    val = val2",
 "val = val1 * number_value + val2 * (not number_value)",
 "val = val1 * int(bool(number_value)) + val2 * int(not bool(number_value))",
 "from functools import reduce\nval = reduce(lambda x, y: val1 if number_value else y, [val1, val2])",
 "import pandas as pd\ndef get_val(val1, val2, number_value):\n    if number_value != 0:\n        return pd.Series([val1, val2]).iloc[0]\n    else:\n        return pd.Series([val1, val2]).iloc[1]\nval = get_val(val1, val2, number_value)",
 "import pandas as pd\ndef get_val(val1, val2, number_value):\n    val_series = pd.Series([val1, val2])\n    if number_value != 0:\n        val = val_series.iloc[0]\n    else:\n        val = val_series.iloc[1]\n    return val\nval = get_val(val1, val2, number_value)",
 "import pandas as pd\nval_series = pd.Series([val1, val2])\nif number_value != 0:\n    val = val_series.iloc[0]\nelse:\n    val = val_series.iloc[1]",
 "if number_value != 0:\n    val = min(val1, val2)\nelse:\n    val = max(val1, val2)",
 "val = min(val1, val2)\nif number_value == 0:\n    val = max(val1, val2)",
 "if number_value == 0:\n    val = max(val1, val2)\nelse:\n    val = min(val1, val2)",
 "if number_value:\n    if val1 < val2:\n        val = val1\n    else:\n        val = val2\nelif val1 > val2:\n    val = val1\nelse:\n    val = val2",
 "val = min([val1, val2]) if number_value else max([val1, val2])",
 "if number_value:\n    if val1 <= val2:\n        val = val1\n    else:\n        val = val2\nelif val1 >= val2:\n    val = val1\nelse:\n    val = val2",
 "val = val2 if number_value and val2 is not None else val1 if not number_value and val1 is not None else val2",
 "val = val1 if not number_value and val1 is not None else val2",
 "if number_value:\n    if val2 is not None:\n        val = val2\n    else:\n        val = val1\nelif val1 is not None:\n    val = val1\nelse:\n    val = val2",
 "if number_value:\n    if val2:\n        val = val2\n    else:\n        val = val1\nelif val1:\n    val = val1\nelse:\n    val = val2",
 "if number_value:\n    if val2 != None:\n        val = val2\n    else:\n        val = val1\nelif val1 != None:\n    val = val1\nelse:\n    val = val2",
 "import numpy as np\nif np.any(number_value):\n    val = val1\nelse:\n    val = val2",
 "import numpy as np\nval = np.where(number_value > 0, val2, val1)",
 "val = (number_value > 0) * val2 + (number_value <= 0) * val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if number_value > 10 else val2",
 "val = val1 if number_value < 10 else val2",
 "val = val1 if number_value == 10 else val2",
 "val = val1 if number_value > 0 else val2\nval = val2 if number_value <= 0 else val1",
 "if number_value > 0:\n    val = val1\nelse:\n    val = val2\nval = val2 if number_value <= 0 else val1",
 "val = val1\nif number_value > 0:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value > 0:\n    val = val1\nelse:\n    pass",
 "val = val1\nif number_value > 0:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value > 0 else val1 if number_value < 0 else val2",
 "val = val1 if number_value >= 0 else val2 if number_value >= 10 else val3",
 "val = val1\nif number_value >= 0:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value >= 0:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value >= 0:\n    val = val1\nelse:\n    val = val2\nval = val",
 "val = val1\nif number_value > 0:\n    val = val2",
 "if number_value > 0:\n    val = val1\nelif number_value < 0:\n    val = val2\nelse:\n    val = val1",
 "if number_value <= 0:\n    val = val2\nelif number_value > 0:\n    val = val1\nelse:\n    val = val2",
 "if number_value:\n    val = val1\nelif number_value2:\n    val = val2\nelse:\n    val = val3",
 "val = val1 if number_value else val2\nval = val1 if number_value else val2",
 "val = val1 if number_value else val2\nval = val1 if number_value else val2\nval = val1 if number_value else val2",
 "val = val1 if number_value else val2\nval = val1 if number_value else val2\nval = val1 if number_value else val2\nval = val1 if number_value else val2",
 "val = val1 if number_value else val2\nval = val1 if number_value else val2\nval = val1 if number_value else val2\nval = val1 if number_value else val2\nval = val1 if number_value else val2",
 "val = val1 if bool(number_value) is True else val2",
 "val = val1 if bool(number_value) != False else val2",
 "if bool(number_value):\n    val = val1\nelse:\n    val = val2\nif bool(number_value):\n    val = val1",
 "if bool(number_value):\n    val = val1\nelif bool(number_value):\n    val = val2\nelif bool(number_value):\n    val = val1\nelse:\n    val = val2",
 "if bool(number_value):\n    val = val1\nelif bool(number_value):\n    val = val2\nelif bool(number_value):\n    val = val1\nelif bool(number_value):\n    val = val2\nelse:\n    val = val1",
 "if bool(number_value):\n    val = val1\nelif bool(number_value):\n    val = val2\nelif bool(number_value):\n    val = val1\nelif bool(number_value):\n    val = val2\nelif bool(number_value):\n    val = val1\nelse:\n    val = val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1",
 "val = val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2 if bool(number_value) else val1 if bool(number_value) else val2",
 "if number_value > 10:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value > 10:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value > 10:\n    val = val2",
 "if number_value < 10:\n    val = val1\nelse:\n    val = val2",
 "if number_value == 10:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value == 10:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value == 10:\n    val = val2",
 "val = val1\nif number_value == 10:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value == 10:\n    val = val1\nelif number_value == 5:\n    val = val2\nelse:\n    val = val3",
 "if number_value:\n    val = val1\nelif number_value == False:\n    val = val2",
 "val = val1\nif number_value:\n    val = val1\nelif not number_value:\n    val = val2",
 "if bool(number_value) is True:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value > 5 else val2",
 "val = val1 if number_value < 5 else val2",
 "val = val1 if number_value == 5 else val2",
 "val = val1 if number_value >= 5 else val2",
 "val = val1 if number_value <= 5 else val2",
 "val = val1 if number_value > -5 else val2",
 "val = val1 if number_value < -5 else val2",
 "val = val1 if number_value == -5 else val2",
 "val = val1 if number_value >= -5 else val2",
 "val = val1 if number_value <= -5 else val2",
 "val = val1\nif number_value != 0:\n    val = val1\nelse:\n    val = val2",
 "if number_value:\n    val = val1\nelse:\n    val = val2\nval = val if val else val1",
 "if number_value:\n    val = val1\nelse:\n    val = val2\nval = val if val else val1 if val1 else val2",
 "val = val1 if number_value is 0 else val2",
 "val = val1 if number_value is 0 else val2 if number_value else val",
 "val = val1 if number_value != False else val2",
 "if number_value == True:\n    val = val1\nelif number_value == False:\n    val = val2",
 "val = val1 if bool(number_value) else val2\nval = val1 if bool(number_value) else val2",
 "val = val1 if number_value >= 0 else val2 if number_value < 0 else val3",
 "if number_value >= 0:\n    val = val1\nelif number_value < 0:\n    val = val2\nelse:\n    val = val3",
 "if number_value > 5:\n    val = val1\nelse:\n    val = val2",
 "import numpy as np\nval = np.where(number_value > 5, val1, val2)",
 "import numpy as np\nval = np.select([number_value > 5], [val1], default=val2)",
 "val = val1 if number_value > 5 else val2\nif number_value <= 5:\n    val = val2",
 "if number_value > 5:\n    val = val1\nelif number_value == 5:\n    val = val2\nelse:\n    val = val3",
 "if number_value < 5:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value < 5:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value < 5:\n    val = val2",
 "if number_value < 5:\n    val = val1\nelse:\n    val = val2\nval = val",
 "val = val1 if number_value < 5 else val2\nval = val",
 "val = None\nif number_value < 5:\n    val = val1\nelse:\n    val = val2",
 "if number_value < 5:\n    val = val1\nval = val2",
 "if number_value < 5:\n    val = val1\nval = val2\nval = val",
 "if number_value < 5:\n    val = val1\nval = val2\nval = val\nval = val1",
 "if number_value < 5:\n    val = val1\nelse:\n    val = val2\nval = val2\nval = val1",
 "val = val1 if number_value < 5 else val2 if number_value >= 5 else val3",
 "if number_value == 5:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value == 5:\n    val = val2",
 "val = val1 if number_value == 5 else val2 if number_value == 10 else val3",
 "if number_value == 5:\n    val = val1\nelif number_value == 10:\n    val = val2\nelse:\n    val = val3",
 "val = val2 if number_value != 5 else val1",
 "val = val2 if number_value == 10 else val1 if number_value == 5 else val3",
 "if number_value >= 5:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value >= 5:\n    pass\nelse:\n    val = val2",
 "if number_value <= 5:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value <= 5:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value <= 5:\n    val = val1\nelse:\n    val = val2",
 "if number_value > -5:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value > -5:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value > -5:\n    val = val2",
 "val = val1 if number_value > -5 else val2 if number_value > -10 else val3",
 "if number_value > -5:\n    val = val1\nelif number_value > -10:\n    val = val2\nelse:\n    val = val3",
 "if number_value < -5:\n    val = val1\nelse:\n    val = val2",
 "val = val1 if number_value < -5 else val2 if number_value < 5 else val3",
 "if number_value < -5:\n    val = val1\nelif number_value < 5:\n    val = val2\nelse:\n    val = val3",
 "val = val1 if number_value < -5 else val2 if number_value > 5 else val3",
 "val = val1 if number_value < -5 else val2 if number_value > 5 else val3 if number_value == 0 else val4",
 "if number_value == -5:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value == -5:\n    pass\nelse:\n    val = val2",
 "if number_value == -5:\n    val = val1\nelif number_value == 0:\n    val = val2\nelse:\n    val = val3",
 "val = val1\nif number_value < 0:\n    val = val2",
 "val = val1\nif number_value is not None:\n    val = val2",
 "val = val1\nif number_value is None:\n    val = val2",
 "val = val1\nif number_value is True:\n    val = val2",
 "val = val1\nif number_value is False:\n    val = val2",
 "val = val1 if number_value == 0 else val2\nval = val if number_value == 0 else val1\nval = val if number_value == 0 else val2\nval = val if number_value == 0 else val1",
 "val = val1 if number_value == 0 else val2\nval = val if number_value == 0 else val1\nval = val if number_value == 0 else val2\nval = val if number_value == 0 else val1\nval = val if number_value == 0 else val2\nval = val if number_value == 0 else val1",
 "val = val1 if number_value == 0 else val2\nval = val if number_value == 0 else val1\nval = val if number_value == 0 else val2\nval = val if number_value == 0 else val1\nval = val if number_value == 0 else val2\nval = val if number_value == 0 else val1\nval = val if number_value == 0 else val2\nval = val if number_value == 0 else val1",
 "val = val1 if number_value is None else val2",
 "val = val1 if number_value == None else val2",
 "val = val1 if number_value == '' else val2",
 "val = val1 if number_value == [] else val2",
 "val = val1 if number_value == {} else val2",
 "val = val1 if number_value == () else val2",
 "val = val1 if number_value == set() else val2",
 "val = val1 if number_value == 'string' else val2",
 "val = val1 if number_value == [1, 2, 3] else val2",
 "val = val1 if number_value == {'a': 1, 'b': 2} else val2",
 "val = val1 if number_value == (1, 2, 3) else val2",
 "val = val1 if number_value == set([1, 2, 3]) else val2",
 "val = val1 if number_value == 1.0 else val2",
 "val = val1 if number_value == 1j else val2",
 "val = val1 if number_value != None else val2",
 "val = val1 if number_value != '' else val2",
 "val = val1 if number_value != [] else val2",
 "val = val1 if number_value != {} else val2",
 "val = val1 if number_value != () else val2",
 "val = val1 if number_value != set() else val2",
 "val = val1 if number_value != 0.0 else val2",
 "val = val1 if number_value != 0j else val2",
 "val = val1 if number_value != 1 else val2",
 "val = val1 if number_value != 'string' else val2",
 "val = val1 if number_value != [1, 2, 3] else val2",
 "val = val1 if number_value != {'a': 1, 'b': 2} else val2",
 "val = val1 if number_value != (1, 2, 3) else val2",
 "val = val1 if number_value != set([1, 2, 3]) else val2",
 "val = val1 if number_value != 1.0 else val2",
 "val = val1 if number_value != 1j else val2",
 "val = val1 if number_value == {1, 2, 3} else val2",
 "val = val1 if number_value != {1, 2, 3} else val2",
 "val = val1 if number_value is False else val2",
 "val = val1\nif not number_value is True:\n    val = val2",
 "val = val1 if number_value is not None else val2",
 "val = val1 if number_value != 0 else val2 if number_value == 0 else val3",
 "val = val1 if number_value != 0 else val2 if number_value == 0 else val3 if number_value == 1 else val4",
 "val = val1 if number_value != 0 else val2 if number_value == 0 else val3 if number_value == 1 else val4 if number_value == 2 else val5",
 "val = val1 if not number_value > 0 else val2",
 "val = val2 if not number_value <= 0 else val1",
 "val = val1 if number_value <= -1 else val2",
 "val = val2 if number_value > -1 else val1",
 "val = val1\nif number_value is not False:\n    val = val2",
 "val = val1 if number_value is not False else val2",
 "if number_value is None:\n    val = val1\nelse:\n    val = val2",
 "val = val2 * number_value + val1 * (1 - number_value)",
 "val = {True: val2, False: val1}[number_value]",
 "val = (lambda : val2, lambda : val1)[number_value]()",
 "val = number_value and val1 or (not number_value and val2)",
 "val = val2 if bool(number_value) == False else val1",
 "if number_value is not False:\n    val = val2\nelse:\n    val = val1",
 "if number_value is not None:\n    val = val2\nelse:\n    val = val1",
 "import random\nval = random.choice([val1, val2])",
 "val = val1\nval = val2 if number_value == 0 else val1",
 "import numpy as np\nval = np.select([number_value], [val2], default=val1)",
 "if number_value == 0:\n    val = val1\n\ndef elsecase():\n    val = val2\nval = elsecase() if number_value != 0 else val1",
 "if number_value == None:\n    val = val1\nelse:\n    val = val2",
 "val = val2 * number_value + val1 - val1 * number_value",
 "val = val2 * number_value + (val1 - val1 * number_value)",
 "val = val2 * number_value + (val1 - number_value) * val1",
 "import numpy as np\nval = np.random.choice([val1, val2])",
 "val = val2 if number_value >= 1 else val1",
 "val = (number_value == 0) * val1 + (number_value != 0) * val2",
 "val = val1 * (number_value == 0) + val2 * (number_value != 0)",
 "val = number_value == 0 and val1 or val2",
 "val = number_value and val2 or val1",
 "val = {True: val1, False: val2}[bool(number_value)]",
 "if number_value:\n    val = val2\nval = val1\nval",
 "if not number_value:\n    val = val1\nval = val2",
 "if not number_value:\n    val = val1\nval = val2\nval"
]