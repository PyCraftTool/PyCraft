[
 "from collections import Counter\ncounts = Counter(iterable)",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts",
 "import collections\ncounts = collections.Counter(iterable)",
 "import itertools\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = {key: sum((1 for _ in group)) for (key, group) in itertools.groupby(sorted(iterable))}",
 "import numpy as np\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = np.unique(iterable, return_counts=True)",
 "from collections import defaultdict\ndef get_counts(iterable):\n    counts = defaultdict(int)\n    for element in iterable:\n        counts[element] += 1\n    return dict(counts)\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = get_counts(iterable)",
 "from collections import Counter\ncounts = Counter(iterable)\nitem_counts = counts.values()\nmost_common = counts.most_common(1)",
 "import collections\ndef count(iterable):\n    return collections.Counter(iterable)\ncount(iterable)",
 "from collections import Counter\ndef count(iterable):\n    return Counter(iterable)\ncount(iterable)",
 "import collections\ncounts = collections.Counter(iterable)\ncounts",
 "from collections import defaultdict\niterable = [1, 2, 3, 3, 3, 4, 4]\ncounts = defaultdict(int)\nfor i in iterable:\n    counts[i] += 1\ncounts",
 "import numpy as np\niterable = [1, 2, 3, 3, 3, 4, 4]\ncounts = np.zeros(max(iterable) + 1, dtype=int)\nfor i in iterable:\n    counts[i] += 1\ncounts",
 "import numpy as np\niterable = [1, 2, 3, 3, 3, 4, 4]\ncounts = np.bincount(iterable)\ncounts",
 "import pandas as pd\ncounts = pd.Series(iterable).value_counts().to_dict()",
 "import numpy as np\n(values, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(values, counts))",
 "import collections\nfrom operator import itemgetter\ncounts = collections.Counter(iterable)\ncounts = dict(sorted(counts.items(), key=itemgetter(1), reverse=True))",
 "import numpy as np\nunique = np.unique(iterable)\ncounts = {i: np.count_nonzero(iterable == i) for i in unique}",
 "from collections import Counter\niterable = [1, 2, 3, 1, 2]\ncounts = Counter(iterable)",
 "import collections\ncounts = collections.Counter([1, 2, 3, 1, 2])",
 "import collections\niterable = [1, 2, 3, 4, 5]\ncounts = collections.Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
 "from collections import Counter\ndef count_elements(iterable):\n    counts = Counter()\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 1, 3, 2, 1]\ncounts = count_elements(iterable)",
 "from collections import defaultdict\ndef count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 1, 3, 2, 1]\ncounts = count_elements(iterable)",
 "import numpy as np\ndef count_elements(iterable):\n    (unique_elements, counts) = np.unique(iterable, return_counts=True)\n    counts_dict = dict(zip(unique_elements, counts))\n    return counts_dict\niterable = [1, 2, 1, 3, 2, 1]\ncounts = count_elements(iterable)",
 "from itertools import groupby\ndef count_elements(iterable):\n    counts_dict = {}\n    iterable.sort()\n    for (key, group) in groupby(iterable):\n        counts_dict[key] = len(list(group))\n    return counts_dict\niterable = [1, 2, 1, 3, 2, 1]\ncounts = count_elements(iterable)",
 "iterable = [1, 2, 1, 3, 2, 1]\ncounts = {}\nfor i in iterable:\n    counts[i] = counts.get(i, 0) + 1",
 "from collections import Counter\niterable = [1, 2, 1, 3, 2, 1]\ncounts = Counter(iterable)",
 "from collections import Counter\ndef count_elements(iterable):\n    counts = Counter()\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 1, 2, 2, 3, 3, 3]\ncounts = count_elements(iterable)\ni = 0\nfor (key, value) in counts.items():\n    i += value",
 "import numpy as np\ndef count_elements(iterable):\n    counts = np.zeros(max(iterable) + 1)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 1, 2, 2, 3, 3, 3]\ncounts = count_elements(iterable)\ni = 0\nfor (key, value) in enumerate(counts):\n    i += value",
 "from collections import defaultdict\ndef count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\niterable = [1, 2, 3, 1, 2, 2, 3, 3, 3]\ncounts = count_elements(iterable)\ni = 0\nfor (key, value) in counts.items():\n    i += value",
 "import numpy as np\n(unique_vals, counts) = np.unique(iterable, return_counts=True)\nfor i in range(len(unique_vals)):\n    counts[unique_vals[i]] = counts[i]",
 "import itertools\ndef count_elements(iterable):\n    sorted_iterable = sorted(iterable)\n    counts = {key: sum((1 for _ in group)) for (key, group) in itertools.groupby(sorted_iterable)}\n    return counts\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = count_elements(iterable)",
 "import itertools\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = {}\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    count = sum((1 for _ in group))\n    counts[key] = count",
 "from itertools import groupby\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\niterable.sort()\ncounts = {key: sum((1 for _ in group)) for (key, group) in groupby(iterable)}",
 "import collections\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = collections.Counter(iterable)",
 "from collections import defaultdict\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = defaultdict(int)\nfor element in iterable:\n    counts[element] += 1",
 "import pandas as pd\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\nseries = pd.Series(iterable)\ncounts = series.value_counts().to_dict()",
 "import numpy as np\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = np.array([[np.count_nonzero(iterable == 'a'), np.count_nonzero(iterable == 'b'), np.count_nonzero(iterable == 'c')]])",
 "import numpy as np\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\nunique_vals = np.unique(iterable)\ncounts = [np.count_nonzero(iterable == val) for val in unique_vals]",
 "from collections import Counter\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = list(Counter(iterable).items())",
 "from itertools import groupby\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\niterable.sort()\nunique_vals = [key for (key, group) in groupby(iterable)]\ncounts = [len(list(group)) for (key, group) in groupby(iterable)]",
 "iterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
 "iterable = ['a', 'b', 'a', 'c', 'b', 'a']\nunique_vals = set(iterable)\ncounts = {val: iterable.count(val) for val in unique_vals}",
 "iterable = ['a', 'b', 'a', 'c', 'b', 'a']\nunique_vals = list(set(iterable))\nunique_vals.sort()\ncounts = [(val, iterable.count(val)) for val in unique_vals]",
 "iterable = ['a', 'b', 'a', 'c', 'b', 'a']\nunique_vals = list(set(iterable))\ncounts = [(val, sum((1 for item in iterable if item == val))) for val in unique_vals]",
 "from itertools import groupby\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\niterable.sort()\ngroups = groupby(iterable)\nunique_vals = [key for (key, group) in groups]\ncounts = [len(list(group)) for (key, group) in groups]",
 "import collections\ndef get_counts(iterable):\n    counts = collections.defaultdict(int)\n    for element in iterable:\n        counts[element] += 1\n    return dict(counts)\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = get_counts(iterable)",
 "from collections import defaultdict\ndef get_counts(iterable):\n    counts = defaultdict(int)\n    for element in iterable:\n        counts[element] += 1\n    return counts\niterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = get_counts(iterable)",
 "iterable = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = {}\nfor element in iterable:\n    counts[element] = counts.get(element, 0) + 1",
 "from collections import Counter\ncounts = dict(Counter(iterable))",
 "import numpy as np\n(unique_vals, counts) = np.unique(iterable, return_counts=True)",
 "import numpy as np\n(unique_vals, counts) = np.unique(iterable, return_counts=True)\nfor (i, val) in enumerate(unique_vals):\n    counts[val] += 1",
 "import numpy as np\narr = np.array(iterable)\ncount = np.sum(arr)",
 "from collections import Counter\ncounts = Counter(iterable)\ncount = counts[0]\nitem_counts = counts.values()\nmost_common = counts.most_common(1)",
 "import collections\ncounts = collections.Counter(iterable)\nitem_counts = counts.values()\nmost_common = counts.most_common(1)",
 "from collections import Counter\ncounts = Counter(iterable)\nitem_counts = list(counts.values())\nmost_common = counts.most_common(1)",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {i: np.sum(iterable == i) for i in unique_values}",
 "import pandas as pd\ndf = pd.DataFrame(iterable, columns=['values'])\ncounts = df['values'].value_counts().to_dict()",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import defaultdict\ndef count_elements(iterable):\n    counts = {}\n    for i in iterable:\n        if i not in counts:\n            counts[i] = 0\n        counts[i] += 1\n    return counts\n\ndef count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts\n\ndef count_elements(iterable):\n    counts = defaultdict(lambda : 0)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
 "from collections import Counter\ndef count_elements(iterable):\n    return dict(Counter(iterable))\n\ndef count_elements(iterable):\n    counts = dict(Counter(iterable))\n    return counts\n\ndef count_elements(iterable):\n    counts = Counter(iterable)\n    return dict(counts)",
 "def count_elements(iterable):\n    counts = {}\n    for i in iterable:\n        if i not in counts:\n            counts[i] = 0\n        counts[i] += 1\n    return counts\n\ndef count_elements(iterable):\n    counts = {}\n    for i in iterable:\n        counts[i] = counts.get(i, 0) + 1\n    return counts\n\ndef count_elements(iterable):\n    counts = {}\n    for i in iterable:\n        counts[i] = counts.get(i, 0)\n        counts[i] += 1\n    return counts",
 "import numpy as np\ncount = np.sum(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 3, 4, 4, 4]\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 3, 4, 4, 4]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    counts[i] = np.sum(iterable == i)",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.sum(iterable == i)\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.count_nonzero(iterable == i)\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.count_nonzero(np.equal(iterable, i))\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.sum(np.equal(iterable, i))\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.count_nonzero(np.asarray(iterable) == i)\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.sum(np.asarray(iterable) == i)\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.count_nonzero(np.array(iterable) == i)\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = {}\nfor i in unique_values:\n    count = np.sum(np.array(iterable) == i)\n    counts[i] = count",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = np.zeros(len(unique_values))\nfor i in range(len(unique_values)):\n    counts[i] = np.sum(iterable == unique_values[i])",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = np.zeros(len(unique_values))\nfor (i, value) in enumerate(unique_values):\n    counts[i] = np.sum(iterable == value)",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = np.zeros(len(unique_values))\nfor i in range(len(unique_values)):\n    counts[i] = np.count_nonzero(iterable == unique_values[i])",
 "import numpy as np\nunique_values = np.unique(iterable)\ncounts = np.zeros(len(unique_values))\nfor (i, value) in enumerate(unique_values):\n    counts[i] = np.count_nonzero(iterable == value)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique_values.tolist(), counts.tolist()))",
 "import numpy as np\ncounts = dict(zip(*np.unique(iterable, return_counts=True)))",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'orange', 'banana']\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
 "from collections import Counter\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = {}\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd']\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple', 'banana']\ncounts = Counter(iterable)\niterable = [True, False, True, False, True, True]\ncounts = Counter(iterable)\niterable = []\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple', 'banana']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, False, True, True]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple', 'banana']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, False, True, True]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = []\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'banana', 'orange', 'apple', 'banana']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, False, True, True]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = []\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
 "from collections import Counter\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter()\nfor i in iterable:\n    counts[i] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3]\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "import collections\ncounts = dict(collections.Counter(iterable))",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\ncounts = counts_dict",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\ncounts = counts_dict.copy()",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_values, counts))\ncounts = counts_dict.copy()\ni = 0\nfor key in counts_dict:\n    i += counts_dict[key]",
 "import pandas as pd\niterable_counts = pd.Series(iterable).value_counts()\ncounts = iterable_counts.to_dict()",
 "import numpy as np\ncounts = {i: np.count_nonzero(iterable == i) for i in np.unique(iterable)}",
 "import collections\ncounts = collections.Counter(iterable)\ncount = counts",
 "import collections\ncounts = collections.Counter(iterable)\ncount = counts\ni = 0\nfor key in counts:\n    i += counts[key]",
 "import collections\ncounts = collections.Counter(iterable)\ncount = counts\ni = 0\nfor (key, value) in counts.items():\n    i += value",
 "import collections\ncounts = collections.Counter(iterable)\ncount = counts\ni = 0\nfor key in counts.keys():\n    i += counts[key]",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique_values.tolist(), counts))",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = dict(zip(unique_values, counts.tolist()))",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = {value: count for (value, count) in zip(unique_values, counts)}",
 "import numpy as np\n(unique_values, counts) = np.unique(iterable, return_counts=True)\ncounts = {unique_values[i]: counts[i] for i in range(len(unique_values))}",
 "import numpy as np\niterable_counts = np.unique(iterable, return_counts=True)\ncounts = dict(zip(*iterable_counts))",
 "import numpy as np\niterable_counts = np.unique(iterable, return_counts=True)\n(keys, values) = iterable_counts\ncounts = dict(zip(keys, values))",
 "import numpy as np\niterable_counts = np.unique(iterable, return_counts=True)\nkeys = iterable_counts[0]\nvalues = iterable_counts[1]\ncounts = dict(zip(keys, values))",
 "import numpy as np\niterable_counts = np.unique(iterable, return_counts=True)\nkeys = iterable_counts[0]\nvalues = iterable_counts[1]\ncounts = {}\nfor i in range(len(keys)):\n    counts[keys[i]] = values[i]",
 "import numpy as np\n(unique_keys, counts) = np.unique(iterable, return_counts=True)\ndict(zip(unique_keys, counts))",
 "from collections import Counter\nCounter(iterable)",
 "import datetime\ndef count_items(iterable):\n    counts = {}\n    if iterable:\n        for item in iterable:\n            if item in counts:\n                counts[item] += 1\n            else:\n                counts[item] = 1\n    return counts\ncounts = count_items(iterable)\ncount = list(counts.values())[0] if counts else 0\ni = list(counts.keys())[0] if counts else 0",
 "import pandas as pd\ndf = pd.DataFrame(iterable, columns=['item'])\ncounts = df['item'].value_counts().to_dict()\ncount = list(counts.values())[0] if counts else 0\ni = list(counts.keys())[0] if counts else 0",
 "import pandas as pd\ndf = pd.DataFrame(iterable, columns=['elements'])\ncounts = df['elements'].value_counts().to_dict()",
 "import numpy as np\nd = np.array(iterable)\n(unique, counts) = np.unique(d, return_counts=True)\ncounts_dict = {k: v for (k, v) in zip(unique, counts)}",
 "import pandas as pd\ndf = pd.DataFrame(iterable, columns=['counts'])\ncounts = pd.value_counts(df.counts)\ncounts = counts.to_dict()",
 "import numpy as np\ncounts = np.unique(iterable, return_counts=True)[1]\nunique_keys = np.unique(iterable, return_counts=True)[0]\ndict(zip(unique_keys, counts))",
 "import numpy as np\ncounts = np.unique(iterable, return_counts=True)[1]\nunique_keys = np.unique(iterable, return_counts=True)[0]\n\ndef count_elements(arr):\n    counts = np.unique(arr, return_counts=True)[1]\n    unique_keys = np.unique(arr, return_counts=True)[0]\n    return dict(zip(unique_keys, counts))\ncount_elements(iterable)",
 "import numpy as np\nresult = {key: count for (key, count) in zip(*np.unique(iterable, return_counts=True))}",
 "import numpy as np\narr = np.array(iterable)\n(unique_elements, counts) = np.unique(arr, return_counts=True)\ncounter = dict(zip(unique_elements, counts))",
 "import pandas as pd\nseries = pd.Series(iterable)\ncounter = series.value_counts().to_dict()",
 "import datetime\nfrom collections import Counter\ndef count_items(iterable):\n    counts = Counter(iterable)\n    return counts\ncounts = count_items(iterable)\ncount = next(iter(counts.values()), 0)\ni = next(iter(counts.keys()), 0)",
 "from collections import Counter\ncounts = Counter(iterable)\nif counts:\n    num_items = list(counts.values())\n    count = num_items[0]\n    i = list(counts.keys())[0]\nelse:\n    count = 0\n    i = 0",
 "import pandas as pd\ncounts = pd.Series(iterable).value_counts().to_dict()\ncount = list(counts.values())[0] if counts else 0\ni = list(counts.keys())[0] if counts else 0",
 "from statistics import Counter\ncounts = dict(Counter(iterable))\ncount = list(counts.values())[0] if counts else 0\ni = list(counts.keys())[0] if counts else 0",
 "import numpy as np\ndef count_elements(arr):\n    (unique, counts) = np.unique(arr, return_counts=True)\n    counts_dict = dict(zip(unique, counts))\n    return counts_dict\ncounts = count_elements(iterable)",
 "import numpy as np\niterable = np.array(iterable)\nunique = np.unique(iterable)\ncounts = {}\nfor i in unique:\n    counts[i] = np.count_nonzero(iterable == i)",
 "import numpy as np\niterable = np.array(iterable)\nunique_elements = np.unique(iterable)\ncounts = np.array([np.count_nonzero(iterable == index) for index in unique_elements], dtype=int)",
 "import collections\niterable = [1, 2, 3, 1, 2, 3]\ncounts = collections.Counter(iterable)",
 "import collections\ndef count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for elem in iterable:\n        counts[elem] += 1\n    return dict(counts)",
 "from collections import Counter\ndef count_elements(iterable):\n    counts = Counter(iterable)\n    return dict(counts)",
 "import numpy as np\ndef count_elements(iterable):\n    unique = np.unique(iterable)\n    counts = np.zeros_like(unique)\n    for (index, elem) in enumerate(unique):\n        counts[index] = np.sum(iterable == elem)\n    return dict(zip(unique, counts))",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter(iterable)\niterable = [True, False, True, True, False]\ncounts = Counter(iterable)\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)\niterable = [1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [True, False, True, True, False]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor (i, item) in enumerate(iterable):\n    counts[item] += 1",
 "import numpy as np\n(unique_elements, counts) = np.unique(iterable, return_counts=True)\ncounts_dict = dict(zip(unique_elements, counts))\ni = 0\nfor (key, value) in counts_dict.items():\n    i += value",
 "import pandas as pd\ncounts = pd.Series(iterable).value_counts()\ncount = counts.to_dict()\ni = 0\nfor (key, value) in count.items():\n    i += value",
 "import pandas as pd\ncounts = pd.Series(iterable).value_counts()\ncount = counts.to_dict()\ni = 0\nfor key in count:\n    i += count[key]",
 "import pandas as pd\ncounts = pd.Series(iterable).value_counts()\ncount = counts.to_dict()\ni = 0\nfor value in count.values():\n    i += value",
 "import itertools\niterable = [1, 2, 2, 3, 3, 3]\nsorted_iterable = sorted(iterable)\ngroups = itertools.groupby(sorted_iterable)\ncounts = {}\nfor (key, group) in groups:\n    counts[key] = len(list(group))\nsorted_iterable = sorted(iterable)\ngroups = itertools.groupby(sorted_iterable)\ncounts = {key: len(list(group)) for (key, group) in groups}\nsorted_iterable = sorted(iterable)\ngroups = itertools.groupby(sorted_iterable)\ncounts = {key: len(list(group)) for (key, group) in groups if key > 1}",
 "import itertools\niterable = [1, 2, 2, 3, 3, 3]\nsorted_iterable = sorted(iterable)\ngroups = itertools.groupby(sorted_iterable)\ncounts = {}\nfor (key, group) in groups:\n    counts[key] = sum((1 for _ in group))\nsorted_iterable = sorted(iterable)\ngroups = itertools.groupby(sorted_iterable)\ncounts = {key: sum((1 for _ in group)) for (key, group) in groups}\nsorted_iterable = sorted(iterable)\ngroups = itertools.groupby(sorted_iterable)\ncounts = {key: sum((1 for _ in group)) for (key, group) in groups if key > 1}",
 "import itertools\niterable = [1, 2, 2, 3, 3, 3]\ncounts = dict(itertools.groupby(sorted(iterable)))\ncounts = list(itertools.groupby(sorted(iterable)))\ncounts = {key: len(list(group)) for (key, group) in itertools.groupby(sorted(iterable))}",
 "import itertools\niterable = [1, 2, 2, 3, 3, 3]\ncounts = dict()\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = len(list(group))\ncounts = dict()\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = sum((1 for _ in group))\ncounts = dict()\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = sum((1 for _ in group))",
 "import itertools\niterable = [1, 2, 2, 3, 3, 3]\ncounts = {key: len(list(group)) for (key, group) in itertools.groupby(sorted(iterable))}\ncounts = {}\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = len(list(group))\ncounts = {}\nfor (key, group) in itertools.groupby(sorted(iterable)):\n    counts[key] = sum((1 for _ in group))",
 "import numpy as np\ncount = np.count_nonzero(iterable)",
 "import numpy as np\ncount = np.unique(iterable, return_counts=True)[1][0]",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 1)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 2)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 3)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 4)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 5)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'a')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'b')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'c')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'd')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'e')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == True)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == False)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'apple')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'banana')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 'cherry')",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 1.0)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 2.0)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 3.0)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 4.0)",
 "import numpy as np\ncount = np.sum(np.array(iterable) == 5.0)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor item in iterable:\n    counts[item] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter()\nfor i in range(len(iterable)):\n    counts[iterable[i]] += 1",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\niterable = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\niterable = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\ncounts = Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\niterable = [1, 1, 2, 3, 3, 3]\ncounts = Counter(iterable)",
 "import collections\niterable = [1, 1, 2, 3, 3, 3]\ncounts = collections.Counter(iterable)",
 "import collections\niterable = iterable\ncounts = collections.Counter(iterable)",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts = counts",
 "import pandas as pd\ndf = pd.DataFrame(iterable, columns=['i'])\ncounts = df['i'].value_counts().to_dict()",
 "import collections\ndef count_elements(iterable):\n    counts = collections.defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
 "from collections import Counter\ndef count_elements(iterable):\n    return Counter(iterable)",
 "from collections import defaultdict\ndef count_elements(iterable):\n    counts = defaultdict(int)\n    for i in iterable:\n        counts[i] += 1\n    return counts",
 "import numpy as np\ndef count_elements(iterable):\n    counts = {}\n    for i in iterable:\n        counts[i] = np.sum(np.array(list(counts.values()))) + 1\n    return counts",
 "import pandas as pd\ndef count_elements(iterable):\n    counts = pd.value_counts(iterable).to_dict()\n    return counts",
 "from itertools import groupby\ndef count_elements(iterable):\n    counts = {}\n    for (i, group) in groupby(sorted(iterable)):\n        counts[i] = len(list(group))\n    return counts",
 "import collections\ndef count_items(iterable):\n    counts = collections.Counter(iterable)\n    return counts\ncounts = count_items(iterable)",
 "import pandas as pd\ndef get_counts(iterable):\n    counts = pd.Series(iterable).value_counts().to_dict()\n    return counts",
 "import pandas as pd\ndef get_counts(iterable):\n    counts = pd.Series(iterable).value_counts()\n    counts_dict = counts.to_dict()\n    return counts_dict",
 "import pandas as pd\ndef get_counts(iterable):\n    counts = pd.Series(iterable)\n    counts = counts.value_counts()\n    counts_dict = counts.to_dict()\n    return counts_dict",
 "import pandas as pd\ndef get_counts(iterable):\n    counts = pd.Series(iterable)\n    counts_dict = counts.value_counts().to_dict()\n    return counts_dict",
 "import pandas as pd\ncounts = dict(pd.Series(iterable).value_counts())",
 "import numpy as np\ndef count_elements(iterable):\n    counts = dict(zip(*np.unique(iterable, return_counts=True)))\n    return counts\ncounts = count_elements(iterable)",
 "import numpy as np\niterable = [1, 2, 3, 1, 2, 1]\n\ndef count_elements(iterable):\n    counts = dict(zip(*np.unique(iterable, return_counts=True)))\n    return counts\ncounts = count_elements(iterable)",
 "import numpy as np\nimport collections\ncounts = collections.Counter(iterable)\ncounts = dict(counts)",
 "from collections import Counter\ndef count_occurrences(iterable):\n    return Counter(iterable)\ncounts = count_occurrences(iterable)",
 "from collections import Counter\niterable = [1, 2, 3, 4, 5]\ncounts = Counter()\nfor item in iterable:\n    if item in counts:\n        counts[item] += 1\n    else:\n        counts[item] = 1",
 "import collections\ncounts = collections.Counter([1, 2, 3, 4, 5])",
 "import collections\ncounts = collections.Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
 "import collections\ncounts = collections.Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1}.values())",
 "import collections\ncounts = collections.Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1}.keys())",
 "from collections import Counter\ncounts = Counter([1, 2, 3, 4, 5])",
 "from collections import Counter\ncounts = Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
 "from collections import Counter\ncounts = Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1}.values())",
 "from collections import Counter\ncounts = Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1}.keys())",
 "import collections\ncounts = collections.Counter(iterable)\ni = 0",
 "from collections import Counter\ncounts = Counter(iterable)\ni = 0",
 "from collections import Counter\niterable = iterable\ncounts = Counter(iterable)\ni = 0",
 "from collections import Counter\niterable = iterable\ncounts = Counter(iterable)",
 "from collections import Counter\niterable = iterable\ncounts = dict(Counter(iterable))",
 "import collections\niterable = iterable\ncounts = dict(collections.Counter(iterable))",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts_dict = dict(counts)",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts_list = list(counts)",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts_values = list(counts.values())",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts_keys = list(counts.keys())",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts_most_common = counts.most_common()",
 "from collections import Counter\ncounts = Counter(iterable)\ncounts_items = list(counts.items())"
]