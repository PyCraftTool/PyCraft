[
 "dot_prod = sum(map(lambda x, y: x * y, arr1, arr2))",
 "dot_prod = sum([x * y for (x, y) in zip(arr1, arr2)])",
 "import itertools\npairs = list(itertools.product(arr1, arr2))\ndot_prod = sum([x * y for (x, y) in pairs])",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y, [x * y for (x, y) in zip(arr1, arr2)])",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    dot_prod += i * j",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2)))",
 "import itertools\npairs = list(zip(arr1, arr2))\ndot_prod = sum((i * j for (i, j) in pairs))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.dot(arr1, arr2)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = arr1.dot(arr2)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.sum(arr1 * arr2)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.inner(arr1, arr2)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.einsum('i,i->', arr1, arr2)",
 "import itertools\npairs = list(itertools.zip_longest(arr1, arr2, fillvalue=0))\ndot_prod = sum([x * y for (x, y) in pairs])",
 "dot_prod = sum([x * y for (x, y) in zip(arr1, arr2)]) if len(arr1) == len(arr2) else None",
 "dot_prod = 0\nfor (x, y) in zip(arr1, arr2):\n    dot_prod = dot_prod + x * y",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1)))) if len(arr1) == len(arr2) else None",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x + y[0] * y[1], zip(arr1, arr2), 0)",
 "import math\ndot_prod = math.fsum([a * b for (a, b) in zip(arr1, arr2)])",
 "import itertools\nimport operator\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\npairs = zip(arr1, arr2)\ndot_prod = sum(itertools.starmap(operator.mul, pairs))",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.dot(arr1, arr2)",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += arr1[i] * arr2[i]",
 "import itertools\npairs = list(itertools.product(arr1, arr2))\ndot_prod = sum((x * y for (x, y) in pairs))",
 "import numpy as np\npairs = np.outer(arr1, arr2)\ndot_prod = np.sum(pairs)",
 "dot_prod = 0\nfor x in arr1:\n    for y in arr2:\n        dot_prod += x * y",
 "import itertools\npairs = zip(arr1, arr2)\ndot_prod = sum((i * j for (i, j) in pairs))",
 "dot_prod = sum(map(lambda x: x[0] * x[1], zip(arr1, arr2)))",
 "import numpy as np\npairs = np.array(list(zip(arr1, arr2)))\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, [i * j for (i, j) in zip(arr1, arr2)])",
 "dot_prod = sum([x * y for (x, y) in zip(list(arr1), list(arr2))])",
 "import functools\narr1 = functools.reduce(lambda x, y: x * y, arr1)\narr2 = functools.reduce(lambda x, y: x * y, arr2)\ndot_prod = arr1 * arr2",
 "import math\ndot_prod = math.prod(arr1) * math.prod(arr2)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += arr1[i] * arr2[i]",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.sum(np.multiply(arr1, arr2))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.dot(arr2.T, arr1)",
 "import math\ndot_prod = math.prod((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "import itertools\ndot_prod = sum((x * y for (x, y) in itertools.zip_longest(arr1, arr2, fillvalue=0)))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum((x * y for (x, y) in zip(arr1, arr2)))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum(map(lambda x, y: x * y, arr1, arr2))",
 "from itertools import starmap\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum(starmap(lambda x, y: x * y, zip(arr1, arr2)))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum([x * y for (x, y) in zip(arr1, arr2)])",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum((x * y for (x, y) in zip(arr1, arr2) if x is not None and y is not None))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum([x * y for (x, y) in zip(arr1, arr2) if x is not None and y is not None])",
 "from functools import reduce\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = reduce(lambda x, y: x + y, map(lambda x, y: x * y, arr1, arr2))",
 "from math import prod\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = prod([x * y for (x, y) in zip(arr1, arr2)])",
 "from statistics import fmean\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = fmean([x * y for (x, y) in zip(arr1, arr2)])",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.matmul(arr1, arr2)",
 "import itertools\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum(itertools.starmap(lambda x, y: x * y, zip(arr1, arr2)))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.tensordot(arr1, arr2, axes=0)",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1)))) if len(arr1) == len(arr2) else 0",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1)))) if len(arr1) == len(arr2) else sum(arr1) * sum(arr2)",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1)))) if len(arr1) == len(arr2) else sum(arr1) + sum(arr2)",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    dot_prod = i * j + dot_prod",
 "import itertools\npairs = list(itertools.product(arr1, arr2))\ndot_prod = sum((p[0] * p[1] for p in pairs))",
 "from itertools import starmap\nimport operator\ndot_prod = sum(starmap(operator.mul, zip(arr1, arr2)))",
 "import functools\nmultiply = functools.partial(lambda x, y: x * y)\ndot_prod = sum(map(multiply, arr1, arr2))",
 "import itertools\npairs = list(zip(arr1, arr2))\ndot_prod = sum([i * j for (i, j) in pairs])",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None))",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None)) if arr1 and arr2 else 0",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None)) if arr1 is not None and arr2 is not None else 0",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None)) if arr1 is not None and arr2 is not None else None",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None)) if arr1 is not None and arr2 is not None else float('nan')",
 "import itertools\npairs = list(itertools.zip_longest(arr1, arr2, fillvalue=0))\ndot_prod = sum((i * j for (i, j) in pairs))",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.tensordot(arr1, arr2, axes=0)",
 "dot_prod = sum((x * y for (x, y) in zip(list(arr1), list(arr2))))",
 "dot_prod = sum((x * y for (x, y) in zip(list(arr1), arr2)))",
 "dot_prod = sum((x * y for (x, y) in zip(arr1, list(arr2))))",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, [x * y for (x, y) in zip(arr1, arr2)])",
 "import numpy as np\npairs = np.array(list(zip(arr1, arr2)))\ndot_prod = np.dot(pairs[:, 0], pairs[:, 1])",
 "dot_prod = sum((x * y for x in arr1 for y in arr2))",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.einsum('i->', arr1) * np.einsum('i->', arr2)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.einsum('i,j', arr1, arr2)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.einsum('i,j->', arr1, arr2)",
 "dot_prod = sum([x * y for (x, y) in zip(arr1, arr2) if x is not None and y is not None])",
 "dot_prod = sum([x * y for (x, y) in zip(arr1, arr2) if x is not None and y is not None]) if len(arr1) == len(arr2) else None",
 "import numpy as np\npairs = np.array(list(zip(arr1, arr2)))\ndot_prod = np.einsum('i,i->', pairs[:, 0], pairs[:, 1])",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    if i is not None and j is not None:\n        dot_prod += i * j",
 "dot_prod = sum(filter(lambda x: x is not None, [i * j for (i, j) in zip(arr1, arr2)]))",
 "import itertools\npairs = itertools.zip_longest(arr1, arr2)\ndot_prod = sum([i * j for (i, j) in pairs if i is not None and j is not None])",
 "import itertools\narr1 = list(filter(lambda x: x is not None, arr1))\narr2 = list(filter(lambda x: x is not None, arr2))\ndot_prod = sum((i * j for (i, j) in itertools.zip_longest(arr1, arr2, fillvalue=0)))",
 "import numpy as np\ndot_prod = np.dot(arr1, arr2) if arr1 and arr2 else 0",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    if i is not None and j is not None:\n        dot_prod += i * j\n    else:\n        dot_prod += 0",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    if i is not None and j is not None:\n        dot_prod += i * j\n    elif i is None and j is None:\n        dot_prod += 0",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    if i is not None and j is not None:\n        dot_prod += i * j\n    elif i is None or j is None:\n        dot_prod += 0",
 "import numpy as np\ndot_prod = np.dot(arr1, arr2) if arr1 is not None and arr2 is not None else 0",
 "dot_prod = sum([i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None]) if arr1 is not None and arr2 is not None else 0",
 "dot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    if i is not None and j is not None:\n        dot_prod += i * j\n    else:\n        dot_prod = 0",
 "import itertools\npairs = list(itertools.zip_longest(arr1, arr2))\ndot_prod = sum([i * j for (i, j) in pairs if i is not None and j is not None]) if arr1 is not None and arr2 is not None else 0",
 "import itertools\narr1 = list(itertools.compress(arr1, [i is not None for i in arr1]))\narr2 = list(itertools.compress(arr2, [i is not None for i in arr2]))\ndot_prod = sum((i * j for (i, j) in zip(arr1, arr2)))",
 "import numpy as np\narr1 = np.array([i for i in arr1 if i is not None])\narr2 = np.array([i for i in arr2 if i is not None])\ndot_prod = np.dot(arr1, arr2) if len(arr1) > 0 and len(arr2) > 0 else None",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None)) if len(arr1) > 0 and len(arr2) > 0 else None",
 "import numpy as np\narr1 = np.array([i for i in arr1 if i is not None])\narr2 = np.array([i for i in arr2 if i is not None])\ndot_prod = np.dot(arr1, arr2) if arr1.size > 0 and arr2.size > 0 else None",
 "dot_prod = sum((i * j for (i, j) in zip(arr1, arr2) if i is not None and j is not None)) if arr1 and arr2 else None",
 "import numpy as np\narr1 = np.array([i for i in arr1 if i is not None])\narr2 = np.array([i for i in arr2 if i is not None])\ndot_prod = np.dot(arr1, arr2) if arr1.any() and arr2.any() else None",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.dot(np.array(arr1), np.array(arr2))",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.dot(np.asarray(arr1), np.asarray(arr2))",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.dot(list(arr1), list(arr2))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.dot(np.asarray(arr1), np.asarray(arr2))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.dot(list(arr1), list(arr2))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nsum_product = 0\nfor i in range(len(arr1)):\n    sum_product += arr1[i] * arr2[i]\ndot_prod = sum_product",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nsum_product = sum([arr1[i] * arr2[i] for i in range(len(arr1))])\ndot_prod = sum_product",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nsum_product = sum(map(lambda x, y: x * y, arr1, arr2))\ndot_prod = sum_product",
 "dot_prod = 0\nfor (i, (val1, val2)) in enumerate(zip(arr1, arr2)):\n    dot_prod += val1 * val2",
 "import itertools\nimport operator\ndot_prod = sum(itertools.starmap(operator.mul, zip(arr1, arr2)))",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, map(lambda x, y: x * y, arr1, arr2))",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, map(operator.mul, arr1, arr2))",
 "import numpy as np\nimport itertools\ndot_prod = 0\nfor (a, b) in itertools.product(arr1, arr2):\n    dot_prod += a * b",
 "import functools\nmul_func = lambda x, y: x * y\ndot_prod = functools.reduce(mul_func, arr1, 0) + functools.reduce(mul_func, arr2, 0)",
 "from itertools import starmap\nmultiply = list(starmap(lambda x, y: x * y, zip(arr1, arr2)))\ndot_prod = sum(multiply)",
 "dot_prod = sum(map(lambda a, b: a * b, arr1, arr2))",
 "dot_prod = sum((arr1[i] * arr2[i] for i in range(min(len(arr1), len(arr2)))))",
 "import functools\nmultiply = functools.partial(lambda a, b: a * b)\ndot_prod = sum(map(multiply, arr1, arr2))",
 "from itertools import starmap\narr1 = list(arr1)\narr2 = list(arr2)\ndot_prod = sum(starmap(lambda x, y: x * y, zip(arr1, arr2)))",
 "import math\ndot_prod = sum([math.prod(pair) for pair in zip(arr1, arr2)])",
 "from itertools import starmap\nmap_func = lambda x, y: x * y\nresult = sum(starmap(map_func, zip(arr1, arr2)))\ndot_prod = result",
 "from itertools import starmap\ndot_prod = sum(starmap(lambda x, y: x * y, zip(arr1, arr2)))",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.sum(np.multiply(arr1, arr2))",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.array(arr1) @ np.array(arr2)",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.dot(arr1, arr2)",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = 0\nfor (i, j) in zip(arr1, arr2):\n    dot_prod += i * j",
 "import itertools\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum(itertools.starmap(lambda a, b: a * b, zip(arr1, arr2)))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum(map(lambda a, b: a * b, arr1, arr2))",
 "import math\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = math.fsum((a * b for (a, b) in zip(arr1, arr2)))",
 "import itertools\npairs = list(itertools.product(arr1, arr2))\ndot_prod = sum([pair[0] * pair[1] for pair in pairs])",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.sum(np.asarray(arr1) * np.asarray(arr2))",
 "import numpy as np\narr1 = list(range(1, 4))\narr2 = list(range(4, 7))\ndot_prod = np.dot(arr1, arr2)",
 "from numpy import dot\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = dot(arr1, arr2)",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nproduct = np.multiply(arr1, arr2)\ndot_prod = np.sum(product)",
 "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\ndot_prod = np.prod(arr, axis=1)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.sum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\ndot_prod = np.einsum('ij->i', arr).tolist()",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.inner(arr1, arr2)",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "from itertools import zip_longest\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nproduct = [x * y for (x, y) in zip_longest(arr1, arr2, fillvalue=1)]\ndot_prod = sum(product)",
 "from itertools import zip_longest\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nsum_product = 0\nfor (a, b) in zip_longest(arr1, arr2, fillvalue=0):\n    sum_product += a * b\ndot_prod = sum_product",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nproduct_list = [a * b for (a, b) in zip(arr1, arr2)]\ndot_prod = sum(product_list)",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nsum_product = sum([a * b for (a, b) in zip(arr1, arr2)])\ndot_prod = sum_product",
 "import itertools\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum((a * b for (a, b) in itertools.zip_longest(arr1, arr2, fillvalue=0)))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.multiply(arr1, arr2).sum()",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.vdot(arr1, arr2)",
 "import functools\nfrom operator import mul\ndot_prod = functools.reduce(mul, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.dot(arr1, np.transpose(arr2))",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.dot(np.array(arr1), np.transpose(np.array(arr2)))",
 "import itertools\npairs = zip(arr1, arr2)\ndot_prod = sum(itertools.starmap(lambda x, y: x * y, pairs))",
 "dot_prod = sum((x * y for (x, y) in zip(arr1, arr2) if x > 0 and y > 0))",
 "from itertools import zip_longest\narr1 = list(arr1)\narr2 = list(arr2)\ndot_prod = sum([x * y for (x, y) in zip_longest(arr1, arr2, fillvalue=0)])",
 "import itertools\npairs = zip(arr1, arr2)\ndot_prod = sum([i * j for (i, j) in pairs])",
 "import itertools\npairs = list(zip(arr1, arr2))\ndot_prod = sum(map(lambda x: x[0] * x[1], pairs))",
 "import functools\ndot_prod = functools.reduce(lambda x, y: x * y, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import itertools\npairs = itertools.zip_longest(arr1, arr2)\ndot_prod = sum((x * y for (x, y) in pairs if x and y))",
 "import numpy as np\nimport itertools\narr = np.array(list(itertools.product(arr1, arr2)))\ndot_prod = np.sum(arr, axis=1)",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = sum(np.array(arr1) * np.array(arr2))",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.einsum('i,i->', arr1, arr2)",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = np.sum(np.array(arr1) * np.array(arr2))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = arr1[0] * arr2[0] + arr1[1] * arr2[1] + arr1[2] * arr2[2]",
 "import functools\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = functools.reduce(lambda x, y: x + y[0] * y[1], zip(arr1, arr2), 0)",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nproduct = np.multiply(np.array(arr1), np.array(arr2))\ndot_prod = np.sum(product)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ndot_prod = np.dot(np.transpose(arr1), arr2)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\nproduct = np.multiply(arr1, arr2)\ndot_prod = np.sum(product)",
 "import numpy as np\ndot_prod = np.sum([a * b for (a, b) in zip(arr1, arr2)])",
 "from itertools import starmap\nfrom operator import mul\ndot_prod = sum(starmap(mul, zip(arr1, arr2)))",
 "from functools import reduce\nimport operator\ndot_prod = reduce(operator.add, [x * y for (x, y) in zip(arr1, arr2)])",
 "from itertools import zip_longest\nsum = 0\nfor (a, b) in zip_longest(arr1, arr2, fillvalue=0):\n    sum += a * b\ndot_prod = sum",
 "dot_prod = np.inner(arr1, arr2) if len(arr1) == len(arr2) else None",
 "from itertools import zip_longest\ndot_prod = sum((x * y for (x, y) in zip_longest(arr1, arr2, fillvalue=0)))",
 "import numpy as np\npairs = np.array([(x, y) for (x, y) in zip(arr1, arr2)])\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "import numpy as np\npairs = np.array([(x, y) for (x, y) in zip(list(arr1), list(arr2))])\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "import numpy as np\npairs = np.array(list(zip(arr1, arr2)))\ndot_prod = np.inner(pairs[:, 0], pairs[:, 1])",
 "import numpy as np\npairs = np.array(list(zip(arr1, arr2)))\ndot_prod = np.matmul(pairs[:, 0], pairs[:, 1])",
 "import numpy as np\npairs = np.array(list(zip(arr1, arr2)))\ndot_prod = np.tensordot(pairs[:, 0], pairs[:, 1], axes=0)",
 "dot_prod = 0\nfor (x, y) in zip(list(arr1), list(arr2)):\n    dot_prod += x * y",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, (x * y for (x, y) in zip(list(arr1), list(arr2))))",
 "import math\ndot_prod = math.fsum((x * y for (x, y) in zip(list(arr1), list(arr2))))",
 "dot_prod = 0\nfor (x, y) in zip(list(arr1), arr2):\n    dot_prod += x * y",
 "import itertools\narr1_list = list(arr1)\ndot_prod = sum((x * y for (x, y) in itertools.zip_longest(arr1_list, arr2, fillvalue=0)))",
 "dot_prod = 0\nfor (x, y) in zip(arr1, list(arr2)):\n    dot_prod += x * y",
 "dot_prod = sum([x * y for x in arr1 for y in arr2])",
 "import numpy as np\nimport array as arry\narr1 = arry.array('i', [1, 2, 3])\narr2 = arry.array('i', [4, 5, 6])\ndot_prod = np.dot(arr1, arr2)",
 "import numpy as np\nprod_arr = np.array([a * b for (a, b) in zip(arr1, arr2)])\ndot_prod = np.sum(prod_arr)",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y[0] * y[1], zip(arr1, arr2), 0)",
 "from numpy import dot\nfrom itertools import starmap\nlist1 = list(map(lambda a, b: a * b, arr1, arr2))\ndot_prod = sum(list1)",
 "dot_prod = sum(list(map(int.__mul__, arr1, arr2)))",
 "import numpy as np\ndot_prod = np.dot([1, 2, 3], [4, 5, 6])",
 "dot_prod = sum(([1, 2, 3][i] * [4, 5, 6][i] for i in range(len([1, 2, 3]))))",
 "def dot_product(arr1, arr2):\n    dot_prod = 0\n    for (x, y) in zip(arr1, arr2):\n        dot_prod += x * y\n    return dot_prod\ndot_prod = dot_product(arr1, arr2)",
 "from numpy import dot\ndef dot_product(arr1, arr2):\n    dot_prod = dot(arr1, arr2)\n    return dot_prod",
 "from operator import mul\nfrom functools import reduce\ndot_prod = reduce(mul, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import itertools\nproduct = list(itertools.product(arr1, arr2))\ndot_prod = sum(product)",
 "prod_arr = [a * b for (a, b) in zip(arr1, arr2)]\ndot_prod = sum(prod_arr)",
 "dot_prod = sum((x * y for (x, y) in list(zip(arr1, arr2))))",
 "dot_prod = 0\ndot_prod = sum((x * y for (x, y) in zip(arr1, arr2)))",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = [4, 5, 6]\ndot_prod = np.dot(arr1, arr2)",
 "import numpy as np\narr1 = [1, 2, 3]\narr2 = np.array([4, 5, 6])\ndot_prod = np.dot(arr1, arr2)",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\nresult = np.multiply(arr1, arr2)\ndot_prod = result.sum()",
 "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\nunrolled_arr = [*arr1, *arr2]\ndot_prod = sum((unrolled_arr[i] * unrolled_arr[i + len(arr1)] for i in range(len(arr1))))",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\ndot_prod = 0\nfor (i, val) in enumerate(arr1):\n    dot_prod += val * arr2[i]",
 "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nresult = [arr1[i] * arr2[i] for i in range(len(arr1))]\ndot_prod = sum(result)",
 "import itertools\nres = 0\nfor (i, j) in itertools.zip_longest(arr1, arr2, fillvalue=0):\n    res += i * j\ndot_prod = res",
 "import numpy as np\nfreq_arr = np.array([arr1]).T.dot([arr2])\ndot_prod = np.sum(freq_arr)"
]