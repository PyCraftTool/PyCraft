[
 "import itertools\npairs = zip(arr1, arr2)\ndot_prod = sum(itertools.starmap(operator.mul, pairs))",
 "import numpy as np\npairs = np.array(list(itertools.product(arr1, arr2)))\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "\ndot_prod = 0\nfor (i, j) in itertools.zip_longest(arr1, arr2, fillvalue=0):\n    dot_prod += i * j",
 "\ndot_prod = np.sum(arr1 * arr2)",
 "\ndot_prod = np.einsum('i,i->', arr1, arr2)",
 "\ndot_prod = np.dot(arr1.tolist(), arr2.tolist())",
 "\ndot_prod = np.sum([arr1[i] * arr2[i] for i in range(len(arr1))])",
 "\ndot_prod = np.sum((arr1[i] * arr2[i] for i in range(len(arr1))))",
 "\ndot_prod = np.dot(arr1, arr2).item()",
 "\ndot_prod = np.dot(arr1.tolist(), arr2.tolist()).item()",
 "\ndot_prod = np.sum(arr1 * arr2).item()",
 "\ndot_prod = np.sum([arr1[i] * arr2[i] for i in range(len(arr1))]).item()",
 "\ndot_prod = np.dot(arr1, arr2).tolist()",
 "\ndot_prod = np.dot(arr1.tolist(), arr2.tolist()).tolist()",
 "\ndot_prod = np.sum(arr1 * arr2).tolist()",
 "\ndot_prod = np.sum([arr1[i] * arr2[i] for i in range(len(arr1))]).tolist()",
 "\ndot_prod = np.dot(arr1, arr2).tolist()[0]",
 "\ndot_prod = np.dot(arr1.tolist(), arr2.tolist())[0]",
 "\ndot_prod = np.sum(arr1 * arr2).tolist()[0]",
 "\ndot_prod = np.sum([arr1[i] * arr2[i] for i in range(len(arr1))]).tolist()[0]",
 "\ndot_prod = sum(map(operator.mul, arr1, arr2))",
 "\ndot_prod = np.matmul(arr1, arr2)",
 "\ndot_prod = np.tensordot(arr1, arr2, axes=1)",
 "\ndot_prod = np.dot(arr1.flatten(), arr2.flatten())",
 "\ndot_prod = sum(np.multiply(arr1, arr2))",
 "\ndot_prod = np.vdot(arr1, arr2)",
 "\ndot_prod = np.tensordot(arr1, arr2, axes=0)",
 "\ndot_prod = np.sum(arr1.flatten() * arr2.flatten())",
 "\ndot_prod = np.inner(arr1.flatten(), arr2.flatten())",
 "\ndot_prod = np.einsum('i,i', arr1.flatten(), arr2.flatten())",
 "\ndot_prod = 0\nfor (x, y) in itertools.zip_longest(arr1, arr2):\n    dot_prod += x * y",
 "import numpy as np\npairs = np.array(list(itertools.product(arr1, arr2)))\ndot_prod = np.dot(pairs[:, 0], pairs[:, 1])",
 "\ndot_prod = sum((x * y for (x, y) in itertools.product(arr1, arr2)))",
 "import numpy as np\npairs = np.array(list(itertools.product(arr1, arr2)))\ndot_prod = np.einsum('i,i->', pairs[:, 0], pairs[:, 1])",
 "from numpy import dot\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nproduct = np.multiply(arr1, arr2)\ndot_prod = dot(product)",
 "\ndot_prod = np.array(arr1) * np.array(arr2)\ndot_prod = np.sum(dot_prod)",
 "\ndot_prod = np.dot(list(arr1), list(arr2))",
 "\ndot_prod = np.multiply(arr1, arr2).sum()",
 "\ndot_prod = np.matmul(arr1.T, arr2)",
 "import numpy as np\npairs = np.array(list(itertools.permutations(arr1, len(arr2))))\ndot_prod = np.sum(pairs * arr2)",
 "import numpy as np\npairs = np.array(list(itertools.combinations(arr1, len(arr2))))\ndot_prod = np.sum(pairs * arr2)",
 "import numpy as np\npairs = np.array(list(itertools.combinations_with_replacement(arr1, len(arr2))))\ndot_prod = np.sum(pairs * arr2)",
 "import numpy as np\npairs = np.array(list(itertools.product(arr1, repeat=len(arr2))))\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "import numpy as np\npairs = np.array(list(itertools.permutations(arr1, len(arr2))))\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "import numpy as np\npairs = np.array(list(itertools.combinations(arr1, len(arr2))))\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "import numpy as np\npairs = np.array(list(itertools.combinations_with_replacement(arr1, len(arr2))))\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "\ndot_prod = sum([x * y for (x, y) in itertools.product(arr1, arr2)])",
 "import numpy as np\nfrom scipy.sparse import coo_matrix\narr1 = coo_matrix(([1, 2, 3], [0, 0, 0], [0, 1, 2]), shape=(1, 3))\narr2 = coo_matrix(([4, 5, 6], [0, 0, 0], [0, 1, 2]), shape=(1, 3))\ndot_prod = np.dot(arr1.toarray(), arr2.toarray())",
 "import numpy as np\nfrom scipy.sparse import csr_matrix\narr1 = csr_matrix(([1, 2, 3], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\narr2 = csr_matrix(([4, 5, 6], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\ndot_prod = np.dot(arr1.toarray().transpose(), arr2.toarray())",
 "\ndot_prod = arry.array('i', [arr1[i] * arr2[i] for i in range(len(arr1))]).count",
 "\ndot_prod = sum(np.array(arr1) * np.array(arr2))",
 "import numpy as np\nfrom scipy.sparse import coo_matrix\ndot_prod = np.dot(coo_matrix(([1, 2, 3], [0, 0, 0], [0, 1, 2]), shape=(1, 3)).toarray(), coo_matrix(([4, 5, 6], [0, 0, 0], [0, 1, 2]), shape=(1, 3)).toarray())",
 "import numpy as np\nfrom scipy.sparse import coo_matrix\narr1 = coo_matrix(([1, 2, 3], [0, 0, 0], [0, 1, 2]), shape=(1, 3))\narr2 = coo_matrix(([4, 5, 6], [0, 0, 0], [0, 1, 2]), shape=(1, 3))\ndot_prod = np.sum(np.multiply(arr1.toarray(), arr2.toarray()))",
 "import numpy as np\nfrom scipy.sparse import coo_matrix\narr1 = coo_matrix(([1, 2, 3], [0, 0, 0], [0, 1, 2]), shape=(1, 3))\narr2 = coo_matrix(([4, 5, 6], [0, 0, 0], [0, 1, 2]), shape=(1, 3))\nsum_prod = np.sum(np.multiply(arr1.toarray(), arr2.toarray()))\ndisplay(sum_prod)",
 "import numpy as np\nfrom scipy.sparse import csr_matrix\narr1 = csr_matrix(([1, 2, 3], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\narr2 = csr_matrix(([4, 5, 6], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\ndot_prod = np.vdot(arr1.toarray().transpose(), arr2.toarray())",
 "import numpy as np\nfrom scipy.sparse import csr_matrix\narr1 = csr_matrix(([1, 2, 3], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\narr2 = csr_matrix(([4, 5, 6], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\ndot_prod = np.inner(arr1.toarray().transpose(), arr2.toarray())",
 "import numpy as np\nfrom scipy.sparse import csr_matrix\narr1 = csr_matrix(([1, 2, 3], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\narr2 = csr_matrix(([4, 5, 6], [0, 1, 2], [0, 1, 2]), shape=(3, 1))\ndot_prod = np.matmul(arr1.toarray().transpose(), arr2.toarray())",
 "import numpy as np\nfrom scipy.sparse import coo_matrix\ndot_prod = np.dot(coo_matrix(arr1).toarray().transpose(), coo_matrix(arr2).toarray())",
 "\ndot_prod = np.array(arr1) @ arr2",
 "\ndot_prod = 0\ndot_prod = functools.reduce(lambda x, y: x + y[0] * y[1], zip(arr1, arr2), 0)",
 "\ndot_prod = 0\ndot_prod = np.inner(arr1, arr2)",
 "\ndot_prod = 0\nfor i in range(len(arr1)):\n    dot_prod += math.prod([arr1[i], arr2[i]])"
]