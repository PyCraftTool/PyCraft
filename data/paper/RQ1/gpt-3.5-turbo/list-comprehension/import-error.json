[
 "import numpy as np\ncount = np.sum(arr)\nt = arr[arr > 0]",
 "\ncount = 0\nfor (index, value) in enumerate(arr):\n    if value > 0:\n        t.append(value)",
 "import numpy as np\ncount = np.sum(arr)\nt = np.where(arr > 0, arr, 0)",
 "\nt = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt = np.array(t)",
 "\nt = np.array(list(filter(lambda x: cond(x), iterable)))",
 "\nt = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt = np.asarray(t)",
 "\nt = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt = np.array(t, dtype=np.int64)",
 "\ncount = 0\nfor (index, value) in enumerate(arr):\n    if value > 0:\n        count += value",
 "from itertools import compress\narr_list = arr.tolist()\nt = list(compress(arr_list, [x > 0 for x in arr_list]))",
 "import numpy as np\ncount = np.sum(arr[arr.astype(bool)])",
 "\ncount = 0\nfor (index, value) in enumerate(arr):\n    if bool(arr[index]):\n        count += arr[index]",
 "import numpy as np\ncount = np.sum(arr)\nt = count[count >= 0]",
 "import numpy as np\ncount = np.sum(arr)\nt = np.where(count >= 0, count, 0)",
 "import numpy as np\ncount = np.sum(arr)\nt = np.extract(count >= 0, count)",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array([x for x in count if x >= 0])",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array(list(filter(lambda x: x >= 0, count)))",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array([x if x >= 0 else 0 for x in count])",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array([max(x, 0) for x in count])",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array([x for x in count if x >= 0], dtype=count.dtype)",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array([x for x in count if x >= 0], dtype=np.int64)",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array([x for x in count if x >= 0], dtype=np.float64)",
 "import numpy as np\ncount = np.sum(arr)\nt = np.array([x for x in count if x >= 0], dtype=np.uint8)",
 "import numpy as np\ncount = np.sum(arr)\nt = count[count > threshold].tolist()",
 "\nt = list(filter(lambda x: x > threshold, arr))",
 "import numpy as np\narr = np.array(iterable)\nthreshold_arr = np.array(threshold)\nt = arr[arr > threshold_arr].tolist()",
 "import numpy as np\narr = np.array(iterable)\nthreshold_arr = np.array(threshold)\ntemp_arr = arr > threshold_arr\nt = arr[temp_arr].tolist()",
 "\nt = [i for i in iterable if cond(i)]\nt = np.array(t)",
 "from itertools import filterfalse\ndef cond_not(condition):\n    return not cond(i)\nt = np.array(list(filterfalse(cond_not, iterable)))",
 "import numpy as np\nt = np.array(reduce(lambda acc, x: acc + [x] if cond(x) else acc, iterable, []))",
 "\ncount = 0\nfor i in range(len(arr)):\n    if arr[i] < 0:\n        count += 1\nt = count",
 "\nt = np.array([x for x in iterable if cond(x)], dtype=np.ndarray)",
 "\nt = np.array(list(filter(cond, iterable)), dtype=np.ndarray)",
 "import numpy as np\nt = np.extract(np.vectorize(cond)(arr), arr)",
 "import numpy as np\ncond_arr = np.vectorize(cond)(arr)\nt = np.extract(cond_arr, arr)",
 "import numpy as np\ncond_vec = np.vectorize(cond)\ncond_arr = cond_vec(arr)\nt = np.extract(cond_arr, arr)",
 "from functools import partial\ncond_partial = partial(cond)\nt = list(itertools.filterfalse(lambda x: not cond_partial(x), iterable))",
 "\nt = []\nfor i in iterable:\n    if cond(i):\n        t.extend([i])\nt = np.array(t)",
 "import numpy as np\narr = numpy.array(iterable)\nt = [i for i in arr if i in [i for i in arr if cond(i)]]",
 "\nt = []\nfor i in iterable:\n    if cond(i):\n        if i in iterable:\n            t.append(i)\nt = np.array(t)",
 "import numpy as np\ndef add_to_list(i):\n    inner_list.append(i)\n    return inner_list\nc = np.array([add_to_list(i) for i in iterable if cond(i)])[-1]\nt = np.array(c)",
 "import numpy as np\ncount = np.sum(arr)\nt = [i for i in iterable if cond(i)]",
 "import numpy as np\ncount = np.sum(arr)\nfor i in iterable:\n    if cond(i):\n        count += 1\n        t.append(i)",
 "\nt = [x for x in iterable if not cond_wrap(x)]"
]