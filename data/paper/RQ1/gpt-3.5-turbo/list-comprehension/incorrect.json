[
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr > 0]",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)])",
 "t = [i for i in iterable if cond(i)]\nt = sorted(t)",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt.sort()",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)])\nt.sort()",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)])\nt = np.sort(t)",
 "import numpy as np\narr = np.array(iterable)\nt = np.where(arr > 0, arr, 0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr > 0, arr)",
 "import numpy as np\narr = np.array(iterable)\nt = np.select([arr > 0], [arr], default=0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.fromiter((x for x in arr if x > 0), dtype=arr.dtype)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x if x > 0 else 0 for x in arr])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0], dtype=arr.dtype)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0], dtype=np.int64)",
 "import numpy as np\narr = np.array(iterable)\nt = arr[cond(arr)]",
 "t = tuple(filter(cond, iterable))",
 "import numpy as np\narr = np.array(iterable)\nt = arr[np.where(cond(arr))]",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(cond(arr), arr)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if filter_func(item):\n        t.append(item)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = [item for item in iterable if filter_func(item)]",
 "import numpy as np\nt = np.array(list(filter(cond, iterable)))",
 "from itertools import filterfalse\ndef cond(x):\n    return x % 2 == 0\nt = list(filterfalse(cond, iterable))",
 "import numpy as np\ndef cond(x):\n    return x % 2 == 0\nt = np.vectorize(cond)(iterable)\nt = list(iterable[t])",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)], dtype=np.int64)",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)], dtype=np.float64)",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)], dtype=np.str_)",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)], dtype=np.bool_)",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)], dtype=np.uint8)",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr > 0].tolist()",
 "import numpy as np\narr = np.array(iterable)\nt = np.sort(arr[arr > 0])",
 "t = sorted([i for i in iterable if cond(i)])",
 "import numpy as np\narr = np.array(iterable)\nt = np.sort(arr[arr < 10])",
 "import itertools\narr = list(itertools.filterfalse(lambda x: not cond(x), iterable))\nt = sorted(arr)",
 "import numpy as np\narr = np.array(iterable)\nmask = np.array([cond(i) for i in iterable])\nt = np.sort(arr[mask])",
 "import numpy as np\narr = np.array(iterable)\nmask = np.array([cond(i) for i in iterable])\nt = arr[mask]\nt.sort()",
 "import numpy as np\narr = np.array(iterable)\nt = np.sort(arr[cond(arr)])",
 "import itertools\narr = list(iterable)\nt = sorted(list(itertools.compress(arr, [cond(i) for i in arr])))",
 "import numpy as np\ncond = lambda x: x > 0\nt = np.array([x for x in iterable if cond(x)])\nt.sort()",
 "import numpy as np\ncond = lambda x: x > 0\nfiltered_list = [x for x in iterable if cond(x)]\nt = sorted(filtered_list)",
 "import numpy as np\ncond = lambda x: x > 0\nt = iterable[iterable.apply(cond)].sort_values().tolist()",
 "import numpy as np\ncond = lambda x: x > 0\nt = [v for (k, v) in iterable.items() if cond(v)]\nt.sort()",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)]))",
 "t = [i for i in iterable if cond(i)]\nt.sort()",
 "import numpy as np\nt = np.sort(np.array(list(filter(cond, iterable))))",
 "import numpy as np\nt = np.sort(np.array(list(map(lambda x: x, filter(cond, iterable)))))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.int))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.float))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.str))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.bool))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.uint8))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.int32))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.float64))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.complex128))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if cond(i)], dtype=np.object))",
 "import numpy as np\nt = np.sort(np.array([i for i in filter(cond, iterable)]))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if i % 2 == 0]))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if i > 0]))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if i < 10]))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if i % 2 == 0 and i < 10]))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if i % 2 == 0 or i < 10]))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if i % 2 == 0 and i < 10 and (i > 0)]))",
 "import numpy as np\nt = np.sort(np.array([i for i in iterable if i % 2 == 0 or (i < 10 and i > 0)]))",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr.astype(bool)]",
 "t = [i for i in iterable if cond(i) == True]",
 "t = [i for i in iterable if cond(i) is True]",
 "t = [i for i in iterable if cond(i) == 1]",
 "import numpy as np\narr = np.array(iterable)\nmask = np.fromiter(map(cond, iterable), dtype=bool)\nt = arr[mask]",
 "import numpy as np\nt = np.array([cond(i) for i in iterable if cond(i)])",
 "import itertools\ndef filter_condition(x):\n    return cond(x)\nfilter_condition = lambda x: cond(x)\nt = list(itertools.filterfalse(filter_condition, iterable))",
 "from itertools import filterfalse\ndef filter_condition(x):\n    return cond(x)\nfilter_condition = lambda x: cond(x)\nt = list(filterfalse(filter_condition, iterable))",
 "from itertools import filterfalse\ndef filter_condition(x):\n    return cond(x)\nt = list(filterfalse(filter_condition, iterable))",
 "import itertools\ndef filter_condition(x):\n    return cond(x)\nt = list(itertools.filterfalse(filter_condition, iterable))",
 "from itertools import filterfalse\nfilter_condition = lambda x: cond(x)\nt = list(filterfalse(filter_condition, iterable))",
 "import itertools\nfilter_condition = lambda x: cond(x)\nt = list(itertools.filterfalse(filter_condition, iterable))",
 "import numpy as np\ncount = np.sum(arr[arr > 0])",
 "t = [x for x in arr if x > 0]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr > 0].copy()",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0], dtype=np.float64)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0], dtype=np.str_)",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.where(arr > 0, arr, 0)\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.extract(arr > 0, arr)\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = arr[arr > 0].copy()\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.array([x for x in arr if x > 0])\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.array([x if x > 0 else 0 for x in arr])\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.array([x for x in arr if x > 0], dtype=arr.dtype)\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.array([x for x in arr if x > 0], dtype=np.int64)\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.array([x for x in arr if x > 0], dtype=np.float64)\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.array([x for x in arr if x > 0], dtype=np.str_)\nt = positive_values.copy()",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])\nt = np.where(t > 0, t, 0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])\nt = np.extract(t > 0, t)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])\nt = np.array([x if x > 0 else 0 for x in t])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])\nt = np.array([x for x in t if x > 0], dtype=t.dtype)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])\nt = np.array([x for x in t if x > 0], dtype=np.int64)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])\nt = np.array([x for x in t if x > 0], dtype=np.float64)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x > 0])\nt = np.array([x for x in t if x > 0], dtype=np.str_)",
 "import itertools\nt = [x for x in iterable if not cond(x)]",
 "import itertools\nt = []\nfor x in iterable:\n    if not cond(x):\n        t.append(x)",
 "import itertools\nt = list(filter(lambda x: not cond(x), iterable))",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = list(filter(filter_func, iterable))",
 "import itertools\nt = list(itertools.filterfalse(lambda x: cond(x), iterable))",
 "import numpy as np\nt = np.array(iterable)[np.array(iterable).astype(bool)]",
 "import numpy as np\nt = np.array(iterable)[np.array(iterable).nonzero()]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr.nonzero()]",
 "import numpy as np\nt = np.array(iterable)[np.where(np.array(iterable))]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[np.where(arr)]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[list(filter(bool, arr))]",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr.astype(bool), arr)",
 "import numpy as np\narr = np.array(iterable)\nbool_arr = arr.astype(bool)\nt = arr[bool_arr]",
 "import numpy as np\narr = np.array(iterable)\nbool_arr = np.where(arr, True, False)\nt = arr[bool_arr]",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i) == True])",
 "t = []\nfor i in iterable:\n    if cond(i) == True:\n        t.append(i)",
 "t = list(filter(lambda x: cond(x) == True, iterable))",
 "t = []\nfor i in iterable:\n    if cond(i) is True:\n        t.append(i)",
 "import itertools\nt = list(itertools.filterfalse(lambda x: cond(x) is False, iterable))",
 "import functools\nt = functools.reduce(lambda a, b: a + [b] if cond(b) is True else a, iterable, [])",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i) == 1])",
 "t = list(filter(lambda x: cond(x) == 1, iterable))",
 "t = []\nfor i in iterable:\n    if cond(i) == 1:\n        t.append(i)",
 "import itertools\niterable = list(iterable)\nt = list(itertools.filterfalse(lambda x: cond(x) != 1, iterable))",
 "import functools\nis_cond_true = functools.partial(cond, val=1)\nt = list(filter(is_cond_true, iterable))",
 "import numpy as np\nt = np.array(list(filter(lambda x: cond(x) == 1, iterable)))",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr >= 0]",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([max(x, 0) for x in arr])",
 "from itertools import filterfalse\nfiltered_iterable = filterfalse(cond, iterable)\nt = list(filtered_iterable)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if not filter_func(item):\n        continue\n    t.append(item)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if filter_func(item):\n        t.append(item)\n    else:\n        continue",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if not filter_func(item):\n        continue\n    t.append(item)\nelse:\n    pass",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if filter_func(item):\n        t.append(item)\n    else:\n        pass",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if not filter_func(item):\n        continue\n    t.append(item)\nelse:\n    break",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if filter_func(item):\n        t.append(item)\n    else:\n        break",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if not filter_func(item):\n        continue\n    t.append(item)\nelse:\n    break\nt = list(t)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if filter_func(item):\n        t.append(item)\n    else:\n        break\nt = list(t)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if not filter_func(item):\n        continue\n    t.append(item)\nelse:\n    break\nt = list(t)\nt = list(t)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if filter_func(item):\n        t.append(item)\n    else:\n        break\nt = list(t)\nt = list(t)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if not filter_func(item):\n        continue\n    t.append(item)\nelse:\n    break\nt = list(t)\nt = list(t)\nt = list(t)",
 "import itertools\ndef filter_func(x):\n    return not cond(x)\nt = []\nfor item in iterable:\n    if filter_func(item):\n        t.append(item)\n    else:\n        break\nt = list(t)\nt = list(t)\nt = list(t)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x != 0])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array(list(filter(lambda x: x != 0, arr)))",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array(list(filter(None, arr)))",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x != 0 or x is True])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array(list(filter(lambda x: x != 0 or x is True, arr)))",
 "import numpy as np\narr = np.array(iterable)\nt = list(arr[arr.map(cond)])",
 "import numpy as np\narr = np.array(iterable)\nt = list(arr[np.vectorize(cond)(arr)])",
 "import numpy as np\narr = np.array(iterable)\nt = list(filter(cond, arr))",
 "import numpy as np\narr = np.array(iterable)\nt = list(arr[np.fromiter(map(cond, arr), dtype=bool)])",
 "import numpy as np\narr = np.array(iterable)\nt = list(arr[np.vectorize(lambda x: cond(x))(arr)])",
 "import numpy as np\narr = np.array(iterable)\nt = list(arr[np.frompyfunc(cond, 1, 1)(arr)])",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr.apply(cond)]",
 "import numpy as np\narr = np.array(iterable)\nt = list(filter(lambda x: x > 0, arr))",
 "import numpy as np\narr = np.array(iterable)\nt = [x for x in arr if x > 0]",
 "import numpy as np\narr = np.array(iterable)\nt = np.where(arr > 0, arr, 0).tolist()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.extract(arr > 0, arr)\nt = positive_values.tolist()",
 "import numpy as np\narr = np.array(iterable)\npositive_values = np.where(arr > 0, arr, 0)\nt = positive_values.tolist()",
 "import numpy as np\niterable = np.array(iterable)\nt = iterable[np.vectorize(cond)(iterable)]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr.apply(lambda x: cond(x) is True)]",
 "import numpy as np\narr = np.array(iterable)\nt = np.zeros(arr.shape)\nt[arr > 0] = arr[arr > 0]",
 "import numpy as np\narr = np.array(iterable)\nt = np.zeros(arr.shape)\nfor i in range(arr.shape[0]):\n    for j in range(arr.shape[1]):\n        if arr[i][j] > 0:\n            t[i][j] = arr[i][j]",
 "import numpy as np\narr = np.array(iterable)\nt = np.zeros(arr.shape)\nfor (i, row) in enumerate(arr):\n    for (j, val) in enumerate(row):\n        if val > 0:\n            t[i][j] = val",
 "import numpy as np\narr = np.array(iterable)\nt = np.zeros(arr.shape)\nfor i in range(len(arr)):\n    for j in range(len(arr[i])):\n        if arr[i][j] > 0:\n            t[i][j] = arr[i][j]",
 "import numpy as np\narr = np.array(iterable)\nt = np.maximum(arr, 0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.clip(arr, 0, np.inf)",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(np.greater(arr, 0), arr)",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr, arr > 0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr, np.greater(arr, 0))",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(np.greater(arr, 0), np.greater(arr, 0))",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr > 0, np.greater(arr, 0))",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(np.greater(arr, 0), arr > 0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr > 0, arr > 0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr > 0, arr[arr > 0])",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(np.greater(arr, 0), arr[arr > 0])",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr > threshold]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr > threshold].tolist()",
 "import pandas as pd\niterable_series = pd.Series(iterable)\nt = iterable_series[iterable_series.apply(cond)]",
 "import numpy as np\nmask = np.array([cond(i) for i in iterable])\nt = np.array(iterable)[mask]",
 "import numpy as np\nt = np.fromiter(filter(lambda x: cond(x), iterable), dtype=float)",
 "import numpy as np\nt = np.fromiter(filter(cond, iterable), dtype=float)",
 "filtered_iterable = filter(lambda x: not cond(x), iterable)\nt = list(filtered_iterable)",
 "import numpy as np\nnew_t = np.array(iterable)\ncond_t = cond(new_t)\nt = new_t[cond_t]",
 "import numpy as np\ndefine_cond = cond\nnew_t = np.array(iterable)\nt = new_t[define_cond(new_t)]",
 "import numpy as np\nt = np.array(iterable)\nfiltered_indices = np.where(cond(t))\nt = t[filtered_indices]",
 "from itertools import filterfalse\nfrom functools import partial\nt = list(filterfalse(partial(cond), iterable))",
 "import numpy as np\nt = np.array([x for x in iterable if x > threshold])",
 "import numpy as np\nt = np.array(list(filter(lambda x: x > threshold, iterable)))",
 "from collections import deque\nt = deque()\nfor i in iterable:\n    if cond(i):\n        t.append(i)",
 "import numpy as np\nnew_iterable = np.array(iterable)\ncond_arr = np.array([cond(x) for x in iterable])\nt = new_iterable[cond_arr]",
 "t = [x for x in arr if x > threshold]",
 "import numpy as np\narr = np.array(iterable)\nt = [x.tolist() for x in arr if x > threshold]",
 "import numpy as np\ntemp = np.array(iterable)\narr = temp[temp > threshold].tolist()\nt = arr.tolist()",
 "from numpy import array\narr = array(iterable)\nt = arr[arr > threshold].tolist()",
 "import itertools\nfiltered_list = [x for x in iterable if cond(x)]\nt = iter(filtered_list)",
 "import itertools\niterables = itertools.tee(iterable, 2)\nfiltered = filter(lambda x: x if cond(x) else None, iterables[0])\nt = list(filtered)",
 "import pandas as pd\nimport numpy as np\ndef cond(x):\n    return x > 0\n\ndef apply_cond(x):\n    return iterable_series.apply(cond)\niterable_series = pd.Series(iterable)\nt = iterable_series[apply_cond(iterable_series)]",
 "import pandas as pd\ndef cond(x):\n    return x > 0\n\ndef apply_cond(series):\n    return series.apply(cond)\niterable_series = pd.Series(iterable)\nt = iterable_series[apply_cond(iterable_series)]",
 "import pandas as pd\ndef cond(x):\n    return x > 0\n\ndef apply_cond(series):\n    return series.apply(cond)\n\ndef get_filtered_series(series):\n    return series[apply_cond(series)]\niterable_series = pd.Series(iterable)\nt = get_filtered_series(iterable_series)",
 "import pandas as pd\niterable_series = pd.Series(iterable)\nt = iterable_series.loc[iterable_series.apply(cond)]",
 "import pandas as pd\niterable_series = pd.Series(iterable)\nt = iterable_series[cond(iterable_series)]",
 "import pandas as pd\niterable_series = pd.Series(iterable)\nt = iterable_series[iterable_series.apply(lambda x: cond(x))]",
 "import numpy as np\nmask = np.array([True if cond(i) else False for i in iterable])\nt = np.array(iterable)[mask]",
 "import itertools\nfrom functools import partial\ndef cond2(x):\n    return cond(x)\nt = list(itertools.filterfalse(partial(cond2), iterable))",
 "import itertools\ncond_iter = itertools.filterfalse(lambda x: cond(x), iterable)\nt = list(cond_iter)",
 "import itertools\ncond_iter = [x for x in iterable if not cond(x)]\nt = list(cond_iter)",
 "import itertools\ncond_iter = list(itertools.filterfalse(lambda x: cond(x), iterable))\nt = cond_iter",
 "import itertools\ncond_iter = list(filter(lambda x: not cond(x), iterable))\nt = cond_iter",
 "import itertools\ncond_iter = [x for x in iterable if not cond(x)]\nt = cond_iter",
 "import numpy as np\nfiltered_values = list(filter(cond, iterable))\nt = np.array(filtered_values)",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr < 0]",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nt = arr[mask]",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(np.vectorize(cond)(arr), arr)",
 "import numpy as np\narr = np.array(iterable)\nt = np.where(arr < 0, arr, 0)",
 "import numpy as np\narr = np.array(iterable)\nt = np.extract(arr < 0, arr)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x < 0])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array(list(filter(lambda x: x < 0, arr)))",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x if x < 0 else 0 for x in arr])",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x for x in arr if x < 0], dtype=arr.dtype)",
 "import numpy as np\narr = np.array(iterable)\nt = np.array([x if x < 0 else 0 for x in arr], dtype=arr.dtype)",
 "import numpy as np\ncount = np.count_nonzero(arr[arr < 0])\nt = count",
 "import numpy as np\nt = np.count_nonzero(arr[arr < 0])",
 "import numpy as np\nt = len(arr[arr < 0])",
 "count = 0\nfor i in arr:\n    if i < 0:\n        count += 1\nt = count",
 "count = 0\nfor i in arr:\n    count += 1 if i < 0 else 0\nt = count",
 "count = sum((1 for i in arr if i < 0))\nt = count",
 "import numpy as np\nfiltered_arr = np.fromiter((x for x in iterable if cond(x)), dtype=int)\nt = filtered_arr.tolist()",
 "import itertools\niterable = iter(iterable)\nt = [x for x in iterable if not cond(x)]",
 "import numpy as np\nfiltered = filter(cond, iterable)\nt = np.array(list(filtered))",
 "import numpy as np\nt = np.array([])\nfor x in iterable:\n    if cond(x):\n        t = np.append(t, x)",
 "import numpy as np\nt = np.array([])\nfor x in iterable:\n    if cond(x):\n        np.append(t, x)",
 "import numpy as np\nt = np.array([])\nfor x in iterable:\n    if cond(x):\n        np.concatenate((t, np.array([x])), axis=0)",
 "import numpy as np\nt = np.fromiter((x for x in iterable if cond(x)), dtype=float)",
 "import numpy as np\nt = np.empty((0,))\nfor x in iterable:\n    if cond(x):\n        t = np.append(t, x)",
 "import numpy as np\ndef filter_func(x):\n    if cond(x):\n        return True\n    else:\n        return False\nfiltered_list = filter(filter_func, iterable)\nt = np.array(list(filtered_list))",
 "import numpy as np\nt = np.array(list(filter(cond, iterable)), dtype=np.int64)",
 "import numpy as np\narr = np.array(iterable)\nfiltered_arr = arr[cond(arr)]\nt = filtered_arr",
 "import numpy as np\narr = np.array(iterable)\ntemp_arr = np.copy(arr)\ntemp_arr = temp_arr[cond(arr)]\nt = temp_arr",
 "import numpy as np\narr = np.array(iterable)\nfiltered_arr = [x for x in arr if cond(x)]\nt = np.array(filtered_arr)",
 "import numpy as np\narr = np.array(iterable)\nfiltered_arr = np.where(cond(arr), arr, 0)\nt = np.array(filtered_arr)",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nt = np.extract(mask, arr)",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nt = np.compress(mask, arr)",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nt = np.where(mask, arr, np.nan)",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nindices = np.where(mask)\nt = arr[indices]",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nindices = np.nonzero(mask)\nt = arr[indices]",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nindices = np.argwhere(mask)\nt = arr[indices]",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nt = np.select([mask], [arr])",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nt = np.piecewise(arr, [mask], [lambda x: x])",
 "import numpy as np\narr = np.array(iterable)\nmask = np.vectorize(cond)(arr)\nindices = np.indices(arr.shape)\nt = arr[indices[mask]]",
 "import numpy as np\narr = np.array(iterable)\ntemp = np.vectorize(cond)(arr)\nmask = temp.astype(bool)\nt = arr[mask]",
 "import numpy as np\narr = np.array(iterable)\nmask = [cond(x) for x in arr]\nt = arr[mask]",
 "import numpy as np\narr = np.array(iterable)\nmask = np.where([cond(x) for x in arr])\nt = arr[mask]",
 "import numpy as np\narr = np.array(iterable)\nmask = np.where(np.vectorize(cond)(arr))\nt = arr[mask]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[arr % 2 == 0]",
 "import numpy as np\narr = np.array(iterable)\npositive_values = arr[arr > 0]\nt = positive_values",
 "import numpy as np\narr = np.array(iterable)\npositives = [x for x in arr if x > 0]\nt = np.array(positives)",
 "import numpy as np\narr = np.array(iterable)\npositives = []\nfor x in arr:\n    if x > 0:\n        positives.append(x)\nt = np.array(positives)",
 "import numpy as np\narr = np.array(iterable)\ntemp_arr = np.where(arr > 0, arr, 0)\nt = temp_arr",
 "import numpy as np\narr = np.array(iterable)\npositive_values = arr[arr > 0]\ntemp_arr = positive_values\nt = temp_arr",
 "import numpy as np\narr = np.array(iterable)\npositives = [x for x in arr if x > 0]\ntemp_arr = np.array(positives)\nt = temp_arr",
 "import numpy as np\narr = np.array(iterable)\npositives = []\nfor x in arr:\n    if x > 0:\n        positives.append(x)\ntemp_arr = np.array(positives)\nt = temp_arr",
 "import numpy as np\narr = np.array(iterable)\npositive_arr = np.where(arr > 0, arr, 0)\nt = positive_arr[positive_arr != 0]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[np.where(arr > 0)]",
 "import numpy as np\narr = np.array(iterable)\npositive_arr = np.where(arr > 0, arr, 0)\nt = positive_arr[positive_arr > 0]",
 "import numpy as np\narr = np.array(iterable)\npositive_arr = np.where(arr > 0, arr, 0)\nt = np.nonzero(positive_arr)",
 "import itertools\nfiltered = list(filter(cond, iterable))\nt = filtered[0]",
 "import itertools\nt = next(filter(cond, iterable))",
 "t = [x for x in iterable if cond(x)][0]",
 "t = next((x for x in iterable if cond(x)))",
 "import numpy as np\nt = np.array([i for i in iterable if i in [i for i in iterable if cond(i)]])",
 "t = [i if cond(i) else None for i in iterable]\nt = list(filter(None, t))",
 "import itertools\ndef cond_wrap(x):\n    if cond(x):\n        return x\n    return None\nt = list(itertools.filterfalse(cond_wrap, iterable))",
 "t = list(map(lambda i: i if cond(i) else None, iterable))",
 "import itertools\nlist(itertools.filterfalse(lambda x: not cond(x), iterable))",
 "import itertools\niterable = itertools.chain(iterable)\nt = [i for i in iterable if i in [i for i in iterable if cond(i)]]",
 "import functools\nclass T(object):\n\n    def cond(self, x):\n        return cond(x)\n\n    def reduce_fn(self, acc, x):\n        return acc + [x] if self.cond(x) else acc\nauto_t = functools.partial(functools.reduce, T().reduce_fn)\nt = auto_t(iterable)",
 "import numpy as np\nc = np.array([i for i in iterable if cond(i)])\ninner_list = []\nfor i in iterable:\n    if i in c:\n        inner_list.append(i)\nt = np.array(inner_list)",
 "from itertools import filterfalse\nfrom functools import partial\ndef cond(i):\n    return not i\n\ndef func(filter_obj, i):\n    return filter_obj(i)\nt = list(filterfalse(partial(func, filter_obj=cond), iterable))",
 "import numpy as np\ncount = np.sum([cond(i) for i in iterable])\nt = np.array([i for i in iterable if cond(i)])",
 "import numpy as np\ncount = np.sum([1 for i in iterable if cond(i)])\nt = np.array([i for i in iterable if cond(i)])",
 "import numpy as np\nindices = np.where([cond(i) for i in iterable])\ncount = len(indices[0])\nt = np.array([iterable[i] for i in indices[0]])",
 "import itertools\nfiltered_iterable = filter(cond, iterable)\ncount = len(list(filtered_iterable))\nt = itertools.islice(filtered_iterable, count)",
 "import numpy as np\nmask = np.array([cond(i) for i in iterable])\ncount = np.sum(mask)\nt = np.array(iterable)[mask]",
 "import numpy as np\nt = [i for i in iterable if cond(i)]\nt = list(filter(None, t))",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt = list(filter(None, t))",
 "import itertools\nt = list(itertools.filterfalse(lambda x: x is None, [i if cond(i) else None for i in iterable]))",
 "t = tuple(filter(lambda x: x is not None, [i if cond(i) else None for i in iterable]))",
 "import itertools\ndef cond_wrap(x):\n    if cond(x):\n        return x\n    return None\nt = list(filter(lambda x: cond(x) == False, iterable))",
 "from itertools import filterfalse\nt = list(filterfalse(lambda x: cond(x), iterable))",
 "t = [i if cond(i) else None for i in iterable]",
 "import numpy as np\narr = np.array(iterable)\nt = arr[np.where(np.vectorize(cond)(arr))]",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt = list(filter(lambda i: i is not None, t))",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\nt = filter(None, t)",
 "import numpy as np\nt = np.where([cond(i) for i in iterable])",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i) is True])",
 "import itertools\nlist(filter(lambda x: cond(x), iterable))",
 "result = []\nfor i in iterable:\n    if cond(i):\n        result.append(i)\nlist(result)",
 "import itertools\nfiltered_list = list(itertools.filterfalse(lambda x: not cond(x), iterable))\nt = filtered_list\n\ndef good(x):\n    if cond(x):\n        return x\nintermediate_answer = [x for x in iterable if good(x)]\nt = [i for i in intermediate_answer if i != None]",
 "import numpy as np\nfiltered_arr = np.array(list(filter(cond, iterable)))\nt = filtered_arr"
]