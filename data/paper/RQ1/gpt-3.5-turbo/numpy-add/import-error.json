[
 "from operator import add\ndot_prod = list(starmap(add, zip(array1, array2)))",
 "\nresult = []\nfor (i, j) in zip_longest(array1, array2, fillvalue=0):\n    result.append(i + j)",
 "import itertools\nresult = list(itertools.starmap(operator.add, zip(array1, array2)))",
 "from numpy import dot\nresult = dot(np.array(array1), np.array(array2))",
 "\nresult = functools.reduce(lambda x, y: x + y, [x * y for (x, y) in zip(array1, array2)])",
 "\nresult = list(np.array(array1) + np.array(array2))",
 "\nresult = list(np.add(array1, array2))",
 "\nresult = []\nsum_of_elements = 0\ndot_prod = 0\nfor (a, b) in zip_longest(array1, array2, fillvalue=0):\n    result.append(a + b)\n    sum_of_elements += a + b\n    dot_prod += a * b",
 "\nresult = [a + b for (a, b) in zip_longest(array1, array2, fillvalue=0)]\nsum_of_elements = sum(result)\ndot_prod = sum((a * b for (a, b) in zip_longest(array1, array2, fillvalue=0)))",
 "import numpy as np\nsum_of_elements = np.sum([a + b for (a, b) in zip_longest(array1, array2, fillvalue=0)])\nresult = [a + b for (a, b) in zip_longest(array1, array2, fillvalue=0)]",
 "import numpy as np\nsum_of_elements = np.sum([a + b for (a, b) in zip_longest(array1, array2, fillvalue=0)])\nresult = np.add(array1, array2)",
 "\nsum_of_elements = np.sum(array1) + np.sum(array2)\nresult = array1 + array2",
 "import numpy as np\nresult = np.add(array1, array2, out=result)\nsum_of_elements = np.sum(result)",
 "\nsum_of_elements = sum(np.add(array1, array2))\nresult = list(np.add(array1, array2))",
 "\nsum_of_elements = sum(np.add(array1, array2))\nresult = (array1 + array2).tolist()",
 "import numpy as np\npairs = np.array(list(itertools.product(array1, array2)))\ndot_prod = np.sum(pairs[:, 0] * pairs[:, 1])",
 "import functools\nresult = list(map(functools.partial(sum, fillvalue=0), itertools.zip_longest(array1, array2)))",
 "\npairs = list(itertools.zip_longest(array1, array2, fillvalue=0))\ndot_prod = [x + y for (x, y) in pairs]\nresult = dot_prod",
 "\ndot_prod = [x + y for (x, y) in itertools.zip_longest(array1, array2, fillvalue=0)]\nresult = dot_prod",
 "\ndot_prod = 0\nsum_of_elements = 0\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\n    dot_prod += array1[i] * array2[i]\n    sum_of_elements += result[i]",
 "\ndot_prod = np.array([x + y for (x, y) in zip(array1, array2)])",
 "\nresult = array1 + array2\ndot_prod = np.array(result)",
 "\ndot_prod = np.array([np.add(x, y) for (x, y) in zip(array1, array2)])",
 "\nresult = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\ndot_prod = np.array(result)",
 "\nresult = [x + y for (x, y) in zip(array1, array2)]\ndot_prod = np.array(result)",
 "\nresult = [array1[i] + array2[i] for i in range(len(array1))]\ndot_prod = np.array(result)",
 "\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\ndot_prod = []\nfor (x, y) in zip_longest(array1, array2, fillvalue=0):\n    dot_prod.append(x + y)"
]