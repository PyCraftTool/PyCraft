[
 "\ncommon = list(set(l1) & set(l2) - set(common))",
 "\ncommon = [x for x in l1 if x in l2 and x not in common and common.append(x)]",
 "\ncommon = list(filter(lambda x: x in l2 and x not in common and common.append(x), l1))",
 "\ncommon = [x for x in set(l1) if x in set(l2) and x not in common and common.append(x)]",
 "\ncommon = list(set(l1) & set(l2) - set(common) and common.append(x))",
 "import itertools\ndef check(x):\n    return x not in l1\ncommon = list(filterfalse(check, l2))",
 "\ncommon = reduce(lambda x, y: x + y, [x for x in l1 if x in l2])",
 "\ncommon = [i for i in l1 if i in l2 and i not in common and (not common.append(i))]",
 "\ncommon = [x for x in l1 if x in l2 and x not in set(common)]",
 "\ncommon = [x for x in set(l1) if x in l2 and x not in set(common)]",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = list(set(common))",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = list(set(common))",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = list(set(common))",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = list(set(common))",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = list(set(common))",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = list(set(common))",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = np.unique(common).tolist()\ncommon = list(set(common))",
 "\ncommon = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common]\ncommon = list(set(common))",
 "\ncommon = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common]\ncommon = sorted(list(set(common)))",
 "\ncommon = list(set(l1) & set(l2) & set(common))",
 "import numpy as np\ncommon = list(np.intersect1d(l1, l2, common))",
 "\ncommon = [x for x in set(l1) if x in set(l2) or x in set(common)]",
 "\ncommon = list(set(l1) & set(l2) | set(common))",
 "import numpy as np\ncommon = list(np.intersect1d(l1, l2, common, assume_unique=True))",
 "\ncommon = [x for x in set(l1) if x in set(l2) and x not in set(common) or x in set(common)]",
 "\ncommon = list(set(l1) & set(l2) & set(common) | set(common))",
 "import numpy as np\ncommon = list(np.intersect1d(l1, l2, common, common, assume_unique=True))",
 "\ncommon = [x for x in set(l1) if x in set(l2) or (x in set(common) and x not in set(common)) or x in set(common)]",
 "\ncommon = list(set(l1) & set(l2) | set(common) & set(common) | set(common))",
 "\ncommon = []\nfor (k, v) in groupby(sorted(l1 + l2)):\n    if len(list(v)) > 1:\n        common.append(k)"
]