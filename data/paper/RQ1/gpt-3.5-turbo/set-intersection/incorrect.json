[
 "common = list(set(l1).intersection(l2))",
 "common = list(set(l1) & set(l2))",
 "common = filter(lambda x: x in l2, l1)",
 "import numpy as np\ncommon = np.intersect1d(l1, l2).tolist()",
 "common = []\nfor i in set(l1):\n    if i in set(l2):\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
 "common = [x for x in set(l1) if x in set(l2)]",
 "common = [x for x in l1 if x in l2 and x not in common]",
 "common = list(filter(lambda x: x in l2 and x not in common, l1))",
 "common = [x for x in set(l1) if x in set(l2) and x not in common]",
 "import numpy as np\ncommon = np.intersect1d(np.array(l1), np.array(l2)).tolist()",
 "import itertools\ncommon = list(set(itertools.chain(l1, l2)))",
 "import itertools\ncommon = list(set(itertools.chain.from_iterable([l1, l2])))",
 "import functools\ncommon = list(functools.reduce(lambda x, y: x & y, [set(l1), set(l2)]))",
 "common = [i for i in l1 if i in set(l2)]",
 "common = [i for i in set(l1) if i in l2]",
 "common = list(filter(set(l2).__contains__, l1))",
 "common = list(set(l1).intersection(set(l2)))",
 "common = list(filter(lambda x: x in set(l2), l1))",
 "common = [i for i in l1 if any((i == j for j in set(l2)))]",
 "common = [i for i in l1 if i in set(l2) and i in set(l2)]",
 "common = [i for i in l1 if i in l2 and l1.count(i) == l2.count(i)]",
 "common = [i for i in l1 if i in l2 and l1.index(i) == l2.index(i)]",
 "common = [i for i in l1 if i in l2 and l1.count(i) > 1 and (l2.count(i) > 1)]",
 "common = []\nfor item in l1:\n    if item in l2:\n        if item not in common:\n            common.append(item)",
 "common = [item for item in l1 if item in l2 and item not in common and (item != None)]",
 "common = []\nfor val1 in l1:\n    for val2 in l2:\n        if val1 == val2 and val1 not in common:\n            common.append(val1)",
 "common = [val1 for val1 in l1 for val2 in l2 if val1 == val2 and val1 not in common]",
 "common = []\nfor val1 in l1:\n    for val2 in l2:\n        if val1 == val2:\n            if val1 not in common:\n                common.append(val1)",
 "import numpy as np\ncommon = np.intersect1d(l1, l2)",
 "common = list(filter(lambda x: x in set(l2), set(l1)))",
 "common = []\nfor i in set(l1):\n    if i in l2:\n        common.append(i)",
 "import numpy as np\ncommon = np.setdiff1d(l1, np.setdiff1d(l1, l2))",
 "import numpy as np\ncommon = np.setdiff1d(l1, np.setdiff1d(l2, np.setdiff1d(l1, l2)))",
 "common = [value for value in l1 if any((value in item for item in l2))]",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common += [i]",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = list(set(common))",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = list(set(common))",
 "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = list(set(common))",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\ncommon = sorted(common)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common += [i]\ncommon = sorted(common)",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(common)",
 "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = sorted(common)",
 "common = []\nfor i in l1:\n    if i in l2:\n        common.append(i)\ncommon = sorted(list(set(common)))",
 "common = []\nfor i in l1:\n    if i in l2:\n        common += [i]\ncommon = sorted(list(set(common)))",
 "import numpy as np\ncommon = np.array([x for x in l1 if x in l2])",
 "common = list(filter(lambda x: x in l2, l1)) + list(filter(lambda x: x in l1, l2))",
 "common = [x for x in l1 + l2 if x in l1 and x in l2]",
 "common = [x for x in l1 if x in l2] + [x for x in l2 if x in l1]",
 "common = [x for x in l1 + l2 if l1.count(x) > 0 and l2.count(x) > 0]",
 "common = [x for x in l1 + l2 if l1.count(x) > 1 and l2.count(x) > 1]",
 "common = [x for x in l1 if x in l2 and x not in l1[l1.index(x) + 1:]]",
 "common = [x for x in l1 if x in l2 and x not in l1[:l1.index(x)] + l1[l1.index(x) + 1:]]",
 "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l2.count(x) == 1)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) % 2 == 0 and (l2.count(x) % 2 == 0)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) % 2 != 0 and (l2.count(x) % 2 != 0)]",
 "common = [x for x in l1 if x in l2 and (l1.count(x) + l2.count(x)) % 2 == 0]",
 "common = [x for x in l1 if x in l2 and (l1.count(x) + l2.count(x)) % 2 != 0]",
 "common = [x for x in l1 if x in l2 and l1.count(x) > 1 and (l2.count(x) == 1)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l2.count(x) > 1)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) > 1 and (l2.count(x) % 2 == 0)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) % 2 == 0 and (l2.count(x) > 1)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) % 2 != 0 and (l2.count(x) == 1)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) == 1 and (l2.count(x) % 2 != 0)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) % 2 != 0 and (l2.count(x) % 2 == 0)]",
 "common = [x for x in l1 if x in l2 and l1.count(x) % 2 == 0 and (l2.count(x) % 2 != 0)]",
 "common = list(filter(lambda x: x in l2 and x not in l1[:l1.index(x)] + l1[l1.index(x) + 1:], l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) == 1 and (l2.count(x) == 1), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) > 1 and (l2.count(x) > 1), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) % 2 == 0 and (l2.count(x) % 2 == 0), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) % 2 != 0 and (l2.count(x) % 2 != 0), l1))",
 "common = list(filter(lambda x: x in l2 and (l1.count(x) + l2.count(x)) % 2 == 0, l1))",
 "common = list(filter(lambda x: x in l2 and (l1.count(x) + l2.count(x)) % 2 != 0, l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) > 1 and (l2.count(x) == 1), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) == 1 and (l2.count(x) > 1), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) > 1 and (l2.count(x) % 2 == 0), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) % 2 == 0 and (l2.count(x) > 1), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) % 2 != 0 and (l2.count(x) == 1), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) == 1 and (l2.count(x) % 2 != 0), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) % 2 != 0 and (l2.count(x) % 2 == 0), l1))",
 "common = list(filter(lambda x: x in l2 and l1.count(x) % 2 == 0 and (l2.count(x) % 2 != 0), l1))",
 "import numpy as np\ncommon = np.intersect1d(l1, l2, assume_unique=True)",
 "import functools\ncommon = functools.reduce(lambda a, b: a if b in l1 else a + [b], l2, [])",
 "import numpy as np\nl3 = np.intersect1d(l1, l2).tolist()\ncommon = l3",
 "common = [value for value in l1 for value2 in l2 if value == value2]",
 "common = list(set([x for x in l1 if x in l2]))",
 "common = list(set.intersection(set(l1), set(l2)))",
 "common = list(set((x for x in l1 if x in l2)))",
 "import itertools\ncommon = [x for x in itertools.chain(l1, l2) if x in l1 and x in l2]",
 "import itertools\ncount = 0\nfor item in l1:\n    if item in l2:\n        count += 1",
 "from collections import Counter\nl1_counts = Counter(l1)\nl2_counts = Counter(l2)\ncommon = dict(l1_counts & l2_counts).keys()",
 "common = set(l1).intersection(l2)",
 "common = [x for x in l1 if x not in set(l1) - set(l2)]",
 "from collections import Counter\ncounter_l1 = Counter(l1)\ncommon = []\nfor x in l2:\n    if counter_l1[x]:\n        common.append(x)",
 "import numpy as np\ndiff = len(np.setdiff1d(l1, l2))\ncommon = l1[:-diff]",
 "from functools import reduce\nfrom operator import itemgetter\ncommon = list(itemgetter(*set(l1) & set(l2))(l1))",
 "common = set(l1) & set(l2)",
 "common = [x for x in l2 if x not in l1]",
 "common = []\nfor x in l2:\n    if x not in l1:\n        common.append(x)",
 "from functools import reduce\ncommon = list(reduce(lambda a, b: a if b in l1 else a + [b], l2, []))",
 "import statistics\ncommon = list(filter(statistics.mode(l2).__eq__, l1))",
 "from collections import Counter\ncommon = [key for (key, value) in Counter(l1).items() if key in set(l2)]",
 "import numpy as np\ncommon = np.array(l1)\ncommon = list(common[np.isin(common, l2)])",
 "common = [x for x in l1 if set(l2).__contains__(x)]",
 "common = list(filter(lambda x: set(l2).__contains__(x), l1))",
 "common = []\nfor value in l1:\n    for elem in l2:\n        if value == elem:\n            common.append(value)",
 "import itertools\ncommon = list(set(itertools.chain.from_iterable(l1)) & set(itertools.chain.from_iterable(l2)))",
 "import functools\ncommon = functools.reduce(lambda x, y: x if y in x else x + [y], l1, [])",
 "common = list(set(l1 + l2))",
 "common = list(set().union(l1, l2))",
 "common = list(set(l2).union(l1))",
 "from itertools import chain\ncommon = list(set(chain(l1, l2)))",
 "import numpy as np\ncommon = np.unique(np.concatenate([l1, l2]))",
 "common = list(set(l1).union(set(l2)))",
 "common = list(set(l1) | set(l2))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + y, [l1, l2])",
 "common = l1.copy()\ncommon.extend(l2)",
 "common = l1[:]\ncommon.extend(l2)",
 "common = [x for x in l2 if x in l1]\ncommon.sort()",
 "from numpy import intersect1d\ncommon = intersect1d(l1, l2)",
 "import itertools\ncommon = list(itertools.product(l1, l2))\ncommon = [pair for pair in common if pair[0] == pair[1]]",
 "import numpy as np\ncommon = np.unique([value for value in l1 if value in l2]).tolist()",
 "common = set(l1) & set(l2)\ncommon = list(common)",
 "from itertools import chain\ncommon = list(set(chain.from_iterable([l1, l2])))",
 "common = list(filter(lambda x: x in l1 and x in l2, l1 + l2))",
 "common = [x for x in set(l1) & set(l2)]",
 "import itertools\ncommon = [x for x in itertools.chain(l1, l2) if x in l2]",
 "count = sum((1 for item in l1 if item in l2))",
 "count = len([item for item in l1 if item in l2])",
 "import numpy as np\ncount = np.count_nonzero(np.isin(l1, l2))",
 "count = 0\nfor item in l1:\n    count += int(item in l2)",
 "from itertools import combinations\ncount = sum((1 for _ in combinations(l1, r=2) if set(_) & set(l2)))",
 "from itertools import product\ncount = len([item for (item, check) in product(l1, l2) if item == check])",
 "from collections import Counter\ncommon = [k for (k, v) in Counter(l1).items() if v > 0 and k in l2]",
 "import collections\nl1_counts = collections.Counter(l1)\nl2_counts = collections.Counter(l2)\ncommon = list(dict(l1_counts & l2_counts).keys())",
 "import collections\nl1_counts = collections.Counter(l1)\nl2_counts = collections.Counter(l2)\ncommon = [x for x in l1_counts if x in l2_counts]",
 "import collections\nl1_counter = collections.Counter(l1)\nl2_counter = collections.Counter(l2)\ncommon = [key for key in l1_counter.keys() if key in l2_counter]",
 "import itertools\nc = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(set(l1) - set(c))",
 "common = []\nfor x in l1:\n    if x not in common:\n        if x in l2:\n            common.append(x)",
 "import functools\ncommon = functools.reduce(lambda a, b: a if b not in set(l1) - set(l2) else a + [b], l1, [])",
 "common = [x for x in l1 if x in l2 and x not in set(l1) - set(l2)]",
 "import itertools\ncommon = list(set(itertools.filterfalse(lambda x: x not in l2, l1)))",
 "from collections import Counter\ncommon = []\nfor x in l2:\n    if Counter(l1)[x]:\n        common.append(x)",
 "import collections\ncounter_l1 = collections.Counter(l1)\ncommon = []\nfor x in l2:\n    if counter_l1[x]:\n        common.append(x)",
 "from collections import Counter\ndef filter_common(l1, l2):\n    counter_l1 = Counter(l1)\n    return [x for x in l2 if x in counter_l1]\ncommon = filter_common(l1, l2)",
 "import collections as c\ndef get_common(l1, l2):\n    counter_l1 = c.Counter(l1)\n    common = []\n    for element in l2:\n        if counter_l1[element]:\n            common.append(element)\n    return common\ncommon = get_common(l1, l2)",
 "import numpy as np\ncommon = list(np.intersect1d(l1, l2))",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in l1) and (x not in l2) and (x not in common) and (x not in l1) and (x not in l2)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in l1) and (x not in l2) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in l1) and (x not in l2) and (x not in common) and (x not in l1) and (x not in l2) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x in set(l1) and (x in set(l2))]",
 "common = [x for x in l1 if x in l2 and x in set(l1) and (x in set(l2)) and (x in l1) and (x in l2)]",
 "common = [x for x in l1 if x in l2 and x in set(l1) and (x in set(l2)) and (x in l1) and (x in l2) and (x in set(l1)) and (x in set(l2))]",
 "common = [x for x in l1 if x in l2 and x not in common] + [x for x in l2 if x in l1 and x not in common]",
 "common = [x for x in l1 if x in l2] + [x for x in l2 if x in l1 and x not in common]",
 "common = [x for x in l1 if x in l2] + [x for x in l2 if x in l1 and x not in common] + [x for x in l1 if x in l2 and x not in common]",
 "common = [x for x in l1 if x in l2] + [x for x in l2 if x in l1 and x not in common] + [x for x in l1 if x in l2 and x not in common] + [x for x in l2 if x in l1 and x not in common]",
 "common = [x for x in l1 if x in set(l2)] if isinstance(l1, list) and isinstance(l2, list) else []",
 "common = [x for x in l1 if x in set(l2)] if type(l1) == list and type(l2) == list else []",
 "common = [x for x in l1 if x in set(l2)] if type(l1) == list and type(l2) == list else None",
 "common = [x for x in l1 if x in set(l2)] if isinstance(l1, list) and isinstance(l2, list) else None",
 "common = [x for x in l1 if x in set(l2)] if isinstance(l1, list) and isinstance(l2, list) else [] if isinstance(l1, list) and isinstance(l2, list) else None",
 "common = [x for x in l1 if x in l2 and x not in common and (x != 0)]",
 "common = [x for x in l1 if x in l2 and x not in common and (x != 0) and (x != '')]",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        continue\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        break\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        pass\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        break\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        continue\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        continue\n        break\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        break\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        continue\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        break\n        continue\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        pass\n        pass\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        continue\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        break\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        break\n        pass\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        continue\n        break\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        break\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        pass\n        continue\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        break\n        continue\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        pass\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        pass\n        pass\n        pass\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        continue\n        pass\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        break\n        pass\n        continue\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        pass\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        break\n        pass\n        pass\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        continue\n        pass\n        pass\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        break\n        pass\n        pass\n        pass",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        pass\n        break\n        pass\n        pass\n        pass\n        continue",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        continue\n        pass\n        pass\n        pass\n        pass\n        break",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    else:\n        common.remove(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    else:\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    elif i in common:\n        common.remove(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        common.append(i)\ncommon.sort()",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        common.append(i)\ncommon.sort()\ncommon.reverse()",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    elif i in common:\n        common.remove(i)\n    else:\n        common.append(i)\ncommon.sort()\ncommon.reverse()\ncommon = common[:5]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x != None)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x != '')]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x != 0)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x != False)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x in l1)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x in l1) and (x in l2)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x in l1) and (x in l2) and (x in l1)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x in l1) and (x in l2) and (x in l1) and (x in l2)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in l1 and (x not in l2) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common) and (x not in common)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common]",
 "import numpy as np\ncommon = np.array(list(set(l1).intersection(set(l2))))",
 "import numpy as np\ncommon = np.intersect1d(np.array(l1), np.array(l2))",
 "common = [i for i in l1 if i in l2 and i not in common] + common",
 "common = [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common] + common",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2]",
 "common = [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common]",
 "common = [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2]",
 "common = [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2] + [i for i in l1 if i in l2 and i not in common]",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in l2 and y not in x else x, l1, [])",
 "import numpy as np\ncommon = np.intersect1d(np.unique(l1), np.unique(l2))",
 "common = [x for x in set(l1) if x in l2 and x not in common]",
 "common = [x for x in l1 if x in l2 and x not in set(l1) & set(l2)]",
 "common = [x for x in set(l1) if x in l2 and x not in set(l1) & set(l2)]",
 "common = [x for x in l1 if x in l2 and x not in set(l1) & set(l2) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in set(l1) & set(l2) and (x not in set(common))]",
 "common = [x for x in set(l1) if x in l2 and x not in set(l1) & set(l2) and (x not in common)]",
 "common = [x for x in set(l1) if x in l2 and x not in set(l1) & set(l2) and (x not in set(common))]",
 "common = [x for x in l1 if x in l2 and x not in set(l1) & set(l2) and (x not in set(l1) & set(l2)) and (x not in common)]",
 "common = [x for x in l1 if x in l2 and x not in set(l1) & set(l2) and (x not in set(l1) & set(l2)) and (x not in set(common))]",
 "common = [x for x in set(l1) if x in l2 and x not in set(l1) & set(l2) and (x not in set(l1) & set(l2)) and (x not in common)]",
 "common = [x for x in set(l1) if x in l2 and x not in set(l1) & set(l2) and (x not in set(l1) & set(l2)) and (x not in set(common))]",
 "common = []\nfor i in l1:\n    if i in set(l2):\n        common.append(i)",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in set(l2) else x, l1, [])",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    else:\n        common.remove(i)\ncommon = list(set(common))",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    else:\n        common.remove(i)\ncommon = list(set(common))\ncommon.sort()",
 "common = []\nfor i in l1:\n    if i in l2:\n        if i not in common:\n            common.append(i)\n        else:\n            common.remove(i)\n    else:\n        common.remove(i)\ncommon = list(set(common))\ncommon.sort()\ncommon.reverse()",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2 or x in common, l1))",
 "common = [i for i in l1 if i in l2 and i not in [j for j in common]]",
 "common = [i for i in l1 if i in l2 and i not in [j for j in common if j in l2]]",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in common:\n    if i in l1 and i not in common:\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in common:\n    if i in l1 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
 "import itertools\ncommon = list(itertools.chain.from_iterable([[i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]]))",
 "from functools import reduce\ncommon = reduce(lambda x, y: x + y, [[i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]])",
 "import numpy as np\ncommon = np.concatenate(([i for i in l1 if i in l2 and i not in common], [i for i in common if i in l1 and i not in common]))",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in l2] + [i for i in common if i in l2 and i not in l1] + [i for i in common if i in l1 and i not in l2] + [i for i in common if i in l2 and i not in l1]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in l2] + [i for i in common if i in l2 and i not in l1] + [i for i in common if i in l1 and i not in l2] + [i for i in common if i in l2 and i not in l1] + [i for i in common if i in l1 and i not in l2] + [i for i in common if i in l2 and i not in l1] + [i for i in common if i in l1 and i not in l2]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i not in common and i in l2]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i not in common and i in l2] + [i for i in l2 if i not in common and i in l1]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i not in common and i in l2] + [i for i in l2 if i not in common and i in l1] + [i for i in l1 if i in l2 and i not in common and (i not in l1) and (i not in l2)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i not in common and i in l2] + [i for i in l2 if i not in common and i in l1] + [i for i in l1 if i in l2 and i not in common and (i not in l1) and (i not in l2)] + [i for i in l2 if i in l1 and i not in common and (i not in l1) and (i not in l2)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i not in common and i in l2] + [i for i in l2 if i not in common and i in l1] + [i for i in l1 if i in l2 and i not in common and (i not in l1) and (i not in l2)] + [i for i in l2 if i in l1 and i not in common and (i not in l1) and (i not in l2)] + [i for i in l1 if i in l2 and i not in common and (i not in l1) and (i not in l2) and (i not in l1) and (i not in l2)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i not in common and i in l2] + [i for i in l2 if i not in common and i in l1] + [i for i in l1 if i in l2 and i not in common and (i not in l1) and (i not in l2)] + [i for i in l2 if i in l1 and i not in common and (i not in l1) and (i not in l2)] + [i for i in l1 if i in l2 and i not in common and (i not in l1) and (i not in l2) and (i not in l1) and (i not in l2)] + [i for i in l2 if i in l1 and i not in common and (i not in l1) and (i not in l2) and (i not in l1) and (i not in l2)]",
 "common = [i for i in l1 if i in l2 and i not in common] + [i for i in common if i in l1 and i not in common] + [i for i in common if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common] + [i for i in l1 if i in l2 and i not in common]",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in common:\n    if i in l1 and i not in common:\n        common.append(i)\nfor i in common:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)",
 "common = []\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in common:\n    if i in l1 and i not in common:\n        common.append(i)\nfor i in common:\n    if i in l2 and i not in common:\n        common.append(i)\nfor i in l1:\n    if i in l2 and i not in common:\n        common.append(i)\ncommon = list(set(common))",
 "from collections import Counter\ncommon = [x for x in Counter(l1) & Counter(l2)]",
 "temp1 = set(l1)\ntemp2 = set(l2)\ncommon = list(temp1.intersection(temp2))",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = list(np.intersect1d(l1_arr, l2_arr))",
 "common = list(filter(None, [x if x in l2 else None for x in l1]))",
 "common = [x if x in l2 else None for x in l1]\ncommon = list(filter(None, common))",
 "import numpy as np\ncommon = [x for x in np.intersect1d(l1, l2)]",
 "from itertools import groupby\ncommon = [k for (k, v) in groupby(sorted(l1 + l2)) if len(list(v)) > 1]",
 "from collections import defaultdict\ncommon_dict = defaultdict(int)\nfor item in l1:\n    common_dict[item] += 1\nfor item in l2:\n    common_dict[item] += 1\ncommon = [k for (k, v) in common_dict.items() if v > 1]",
 "common = list(filter(lambda x: l1.__contains__(x), l2))",
 "import numpy as np\ncommon = np.array(list(filter(lambda x: x in l2, l1)))",
 "common = [x for x in l1 if x in l2 or x in common]",
 "common = list(filter(lambda x: x in l2 or x in common, l1))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2 and x not in common, l1))",
 "common = [x for x in l1 if x in l2 and x not in common or x in common]",
 "common = list(filter(lambda x: x in l2 and x not in common or x in common, l1))",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2 or (x in common and x not in common), l1))",
 "common = [x for x in l1 if x in l2 or (x in common and x not in common) or x in common]",
 "common = list(filter(lambda x: x in l2 or (x in common and x not in common) or x in common, l1))",
 "temp1 = sorted(l1)\ntemp2 = sorted(l2)\ncommon = []\nfor i in temp1:\n    if i in temp2:\n        common.append(i)",
 "common = filter(lambda i: any((i == j for j in l2)), l1)",
 "import numpy as np\ncommon = np.isin(l1, l2).tolist()",
 "from collections import Counter\ncommon = [key for (key, value) in Counter(l1 + l2).items() if value > 1]",
 "import numpy as np\nl1_arr = np.array(l1)\nl2_arr = np.array(l2)\ncommon = np.intersect1d(l1_arr, l2_arr).tolist()",
 "import math\ncommon = [x for x in l1 if x in l2 and math.isnan(x)]",
 "common = list(filter(lambda x: x not in l2, l1))",
 "common = [x for x in l1 if not any((x == y for y in l2))]",
 "common = list(filter(lambda x: not any((x == y for y in l2)), l1))",
 "import numpy as np\ncommon = np.setdiff1d(l1, l2).tolist()",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x in l2, l1))",
 "common = []\nfor x in l1:\n    if x in l2:\n        continue\n    common.append(x)",
 "common = list(set(l1) - set(l2))",
 "common = [x for x in l1 if x not in set(l2)]",
 "from functools import reduce\ncommon = reduce(lambda x, y: x + y, [[x] for x in l1 if x not in l2], [])",
 "common = []\nfor x in l1:\n    if x not in l2:\n        common.append(x)\n    else:\n        common.remove(x)",
 "common = set(l1).intersection(set(l2))",
 "from itertools import chain\ncommon = set(chain(l1, l2))",
 "from functools import reduce\ndef intersection(x, y):\n    if y in l2 and y not in x:\n        x.append(y)\n    return x\ncommon = reduce(intersection, l1, [])",
 "from itertools import filterfalse\ncommon = list(filterfalse(lambda x: x not in set(l2), l1))",
 "common = list(filter(lambda x: x in set(l2), [x for x in l1]))",
 "common = [item for item in l1 if item in filter(lambda x: x in set(l2), l1)]",
 "common = [item for item in l1 if item in filter(set(l2).__contains__, l1)]",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\ncommon = list(filter(None, common))",
 "common = []\nfor x in l1:\n    if x in l2:\n        common.append(x)\ncommon = [x for x in common if x is not None]",
 "import itertools\ncommon = list(itertools.filterfalse(lambda x: x not in l2, l1))\ncommon = list(filter(None, common))",
 "import functools\ncommon = functools.reduce(lambda x, y: x + [y] if y in l2 else x, l1, [])\ncommon = list(filter(None, common))"
]