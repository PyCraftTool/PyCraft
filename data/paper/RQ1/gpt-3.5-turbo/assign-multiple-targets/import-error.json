[
 "\nresult = getResult(x)\na = result\nb = result + 5\nc = a + b",
 "\nc = func1(z)\nb = func2(y)\na = func3(x)\nb += func4(a, b, c)\nc += func5(a, b, c)\na += func6(a, b, c)\n(a, b, c) = (a, b, c)",
 "\ntemp_vars = some_function(x, y, z)\n(a, b, c) = temp_vars",
 "\na = getResult(x)\nb = a + 5\nc = a + b",
 "\nresult = getResult(x)\na = result\nb = 5\na = a + b\nc = a + b",
 "\na = getResult(x)\nb = 5\na = a + b\nc = a + b",
 "import numpy as np\nresult = np.array(getResult(x))\na = result\nb = result + 5\nc = a + b",
 "import math\nresult = getResult(x)\na = result\nb = math.ceil(result) + 5\nc = a + b",
 "import numpy as np\nresult = np.array(getResult(x))\na = result + 5\nb = result + 10\nc = a + b",
 "import statistics\nresult = getResult(x)\na = result\nb = a + result\nc = a + statistics.median([a, b])",
 "\na = [getResult(x)]\nb = a[0] + 5\nc = a[0] + b",
 "import math\nresult = getResult(x)\nb = int(math.sqrt(result))\na = b + result\nc = a + b * 2",
 "import numpy as np\nresult = getResult(x)\nb = np.sum(result)\na = b\nb = a + 7\nc = b + a * 2",
 "\nc = func1(z)\nb = func2(y)\na = func3(x)\ntemp1 = func4(a, b, c)\nb += temp1\ntemp2 = func5(a, b, c)\nc += temp2\ntemp3 = func6(a, b, c)\na += temp3\n(a, b, c) = (a, b, c)",
 "\nc = func1(z)\nb = func2(y)\na = func3(x)\nsum = func4(a, b, c)\nb += sum\ndelta = func5(a, b, c)\nmagnitude = func6(a, b, c)\na += magnitude\n(a, b, c) = (a, b, c)",
 "\n(a, b, c) = some_function(x, y, z)",
 "\nc = 0\na = add(x, y)\nb = 2 * z + a",
 "\nc = 0\na = add(x, y)\nb = 2 * z + add(x, y)",
 "\nc = reduce(lambda x, y: x + y, [d] * 10)",
 "\nc = functools.reduce(lambda x, y: x + y, [d] * 10)",
 "\nc = math.prod([d] * 10)",
 "\ny_ordered_list = np.array([y, z, x])\na = y_ordered_list[np.where(y_ordered_list == x)]\nb = y_ordered_list[0]\nc = y_ordered_list[np.where(y_ordered_list == y)]",
 "\ny_ordered_list = np.array([y, z, x])\n(a, b, c) = np.split(y_ordered_list, 3)",
 "\ndef calculate(x):\n    a = getResult(x)\n    b = a + 5\n    c = a + b\n    return c\ncalculate(x)",
 "\na = getResult(x)\nc = b = a + 5 + a + b",
 "\na = getResult(x)\nb = 5\nc = (a + b) * 2",
 "\nresult = getResult(x)\n(a, b) = (result, 5)\nc = (a + b) * 2",
 "\nresult = getResult(x)\n(a, b) = (result, 5)\nc = a + b + b",
 "\nresult = getResult(x)\na = result\nb = 5\nc = a + b + b",
 "\nc = getResult(x) + 5 + 5",
 "\na = getResult(x) + 5 + 5 - 5",
 "\nresult = getResult(x)\na = result\nc = result + 5 + 5",
 "\ndef add(a, b):\n    return a + b\na = getResult(x)\nb = 5\nc = add(a, b)",
 "\nc = getResult(x) + 5",
 "import numpy as np\nc = np.sum([getResult(x), 5])",
 "\nc = 0\nfor (index, item) in enumerate([getResult(x), 5]):\n    c += item",
 "\nc = getResult(x) + 2\na = c + 3",
 "import numpy as np\ncount = np.sum(arr)",
 "\ncount = 0\nfor (index, value) in enumerate(arr):\n    count += arr[index]",
 "\nc = pow(a, b)",
 "\nc = math.sqrt(a)",
 "\nc = math.log(a, b)",
 "\nc = math.sin(a) + math.cos(b)",
 "\nc = math.exp(a) + math.exp(b)",
 "\nc = statistics.mean([a, b])",
 "\nc = statistics.median([a, b])",
 "\nc = statistics.stdev([a, b])",
 "\nc = functools.reduce(lambda x, y: x + y, [a, b])",
 "\nc = itertools.permutations([a, b])",
 "\nc = itertools.combinations([a, b], 2)",
 "\n(c, b, a) = (math.sqrt(z), math.sqrt(y), math.sqrt(x))",
 "\na = np.asarray(x)\nb = np.asarray(y)\nc = np.asarray(z)",
 "\na = np.fromiter(x, dtype=float)\nb = np.fromiter(y, dtype=float)\nc = np.fromiter(z, dtype=float)",
 "\na = np.array(x, dtype=float)\nb = np.array(y, dtype=float)\nc = np.array(z, dtype=float)",
 "import numpy as np\nc = np.add(a, b)",
 "\nc = a.__add__(b)",
 "\nc = a.__radd__(b)",
 "\nc = reduce(lambda x, y: x + y, [a, b])",
 "\nc = reduce(lambda x, y: x.__add__(y), [a, b])",
 "\nc = functools.reduce(lambda x, y: x.__add__(y), [a, b])",
 "\nc = math.fsum([a, b])",
 "\nc = np.sum([a, b])",
 "\nc = math.pow(a, b)",
 "\nc = int(a)",
 "\nc = float(a)",
 "\nc = str(a)",
 "\nc = bool(a)",
 "\nc = list(a)",
 "import numpy as np\nc = np.multiply(a, b)",
 "import numpy as np\nc = np.dot(a, b)",
 "import numpy as np\nc = np.divide(a, b)",
 "import numpy as np\nc = np.subtract(a, b)",
 "\nc = math.prod([a, b])",
 "\nc = functools.reduce(lambda x, y: x * y, [a, b])",
 "\nc = math.floor(a / b)",
 "\nc = math.ceil(a / b)",
 "\nc = float(a) / b",
 "\nc = float(a) // b",
 "\nc = a.__truediv__(b)",
 "\nc = pow(a, b, -1) * a",
 "\nc = a.__divmod__(b)[0]",
 "\nc = a.__divmod__(b)[1]",
 "\nc = min(a, b) - max(a, b)"
]