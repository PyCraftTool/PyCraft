[
 "result = arr1 @ arr2 @ arr3",
 "result = 0\nfor (index, value) in enumerate(arr1):\n    result += value.dot(arr2.dot(arr3))",
 "result = sum([arr1[i].dot(arr2.dot(arr3)) for i in range(len(arr1))])",
 "result = 0\nfor (index_i, value_i) in enumerate(arr1):\n    for (index_j, value_j) in enumerate(arr2):\n        result += arr1[index_i] * arr2[index_j] * arr3[index_j]",
 "from numpy import dot\nimport numpy as np\nresult = dot(arr1, dot(arr2, arr3))",
 "result = sum([arr1[i] * (arr2[j] * arr3[j]) for i in range(len(arr1)) for j in range(len(arr2))])",
 "import numpy as np\nfrom numpy.linalg import multi_dot\nresult = multi_dot([arr1, arr2, arr3])",
 "result = arr1.dot(arr2).dot(arr3)",
 "temp = arr1 @ arr2\nresult = temp @ arr3",
 "result = sum((arr1[i][k] * arr2[k][j] * arr3[j][m] for i in range(len(arr1)) for k in range(len(arr2[0])) for j in range(len(arr3)) for m in range(len(arr3[0]))))",
 "import numpy as np\narr = arr1.dot(arr2).dot(arr3)\nresult = arr",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] @ (arr2 @ arr3)",
 "result = 0\nfor i in range(len(arr1)):\n    result += sum((arr1[i][j] * arr2[j][k] * arr3[k] for j in range(len(arr2)) for k in range(len(arr3))))",
 "result = sum([arr1[i] @ arr2 @ arr3 for i in range(len(arr1))])",
 "import itertools\nresult = sum([x @ arr2 @ arr3 for x in itertools.chain.from_iterable(arr1)])",
 "count = 0\nfor (index, value) in enumerate(arr1):\n    count += arr1[index].dot(arr2).dot(arr3)\nresult = count",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i].dot(arr2.dot(arr3))",
 "result = 0\nfor i in range(len(arr1)):\n    inner_result = arr1[i].dot(arr2.dot(arr3))\n    result += inner_result",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        result += arr1[i] * arr2[j] * arr3[j]",
 "result = sum((arr1[i] * arr2[j] * arr3[j] for i in range(len(arr1)) for j in range(len(arr2))))",
 "result = sum((arr1[index_i] * arr2[index_j] * arr3[index_j] for (index_i, value_i) in enumerate(arr1) for (index_j, value_j) in enumerate(arr2)))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        result += arr1[i] * (arr2[j] * arr3[j])",
 "result = sum([arr1[i] * (arr2[j] * arr3[j]) for (i, j) in itertools.product(range(len(arr1)), range(len(arr2)))])",
 "result = sum((arr1[i][j] * arr2[j] * arr3[j] for (i, j) in product(range(len(arr1)), range(len(arr2)))))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        result += arr1[i][j] * arr2[j] * arr3[j]",
 "result = 0\nresult = sum([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i] * arr3[i]",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] @ arr2[i] @ arr3[i]",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr3[0])):\n        for k in range(len(arr2)):\n            result += arr1[i][k] * arr2[k][j] * arr3[i][j]",
 "result = [[0] * len(arr3[0]) for _ in range(len(arr1))]\nfor i in range(len(arr1)):\n    for j in range(len(arr3[0])):\n        for k in range(len(arr2)):\n            result[i][j] += arr1[i][k] * arr2[k][j] * arr3[i][j]",
 "result = 0\nresult += arr1.dot(arr2.dot(arr3))",
 "result = 0\nresult += arr1 @ (arr2 @ arr3)",
 "result = sum([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "from functools import reduce\nresult = reduce(lambda x, y: x * y, zip(arr1, arr2, arr3))",
 "result = sum(map(lambda x, y, z: x * y * z, arr1, arr2, arr3))",
 "result = sum((x * y * z for (x, y, z) in zip(arr1, arr2, arr3)))",
 "result = arr1 @ arr2 @ arr3 @ arr4",
 "result = arr1 * arr2 * arr3",
 "result = 1\nresult *= arr1\nresult *= arr2\nresult *= arr3",
 "result = arr1\nresult *= arr2\nresult *= arr3",
 "result = arr1\nresult = result * arr2\nresult = result * arr3",
 "result = arr1 * arr2\nresult *= arr3",
 "result = sum((arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))))",
 "result = sum([x * y * z for (x, y, z) in zip(arr1, arr2, arr3)])",
 "count = 0\nfor (index, value) in enumerate(arr1 @ arr2 @ arr3):\n    count += (arr1 @ arr2 @ arr3)[index]\nresult = count",
 "from operator import mul\nimport functools\nresult = functools.reduce(mul, [arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "from functools import reduce\nresult = reduce(lambda x, y: x * y, [arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i][j] * arr2[j][k] * arr3[k]",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = sum([arr1[i][k] * arr2[k][j] * arr3[j][k] for i in range(len(arr1)) for j in range(len(arr3[0])) for k in range(len(arr2))])",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * (arr2[i] * arr3[i])",
 "from numpy import matmul\ndot_product_1 = matmul(arr1, arr2)\nresult = matmul(dot_product_1, arr3)",
 "result = 0\nfor (index, value) in enumerate(arr2):\n    result += arr1[index] * (arr2[index] * arr3[index])",
 "result = 0\nresult = arr1.dot(arr2).dot(arr3)",
 "result = sum((arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr3[0]))))",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, [arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    temp = arr1[i] * arr2[i] * arr3[i]\n    result += temp",
 "result = 0\nfor (index, value) in enumerate(arr1):\n    result += arr1[index] * arr2[index] * arr3[index]",
 "result = 1\nfor i in range(len(arr1)):\n    result *= arr1[i] * arr2[i] * arr3[i]",
 "import math\nresult = math.prod([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "import itertools\nresult = 1\nfor i in itertools.product(arr1, arr2, arr3):\n    result *= i[0] * i[1] * i[2]",
 "import itertools\nresult = 1\nfor (a, b, c) in itertools.zip_longest(arr1, arr2, arr3, fillvalue=1):\n    result *= a * b * c",
 "result = sum((arr1[i][j] * arr2[j][k] * arr3[k] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i, j] * arr2[j, k] * arr3[k]",
 "import itertools\nresult = sum((arr1[i][k] * arr2[k][j] * arr3[j][k] for (i, j, k) in itertools.product(range(len(arr1)), range(len(arr3[0])), range(len(arr2)))))",
 "result = sum((arr1[i][k] * arr2[k][j] * arr3[j][k] for i in range(len(arr1)) for j in range(len(arr3[0])) for k in range(len(arr2))))",
 "import numpy as np",
 "result = sum([arr1[i] * (arr2[i] * arr3[i]) for i in range(len(arr1))])",
 "result = sum((arr1[i] * (arr2[i] * arr3[i]) for i in range(len(arr1))))",
 "from itertools import zip_longest\nresult = sum((a * (b * c) for (a, b, c) in zip_longest(arr1, arr2, arr3, fillvalue=1)))",
 "result = arr1.dot(arr2 * arr3)",
 "from numpy import matmul\nresult = matmul(matmul(arr1, arr2), arr3)",
 "result = arr3 @ (arr1 @ arr2)",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2[0])) for k in range(len(arr2)) for l in range(len(arr3[0]))])",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2[0])) for k in range(len(arr2)) for l in range(len(arr3[0])) if i < j < k < l])",
 "result = 0\nresult += arr1.dot(arr2).dot(arr3)",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            for l in range(len(arr3[0])):\n                result += arr1[i][j] * arr2[j][k] * arr3[k][l]",
 "from itertools import product\nresult = sum((arr1[i][j] * arr2[j][k] * arr3[k][l] for (i, j, k, l) in product(range(len(arr1)), range(len(arr2)), range(len(arr3)), range(len(arr3[0])))))",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            for l in range(len(arr3[0])):\n                result += arr1[i][j] * arr2[j][k] * arr3[k][l]\n                if i != 0:\n                    result += arr1[i][j] * arr2[j][k] * arr3[k][l]",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, (arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr3[0]))))",
 "import math\nresult = math.prod((arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr3[0]))))",
 "import itertools\nresult = sum((arr1[i][j] * arr2[j][k] * arr3[k][l] for (i, j, k, l) in itertools.product(range(len(arr1)), range(len(arr2)), range(len(arr3)), range(len(arr3[0])))))",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] @ arr2 @ arr3",
 "result = 0\nfor (x, y, z) in zip(arr1, arr2, arr3):\n    result += x * y * z",
 "result = 0\nfor (i, (x, y, z)) in enumerate(zip(arr1, arr2, arr3)):\n    result += x * y * z",
 "import itertools\nresult = sum((a * b * c for (a, b, c) in itertools.zip_longest(arr1, arr2, arr3, fillvalue=1)))",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i] * arr3[i]\nresult",
 "result = sum((arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))))\nresult",
 "result = sum([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])\nresult",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i] * arr2[j] * arr3[k]",
 "result = sum([arr1[i] * arr2[j] * arr3[k] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = 0\nfor i in range(len(arr1)):\n    result += sum([arr1[i][j] * arr2[j][k] * arr3[k] for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i] * arr2[j][k] * arr3[k]",
 "import math\nresult = math.prod([x * y * z for (x, y, z) in zip(arr1, arr2, arr3)])",
 "import functools\nresult = functools.reduce(lambda a, b: a * b, [x * y * z for (x, y, z) in zip(arr1, arr2, arr3)])",
 "import functools\nresult = functools.reduce(lambda a, b: a * b, [x * y * z for (x, y, z) in zip(arr1, arr2, arr3)], 1)",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)], 1)",
 "result = 1\nfor (a, b, c) in zip(arr1, arr2, arr3):\n    result *= a * b * c",
 "result = functools.reduce(lambda x, y: x * y, map(lambda a, b, c: a * b * c, arr1, arr2, arr3))",
 "result = 0\nresult = result + arr1.dot(arr2).dot(arr3)",
 "result = sum(map(lambda x, y, z: x * (y * z), arr1, arr2, arr3))",
 "result = sum((x * (y * z) for (x, y, z) in zip(arr1, arr2, arr3)))",
 "result = sum([x * (y * z) for (x, y, z) in zip(arr1, arr2, arr3)])",
 "result = sum([arr1[i] * sum([arr2[i][j] * arr3[j] for j in range(len(arr2[i]))]) for i in range(len(arr1))])",
 "import itertools\nresult = sum((arr1[i][j] * arr2[j][k] * arr3[k] for (i, j, k) in itertools.product(range(len(arr1)), range(len(arr2)), range(len(arr3)))))",
 "result = 0\nresult += sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "result = 0\nresult += sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3)) for l in range(len(arr1))])",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            for l in range(len(arr1)):\n                result += arr1[i][j] * arr2[j][k] * arr3[k][l]",
 "result = 0\nfor i in range(arr1.shape[0]):\n    for j in range(arr3.shape[1]):\n        for k in range(arr1.shape[1]):\n            result += arr1[i, k] * arr2[k, j] * arr3[j, k]",
 "import functools\nresult = functools.reduce(lambda x, y: x + y, [arr1[i] * (arr2[i] * arr3[i]) for i in range(len(arr1))])",
 "result = [[0 for _ in range(len(arr3[0]))] for _ in range(len(arr1))]\nfor i in range(len(arr1)):\n    for j in range(len(arr3[0])):\n        for k in range(len(arr2)):\n            result[i][j] += arr1[i][k] * arr2[k][j] * arr3[i][j]",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        for k in range(len(arr3)):\n            result += arr1[i][j] * arr2[j][k] * arr3[k][i]",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k][l] for i in range(len(arr1)) for j in range(len(arr2)) for k in range(len(arr3))])",
 "import numpy as np\narr = [arr1, arr2, arr3]\nresult = arr[0] * arr[1] * arr[2]",
 "result = 1\nfor i in range(len(arr[0])):\n    temp = 1\n    for j in range(len(arr)):\n        temp *= arr[j][i]\n    result *= temp",
 "result = []\nfor i in range(len(arr1)):\n    row = []\n    for j in range(len(arr3[0])):\n        total = 0\n        for k in range(len(arr2)):\n            total += arr1[i][k] * arr2[k][j]\n        row.append(total)\n    result.append(row)",
 "result = []\nfor i in range(len(arr1)):\n    row = []\n    for j in range(len(arr3[0])):\n        total = sum((arr1[i][k] * arr2[k][j] for k in range(len(arr2))))\n        row.append(total)\n    result.append(row)",
 "result = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr1[0])):\n        for k in range(len(arr2[0])):\n            result += arr1[i][j] * arr2[j][k] * arr3[k]",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for i in range(len(arr1)) for j in range(len(arr1[0])) for k in range(len(arr2[0]))])",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for k in range(len(arr2[0])) for j in range(len(arr1[0])) for i in range(len(arr1))])",
 "result = sum([arr1[i][j] * arr2[j][k] * arr3[k] for j in range(len(arr1[0])) for i in range(len(arr1)) for k in range(len(arr2[0]))])",
 "result = [[sum((arr1[i][k] * arr2[k][j] * arr3[i][j] for k in range(len(arr2)))) for j in range(len(arr3[0]))] for i in range(len(arr1))]"
]