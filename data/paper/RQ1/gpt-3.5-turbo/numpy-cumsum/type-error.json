[
 "import numpy as np\ncum_arr = np.cumsum(array)",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr).tolist()",
 "from itertools import accumulate\ncum_arr = list(accumulate(array))",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import functools\ncum_arr = functools.reduce(lambda acc, x: acc + [acc[-1] + x], array[1:], [array[0]])",
 "import itertools\nfrom functools import reduce\ncum_arr = list(itertools.accumulate(array, reduce))",
 "import numpy as np\ncum_arr = [np.sum(array[0:i + 1]) for i in range(len(array))]",
 "import itertools\ncum_arr = list(itertools.accumulate(array))",
 "import numpy as np\ndata = np.array(array)\ncum_arr = np.cumsum(data)",
 "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "import numpy as np\nimport pandas as pd\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr).tolist()\ncum_arr = pd.Series(np_arr).cumsum().tolist()",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = []\nfor i in range(len(np_arr)):\n    cum_arr.append(np_arr[:i + 1].sum())",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr, dtype=float).tolist()",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr, axis=0).tolist()",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr, axis=1).tolist()",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr, axis=None).tolist()",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr).tolist()\nres = sum(cum_arr)",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr).tolist()\nnew_cum_arr = []\nfor i in range(len(cum_arr)):\n    new_cum_arr.append(cum_arr[i] + 1)",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr).tolist()\nres = cum_arr[0] + cum_arr[-1]",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr).tolist()\nres = 0\nfor i in range(1, len(cum_arr)):\n    res += cum_arr[i]",
 "import numpy as np\nnp_arr = np.array(array)\ncum_arr = np.cumsum(np_arr).tolist()\nres = 0\nfor i in range(len(cum_arr)):\n    res += cum_arr[i]",
 "import numpy as np\ncum_arr = np.cumsum(np.array(array, dtype='int64'))",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
 "import functools\nimport operator\ncum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))",
 "import numpy as np\nimport itertools\ncum_arr = list(itertools.accumulate(array[::-1]))[::-1]",
 "import numpy as np\nimport pandas as pd\ncum_arr = pd.Series(array).cumsum().tolist()",
 "import itertools\nimport operator\ncum_arr = list(itertools.accumulate(array, operator.add))",
 "import numpy as np\nimport pandas as pd\ncum_arr = np.array(pd.Series(array).cumsum().tolist())",
 "import numpy as np\ncum_arr = [np.sum(array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\ncum_arr = list(np.cumsum(array))",
 "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
 "import itertools\nnew_arr = list(itertools.accumulate(array, lambda x, y: x + y))",
 "cum_arr = [array[0]]\nfor x in array[1:]:\n    cum_arr.append(cum_arr[-1] + x)",
 "import numpy as np\narr = np.array(array)\nsum_arr = np.cumsum(arr)\ncum_arr = sum_arr.tolist()",
 "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
 "import numpy as np\nimport itertools\ncum_arr = np.array(list(itertools.accumulate(array)))",
 "import numpy as np\ncum_arr = np.add.accumulate(array)",
 "import numpy as np\ncum_arr = np.add.accumulate(array).tolist()",
 "import numpy as np\narr_len = len(array)\ncum_arr = []\nfor i in range(arr_len):\n    cum_arr.append(np.sum(array[0:i + 1]))",
 "import numpy as np\narray_len = len(array)\ncum_arr = []\nfor i in range(array_len):\n    cum_arr.append(np.sum(array[:i + 1]))",
 "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(array[i] + cum_arr[i - 1])",
 "import numpy as np\narray_rev = np.flip(array)\ncum_arr = np.flip(np.cumsum(array_rev))",
 "import numpy as np\nreverse_array = np.flip(array)\ncum_arr = np.flip(np.add.accumulate(reverse_array))",
 "import numpy as np\ndata = np.array(array)\ncum_arr = np.cumsum(data, dtype=np.int64)",
 "import numpy as np\ncum_arr = np.cumsum(np.array(array))",
 "import numpy as np\ndata = np.array(array)\nsum_array = np.sum(data)\ncum_arr = np.cumsum(sum_array)",
 "import numpy as np\ndata = np.array(array)\nsum_array = np.sum(data)\ncum_arr = np.cumsum(sum_array, dtype=np.int64)",
 "import numpy as np\ndata = np.array(array)\nresult = np.cumsum(data)\ncum_arr = result",
 "import numpy as np\nresult = np.cumsum(array)\ncum_arr = result",
 "import numpy as np\ndata = np.array(array)\ncum_arr = np.cumsum(data)\nresult = cum_arr\ncum_arr = result",
 "import numpy as np\nresult = np.cumsum(array)\ncum_arr = result\ncum_arr = cum_arr",
 "from functools import reduce\nimport operator\ncum_arr = reduce(operator.add, [array[:i + 1] for i in range(len(array))])",
 "import numpy as np\ncum_arr = np.cumsum(array).tolist()",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.cumsum(array[::-1])[::-1]",
 "import numpy as np\ncum_arr = np.cumsum(array[::-1])[::-1].tolist()",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=1)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=None)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=1, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=None, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array).tolist() if len(array) > 0 else []",
 "import itertools\ncum_arr = list(itertools.accumulate(array)) if len(array) > 0 else []",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = cum_arr[::-1]",
 "import numpy as np\ncum_arr = np.cumsum(array[::-1])[::-1]\ncum_arr = cum_arr[::-1]",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.float64)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.int32)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.uint8)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.bool_)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.complex128)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.object_)",
 "import numpy as np\ncum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(array))])",
 "import functools\npartial_sum = functools.partial(functools.reduce, lambda x, y: x + y)\ncum_arr = list(map(partial_sum, [array[:i + 1] for i in range(len(array))]))",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = cum_arr[i] + 1",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [x for x in cum_arr]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(map(int, cum_arr))",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(map(float, cum_arr))\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(map(float, cum_arr))\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]\ncum_arr.sort()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr.sort()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]\ncum_arr.sort()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(map(float, cum_arr))\ncum_arr.sort()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(map(float, cum_arr))\ncum_arr.sort()\ncum_arr",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(map(float, cum_arr))\ncum_arr.sort()\ncum_arr = cum_arr[::-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [float(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [int(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = [str(x) for x in cum_arr]\ncum_arr.sort()\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr).tolist()\ncum_arr = list(map(float, cum_arr))\ncum_arr.sort()\ncum_arr.reverse()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr_list = cum_arr.flatten().tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr_list = cum_arr.astype(int).tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr_list = cum_arr.astype(int).tolist()\nnew_cum_arr_list = cum_arr_list.copy()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr_list = cum_arr.astype(int).tolist()\nnew_cum_arr_list = cum_arr_list.copy()\nother_cum_arr_list = new_cum_arr_list[:]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr_list = cum_arr.astype(int).tolist()\nnew_cum_arr_list = cum_arr_list.copy()\nother_cum_arr_list = new_cum_arr_list[:]\nfinal_cum_arr_list = other_cum_arr_list.copy()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr)\ncum_arr_list = cum_arr.astype(int).tolist()\nnew_cum_arr_list = cum_arr_list.copy()\nother_cum_arr_list = new_cum_arr_list[:]\nfinal_cum_arr_list = other_cum_arr_list.copy()\nresult_cum_arr_list = final_cum_arr_list.copy()",
 "import numpy as np\nsum_arr = np.add.accumulate(array)\ncum_arr = sum_arr.tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr + 1",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr + np.ones(len(cum_arr))",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr + np.ones(len(cum_arr))\ncum_arr = cum_arr * 2",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros(len(arr))\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])\ncum_arr = np.cumsum(cum_arr)\ncum_arr = cum_arr + np.ones(len(cum_arr))\ncum_arr = cum_arr * 2\ncum_arr = np.exp(cum_arr)",
 "import numpy as np\nimport itertools\narray_length = len(array)\ncum_arr = np.zeros(array_length)\nfor i in range(array_length):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\npartial_sum = np.add.reduce\ncum_arr = np.array([partial_sum(array[:i + 1]) for i in range(len(array))])",
 "import itertools\npartial_sum = list(itertools.accumulate(array))\ncum_arr = [partial_sum[i] for i in range(len(partial_sum))]",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = round(cum_arr[i], 2)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=float, axis=0)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=float, axis=1)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=float, axis=None)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.float32, axis=0)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.float32, axis=1)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.float32, axis=None)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.int32, axis=0)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.int32, axis=1)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.int32, axis=None)",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import itertools\ndef accumulate(iterable):\n    \"\"\"Return running totals\"\"\"\n    iterable = iter(iterable)\n    total = next(iterable)\n    yield total\n    for element in iterable:\n        total += element\n        yield total\ncum_arr = list(accumulate(array))",
 "import functools\ndef accumulate(a, b):\n    return a + b\ncum_arr = functools.reduce(accumulate, array, [])",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros_like(arr)\nfor i in range(len(arr)):\n    cum_arr[i] = np.sum(arr[:i + 1])",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumsum(cum_arr)",
 "import numpy as np\ncum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.cumsum(array)\nsum = np.cumsum(array)[-1]\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = cum_arr.tolist()\nsum = sum.tolist()",
 "import numpy as np\nimport math\ncum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = cum_arr.tolist()\nsum = sum.tolist()\nsum = math.ceil(sum)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.cumprod(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.diff(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.gradient(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.mean(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.std(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.var(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.median(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.percentile(cum_arr, 75)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.percentile(cum_arr, 25)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.max(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.min(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = np.sum(cum_arr)",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.prod(array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.mean(array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.median(array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.std(array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(cum_arr))])",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.insert(array, 0, 0))[:-1]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr, dtype=float)",
 "import itertools\narr = list(array)\ncum_arr = list(itertools.accumulate(arr))",
 "from functools import reduce\narr = list(array)\nresult = [reduce(lambda x, y: x + y, arr[:i + 1]) for i in range(len(arr))]\ncum_arr = list(result)",
 "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[0])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "import functools\ncum_arr = [functools.reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))]",
 "import itertools\narr = list(array)\nsum_arr = [arr[0]]\nfor i in range(1, len(arr)):\n    sum_arr.append(sum_arr[i - 1] + arr[i])",
 "import itertools\narr = list(array)\ncum_arr = [arr[0]]\nfor i in range(1, len(arr)):\n    cum_arr.append(arr[i] + cum_arr[-1])",
 "import itertools\narr = list(array)\ncum_arr = [None] * len(arr)\nif len(arr) > 1:\n    cum_arr[0] = arr[0]\n    cum_arr[1] = arr[0] + arr[1]\n    for idx in range(2, len(arr), 1):\n        cum_arr[idx] = cum_arr[idx - 1] + arr[idx]",
 "import itertools\niterator = itertools.accumulate(array)\nextended_iterator = itertools.chain([0], iterator)\ncum_arr = list(extended_iterator)[1:]",
 "import numpy as np\ncum_arr = np.cumsum(array)[1:]",
 "import itertools\ncum_arr = list(itertools.accumulate(array))[1:]",
 "from itertools import accumulate\narr = list(array)\ncum_arr = list(accumulate(arr))",
 "import numpy as np\narr = np.array(array)\ncum_arr = [sum(arr[:i + 1]) for i in range(len(arr))]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
 "from itertools import accumulate\narr = list(accumulate(array))\ncum_arr = [i for i in arr]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros_like(arr)\nsum = 0\nfor i in range(len(arr)):\n    sum += arr[i]\n    cum_arr[i] = sum",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.zeros_like(arr)\ncum_arr = np.cumsum(arr)",
 "import numpy as np\narray_length = len(array)\ncum_arr = np.cumsum(array)",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(arr_sum)",
 "import functools\ndef add(x, y):\n    return x + y\ncum_arr = functools.reduce(add, array, [])",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.int64)",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=np.int32)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ndef cumulative_sum(arr):\n    cum_arr = np.zeros(len(arr))\n    for i in range(len(arr)):\n        cum_arr[i] = np.sum(arr[:i + 1])\n    return cum_arr\ncum_arr = cumulative_sum(array)",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.int64)\ncum_arr = list(cum_arr)",
 "import numpy as np\nimport functools\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = functools.reduce(lambda x, y: x + y, array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = list(cum_arr)",
 "array_length = len(array)\ncum_arr = []\nfor i in range(array_length):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(arr_sum, axis=0)",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(arr_sum)",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(arr_sum, axis=0)",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.flip(arr_sum))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.flip(arr_sum))",
 "import numpy as np\narr_sum = np.sum(array, axis=0)\ncum_arr = np.cumsum(arr_sum)",
 "import numpy as np\narr_sum = np.sum(array, axis=1)\ncum_arr = np.cumsum(arr_sum)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = list(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])\ncum_arr = cum_arr.tolist()",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.sum(arr)",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.prod(arr)",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.mean(arr)",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.max(arr)",
 "import functools\ndef add(x, y):\n    return x + y\ncum_arr = functools.reduce(add, array)",
 "import functools\ncum_arr = functools.reduce(lambda x, y: x + y, array)"
]