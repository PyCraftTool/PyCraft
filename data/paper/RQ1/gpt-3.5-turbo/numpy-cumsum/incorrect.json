[
 "cum_arr = sum((array[:i + 1] for i in range(len(array))))",
 "import itertools\narray_len = len(array)\nindices = list(itertools.chain.from_iterable((itertools.combinations(range(array_len), r) for r in range(1, array_len + 1))))\ncum_arr = []\nfor index in indices:\n    cum_arr.append(sum(array[:index + 1]))",
 "import itertools\nimport functools\ncum_arr = list(itertools.accumulate(array, functools.partial(lambda x, y: x + y, 0)))",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])",
 "import numpy as np\nfrom operator import add\ncum_arr = list(np.cumulate(array, add))",
 "import numpy as np\ncum_arr = np.concatenate(([array[0]], np.cumsum(array[1:])))",
 "import numpy as np\ncum_arr = np.ndarray(len(array), dtype=int)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import math\ncum_arr = []\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr.append(math.ceil(sum))",
 "import numpy as np\nimport functools\ncum_arr = np.array(functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
 "cum_arr = 0\nresult = []\nfor i in range(len(array)):\n    cum_arr += array[i]\n    result.append(cum_arr)",
 "cum_arr = 0\nresult = []\nfor i in range(len(array)):\n    cum_arr += array[i]\n    result.append(sum(result))",
 "import itertools\ncum_arr = list(itertools.accumulate(array, lambda x, y: x + y, initial=0))",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=0, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=1, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=True)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=False)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind')",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='unsafe')",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C')",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='F')",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='A')",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='K')",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=False)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=0)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=1)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=2)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=3)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=4)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=5)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=6)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=7)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=8)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=9)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=10)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=11)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=12)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=13)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=14)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=15)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=16)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=17)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=18)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=19)",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0, axis=None, dtype=float, out=None, keepdims=False, where=True, casting='same_kind', order='C', subok=True, ndmin=20)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = [int(x) for x in cum_arr]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = [int(x) for x in cum_arr]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = [str(x) for x in cum_arr]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = [str(x) for x in cum_arr]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = [bool(x) for x in cum_arr]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = [bool(x) for x in cum_arr]",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\ncum_arr = cum_arr[::-1]",
 "cum_arr = []\nsum = 0\nfor i in array[::-1]:\n    sum += i\n    cum_arr.insert(0, sum)",
 "cum_arr = []\nsum = 0\nfor i in array[::-1]:\n    sum += i\n    cum_arr.insert(0, sum)\ncum_arr = cum_arr[::-1]",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
 "import itertools\ncum_arr = list(itertools.accumulate(array, initial=0))",
 "import functools\npartial_sum = functools.partial(functools.reduce, lambda x, y: x + y)\ncum_arr = list(partial_sum(array, initial=0))",
 "import statistics\nmean = statistics.mean(array)\ncum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i] - mean)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, initial=10)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, initial=0)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.float64, initial=10)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0, dtype=np.int32, initial=0)",
 "import numpy as np\nimport itertools\ncum_arr = np.zeros_like(array)\nfor (i, row) in enumerate(array):\n    for (j, element) in enumerate(row):\n        cum_arr[i, j] = np.sum(itertools.chain.from_iterable(array[i, :j + 1]))",
 "import numpy as np\nimport itertools\ncum_arr = np.zeros_like(array)\nfor (i, row) in enumerate(array):\n    for (j, element) in enumerate(row):\n        cum_arr[i, j] = np.sum(array[i, :j + 1])",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))]).cumsum()",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))]).cumsum().tolist()",
 "import numpy as np\nsum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))]).cumsum()\ncum_arr = sum_arr.tolist()",
 "import numpy as np\ncum_arr = np.empty(len(array))\nsum_val = 0\nfor i in range(len(array)):\n    sum_val += array[i]\n    cum_arr[i] = sum_val",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])\ncum_arr = np.cumsum(cum_arr)",
 "import math\ncum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(math.floor(sum))",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum = sum + array[i]\n    cum_arr[i] = sum",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int, copy=False).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = cum_arr.astype(int, copy=False).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr).astype(int).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr).astype(int).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr).astype(int, copy=False).tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr[i] = sum\ncum_arr = np.array(cum_arr).astype(int, copy=False).tolist()",
 "import math\ncum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(math.ceil(sum))",
 "import math\ncum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr.append(math.ceil(sum))",
 "import math\ncum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr.append(math.floor(sum))",
 "import numpy as np\nimport statistics\ncum_arr = np.cumsum(array)\nsum = np.sum(array)\ncum_arr = cum_arr.tolist()\nsum = sum.tolist()\nsum = statistics.median(sum)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i]) + array[i]",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) + array[i]",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) - array[i - 1]",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) * array[i]",
 "import numpy as np\ncum_arr = np.cumsum(array)\nfor i in range(len(cum_arr)):\n    cum_arr[i] = np.sum(array[:i + 1]) / array[i]",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.concatenate(([0], array[:-1])))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.hstack(([0], array[:-1])))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[0, array[:-1]])",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]])",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=int)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.int8)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.int16)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.int32)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.int64)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.uint8)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.uint16)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.uint32)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.uint64)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.float16)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.float32)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.float64)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.complex64)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.complex128)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.bool_)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.str_)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.object_)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.bytes_)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.unicode_)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=np.memoryview)",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(None))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(Ellipsis))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(True))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(1))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(1.0))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(1j))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type('a'))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(b'a'))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(u'a'))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(memoryview(b'a')))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.int8))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.int16))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.int32))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.int64))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.uint8))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.uint16))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.uint32))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.uint64))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.float16))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.float32))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.float64))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.complex64))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.complex128))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.bool_))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.str_))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.object_))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.bytes_))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.unicode_))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=type(np.memoryview))",
 "import numpy as np\ncum_arr = np.cumsum(array)\ncum_arr = np.cumsum(np.r_[:0, array[:-1]], dtype=None)",
 "import itertools\nrunning_sum = 0\ncum_arr = [running_sum]\nfor i in itertools.count():\n    running_sum += array[i]\n    cum_arr.append(running_sum)\n    if i == len(array) - 1:\n        break",
 "cummulative_sum = 0\ntemp_arr = []\nfor num in arr:\n    cummulative_sum += num\n    temp_arr.append(cummulative_sum)\ncum_arr = np.array(temp_arr)",
 "cum_arr = [sum(array[:i]) if i > 0 else array[0] for i in range(len(array) + 1)]",
 "import numpy as np\narr = np.array(array)\ncum_arr = np.cumsum(arr, initial=0).tolist()",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum",
 "running_sum = 0\ncum_arr = [running_sum]\nfor item in array:\n    running_sum += item\n    cum_arr.append(running_sum)\n    if item == array[-1]:\n        break",
 "import numpy as np\ncum_arr = [x + arr[0] for x in arr]",
 "cum_arr = 0\nfor i in arr:\n    cum_arr += i",
 "cummulative_sum = 0\noutput_arr = []\nfor num in arr:\n    cummulative_sum += num\n    output_arr.append(cummulative_sum)\noutput_array = np.array(output_arr)\ncum_arr = output_array",
 "import numpy as np\narr_nums = []\ncummulative_sum = 0\nfor num in arr:\n    cummulative_sum += num\n    arr_nums.append(cummulative_sum)\ncum_arr = np.array(arr_nums)",
 "import itertools\narr = list(array)\nsum_arr = [0] * (len(arr) + 1)\nfor i in range(len(arr)):\n    sum_arr[i + 1] = sum_arr[i] + arr[i]",
 "import itertools\narr = list(array)\nfinal_list = [sum(arr[:x + 1]) for x in range(len(arr))]",
 "import numpy as np\ncum_arr = np.cumsum(array, initial=0).tolist()",
 "val = 0\ncum_arr = [0]\nfor i in array:\n    val += i\n    cum_arr.append(val)",
 "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(array[i] + sum([cum_arr[j] for j in range(i)]))",
 "cum_arr = 0\nfor i in range(len(array)):\n    cum_arr += array[i]",
 "import numpy as np\nimport math\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = math.fsum(array[:i + 1])",
 "import numpy as np\ndef cumulative_sum(arr):\n    cum_arr = np.zeros(len(arr))\n    for i in range(len(arr)):\n        cum_arr[i] = sum(arr[:i + 1])\n    return cum_arr\ncum_arr = cumulative_sum(array)",
 "import math\narray_length = len(array)\ncum_arr = []\nsum = 0\nfor i in range(array_length):\n    sum += array[i]\n    cum_arr.append(math.ceil(sum))",
 "import numpy as np\narray_length = len(array)\ncum_arr = np.zeros(array_length)\nfor i in range(array_length):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\narray_length = len(array)\ncum_arr = np.zeros(array_length)\nsum_val = 0\nfor i in range(array_length):\n    sum_val += array[i]\n    cum_arr[i] = sum_val",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(arr_sum, axis=1)",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(arr_sum, axis=1)",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.flip(arr_sum, axis=0))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.flip(arr_sum, axis=1))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.flip(arr_sum, axis=0))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.flip(arr_sum, axis=1))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.sort(arr_sum))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.sort(arr_sum, axis=0))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.sort(arr_sum, axis=1))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.sort(arr_sum))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.sort(arr_sum, axis=0))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.sort(arr_sum, axis=1))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.sort(np.flip(arr_sum)))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.sort(np.flip(arr_sum, axis=0)))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumsum(np.sort(np.flip(arr_sum, axis=1)))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.sort(np.flip(arr_sum)))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.sort(np.flip(arr_sum, axis=0)))",
 "import numpy as np\narr_sum = np.sum(array)\ncum_arr = np.cumprod(np.sort(np.flip(arr_sum, axis=1)))"
]