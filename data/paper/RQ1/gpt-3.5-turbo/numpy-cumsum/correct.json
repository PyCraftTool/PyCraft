[
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
 "cum_arr = []\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr.append(sum)",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "import math\ncum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
 "cum_arr = []\nfor i in range(len(array)):\n    temp_sum = sum(array[:i + 1])\n    cum_arr.append(temp_sum)",
 "cum_arr = []\nfor (i, value) in enumerate(array):\n    cum_arr.append(sum(array[:i + 1]))",
 "sum = 0\ncum_arr = []\nfor num in array:\n    sum += num\n    cum_arr.append(sum)",
 "cum_arr = []\nsum = 0\nfor num in array:\n    sum += num\n    cum_arr.append(sum)\ncum_arr = [cum_arr[i] for i in range(len(cum_arr))]",
 "cum_arr = []\nsum = 0\nfor i in range(1, len(array) + 1):\n    sum += array[i - 1]\n    cum_arr.append(sum)",
 "from functools import reduce\ncum_arr = reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
 "import statistics\ncum_arr = []\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr.append(statistics.median_high([sum]))",
 "import numpy as np\nimport functools\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]",
 "cum_arr = []\nsum_val = 0\nfor (i, val) in enumerate(array):\n    sum_val += val\n    cum_arr.append(sum_val)",
 "import itertools\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[0:i + 1]))",
 "import functools\ncum_sum = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:]\ncum_arr = cum_sum",
 "import functools\ncum_arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
 "import functools\ncum_arr = functools.reduce(lambda a, b: a + [b + a[-1]], array, [0])[1:]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_sum = sum(array[0:i + 1])\n    cum_arr.append(cum_sum)",
 "cum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += array[i]\n    cum_arr.append(sum)",
 "import functools\ncum_arr = functools.reduce(lambda a, x: a + [x + a[-1]], array, [0])[1:]",
 "temp = []\ncount = 0\nfor i in range(len(array)):\n    count += array[i]\n    temp.append(count)\ncum_arr = temp",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))] if len(array) > 0 else []",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = cum_arr.tolist()",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = list(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum\ncum_arr = [float(x) for x in cum_arr]",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum\ncum_arr = [float(x) for x in cum_arr]",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum) if len(array) > 0 else []",
 "import functools\ncum_arr = functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:] if len(array) > 0 else []",
 "import math\ncum_arr = [math.fsum(array[:i + 1]) for i in range(len(array))]",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))]).tolist()",
 "import numpy as np\nsum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])\ncum_arr = sum_arr.tolist()",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)\n    cum_arr = cum_arr[:i + 1]",
 "import itertools\ndef accumulate(iterable):\n    total = 0\n    for item in iterable:\n        total += item\n        yield total\ncum_arr = list(accumulate(array))",
 "import statistics\ncum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(statistics.mean([sum]))",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum = sum + array[i]\n    cum_arr.append(sum)",
 "import functools\ncum_arr = functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
 "import statistics\ncum_arr = []\nsum = 0\nfor (i, value) in enumerate(array):\n    sum += value\n    cum_arr.append(statistics.mean([sum]))",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])\n    cum_arr[i] = sum(array[:i + 1])",
 "arr = list(array)\ncum_arr = []\ncumulative_sum = 0\nfor i in range(len(arr)):\n    cumulative_sum += arr[i]\n    cum_arr.append(cumulative_sum)",
 "count = 0\nnew_arr = []\nfor i in range(len(array)):\n    count += array[i]\n    new_arr.append(count)\ncum_arr = new_arr",
 "count = 0\nnew_arr = []\nfor i in array:\n    count += i\n    new_arr.append(count)\ncum_arr = new_arr",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr = cum_arr[1:]",
 "cum_arr = [0]\nindex = 0\nfor value in array:\n    cum_arr.append(cum_arr[index] + value)\n    index += 1\ncum_arr = cum_arr[1:]",
 "import math\ncum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
 "import itertools\narray_length = len(array)\ncum_arr = [sum(array[:i + 1]) for i in range(array_length)]",
 "array_length = len(array)\ncum_arr = []\nfor i in range(array_length):\n    cum_arr.append(sum(array[:i + 1]))",
 "array_length = len(array)\ncum_arr = []\nsum = 0\nfor i in range(array_length):\n    sum += array[i]\n    cum_arr.append(sum)",
 "import statistics\narray_length = len(array)\ncum_arr = []\nsum = 0\nfor i in range(array_length):\n    sum += array[i]\n    cum_arr.append(statistics.median_low([sum]))",
 "arr_sum = sum(array)\ncum_arr = [sum(array[:i + 1]) for i in range(len(array))]"
]