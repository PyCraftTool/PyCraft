[
 "import numpy as np\nstring = np.array(values).tolist()",
 "string = '[' + ', '.join((str(x) for x in values)) + ']'",
 "import math\nstring = '[' + ', '.join((str(math.floor(x)) for x in values)) + ']'",
 "import numpy as np\nstring = np.array(values)",
 "string = '[' + ', '.join(map(str, values)) + ']'",
 "import numpy as np\nstring = np.array(list(map(str, values))).tolist()",
 "string = ', '.join([str(x) for x in values])",
 "string = str(values)",
 "import numpy as np\nstring = list(np.array(values))",
 "string = [str(value) for value in values]",
 "string = list(map(str, values))",
 "string = [str(value) for value in values if isinstance(value, str)]",
 "string = list(filter(lambda x: isinstance(x, str), values))",
 "string = [str(value) for value in values if type(value) == str]",
 "string = [str(value) for value in values if type(value) is str]",
 "string = [str(value) for value in values if str(type(value)) == \"<class 'str'>\"]",
 "string = [str(value) for value in values if str(type(value)) == \"<class '__main__.str'>\"]",
 "string = list(values)",
 "string = []\nfor value in values:\n    string.append(str(value))",
 "import numpy as np\nstring = np.array([str(value) for value in values]).tolist()",
 "string = []\nfor value in values:\n    string.append(value)\nstring = list(map(str, string))",
 "string = '[' + ', '.join([str(x) for x in values]) + ']'",
 "import numpy as np\nstring = np.array2string(np.array(values), separator=', ', formatter={'str_kind': lambda x: '[' + x + ']'})",
 "import numpy as np\nstring = np.array_str(np.array(values), max_line_width=float('inf'), suppress_small=True)",
 "import numpy as np\nstring = np.array_repr(np.array(values))",
 "import numpy as np\nstring = np.char.join(', ', values)",
 "import numpy as np\nstring = np.array(values).flatten().tolist()",
 "import math\nstring = math.sqrt(len(values))",
 "import statistics\nstring = statistics.mean(values)",
 "import numpy as np\nstring = '[' + np.array(values).astype(str).tolist() + ']'",
 "import numpy as np\nstring = '[' + np.array(values).astype(str).tolist().join(', ') + ']'",
 "from math import floor\nstring = '[' + ', '.join((str(floor(float(x))) for x in values)) + ']'",
 "import math\nstring = '[' + ', '.join([str(math.floor(x)) for x in values]) + ']'",
 "import math\nstring = '[' + ', '.join(map(str, map(math.floor, values))) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.floor(values).astype(str)) + ']'",
 "import math\nstring = '[' + ', '.join([str(math.floor(float(x))) for x in values]) + ']'",
 "from math import floor\nstring = '[' + ', '.join([str(floor(x)) for x in values]) + ']'",
 "import numpy as np\nstring = np.asarray(values)",
 "string = values",
 "import numpy as np\nstring = np.array(list(values))",
 "from numpy import array\nstring = array(values)",
 "import numpy as np\nstring = np.array([str(i) for i in values])",
 "import numpy as np\nstring = np.array([str(i) for i in values], dtype=str)",
 "import numpy as np\nstring = np.array(list(map(str, values)))",
 "import pandas as pd\nstring = pd.Series(values)",
 "import torch\nstring = torch.tensor(values)",
 "import math\nstring = '[' + ', '.join(map(lambda x: str(math.sqrt(x)), values)) + ']'",
 "string = '[' + ', '.join(map(lambda x: str(x).upper(), values)) + ']'",
 "string = '[' + ', '.join(list(map(str, values))) + ']'",
 "import numpy as np\nstring = np.array(values).astype(str).tolist()",
 "import numpy as np\nstring = np.array(values, dtype=str).tolist()",
 "from itertools import chain\nstring = '[' + ', '.join(chain.from_iterable(map(str, values))) + ']'",
 "string = '[' + ', '.join(['{}'.format(value) for value in values]) + ']'",
 "import itertools\nstring = '[' + ', '.join(itertools.chain.from_iterable(zip(values, [', '] * (len(values) - 1)))) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values)) + ']'",
 "import statistics\nstring = '[' + ', '.join([str(round(value, 2)) for value in values]) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.hstack(values)) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.ravel(values)) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.concatenate(values, axis=None)) + ']'",
 "from functools import reduce\nstring = reduce(lambda x, y: x + y, values)",
 "string = ', '.join((str(x) for x in values))",
 "string = [value for value in values]",
 "string = []\nfor value in values:\n    string.append(value)",
 "string = []\nfor index in range(len(values)):\n    string.append(str(values[index]))",
 "string = []\nfor index in range(len(values)):\n    string.append(values[index])",
 "string = []\nfor (index, value) in enumerate(values):\n    string.append(str(value))",
 "string = []\nfor (index, value) in enumerate(values):\n    string.append(value)",
 "string = [value for value in values if isinstance(value, str)]",
 "string = [value for value in values if type(value) == str]",
 "string = [str(value) for value in values if isinstance(value, str) or type(value) == str]",
 "string = [value for value in values if isinstance(value, str) or type(value) == str]",
 "string = [str(value) for value in values if isinstance(value, str) and type(value) == str]",
 "string = [value for value in values if isinstance(value, str) and type(value) == str]",
 "string = [str(value) for value in values if isinstance(value, str) or isinstance(value, str)]",
 "string = [value for value in values if isinstance(value, str) or isinstance(value, str)]",
 "string = [str(value) for value in values if isinstance(value, str) and isinstance(value, str)]",
 "string = [value for value in values if isinstance(value, str) and isinstance(value, str)]",
 "import copy\nstring = copy.deepcopy(values)",
 "string = values.copy()",
 "string = values[:]",
 "string = [str(value) if isinstance(value, str) else value for value in values]",
 "string = list(map(lambda x: str(x), values))",
 "string = [str(x) if isinstance(x, str) else str(x) for x in values]",
 "string = [str(x) for x in values if isinstance(x, str) or isinstance(x, int) or isinstance(x, float)]",
 "string = [str(x) for x in values if isinstance(x, str) or isinstance(x, int) or isinstance(x, float) or isinstance(x, bool)]",
 "string = [str(value) for value in values if isinstance(value, str) and len(value) > 0]",
 "string = [str(value) for value in values if isinstance(value, str) and len(value) > 0 and value.isalpha()]",
 "string = [str(value) for value in values if isinstance(value, str) and len(value) > 0 and value.isalpha() and value.islower()]",
 "string = [str(value) for value in values if isinstance(value, str) and len(value) > 0 and value.isalpha() and value.islower() and value.startswith('a')]",
 "string = [str(value) for value in values if isinstance(value, str) and len(value) > 0 and value.isalpha() and value.islower() and value.startswith('a') and value.endswith('z')]",
 "string = [str(value) for value in values if isinstance(value, str) and len(value) > 0 and value.isalpha() and value.islower() and value.startswith('a') and value.endswith('z') and (len(value) == 3)]",
 "string = [str(value) for value in values if isinstance(value, str) and len(value) > 0 and value.isalpha() and value.islower() and value.startswith('a') and value.endswith('z') and (len(value) == 3) and (value[1] == 'b')]",
 "string = values[0:len(values)]",
 "string = [values[i] for i in range(len(values))]",
 "string = [values[i] for i in range(len(values))] if len(values) > 0 else []",
 "string = [values[i] for i in range(len(values))] if values else []",
 "string = [value for value in values] if values else []",
 "string = [value for value in values] if len(values) > 0 else []",
 "string = []\nindex = 0\nwhile index < len(values):\n    string.append(str(values[index]))\n    index += 1",
 "import numpy as np\nstring = np.array(values)[np.array([isinstance(value, str) for value in values])].tolist()",
 "string = []\nfor value in values:\n    if isinstance(value, str):\n        string.append(str(value))",
 "import itertools\nstring = list(itertools.compress(values, [isinstance(value, str) for value in values]))",
 "import functools\nstring = functools.reduce(lambda x, y: x + [str(y)] if isinstance(y, str) else x, values, [])",
 "string = []\nfor value in values:\n    if isinstance(value, str):\n        string.append(value)",
 "import itertools\nstring = list(itertools.filterfalse(lambda x: not isinstance(x, str), values))",
 "import functools\nstring = functools.reduce(lambda x, y: x + [y] if isinstance(y, str) else x, values, [])",
 "import numpy as np\nstring = np.array([value for value in values if isinstance(value, str)])",
 "import numpy as np\nstring = np.array(values)[np.array([type(value) == str for value in values])].tolist()",
 "string = []\nfor value in values:\n    if type(value) == str:\n        string.append(str(value))",
 "import itertools\nstring = list(itertools.compress(values, [type(value) == str for value in values]))",
 "import functools\nstring = functools.reduce(lambda x, y: x + [str(y)] if type(y) == str else x, values, [])",
 "string = []\nfor value in values:\n    if type(value) == str:\n        string.append(value)",
 "import itertools\nstring = list(itertools.filterfalse(lambda x: type(x) != str, values))",
 "import functools\nstring = functools.reduce(lambda acc, x: acc + [x] if type(x) == str else acc, values, [])",
 "import statistics\nstring = statistics.mode([value for value in values if type(value) == str])",
 "import numpy as np\nstring = np.array(values, dtype=str)[np.array([isinstance(value, str) or type(value) == str for value in values])]",
 "string = []\nfor value in values:\n    if isinstance(value, str) or type(value) == str:\n        string.append(str(value))",
 "import itertools\nstring = list(itertools.filterfalse(lambda x: not isinstance(x, str) and type(x) != str, values))",
 "import functools\nstring = functools.reduce(lambda acc, value: acc + [str(value)] if isinstance(value, str) or type(value) == str else acc, values, [])",
 "import numpy as np\nstring = np.array(values)\nstring = string[np.logical_or(np.array([isinstance(value, str) for value in string]), np.array([type(value) == str for value in string]))]",
 "string = []\nfor value in values:\n    if isinstance(value, str) or type(value) == str:\n        string.append(value)",
 "import itertools\nstring = list(itertools.filterfalse(lambda value: not isinstance(value, str) and type(value) != str, values))",
 "import functools\nstring = functools.reduce(lambda acc, value: acc + [value] if isinstance(value, str) or type(value) == str else acc, values, [])",
 "import numpy as np\nstring = np.array([value for value in values if isinstance(value, str) or type(value) == str])",
 "from functools import reduce\nstring = reduce(lambda x, y: x + ', ' + y, map(str, values))",
 "import numpy as np\ndata = np.array(values)\nstring = np.array2string(data, separator=', ', formatter={'str_kind': lambda x: '+x+'})",
 "string = '[ + , .join(values) + ]'",
 "count = ''\nfor value in values:\n    count += str(value)\nstring = '[' + count + ']'",
 "import functools\ncount = functools.reduce(lambda x, y: x + ', ' + y, map(str, values))\nstring = '[' + count + ']'",
 "import numpy as np\nstring = np.asarray(values).tolist()",
 "from numpy import array\nstring = array(values).tolist()",
 "import numpy\ndef numpy_to_list(itr):\n    return numpy.array(itr).tolist()\nstring = numpy_to_list(values)",
 "import numpy as np\nstring = '[' + ', '.join((str(value) for value in values)) + ']'\nstring = np.array(values)",
 "string = '[' + ', '.join(map(str, values)) + ']'\nstring = list(string)",
 "string = '['\nfor value in values:\n    string += str(value) + ', '\nstring = string[:-2] + '\\\\]'",
 "import statistics\nstring = '[' + ', '.join(statistics.mode(values)) + ']'",
 "from numpy import asarray\nstring = asarray(['[' + ', '.join([str(value) for value in values]) + ']'])",
 "string = ' '.join((str(x) for x in values))",
 "string = ' '.join(map(str, values))",
 "import pandas as pd\nstring = pd.Series(values).astype(str)",
 "import numpy as np\nstring = np.array2string(np.array(values), separator=' ')",
 "import functools\nstring = functools.reduce(lambda x, y: x + ', ' + y, map(str, values))",
 "import functools\nstring = ', '.join(map(str, values))",
 "import functools\nstring = functools.reduce(lambda a, b: a + b, values)",
 "output = []\nfor value in values:\n    output.append(str(value))\nstring = ', '.join(output)",
 "import math\nstring = math.prod([int(i) for i in values])",
 "data = [str(x) for x in values]\nstring = ', '.join(data)",
 "data = list(map(str, values))\nstring = ', '.join(data)",
 "import numpy as np\nstring = np.array(values).tolist()\nstring = ['['] + string",
 "import numpy as np\nstring = np.array(values).tolist()\nstring.append('[')",
 "new_string = '[' + ' ,'.join(map(str, values)) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: str(a) + ', ' + str(b), values) + ']'",
 "string = '['\nfor value in values:\n    string += str(value) + ', '\nstring = string[:-2] + ']'",
 "string = '['\ntemp = ', '.join(map(str, values))\nstring += temp\nstring = string + ']'",
 "import numpy as np\ncount = np.array(values)[:, None]",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + y, map(str, values)) + ']'",
 "import numpy as np\ncount = np.array_str(np.array(values))\nstring = f'[{count[1:-1]}]'",
 "count = ', '.join(map(str, values))\nstring = '[' + count + ']'",
 "string = '[' + ', '.join(map(lambda x: str(x), values)) + ']'",
 "import statistics\nstring = '[' + ', '.join([str(statistics.median([int(x) for x in values]))]) + ']'",
 "import numpy as np\nstring = np.array([int(x) for x in values])",
 "string = [str(value) if isinstance(value, str) else '' for value in values]",
 "string = [str(value) if isinstance(value, str) else str(value) for value in values if value is not None]",
 "string = [str(value) if isinstance(value, str) else str(value) for value in values if value is not None and value != '']",
 "string = [str(value) if isinstance(value, str) else str(value) for value in values if value is not None and value != '' and (value != ' ')]",
 "import numpy as np\nstring = np.stack(values)",
 "import numpy as np\nstring = np.vstack(values)",
 "import numpy as np\nstring = np.hstack(values)",
 "import numpy as np\nstring = np.append([], values)",
 "import numpy as np\nstring = np.insert([], 0, values)",
 "import numpy as np\nstring = np.resize([], len(values))\nstring[:] = values",
 "import numpy as np\nstring = np.zeros(len(values), dtype=str)\nstring[:] = values",
 "import numpy as np\nstring = np.full(len(values), '', dtype=str)\nstring[:] = values",
 "import numpy as np\nstring = np.empty(len(values), dtype=str)\nstring[:] = values",
 "import numpy as np\nstring = np.array(values, dtype=str)",
 "import numpy as np\nstring = np.array(list(values), dtype=str)",
 "import numpy as np\nstring = np.array(tuple(values), dtype=str)",
 "import numpy as np\nstring = np.array(set(values), dtype=str)",
 "import numpy as np\nstring = np.array(dict.fromkeys(values), dtype=str)",
 "import numpy as np\nstring = np.array(np.unique(values), dtype=str)",
 "import numpy as np\nstring = np.array(np.repeat(values, 1), dtype=str)",
 "import numpy as np\nstring = np.array(np.tile(values, 1), dtype=str)",
 "import numpy as np\nstring = np.array(np.full_like(values, '', dtype=str), dtype=str)",
 "import numpy as np\nstring = np.array(np.zeros_like(values, dtype=str), dtype=str)",
 "import numpy as np\nstring = np.array(np.empty_like(values, dtype=str), dtype=str)",
 "import numpy as np\nstring = np.array(np.array(values, dtype=str), dtype=str)",
 "import numpy as np\nstring = np.array(np.asarray(values, dtype=str), dtype=str)",
 "import numpy as np\nstring = np.array(np.stack(values), dtype=str)",
 "import numpy as np\nstring = np.array(np.vstack(values), dtype=str)",
 "import numpy as np\nstring = np.array(np.hstack(values), dtype=str)",
 "import numpy as np\nstring = np.array(np.append([], values), dtype=str)",
 "import numpy as np\nstring = np.array(np.insert([], 0, values), dtype=str)",
 "import numpy as np\nstring = np.array(map(str, values))",
 "import numpy as np\nstring = np.array(tuple(map(str, values)))",
 "import numpy as np\nstring = np.array(np.char.mod('%s', values))",
 "import numpy as np\nstring = np.array(np.char.add('', values))",
 "import numpy as np\nstring = np.array(np.char.mod('%s', np.array(values)))",
 "import numpy as np\nstring = np.array(np.char.add('', np.array(values)))",
 "import numpy as np\nstring = np.array(np.char.mod('%s', np.asarray(values)))",
 "import numpy as np\nstring = np.array(np.char.add('', np.asarray(values)))",
 "import numpy as np\nstring = np.array(np.char.mod('%s', np.array(map(str, values))))",
 "import statistics\nstring = '[' + ', '.join([str(statistics.median([float(x) for x in values]))]) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.char.mod('%d', values)) + ']'",
 "import numpy as np\nstring = np.array2string(np.array(values), separator=', ', formatter={'str_kind': lambda x: ' + x + '})[1:-1]",
 "import numpy as np\nstring = np.array2string(np.array(values), separator=', ')",
 "import math\nstring = '[' + ', '.join(map(lambda x: str(math.floor(x)), values)) + ']'",
 "import math\nstring = '[' + ', '.join([str(int(math.floor(x))) for x in values]) + ']'",
 "import math\nstring = '[' + ', '.join([str(int(math.floor(float(x)))) for x in values]) + ']'",
 "import math\nstring = '[' + ', '.join([str(int(math.floor(float(x)))) for x in values if isinstance(x, (int, float))]) + ']'",
 "import math\nstring = '[' + ', '.join([str(int(math.floor(float(x)))) for x in values if isinstance(x, (int, float))]) + ']' if values else '[]'",
 "import math\nstring = '[' + ', '.join([str(int(math.floor(float(x)))) for x in values if isinstance(x, (int, float))]) + ']' if values is not None else '[]'",
 "import math\nstring = '[' + ', '.join([str(int(math.floor(float(x)))) for x in values if isinstance(x, (int, float))]) + ']' if values is not None and len(values) > 0 else '[]'",
 "import math\nstring = '[' + ', '.join([str(int(x)) for x in values]) + ']'",
 "import math\nstring = '[' + ', '.join(map(str, map(int, values))) + ']'",
 "import math\nstring = '[' + ', '.join(map(lambda x: str(int(x)), values)) + ']'",
 "import math\nstring = '[' + ', '.join([str(round(x)) for x in values]) + ']'",
 "import math\nstring = '[' + ', '.join(map(lambda x: str(round(x)), values)) + ']'",
 "import math\nstring = '[' + ', '.join([str(math.trunc(x)) for x in values]) + ']'",
 "import math\nstring = '[' + ', '.join(map(str, map(math.trunc, values))) + ']'",
 "import math\nstring = '[' + ', '.join(map(lambda x: str(math.trunc(x)), values)) + ']'",
 "import itertools\nstring = list(itertools.chain.from_iterable([[str(value), ', '] for value in values]))[:-1]",
 "import functools\nstring = functools.reduce(lambda a, b: a + ', ' + b, map(str, values))",
 "import functools\nstring = functools.reduce(lambda x, y: x + y, values)",
 "import numpy as np\nstring = np.hstack(values).tolist()",
 "import numpy as np\nstring = np.array(values).ravel().tolist()",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values).astype(str)) + ']'",
 "import functools\nstring = '[' + ', '.join(functools.reduce(lambda x, y: x + ', ' + y, map(str, values))) + ']'",
 "import itertools\nstring = '[' + ', '.join(list(itertools.chain.from_iterable(map(str, values)))) + ']'",
 "import itertools\nstring = list(itertools.chain.from_iterable(([str(x), ', '] for x in values)))",
 "import math\nstring = '['\nfor x in values:\n    string += str(math.floor(x))\n    if x != values[-1]:\n        string += ', '\nstring += ']'",
 "import math\nstring = '['\nfor i in range(len(values)):\n    string += str(math.floor(values[i]))\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
 "import math\nstring = '['\nfor (i, x) in enumerate(values):\n    string += str(math.floor(x))\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
 "import math\nstring = '['\nfor x in values:\n    string += str(math.floor(x))\n    string += ', '\nstring = string[:-2] + ']'",
 "string = '[' + ', '.join(map(str, [int(x) for x in values])) + ']'",
 "string = '[' + ', '.join([str(sorted([int(x) for x in values])[len(values) // 2])]) + ']'",
 "string = '[' + ', '.join([str(sorted([int(x) for x in values])[int(len(values) / 2)])]) + ']'",
 "string = '[' + ', '.join([str(sum([int(x) for x in values]) / len(values))]) + ']'",
 "import math\nstring = '[' + ', '.join([str(math.fsum([int(x) for x in values]) / len(values))]) + ']'",
 "from itertools import groupby\nstring = '[' + ', '.join([str(next(group)) for (key, group) in groupby(sorted([int(x) for x in values]))]) + ']'",
 "import math\nstring = '[' + ', '.join([str(math.floor(sum([int(x) for x in values]) / len(values)))]) + ']'",
 "import numpy as np\nstring = np.array(list(map(lambda x: int(x), values)))",
 "import numpy as np\nstring = np.array(list(map(int, list(values))))",
 "import numpy as np\nstring = np.array(list(map(int, [x for x in values])))",
 "import numpy as np\nstring = np.array([int(x) for x in list(values)])",
 "import math\nstring = [str(math.floor(value)) for value in values]",
 "import statistics\nstring = [str(statistics.mean(values)) for value in values]",
 "import numpy as np\nstring = np.char.mod('%s', values)",
 "import statistics\nstring = '[{}]'.format(statistics.mean(values))",
 "import itertools\nstring = list(itertools.chain(values))",
 "import math\nstring = [str(math.floor(float(value))) for value in values]",
 "import statistics\nstring = [str(statistics.mean([float(value) for value in values]))]",
 "import numpy as np\nstring = np.asarray(values, dtype=object)",
 "string = list((str(value) for value in values))",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values).flatten()) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(list(values)).flatten()) + ']'",
 "import numpy as np\nstring = np.asarray(values, dtype=str).tolist()",
 "import itertools\nstring = list(itertools.chain.from_iterable(map(str, values)))",
 "import numpy as np\nstring = list(np.array(values, dtype=str))",
 "import numpy as np\nstring = [str(x) for x in np.array(values)]",
 "import numpy as np\nstring = np.array(values).astype(str).tolist()\nstring = ', '.join(string)",
 "string = '[{}]'.format(sum(values) / len(values))",
 "import math\nstring = '[{}]'.format(math.fsum(values) / len(values))",
 "string = '[{}]'.format(sum([int(value) for value in values]) / len(values))",
 "import functools\nstring = '[{}]'.format(functools.reduce(lambda x, y: x + y, values) / len(values))",
 "import itertools\nstring = '[{}]'.format(next(itertools.islice(values, len(values) - 1, len(values))) / len(values))",
 "import numpy as np\nstring = '[{}]'.format(np.median(values))",
 "import math\nstring = '[{}]'.format(sorted(values)[len(values) // 2])",
 "string = '[{}]'.format(sorted([int(value) for value in values])[len(values) // 2])",
 "import numpy as np\nstring = '[{}]'.format(np.mean(sorted(values)[::-1]))",
 "import statistics\nstring = '[{}]'.format(statistics.fmean(sorted(values)[::-1]))",
 "import math\nstring = '[{}]'.format(sum(sorted(values, reverse=True)) / len(values))",
 "string = '[{}]'.format(sum([int(value) for value in sorted(values, reverse=True)]) / len(values))",
 "import functools\nstring = functools.reduce(lambda x, y: x + ', ' + y, map(str, values), '[') + ']'",
 "import numpy as np\nstring = str(list(values))",
 "import numpy as np\nstring = '[' + ', '.join(np.array(list(map(str, values)))) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values, dtype=str)) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values, dtype='str')) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.asarray(values)) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.hstack(values).astype(str)) + ']'"
]