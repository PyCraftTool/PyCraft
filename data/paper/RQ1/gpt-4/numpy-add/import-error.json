[
 "\nresult = list(np.add(array1, array2))\nsum_of_elements = list(np.add(array1, array2))",
 "\ndot_prod = list(np.add(array1, array2))",
 "\nresult = []\nfor (a, b) in itertools.zip_longest(array1, array2, fillvalue=0):\n    result.append(a + b)",
 "\narray1 = map(np.int, array1)\narray2 = map(np.int, array2)\ndot_prod = list(map(lambda x, y: x * y, array1, array2))\nresult = sum(list(dot_prod))",
 "\n(array1, array2) = list(map(np.array, (array1, array2)))\nresult = list(array1 + array2)",
 "\n(array1, array2) = [np.array(x) for x in (array1, array2)]\nresult = [sum(x) for x in zip(array1, array2)]",
 "\ndot_prod = np.dot(array1, array2)",
 "\nresult = np.sum([array1, array2], axis=0).tolist()",
 "from itertools import starmap\nresult = list(starmap(operator.add, zip(array1, array2)))",
 "from functools import reduce\nresult = reduce(lambda x, y: list(map(operator.add, x, y)), [array1, array2])",
 "\ndot_prod = []\nfor i in range(len(array1)):\n    dot_prod.append(array1[i] + array2[i])\ndot_prod = np.array(dot_prod)",
 "\ndot_prod = [x + y for (x, y) in zip(array1, array2)]\ndot_prod = np.array(dot_prod)",
 "import operator\nimport functools\nimport itertools\ndot_prod = list(map(operator.add, array1, array2))\ndot_prod = np.array(dot_prod)",
 "import functools\nresult = list(map(functools.partial(operator.add), array1, array2))\nsum_of_elements = result[-1]",
 "import itertools\nresult = list(map(operator.add, itertools.chain(array1), itertools.chain(array2)))\nsum_of_elements = result[-1]",
 "\ndot_prod = [array1[i] + array2[i] for i in range(len(array1))]\ndot_prod = np.array(dot_prod)",
 "\ndot_prod = []\nfor (a, b) in zip(array1, array2):\n    dot_prod.append(a + b)\ndot_prod = np.array(dot_prod)",
 "from operator import add\ndot_prod = list(map(add, array1, array2))\ndot_prod = np.array(dot_prod)",
 "\ndot_prod = [sum(t) for t in zip(array1, array2)]\ndot_prod = np.array(dot_prod)",
 "import itertools\ndot_prod = list(itertools.starmap(operator.add, zip(array1, array2)))\ndot_prod = np.array(dot_prod)",
 "from itertools import starmap\nresult = list(starmap(operator.add, zip(array1, array2)))\nsum_of_elements = result[-1]",
 "import itertools\ndot_prod = sum(itertools.starmap(operator.add, zip(array1, array2)))",
 "\ndot_prod = sum(np.concatenate((array1, array2)).tolist())",
 "import operator\nresult = reduce(operator.add, zip(array1, array2))",
 "\nsum_of_elements = 0\nfor i in range(len(array1)):\n    sum_of_elements += array1[i] + array2[i]\n    result.append(sum_of_elements)\nsum_of_elements = result[-1]",
 "import functools\nresult = list(map(lambda x, y: x + y, itertools.zip_longest(array1, array2, fillvalue=0)))\nsum_of_elements = result[-1]",
 "import operator\nresult = list(map(operator.add, itertools.zip_longest(array1, array2, fillvalue=0)))\nsum_of_elements = result[-1]",
 "\ndot_prod = list(np.array(array1).__add__(np.array(array2)))",
 "import functools\nresult = list(map(functools.partial(add), array1, array2))\nsum_of_elements = result[-1]",
 "import functools\ndot_prod = list(map(functools.partial(operator.add), array1, array2))",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\nsum_of_elements = functools.reduce(lambda a, b: a + b, result)"
]