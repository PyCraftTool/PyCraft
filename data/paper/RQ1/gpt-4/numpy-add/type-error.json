[
 "(sum_of_elements, result) = (0, [])\nfor (num1, num2) in zip(array1, array2):\n    sum_of_elements += num1 + num2\n    result.append(num1 + num2)",
 "import operator\nresult = list(map(operator.add, array1, array2))\nsum_of_elements = sum(result)",
 "result = [x + y for (x, y) in zip(array1, array2)]\nsum_of_elements = sum(result)",
 "dot_prod = list(map(lambda x, y: x + y, array1, array2))",
 "result = list(map(lambda x, y: x + y, array1, array2))\nsum_of_elements = list(map(lambda x, y: x + y, array1, array2))",
 "result = [sum(x) for x in zip(array1, array2)]\nsum_of_elements = [sum(x) for x in zip(array1, array2)]",
 "import itertools\nresult = [x + y for (x, y) in itertools.zip_longest(array1, array2, fillvalue=0)]",
 "result = [x + y for (x, y) in zip(array1, array2)]",
 "import operator\nresult = list(map(operator.add, array1, array2))",
 "import numpy as np\nresult = [ele1 + ele2 for (ele1, ele2) in zip(array1, array2)]\nsum_of_elements = np.sum(result)",
 "import numpy as np\nresult = [sum(x) for x in zip(array1, array2)]\nsum_of_elements = sum(result)",
 "import numpy as np\nresult = [x + y for (x, y) in zip(array1, array2)]\nsum_of_elements = np.add.reduce(result)",
 "import numpy as np\n(result, sum_of_elements) = ([], 0)\nfor (a, b) in zip(array1, array2):\n    sum_ab = a + b\n    result.append(sum_ab)\n    sum_of_elements += sum_ab",
 "result = list(map(lambda x, y: x + y, array1, array2))\nsum_of_elements = sum(result)",
 "sum_of_elements = 0\nresult = list()\nfor (val1, val2) in zip(array1, array2):\n    sum_of_values = val1 + val2\n    result.append(sum_of_values)\n    sum_of_elements += sum_of_values",
 "import functools\nsum_of_elements = functools.reduce(lambda a, b: a + b, [sum(x) for x in zip(array1, array2)])\nresult = [sum(x) for x in zip(array1, array2)]",
 "import operator\nsum_of_elements = sum(map(operator.add, array1, array2))\nresult = list(map(operator.add, array1, array2))",
 "import itertools\nsum_of_elements = sum(itertools.starmap(int.__add__, zip(array1, array2)))\nresult = list(itertools.starmap(int.__add__, zip(array1, array2)))",
 "sum_of_elements = sum(map(lambda x, y: x + y, array1, array2))\nresult = list(map(lambda x, y: x + y, array1, array2))",
 "from operator import add\nresult = [add(one, two) for (one, two) in zip(array1, array2)]\nsum_of_elements = sum(result)",
 "from functools import reduce\nresult = list(map(lambda x, y: x + y, array1, array2))\nsum_of_elements = reduce(lambda a, b: a + b, result)",
 "import functools\nresult = [x + y for (x, y) in zip(array1, array2)]\nsum_of_elements = functools.reduce(lambda a, b: a + b, result)",
 "import itertools as it\nresult = list(it.starmap(lambda x, y: x + y, zip(array1, array2)))\nsum_of_elements = sum(result)",
 "result = []\nfor (x, y) in zip(array1, array2):\n    temp = x + y\n    result.append(temp)\nsum_of_elements = sum(result)",
 "import itertools\nresult = [sum(x) for x in itertools.zip_longest(array1, array2, fillvalue=0)]\nsum_of_elements = sum(result)",
 "result = []\nsum_of_elements = 0\nfor (n, m) in zip(array1, array2):\n    result.append(n + m)\n    sum_of_elements += n + m",
 "from itertools import starmap\ndot_prod = list(starmap(lambda x, y: x + y, zip(array1, array2)))",
 "dot_prod = [sum(x) for x in zip(array1, array2)]",
 "dot_prod = [i for i in map(lambda x, y: x + y, array1, array2)]",
 "dot_prod = list(map(sum, zip(array1, array2)))",
 "dot_prod = []\nfor (v1, v2) in zip(array1, array2):\n    dot_prod.append(v1 + v2)",
 "import itertools as it\ndot_prod = [sum(x) for x in it.zip_longest(array1, array2, fillvalue=0)]",
 "from operator import add\nresult = list(map(add, array1, array2))\nsum_of_elements = list(map(add, array1, array2))",
 "result = list()\nsum_of_elements = list()\nfor (x, y) in zip(array1, array2):\n    result.append(x + y)\n    sum_of_elements.append(x + y)",
 "result = [x + y for (x, y) in zip(array1, array2)]\nsum_of_elements = [x + y for (x, y) in zip(array1, array2)]",
 "import itertools\nresult = [sum(x) for x in itertools.zip_longest(array1, array2, fillvalue=0)]\nsum_of_elements = [sum(x) for x in itertools.zip_longest(array1, array2, fillvalue=0)]",
 "import operator\nresult = list(map(operator.add, array1, array2))\nsum_of_elements = list(map(operator.add, array1, array2))",
 "import pandas as pd\nresult = list(pd.Series(array1) + pd.Series(array2))\nsum_of_elements = list(pd.Series(array1) + pd.Series(array2))",
 "(result, sum_of_elements) = ([], [])\nfor (i, j) in zip(array1, array2):\n    result.append(i + j)\n    sum_of_elements.append(i + j)",
 "mapped = map(lambda x, y: x + y, array1, array2)\n(result, sum_of_elements) = (list(mapped), list(mapped))",
 "from itertools import starmap\nfrom operator import add\nresult = list(starmap(add, zip(array1, array2)))\nsum_of_elements = list(starmap(add, zip(array1, array2)))",
 "temp = list(zip(array1, array2))\nresult = [x[0] + x[1] for x in temp]\nsum_of_elements = [x[0] + x[1] for x in temp]",
 "from operator import add\nresult = list(map(add, array1, array2))\nsum_of_elements = [sum(arr) for arr in zip(array1, array2)]",
 "result = [array1[i] + array2[i] for i in range(min(len(array1), len(array2)))]\nresult += array1[len(array2):] if len(array1) > len(array2) else array2[len(array1):]",
 "result = []\nif len(array1) > len(array2):\n    (long_list, short_list) = (array1, array2)\nelse:\n    (long_list, short_list) = (array2, array1)\nfor i in range(len(short_list)):\n    result.append(long_list[i] + short_list[i])\nresult += long_list[i + 1:]",
 "ls = list(zip(array1, array2))\nresult = [x + y for (x, y) in ls]",
 "array1 = list(map(int, array1))\narray2 = list(map(int, array2))\ndot_prod = [a * b for (a, b) in zip(array1, array2)]\nresult = sum(dot_prod)",
 "dot_prod = 0\ndot_prod = sum((i * j for (i, j) in zip(array1, array2)))\nresult = dot_prod",
 "result = []\nfor (a1, a2) in zip(array1, array2):\n    sum_of_elements = a1 + a2\n    result.append(sum_of_elements)",
 "result = list(map(lambda a1, a2: a1 + a2, array1, array2))\nsum_of_elements = result[-1]",
 "import operator\nresult = list(map(operator.add, array1, array2))\nsum_of_elements = result[-1]",
 "import numpy as np\ndot_prod = array1 + array2",
 "import pandas as pd\ndf1 = pd.Series(array1)\ndf2 = pd.Series(array2)\ndot_prod = df1.add(df2).to_numpy()",
 "from operator import add\nresult = list(map(add, array1, array2))\nsum_of_elements = sum(result)",
 "import numpy as np\nresult = []\nfor (a, b) in zip(array1, array2):\n    result.append(a + b)\nsum_of_elements = sum(result)",
 "import numpy as np\nresult = [x + y for (x, y) in zip(array1, array2)]\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = list(map(lambda x, y: x + y, array1, array2))\nsum_of_elements = result[-1]",
 "result = [sum(x) for x in zip(array1, array2)]\nsum_of_elements = result[-1]",
 "from operator import add\nresult = list(map(add, array1, array2))\nsum_of_elements = result[-1]",
 "from itertools import starmap\nfrom operator import add\nresult = list(starmap(add, zip(array1, array2)))\nsum_of_elements = result[-1]",
 "from operator import add\nresult = list(map(add, array1, array2))",
 "import functools\nresult = [functools.reduce(lambda a, b: a + b, x) for x in zip(array1, array2)]",
 "result = []\nfor (i, j) in zip(array1, array2):\n    result.append(i + j)\nsum_of_elements = result[-1]",
 "result = list()\nfor (a1, a2) in zip(array1, array2):\n    result.append(a1 + a2)\nsum_of_elements = result[-1]",
 "import itertools\nresult = [sum(x) for x in itertools.zip_longest(array1, array2, fillvalue=0)]\nsum_of_elements = result[-1]",
 "from functools import reduce\nresult = reduce(lambda a, b: a + b, zip(array1, array2))\nsum_of_elements = result[-1]",
 "from functools import reduce\ndot_prod = reduce(lambda x, y: x + y, zip(array1, array2))",
 "import numpy as np\ndot_prod = np.array([a + b for (a, b) in zip(array1, array2)])",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.zeros_like(array1)\nfor i in range(len(array1)):\n    dot_prod[i] = array1[i] + array2[i]",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.zeros(len(array1))\nfor (i, (a, b)) in enumerate(zip(array1, array2)):\n    dot_prod[i] = a + b",
 "import numpy as np\ndot_prod = np.array(list(map(lambda x, y: x + y, array1, array2)))",
 "from itertools import starmap\ndot_prod = list(starmap(lambda a, b: a + b, zip(array1, array2)))",
 "from functools import reduce\ndot_prod = reduce(lambda a, b: a + b, zip(array1, array2))",
 "dot_prod = list(map(lambda a, b: a + b, array1, array2))",
 "result = [x + y for (x, y) in zip(array1, array2)]\nsum_of_elements = 0\nfor element in result:\n    sum_of_elements += element",
 "import numpy as np\nresult = [np.add(x, y) for (x, y) in zip(array1, array2)]\nsum_of_elements = np.sum(result)",
 "result = []\nfor (i, j) in zip(array1, array2):\n    result.append(i + j)\nsum_of_elements = 0\nfor i in result:\n    sum_of_elements += i",
 "import numpy as np\nresult = [sum(x) for x in zip(array1, array2)]\nsum_of_elements = np.sum(result)",
 "from functools import reduce\nresult = [reduce(lambda a, b: a + b, x) for x in zip(array1, array2)]\nsum_of_elements = sum(result)",
 "from itertools import starmap\nfrom operator import add\nresult = list(starmap(add, zip(array1, array2)))\nsum_of_elements = sum(result)",
 "import functools\nresult = list(map(lambda x, y: x + y, array1, array2))\nsum_of_elements = functools.reduce(lambda a, b: a + b, result)",
 "import functools\nimport operator\nresult = list(map(lambda x, y: functools.reduce(operator.add, (x, y)), array1, array2))\nsum_of_elements = sum(result)",
 "import functools\nresult = [functools.reduce(lambda a, b: a + b, x) for x in zip(array1, array2)]\nsum_of_elements = sum(result)",
 "from functools import reduce\nresult = [reduce(lambda x, y: x + y, pair) for pair in zip(array1, array2)]\nsum_of_elements = result[-1]",
 "import numpy as np\ndot_prod = np.sum(np.concatenate((array1, array2)))",
 "result = list(map(lambda a, b: a + b, array1, array2))\nsum_of_elements = result[-1]",
 "from itertools import starmap\nresult = list(starmap(lambda a, b: a + b, zip(array1, array2)))\nsum_of_elements = result[-1]",
 "from functools import reduce\nresult = [reduce(lambda a, b: a + b, pair) for pair in zip(array1, array2)]\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(max(len(array1), len(array2))):\n    sum = 0\n    if i < len(array1):\n        sum += array1[i]\n    if i < len(array2):\n        sum += array2[i]\n    result.append(sum)\nsum_of_elements = result[-1]",
 "result = []\ni = 0\nwhile True:\n    try:\n        result.append(array1[i] + array2[i])\n        i += 1\n    except IndexError:\n        break",
 "result = []\nsum_of_elements = 0\nfor (x, y) in zip(array1, array2):\n    sum_of_elements = x + y\n    result.append(sum_of_elements)",
 "dot_prod = sum([i * j for (i, j) in zip(array1, array2)])",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, map(operator.mul, array1, array2))",
 "dot_prod = sum([x + y for (x, y) in zip(array1, array2)])",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, [x + y for (x, y) in zip(array1, array2)])",
 "dot_prod = sum(map(lambda x, y: x + y, array1, array2))",
 "dot_prod = 0\nfor (x, y) in zip(array1, array2):\n    dot_prod += x + y",
 "dot_prod = sum((i * j for (i, j) in zip(array1, array2)))",
 "dot_prod = 0\nfor (i, j) in zip(array1, array2):\n    dot_prod += i * j",
 "from functools import reduce\nimport operator\ndot_prod = reduce(operator.add, map(operator.mul, array1, array2))",
 "import numpy as np\ndot_prod = np.add.reduce(array1 + array2)",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, map(operator.add, array1, array2))",
 "import numpy as np\ndot_prod = np.sum(np.append(array1, array2))",
 "import numpy as np\ndot_prod = np.sum(np.hstack((array1, array2)))",
 "import numpy as np\ndot_prod = np.sum(np.r_[array1, array2])",
 "dot_prod = sum(list(array1) + list(array2))",
 "dot_prod = 0\nfor i in array1:\n    dot_prod += i\nfor i in array2:\n    dot_prod += i",
 "from itertools import starmap\nresult = list(starmap(lambda x, y: x + y, zip(array1, array2)))\nsum_of_elements = result[-1]",
 "import functools\nresult = [functools.reduce(lambda a, b: a + b, x) for x in zip(array1, array2)]\nsum_of_elements = result[-1]",
 "from operator import add\nimport functools\nresult = list(map(add, array1, array2))\nsum_of_elements = functools.reduce(lambda a, b: a + b, result)",
 "result = [x[0] + x[1] for x in zip(array1, array2)]",
 "(result, dot_prod) = ([a + b for (a, b) in zip(array1, array2)], sum([a + b for (a, b) in zip(array1, array2)]))\nsum_of_elements = result[-1]",
 "dot_prod = 0\nresult = []\nfor (a, b) in zip(array1, array2):\n    sum_of_elements = a + b\n    dot_prod += sum_of_elements\n    result.append(sum_of_elements)",
 "import itertools\nresult = list(itertools.starmap(lambda a, b: a + b, zip(array1, array2)))\ndot_prod = sum(result)\nsum_of_elements = result[-1]",
 "import functools\nresult = list(map(functools.partial(sum, start=0), zip(array1, array2)))\ndot_prod = functools.reduce(lambda a, b: a + b, result)\nsum_of_elements = result[-1]",
 "import itertools\nresult = [sum(x) for x in itertools.zip_longest(array1, array2, fillvalue=0)]\ndot_prod = sum(result)\nsum_of_elements = result[-1]",
 "(result, dot_prod) = ([], 0)\nfor (num1, num2) in zip(array1, array2):\n    sum_of_elements = num1 + num2\n    result.append(sum_of_elements)\n    dot_prod = sum(result)",
 "array1 = [float(i) for i in array1]\narray2 = [float(i) for i in array2]\nresult = [array1[i] + array2[i] for i in range(len(array1))]",
 "import functools\nresult = list(map(functools.partial(sum), zip(array1, array2)))",
 "dot_prod = array1.copy()\ndot_prod = list(map(lambda x, y: x + y, dot_prod, array2))",
 "dot_prod = 0\nsum_of_elements = 0\nfor (a, b) in zip(array1, array2):\n    dot_prod = dot_prod + a * b\n    sum_of_elements = sum_of_elements + a + b\nresult = [dot_prod, sum_of_elements]",
 "result = list(map(lambda x: x[0] + x[1], zip(array1, array2)))",
 "import numpy as np\narray1_np = np.array(array1, dtype=np.float64)\narray2_np = np.array(array2, dtype=np.float64)\ndot_prod = array1_np + array2_np",
 "result = list(map(sum, zip(array1, array2)))\nsum_of_elements = sum(result)",
 "(result, sum_of_elements) = ([], 0)\nfor (a, b) in zip(array1, array2):\n    result.append(a + b)\n    sum_of_elements += a + b",
 "result = list(map(sum, zip(array1, array2)))\nsum_of_elements = result[-1]",
 "from operator import add\nimport itertools\ndot_prod = list(itertools.starmap(add, zip(array1, array2)))",
 "result = [x + y for (x, y) in zip(array1, array2)]\nif len(array1) > len(array2):\n    result.extend(array1[len(array2):])\nelse:\n    result.extend(array2[len(array1):])\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(max(len(array1), len(array2))):\n    if i < len(array1) and i < len(array2):\n        result.append(array1[i] + array2[i])\n    elif i < len(array1):\n        result.append(array1[i])\n    else:\n        result.append(array2[i])\nsum_of_elements = result[-1]",
 "result = [array1[i] + array2[i] if i < len(array1) and i < len(array2) else array1[i] if i < len(array1) else array2[i] for i in range(max(len(array1), len(array2)))]\nsum_of_elements = result[-1]",
 "from itertools import starmap\nfrom operator import add\ndot_prod = list(starmap(add, zip(array1, array2)))",
 "import numpy as np\ndot_prod = np.add.reduce(np.concatenate([array1, array2]))",
 "import operator\nimport numpy as np\ndot_prod = list(map(operator.add, np.array(array1), np.array(array2)))",
 "import operator\nimport itertools\ndot_prod = list(itertools.starmap(operator.add, zip(array1, array2)))",
 "import itertools as it\ndot_prod = list(map(sum, it.zip_longest(array1, array2, fillvalue=0)))",
 "dot_prod = array1.copy()\nfor (i, val) in enumerate(array2):\n    dot_prod[i] += val",
 "dot_prod = array1.copy()\ni = 0\nwhile i < len(array2):\n    dot_prod[i] += array2[i]\n    i += 1",
 "import functools\nresult = list(functools.reduce(lambda x, y: x + y, zip(array1, array2)))\nsum_of_elements = result[-1]",
 "from functools import reduce\nresult = reduce(lambda x, y: x + y, zip(array1, array2))\nsum_of_elements = result[-1]",
 "from functools import reduce\nresult = [reduce(lambda a, b: a + b, x) for x in zip(array1, array2)]",
 "import functools\nresult = list(functools.reduce(lambda a, b: a + b, zip(array1, array2)))\nsum_of_elements = result[-1]",
 "i = 0\nresult = []\nwhile True:\n    try:\n        result.append(array1[i] + array2[i])\n        i += 1\n    except IndexError:\n        break",
 "result = []\nfor i in range(max(len(array1), len(array2))):\n    sum = 0\n    if i < len(array1):\n        sum += array1[i]\n    if i < len(array2):\n        sum += array2[i]\n    result.append(sum)",
 "result = [array1[i] + array2[i] if i < len(array1) and i < len(array2) else array1[i] if i < len(array1) else array2[i] for i in range(max(len(array1), len(array2)))]",
 "import operator\nresult = list(map(operator.add, array1 + [0] * (len(array2) - len(array1)), array2 + [0] * (len(array1) - len(array2))))",
 "(result, sum_of_elements) = ([], 0)\nfor (a, b) in zip(array1, array2):\n    sum_of_elements = a + b\n    result.append(sum_of_elements)",
 "result = list(map(lambda a, b: a + b, array1, array2))\nsum_of_elements = sum(result)",
 "sum_of_elements = 0\nresult = []\nfor (a, b) in zip(array1, array2):\n    sum_of_elements = a + b\n    result.append(sum_of_elements)",
 "import functools\nresult = list(map(lambda a, b: a + b, array1, array2))\nsum_of_elements = functools.reduce(lambda a, b: a + b, result)",
 "import functools\nresult = list(map(functools.partial(sum, start=0), zip(array1, array2)))\nsum_of_elements = result[-1]",
 "result = [array1[i] + array2[i] for i in range(min(len(array1), len(array2)))]\nif len(array1) > len(array2):\n    result += array1[len(array2):]\nelif len(array2) > len(array1):\n    result += array2[len(array1):]\nsum_of_elements = result[-1]",
 "dot_prod = sum(array1) + sum(array2)",
 "result = []\nfor i in range(min(len(array1), len(array2))):\n    sum_of_elements = array1[i] + array2[i]\n    result.append(sum_of_elements)",
 "dot_prod = array1.copy()\ni = 0\nfor val in array2:\n    dot_prod[i] += val\n    i += 1",
 "from itertools import starmap\nresult = list(starmap(lambda a, b: a + b, zip(array1, array2)))\nsum_of_elements = sum(result)",
 "from functools import reduce\nresult = [a + b for (a, b) in zip(array1, array2)]\nsum_of_elements = reduce(lambda a, b: a + b, result)",
 "result = []\nsum_of_elements = 0\nfor (a, b) in zip(array1, array2):\n    temp = a + b\n    sum_of_elements = temp\n    result.append(temp)",
 "result = [array1[i] + array2[i] for i in range(min(len(array1), len(array2)))]\nif len(array1) > len(array2):\n    result += array1[len(array2):]\nelse:\n    result += array2[len(array1):]\nsum_of_elements = sum(result)",
 "result = []\nfor i in range(max(len(array1), len(array2))):\n    if i < len(array1) and i < len(array2):\n        result.append(array1[i] + array2[i])\n    elif i < len(array1):\n        result.append(array1[i])\n    else:\n        result.append(array2[i])\nsum_of_elements = sum(result)",
 "from operator import add\nresult = list(map(add, array1, array2)) + array1[len(array2):] + array2[len(array1):]\nsum_of_elements = sum(result)",
 "import operator\nimport functools\nresult = list(map(operator.add, array1, array2))\nsum_of_elements = functools.reduce(operator.add, result)",
 "result = []\nfor i in range(min(len(array1), len(array2))):\n    result.append(array1[i] + array2[i])\nif len(array1) > len(array2):\n    result += array1[len(array2):]\nelif len(array2) > len(array1):\n    result += array2[len(array1):]\nsum_of_elements = result[-1]",
 "result = [sum(x) for x in zip(array1, array2)]\nif len(array1) > len(array2):\n    result += array1[len(array2):]\nelif len(array2) > len(array1):\n    result += array2[len(array1):]\nsum_of_elements = result[-1]",
 "result = [sum(x) for x in zip(array1, array2)]\nextra = array1 if len(array1) > len(array2) else array2\nresult += extra[len(result):]\nsum_of_elements = result[-1]",
 "result = [array1[i] if i >= len(array2) else array1[i] + array2[i] for i in range(len(array1))]\nif len(array2) > len(array1):\n    result += array2[len(array1):]\nsum_of_elements = result[-1]"
]