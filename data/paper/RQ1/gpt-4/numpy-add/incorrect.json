[
 "import numpy as np\ndot_prod = np.add(array1, array2)",
 "import numpy as np\nresult = list(np.add(array1, array2))\nsum_of_elements = np.sum(result)",
 "dot_prod = [array1[i] + array2[i] for i in range(len(array1))]",
 "dot_prod = []\nfor i in range(len(array1)):\n    dot_prod.append(array1[i] + array2[i])",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = array1 + array2\nsum_of_elements = array1 + array2",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = list(array1 + array2)",
 "import numpy as np\nresult = list(np.add(array1, array2))\nsum_of_elements = sum(result)",
 "import numpy as np\nresult = []\nfor i in range(0, len(array1)):\n    result.append(array1[i] + array2[i])\nsum_of_elements = np.sum(result)",
 "import numpy as np\nfrom functools import reduce\nresult = list(np.add(array1, array2))\nsum_of_elements = reduce(lambda x, y: x + y, result)",
 "import numpy as np\narray1_np = np.array(array1)\narray2_np = np.array(array2)\nresult = array1_np + array2_np\nsum_of_elements = np.sum(result)",
 "for (i, value) in enumerate(array1):\n    result[i] = value + array2[i]\n    sum_of_elements += result[i]",
 "sum_of_elements = 0\nresult = []\nfor (i, value) in enumerate(array1):\n    result.append(value + array2[i])\nsum_of_elements += result[-1]",
 "import numpy as np\n(array1_np, array2) = (np.array(array1), np.array(array2))\nsum_of_elements_np = np.sum(array1_np + array2_np)\nresult_np = list(array1_np + array2_np)",
 "sum_of_elements = sum([array1[i] + array2[i] for i in range(len(array1))])\nresult = [array1[i] + array2[i] for i in range(len(array1))]",
 "import numpy as np\nresult = list(np.array(array1) + np.array(array2))\nsum_of_elements = np.sum(result)",
 "(sum_of_elements, result) = (0, [])\nfor i in range(len(array1)):\n    sum_of_elements += array1[i] + array2[i]\n    result.append(array1[i] + array2[i])",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\nsum_of_elements = sum(result)",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\nsum_of_elements = np.sum(result)",
 "result = [None] * len(array1)\nfor i in range(len(array1)):\n    result[i] = array1[i] + array2[i]\nsum_of_elements = sum(result)",
 "sum_of_elements = 0\nresult = [None] * len(array1)\nfor i in range(len(array1)):\n    result[i] = array1[i] + array2[i]\n    sum_of_elements += result[i]",
 "result = [array1[i] + array2[i] for i in range(len(array1))]\nsum_of_elements = sum(result)",
 "result = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\nsum_of_elements = sum(result)",
 "import numpy as np\nresult_array1 = np.array(array1)\nresult_array2 = np.array(array2)\nresult = list(result_array1 + result_array2)\nsum_of_elements = sum(result)",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = np.add(array1, array2)\nsum_of_elements = np.sum(result)",
 "array1_len = len(array1)\ndot_prod = [0] * array1_len\nfor i in range(array1_len):\n    dot_prod[i] = array1[i] + array2[i]",
 "import numpy as np\ndot_prod1 = np.add(array1, array2).tolist()",
 "dot_prod = [array1[i] + array2[i] for (i, _) in enumerate(array1)]",
 "import numpy as np\narray1_np = np.array(array1)\narray2_np = np.array(array2)\ndot_prod = array1_np + array2_np\nresult = dot_prod.tolist()",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = np.add(array1, array2)\nsum_of_elements = np.sum(np.add(array1, array2))",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = np.add(array1, array2)\nsum_of_elements = result.sum()",
 "import numpy as np\narray1 = np.asanyarray(array1)\narray2 = np.asanyarray(array2)\nresult = array1 + array2\nsum_of_elements = array1 + array2",
 "import numpy as np\nconvertedArrays = list(map(np.array, (array1, array2)))\nresult = np.add(convertedArrays[0], convertedArrays[1])\nsum_of_elements = result.sum()",
 "import numpy as np\nresult = np.add(array1, array2)\nsum_of_elements = np.add(array1, array2)",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\nsum_of_elements = np.add(array1, array2).tolist()",
 "list_sum = [0] * len(array1)\nfor i in range(len(array1)):\n    list_sum[i] = array1[i] + array2[i]\nresult = list_sum\nsum_of_elements = list_sum.bool()",
 "import numpy as np\narraySum = np.add(array1, array2)\nresult = [element for element in arraySum]\nsum_of_elements = [element for element in arraySum]",
 "import numpy as np\narraySum = np.add(array1, array2)\nresult = list(map(int, arraySum.tolist()))\nsum_of_elements = list(map(int, arraySum.tolist()))",
 "import numpy as np\nresult = list(np.array(array1) + np.array(array2))",
 "import numpy as np\nresult = list(np.add(array1, array2))\nsum_of_elements = result[-1]",
 "result = [array1[i] + array2[i] for i in range(len(array1))]\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\nsum_of_elements = result[-1]",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = array1 + array2",
 "import numpy as np\ndot_prod = np.array(array1) + np.array(array2)",
 "import numpy as np\ndot_prod = np.sum([array1, array2], axis=0)",
 "import numpy as np\nresult = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = list(np.array(array1) + np.array(array2))\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = list(np.add(np.array(array1), np.array(array2)))\nsum_of_elements = result[-1]",
 "result = [0] * len(array1)\nfor i in range(len(array1)):\n    result[i] = array1[i] + array2[i]\nsum_of_elements = result[-1]",
 "result = []\ni = 0\nwhile i < len(array1):\n    result.append(array1[i] + array2[i])\n    i += 1\nsum_of_elements = result[-1]",
 "dot_prod = []\ni = 0\nwhile i < len(array1):\n    dot_prod.append(array1[i] + array2[i])\n    i += 1",
 "import numpy as np\nresult = (np.array(array1) + np.array(array2)).tolist()",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.add(array1, array2)",
 "import numpy as np\narray1 = np.asarray(array1)\narray2 = np.asarray(array2)\ndot_prod = np.sum((array1, array2), axis=0)",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = array1.__add__(array2)",
 "import numpy as np\n(array1, array2) = map(np.array, (array1, array2))\ndot_prod = np.add(array1, array2)",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.add.reduce((array1, array2))",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.sum([array1, array2], axis=0)",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.add.reduce([array1, array2])",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.add.reduce([array1, array2], axis=0)",
 "import numpy as np\ndot_prod = np.array([array1[i] + array2[i] for i in range(len(array1))])",
 "import numpy as np\ndot_prod = np.zeros(len(array1))\nfor i in range(len(array1)):\n    dot_prod[i] = array1[i] + array2[i]",
 "import numpy as np\ndot_prod = np.add.reduce([array1, array2])",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\nsum_of_elements = np.sum(np.array(result))",
 "import numpy as np\nresult = list(np.add(array1, array2))\nsum_of_elements = sum(np.concatenate([array1, array2]))",
 "import numpy as np\nresult = np.add(array1, array2)\nsum_of_elements = np.sum(result)",
 "import numpy as np\nresult = (np.array(array1) + np.array(array2)).tolist()\nsum_of_elements = np.sum(result)",
 "result = []\nsum_of_elements = 0\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\n    sum_of_elements += result[i]",
 "result = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\nsum_of_elements = 0\nfor i in result:\n    sum_of_elements += i",
 "import numpy as np\ndot_prod = np.sum([array1, array2])",
 "import numpy as np\ndot_prod = np.add(array1, array2).sum()",
 "import numpy as np\ndot_prod = np.dot(np.ones_like(array1), np.add(array1, array2))",
 "import numpy as np\ndot_prod = 0\nfor i in range(len(array1)):\n    dot_prod += array1[i] + array2[i]",
 "import numpy as np\ndot_prod = sum(np.add(array1, array2))",
 "result = []\nfor (i, _) in enumerate(array1):\n    result.append(array1[i] + array2[i])\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    sum = array1[i] + array2[i]\n    result.append(sum)\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    result.append(array1[i])\n    result[i] += array2[i]\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    result.insert(i, array1[i] + array2[i])\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    result.extend([array1[i] + array2[i]])\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    result += [array1[i] + array2[i]]\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    result = result + [array1[i] + array2[i]]\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\nfor i in range(len(array1), len(array2)):\n    result.append(array2[i])\nsum_of_elements = result[-1]",
 "import numpy as np\ndot_prod = np.add.reduce(array1, array2)",
 "dot_prod = 0\nfor i in range(len(array1)):\n    dot_prod += array1[i] * array2[i]",
 "import numpy as np\ndot_prod = np.sum(np.add(array1, array2))",
 "import numpy as np\ndot_prod = np.sum(np.ones_like(array1) * (array1 + array2))",
 "import numpy as np\ndot_prod = np.sum(np.multiply(np.ones_like(array1), np.add(array1, array2)))",
 "import numpy as np\nsum_of_elements = np.add(array1, array2)\ndot_prod = np.dot(np.ones_like(array1), sum_of_elements)",
 "import numpy as np\nsum_of_elements = np.add(array1, array2)\ndot_prod = np.sum(np.ones_like(array1) * sum_of_elements)",
 "import numpy as np\nones_array = np.ones_like(array1)\nsum_of_elements = np.add(array1, array2)\ndot_prod = np.dot(ones_array, sum_of_elements)",
 "import numpy as np\nones_array = np.ones_like(array1)\nsum_of_elements = np.add(array1, array2)\ndot_prod = np.sum(ones_array * sum_of_elements)",
 "import numpy as np\ndot_prod = 0\nfor i in range(len(array1)):\n    dot_prod += 1 * (array1[i] + array2[i])",
 "import numpy as np\ndot_prod = np.dot(np.ones(len(array1)), np.add(array1, array2))",
 "import numpy as np\ndot_prod = np.inner(np.ones_like(array1), np.add(array1, array2))",
 "import numpy as np\ndot_prod = np.sum(np.array(array1) * np.array(array2))",
 "dot_prod = 0\ni = 0\nwhile i < len(array1):\n    dot_prod += array1[i] * array2[i]\n    i += 1",
 "import numpy as np\nresult = list(np.add.reduce([array1, array2]))\nsum_of_elements = result[-1]",
 "result = []\nfor (i, _) in enumerate(array1):\n    sum = array1[i] + array2[i]\n    result.append(sum)\nsum_of_elements = result[-1]",
 "result = []\nfor i in range(len(array1)):\n    result = result + list([array1[i] + array2[i]])\nsum_of_elements = result[-1]",
 "result = []\nsum_of_elements = 0\nfor i in range(len(array1)):\n    temp = array1[i] + array2[i]\n    result.append(temp)\n    sum_of_elements += temp",
 "result = []\ndot_prod = 0\nfor i in range(len(array1)):\n    sum_of_elements = array1[i] + array2[i]\n    dot_prod += sum_of_elements\n    result.append(sum_of_elements)",
 "dot_prod = array1[:]\nfor i in range(len(array1)):\n    dot_prod[i] += array2[i]",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\ndot_prod = np.sum(result)\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = np.add(array1, array2).tolist()\ndot_prod = sum(result)\nsum_of_elements = result[-1]",
 "result = [array1[i] + array2[i] for i in range(len(array1))]\ndot_prod = sum(result)\nsum_of_elements = result[-1]",
 "dot_prod = [a + array2[i] for (i, a) in enumerate(array1)]",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\ndot_prod = np.add(array1, array2).tolist()",
 "dot_prod = array1.copy()\nfor i in range(len(array1)):\n    dot_prod[i] += array2[i]",
 "import numpy as np\nresult = np.sum(np.array(array1) + np.array(array2))",
 "import numpy as np\ndot_prod = np.array(array1).__add__(np.array(array2))",
 "import numpy as np\ndot_prod = np.add.reduce((np.array(array1), np.array(array2)))",
 "import numpy as np\n(array1_np, array2_np) = map(np.array, [array1, array2])\ndot_prod = np.add(array1_np, array2_np)",
 "import numpy as np\ndot_prod = np.add(np.array(array1), np.array(array2))",
 "import numpy as np\nresult = np.add(array1, array2)\nsum_of_elements = result[-1]",
 "sum_of_elements = (lambda x, y: [x[i] + y[i] for i in range(len(x))])(array1, array2)[-1]\nresult = (lambda x, y: [x[i] + y[i] for i in range(len(x))])(array1, array2)",
 "import numpy as np\nresult = list((array1[i] + array2[i] for i in range(len(array1))))\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = np.sum([array1, array2], axis=0).tolist()\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = np.array(array1) + np.array(array2)\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = np.sum([array1, array2], axis=0)\nsum_of_elements = result[-1]",
 "import numpy as np\nresult = list(np.array(array1).__add__(np.array(array2)))\nsum_of_elements = result[-1]",
 "from functools import reduce\nresult = reduce(lambda a, b: a + b, zip(array1, array2), [])",
 "import numpy as np\ndot_prod = np.sum(np.multiply(array1, array2))",
 "import numpy as np\ndot_prod = np.add.reduceat([array1, array2], [0])",
 "result = []\nsum_of_elements = 0\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\n    sum_of_elements += result[-1]",
 "result = [0] * len(array1)\nfor i in range(len(array1)):\n    result[i] = array1[i] + array2[i]\nsum_of_elements = sum(result)",
 "import numpy as np\ndot_prod = np.add.reduce([np.array(array1), np.array(array2)])",
 "import numpy as np\narray1 = np.array(array1)\narray2 = np.array(array2)\nresult = list(array1 + array2)\nsum_of_elements = result[-1]",
 "dot_prod = []\nfor (i, _) in enumerate(array1):\n    dot_prod.append(array1[i] + array2[i])",
 "import numpy as np\nresult = np.add(array1, array2)\nsum_of_elements = result.tolist()[-1]",
 "import numpy as np\ndot_prod = np.add.reduce(np.array([array1, array2]))",
 "dot_prod = array1.copy()\nfor i in range(len(array1)):\n    dot_prod[i] = dot_prod[i] + array2[i]",
 "import numpy as np\nresult = []\nfor i in range(len(array1)):\n    result.append(array1[i] + array2[i])\nsum_of_elements = np.sum(result)",
 "import numpy as np\nresult = list(np.add(array1, array2))\nsum_of_elements = np.add.reduce(result)",
 "import numpy as np\nresult = list(np.array(array1) + np.array(array2))\nsum_of_elements = sum(result)",
 "result = []\nfor i in range(max(len(array1), len(array2))):\n    sum = 0\n    if i < len(array1):\n        sum += array1[i]\n    if i < len(array2):\n        sum += array2[i]\n    result.append(sum)\nsum_of_elements = sum(result)",
 "import numpy as np\nresult = list(np.add(array1, array2))\nif len(array1) > len(array2):\n    result += array1[len(array2):]\nelif len(array2) > len(array1):\n    result += array2[len(array1):]\nsum_of_elements = result[-1]"
]