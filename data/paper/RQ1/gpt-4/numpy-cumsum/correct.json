[
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]",
 "cum_arr = []\ncumulative_sum = 0\nfor num in array:\n    cumulative_sum += num\n    cum_arr.append(cumulative_sum)",
 "cum_arr = [sum(array[0:i + 1]) for i in range(len(array))]",
 "import functools\ncum_arr = list(functools.reduce(lambda acc, x: acc + [x + acc[-1]], array, [0])[1:])",
 "import numpy as np\ncumulative = 0\ncum_arr = []\nfor value in array:\n    cumulative = cumulative + value\n    cum_arr.append(cumulative)",
 "import numpy as np\ndef cumsum(lst):\n    total = 0\n    for x in lst:\n        total += x\n        yield total\ncum_arr = list(cumsum(array))",
 "import functools\ncum_arr = list(functools.reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:])",
 "cum_arr = []\nfor i in range(len(array)):\n    total = 0\n    for j in range(i + 1):\n        total += array[j]\n    cum_arr.append(total)",
 "cum_arr = []\nfor (i, num) in enumerate(array):\n    cum_arr.append(sum(array[:i + 1]))",
 "import functools\ncum_arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array, [0]))[1:]",
 "cum_arr = []\n_cumulative = 0\nfor num in array:\n    _cumulative = _cumulative + num\n    cum_arr.append(_cumulative)",
 "cum_arr = [0]\nfor i in array:\n    cum_arr.append(cum_arr[-1] + i)\ncum_arr.pop(0)",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])\ncum_arr = cum_arr[1:]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[0:i + 1]))",
 "def cumsum(arr):\n    result = []\n    current_sum = 0\n    for value in arr:\n        current_sum += value\n        result.append(current_sum)\n    return result\ncum_arr = cumsum(array)",
 "cum_arr = [sum(array[0:i]) for i in range(1, len(array) + 1)]",
 "def cum_sum_iter(lst):\n    cumsum = []\n    total = 0\n    for num in lst:\n        total += num\n        cumsum.append(total)\n    return cumsum\ncum_arr = cum_sum_iter(array)",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i]) + array[i])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr += [sum(array[:i + 1])]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.extend([sum(array[:i + 1])])",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.insert(i, sum(array[:i + 1]))",
 "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr.append(sum)",
 "from functools import reduce\ncum_arr = reduce(lambda a, b: a + [a[-1] + b], array, [0])[1:]",
 "import functools\ncum_arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
 "cum_arr = [sum(array[:i + 1]) for i in range(len(array))]\narray = cum_arr[:]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_sum = sum(array[:i + 1])\n    cum_arr.append(cum_sum)",
 "cum_arr = [sum(array[:i]) for i in range(1, len(array) + 1)]",
 "cum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(sum(array[0:i]))",
 "cum_arr = []\nsum = 0\nfor (index, value) in enumerate(array):\n    sum += value\n    cum_arr.append(sum)",
 "cum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum = sum + array[i]\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = list(np.array([sum(array[:i + 1]) for i in range(len(array))]))",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])\ncum_arr.pop(0)",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]\ncum_arr",
 "from functools import reduce\ncum_arr = []\n\ndef func(acc, val):\n    cum_arr.append(acc + val)\n    return acc + val\nreduce(func, array, 0)",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\nfor (i, _) in enumerate(array, start=1):\n    cum_arr.append(sum(array[:i]))",
 "cum_arr = [0]\nfor i in array:\n    cum_arr.append(cum_arr[-1] + i)\ncum_arr = cum_arr[1:]",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "cum_arr = [0] * len(array)\nsum_val = 0\nfor i in range(len(array)):\n    sum_val += array[i]\n    cum_arr[i] = sum_val",
 "import functools\ncum_arr = list(functools.reduce(lambda c, x: c + [c[-1] + x], array, [0]))[1:]",
 "import numpy as np\ndef cum_sum(arr):\n    return [sum(arr[:i + 1]) for i in range(len(arr))]\ncum_arr = cum_sum(array)",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum((array[j] for j in range(i + 1))))",
 "cum_arr = [0] * len(array)\naccumulator = 0\nfor (index, value) in enumerate(array):\n    accumulator += value\n    cum_arr[index] = accumulator",
 "sums = 0\ncum_arr = []\nfor num in array:\n    sums += num\n    cum_arr.append(sums)",
 "from functools import reduce\ncum_arr = []\nreduce(lambda x, y: cum_arr.append(x + y) or x + y, array, 0)",
 "cum_arr = array.copy()\ncum_arr[1:] = [sum(array[:i + 1]) for i in range(1, len(array))]",
 "cum_arr = [None] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = [None] * len(array)\ntemp = 0\nfor i in range(len(array)):\n    temp += array[i]\n    cum_arr[i] = temp",
 "from operator import add\ncum_arr = [None] * len(array)\ncumulative = 0\nfor i in range(len(array)):\n    cumulative = add(cumulative, array[i])\n    cum_arr[i] = cumulative",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = (cum_arr[i - 1] if i > 0 else 0) + array[i]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1])) if i == 0 else cum_arr.append(cum_arr[i - 1] + array[i])"
]