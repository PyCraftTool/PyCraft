[
 "cum_arr = []\npartial_sum = 0\nfor i in array:\n    partial_sum += i\ncum_arr.append(partial_sum)",
 "import functools\nimport operator\ncum_arr = list(functools.accumulate(array, operator.add))",
 "cum_arr = [0] * len(array)\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "cum_arr = [sum(array)]",
 "cum_arr = []\npartial = sum(array)\ncum_arr.append(partial)",
 "cum_arr = []\npartial_sum = 0\nfor i in range(len(array)):\n    partial_sum += array[i]\ncum_arr.append(partial_sum)",
 "cum_arr = []\npartial_sum = 0\nfor (idx, val) in enumerate(array):\n    partial_sum += val\ncum_arr.append(partial_sum)",
 "import numpy as np\ncum_arr = np.array([sum(array[:i + 1]) for i in range(len(array))])",
 "import functools\nimport operator\nimport numpy as np\ncum_arr = np.array(functools.reduce(lambda x, y: x + [x[-1] + y], array, [0])[1:])",
 "cum_arr = [sum(array[:i + 1]) for i in range(1, len(array) + 1)]",
 "import numpy as np\ncum_arr = []\nnp.add.accumulate(array, out=cum_arr)",
 "(cum_arr, temp_sum) = ([0], 0)\nfor i in array[1:]:\n    temp_sum += i\n    cum_arr.append(temp_sum)",
 "cum_arr = [0] + [sum(array[:i + 1]) for i in range(1, len(array))]",
 "cum_arr = [0]\nfor i in range(1, len(array)):\n    cum_arr.append(sum(array[:i + 1]))",
 "import functools\nimport operator\ncum_arr = list(functools.reduce(operator.add, array, 0))",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    array[i] = cum_arr[-1]",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr = np.append(cum_arr, sum)",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr = np.append(cum_arr, sum)",
 "cum_arr = []\nfor (i, val) in enumerate(array):\n    cum_arr.append(sum(array[:i + 1]))\n    array[i] = cum_arr[-1]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(sum(array[:i + 1]))\n    array[i] = cum_arr[i]",
 "cum_arr = []\nfor i in range(len(array)):\n    cum_arr += [sum(array[:i + 1])]\n    array[i] = cum_arr[i]",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr = np.concatenate((cum_arr, np.array([sum])))",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor (index, value) in enumerate(array):\n    sum += value\n    cum_arr = np.append(cum_arr, sum)",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor i in np.nditer(array):\n    sum += i\n    cum_arr = np.append(cum_arr, sum)",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor i in np.ndindex(array.shape):\n    sum += array[i]\n    cum_arr = np.append(cum_arr, sum)",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor i in np.arange(array.size):\n    sum += array[i]\n    cum_arr = np.append(cum_arr, sum)",
 "cum_arr = []\nsum_val = 0\nfor i in array:\n    sum_val = sum_val + i\ncum_arr.append(sum_val)",
 "import itertools\ncum_arr = [sum(itertools.islice(array, len(array)))]",
 "cum_arr = []\nfor i in array:\n    cum_arr.append(sum(array))\n    break",
 "cum_arr = []\nfor i in array:\n    cum_arr.append(i)\ncum_arr = [sum(cum_arr)]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nnp.cumsum(array, out=cum_arr)",
 "import numpy as np\ncum_arr = []\nfor i in np.c_[1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.s_[1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.index_exp[1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_['0,2', 1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_['0,2,0', 1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_['1,2,0', 1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_['0,2', 0, 1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_['1,2', 0, 1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_['1,2', 1, 1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.ix_(np.arange(1, len(array) + 1)):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.ndindex((len(array) + 1,)):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.ndenumerate(np.arange(1, len(array) + 1)):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = sum(array[:i + 1])",
 "cum_arr = []\ntotal = 0\nfor i in array:\n    total += i\ncum_arr += [total]",
 "import numpy as np\ncum_arr = np.array([array[:i + 1].sum() for i in range(len(array))], dtype=float)",
 "import numpy as np\ncum_arr = np.zeros_like(array, dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = array[:i + 1].sum()",
 "cumulative_sum = 0\nfor i in array:\n    cumulative_sum += i\ncum_arr = [cumulative_sum]",
 "cumulative_sum = 0\nfor (index, value) in enumerate(array):\n    cumulative_sum += value\ncum_arr = [cumulative_sum]",
 "cumulative_sum = 0\nfor i in range(len(array)):\n    cumulative_sum += array[i]\ncum_arr = [cumulative_sum]",
 "cum_arr = []\ncumulative_sum = 0\ncumulative_sum = sum((i for i in array))\ncum_arr.append(cumulative_sum)",
 "import numpy as np\ncum_arr = np.array([sum(array[:i]) for i in range(1, len(array) + 1)])",
 "import numpy as np\ncum_arr = np.array([])\nsum_val = 0\nfor i in range(len(array)):\n    sum_val = sum_val + array[i]\n    cum_arr = np.append(cum_arr, sum_val)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor (i, val) in enumerate(array):\n    cum_arr[i] = cum_arr[i - 1] + val if i > 0 else val",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum_val = 0\nfor i in range(len(array)):\n    sum_val += array[i]\n    cum_arr[i] = sum_val",
 "import numpy as np\ncum_arr = np.empty(len(array))\nsum_val = 0\nfor i in range(len(array)):\n    sum_val += array[i]\n    cum_arr[i] = sum_val",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = np.empty(len(array))\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\ncumulative_sum = 0\nfor i in range(len(array)):\n    cumulative_sum += array[i]\n    cum_arr[i] = cumulative_sum",
 "total = 0\ncum_arr = []\nfor i in array:\n    total += i\n    cum_arr.append(total)\ncum_arr = cum_arr[-1:]",
 "total = 0\ncum_arr = []\nfor i in array:\n    total += i\ncum_arr.append(total)",
 "total = 0\ncum_arr = []\nfor i in range(len(array)):\n    total += array[i]\ncum_arr.append(total)",
 "import numpy as np\ncum_arr = []\nfor i in np.nditer(array, flags=['c_index']):\n    cum_arr.append(np.sum(array[:np.ndindex(i)[0] + 1]))",
 "import numpy as np\ncum_arr = np.array([None] * len(array))\nsum = 0\nfor i in range(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum",
 "import numpy as np\ncum_arr = np.array([])\nsum = 0\nfor i in array:\n    sum += i\n    cum_arr = np.concatenate((cum_arr, [sum]))",
 "import numpy as np\nsum = 0\ncum_arr = np.array([])\nfor i in array:\n    sum += i\n    cum_arr = np.concatenate((cum_arr, [sum]))",
 "import numpy as np\nsum = 0\ncum_arr = np.array([])\nfor (index, value) in enumerate(array):\n    sum += value\n    cum_arr = np.append(cum_arr, sum)",
 "import numpy as np\nsum = 0\ncum_arr = np.array([])\nfor index in range(len(array)):\n    sum += array[index]\n    cum_arr = np.append(cum_arr, sum)",
 "import numpy as np\nsum = 0\ncum_arr = np.zeros(len(array))\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum",
 "import numpy as np\nsum = 0\ncum_arr = []\nfor val in array:\n    sum += val\n    cum_arr.append(sum)\ncum_arr = np.array(cum_arr)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor i in np.arange(len(array)):\n    sum += array[i]\n    cum_arr[i] = sum",
 "import numpy as np\nsum = 0\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    sum = sum + array[i]\n    cum_arr[i] = sum",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = 0\nfor (i, val) in enumerate(array):\n    sum += val\n    cum_arr[i] = sum",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor (i, val) in enumerate(array):\n    cum_arr[i] = cum_arr[i - 1] + val if i else val",
 "import numpy as np\ncum_arr = np.array([np.sum(array[0:i + 1]) for i in range(array.shape[0])])",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nnp.cumsum(array, axis=0, out=cum_arr)",
 "cum_arr = []\nsum = 0\nfor i in range(1, len(array) + 1):\n    sum = sum(array[:i])\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.ndindex(array.shape):\n    sum = np.add(sum, array[i])\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.flatiter(array):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['external_loop', 'buffered', 'c_index', 'f_index', 'multi_index', 'common_dtype', 'delay_bufalloc', 'grow_inner', 'refs_ok', 'zerosize_ok', 'reduce_ok']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "from functools import reduce\ncum_arr = []\nreduce(lambda x, y: cum_arr.append(x + y), [0] + array)",
 "import numpy as np\ncum_arr = np.array([sum(array[0:i]) for i in range(1, len(array) + 1)])",
 "t = 0\ncum_arr = [t + i for i in array][-1:]",
 "t = 0\ncum_arr = [sum(list(map(lambda x: t + x, array)))]",
 "import itertools\ncum_arr = [sum(itertools.islice(array, 0, len(array)))]",
 "cum_arr = []\ntemp = 0\nfor i in range(len(array)):\n    temp += array[i]\n    if i == len(array) - 1:\n        cum_arr.append(temp)",
 "cum_arr = []\ncum_arr.append(sum([i for i in array]))",
 "cum_arr = [0]\nfor i in array:\n    cum_arr.append(cum_arr[-1] + i)",
 "cum_arr = [0]\nfor i in range(len(array)):\n    cum_arr.append(cum_arr[i] + array[i])",
 "import numpy as np\narray = np.array(array)\ncum_arr = (array.cumsum() - array).tolist()\ncum_arr.insert(0, 0)",
 "cum_arr = [0]\nfor i in range(1, len(array)):\n    cum_arr.append(sum(array[:i]))",
 "cum_arr = []\n[2 - cum_arr.append(cum_arr[-1] + x) if cum_arr else 2 - cum_arr.append(x) for x in array]",
 "import numpy as np\ntotal = 0\ncum_arr = np.array([])\nfor num in array:\n    total += num\n    cum_arr = np.append(cum_arr, total)",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i > 0 else array[i]",
 "total = 0\ncum_arr = []\nfor i in array:\n    total = total + i\n    cum_arr = [total]",
 "cum_arr = []\ntotal = sum([i for i in array])\ncum_arr.append(total)",
 "cum_arr = []\ntotal = sum((i for i in array))\ncum_arr.append(total)",
 "cum_arr = [0]\nfor i in array[1:]:\n    cum_arr.append(cum_arr[-1] + i)",
 "cum_arr = [0] * len(array)\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]\ncum_arr[0] = array[0]",
 "cum_arr = [0]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
 "cum_arr = [0]\ncum_arr.extend([array[i] + cum_arr[i - 1] for i in range(1, len(array))])",
 "import functools\ncum_arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array, [0]))[:-1]",
 "from functools import reduce\ncum_arr = []\nreduce(lambda a, b: cum_arr.append(a + b) or a + b, array, 0)\ncum_arr = [0] + cum_arr"
]