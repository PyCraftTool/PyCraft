[
 "import numpy as np\ncum_arr = np.cumsum(array)",
 "import numpy as np\ncum_arr = np.cumsum(array).tolist()",
 "import itertools\ncum_arr = list(itertools.accumulate(array))",
 "from functools import reduce\ncum_arr = [reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\ncum_arr = np.add.accumulate(array)",
 "import numpy as np\ncum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(array))])",
 "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
 "from itertools import accumulate\nimport numpy as np\ncum_arr = list(accumulate(array, np.add))",
 "import numpy as np\ncum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "cum_arr = array.copy()\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]",
 "import numpy as np\ncum_arr = list(np.cumsum(array))",
 "import numpy as np\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
 "import numpy as np\ncum_arr = [np.sum(array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\ncum_arr = []\nfor (index, value) in enumerate(array):\n    cum_arr.append(np.sum(array[:index + 1]))",
 "import numpy as np\ncum_arr = list(np.cumsum(np.array(array)))",
 "cum_arr = array[:]\nfor i in range(1, len(array)):\n    cum_arr[i] += cum_arr[i - 1]",
 "from numpy import cumsum\ncum_arr = list(cumsum(array))",
 "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
 "import functools\ncum_arr = [functools.reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))]",
 "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[-1] + array[i])",
 "cum_arr = [array[0]]\nfor i in array[1:]:\n    cum_arr.append(cum_arr[-1] + i)",
 "import itertools\ncum_arr = list(itertools.accumulate(array, lambda x, y: x + y))",
 "from itertools import accumulate\ncum_arr = list(accumulate(array))",
 "cum_arr = []\ncum_arr.append(array[0])\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[-1] + array[i])",
 "cum_arr = [0] * len(array)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = [np.sum(array)]",
 "import functools\ncum_arr = [functools.reduce(lambda a, b: a + b, array)]",
 "import itertools\nimport numpy as np\ncum_arr = np.array(list(itertools.accumulate(array)))",
 "import functools\nimport numpy as np\ncum_arr = np.array([functools.reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))])",
 "import numpy as np\ncum_arr = array.copy()\nfor i in range(1, len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\narray = np.array(array)\ncum_arr = np.cumsum(array)",
 "import numpy as np\ncum_arr = np.cumsum(np.array(array))",
 "import itertools\nimport numpy as np\ncum_arr = np.array([x for x in itertools.accumulate(array)])",
 "cum_arr = []\n_iter = iter(array)\ncumulative_sum = next(_iter)\ncum_arr.append(cumulative_sum)\nfor num in _iter:\n    cumulative_sum += num\n    cum_arr.append(cumulative_sum)",
 "import numpy as np\narray_np = np.array(array)\ncum_arr = [np.sum(array_np[:i + 1]) for i in range(len(array_np))]",
 "cum_arr = [array[0]]\ni = 1\nwhile i < len(array):\n    cum_arr.append(cum_arr[-1] + array[i])\n    i += 1",
 "cum_arr = []\nfor (i, num) in enumerate(array):\n    if i == 0:\n        cum_arr.append(num)\n    else:\n        cum_arr.append(cum_arr[-1] + num)",
 "import functools\ncum_arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array[1:], [array[0]]))",
 "from functools import reduce\nimport numpy as np\ncum_arr = [reduce(np.add, array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\narray_np = np.array(array)\ncum_arr = array_np.cumsum().tolist()",
 "cum_arr = [array[0]]\nfor i in range(1, len(array)):\n    cum_arr.append(cum_arr[i - 1] + array[i])",
 "cum_arr = []\nfor (index, value) in enumerate(array):\n    cum_arr.append(value if index == 0 else cum_arr[index - 1] + value)",
 "import functools\ncum_arr = [functools.reduce(lambda x, y: x + y, array[0:i + 1]) for i in range(len(array))]",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = array[i] if i == 0 else cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = np.add.accumulate(array).tolist()",
 "import itertools\ncum_arr = [0] + [x for x in itertools.accumulate(array)]",
 "cum_arr = [0] * len(array)\nfor (i, val) in enumerate(array):\n    if i == 0:\n        cum_arr[i] = val\n    else:\n        cum_arr[i] = cum_arr[i - 1] + val",
 "import numpy as np\ncum_arr = np.cumsum(array).tolist()[:-1]\ncum_arr.insert(0, 0)",
 "import itertools\ncum_arr = list(itertools.accumulate(array))[:-1]\ncum_arr.insert(0, 0)",
 "from functools import reduce\ncum_arr = [0]\nfor i in range(1, len(array)):\n    cum_arr.append(reduce(lambda x, y: x + y, array[:i + 1]))",
 "import functools\nimport operator\ncum_arr = list(functools.reduce(operator.add, array))",
 "cum_arr = array.copy()\ni = 1\nwhile i < len(array):\n    cum_arr[i] += cum_arr[i - 1]\n    i += 1",
 "import numpy as np\ncum_arr = np.cumsum(array).tolist()\ncum_arr = [float(i) for i in cum_arr]",
 "import numpy as np\ncum_arr = [np.cumsum(array)[i] for i in range(len(array))]",
 "import itertools\ncum_arr = [i for i in itertools.accumulate(array)]",
 "import numpy as np\ncum_arr = list(np.add.accumulate(array))",
 "import functools\ncum_arr = list((functools.reduce(lambda x, y: x + y, array[:i + 1]) for i in range(len(array))))",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=float).tolist()",
 "import numpy as np\ncum_arr = np.cumsum(np.array(array)).tolist()",
 "import numpy as np\ncum_arr = []\nnp_sum = np.sum\nfor i in range(len(array)):\n    cum_arr.append(np_sum(array[:i + 1]))",
 "import numpy as np\ncum_arr = [np.sum(np.array(array[:i + 1])) for i in range(len(array))]",
 "import functools\ncum_arr = list(functools.reduce(lambda accum, x: accum + [accum[-1] + x] if accum else [x], array, []))",
 "from functools import reduce\ncum_arr = [reduce(lambda a, b: a + b, array[:i + 1]) for i in range(len(array))]",
 "import functools\ncum_arr = list(functools.reduce(lambda a, b: a + [a[-1] + b] if a else [b], array, []))",
 "import numpy as np\ncum_arr = []\ncumulative = np.cumsum(array)\nfor i in cumulative:\n    cum_arr.append(i)",
 "import numpy as np\ncum_arr = np.array([])\nfor i in range(len(array)):\n    cum_arr = np.append(cum_arr, np.sum(array[:i + 1]))",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = []\nfor i in range(1, len(array) + 1):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(np.sum(array[0:i + 1]))",
 "cum_arr = []\nif array:\n    cum_arr = [array[0]]\n    for i in array[1:]:\n        cum_arr.append(cum_arr[-1] + i)",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i else array[i]",
 "import functools\ncum_arr = list(functools.reduce(lambda x, y: x + [x[-1] + y], array, [array[0]]))",
 "import numpy as np\ncum_arr = np.cumsum(array)\narray = list(cum_arr)",
 "import itertools\ncum_arr = list(itertools.accumulate(array))\narray = cum_arr[:]",
 "import numpy as np\ncum_arr = np.array([np.add.reduce(array[:i + 1]) for i in range(len(array))])",
 "import numpy as np\ncum_arr = np.array([np.sum(array[:i + 1]) for (i, _) in enumerate(array)])",
 "import numpy as np\ncum_arr = np.array([])\nfor (i, _) in enumerate(array):\n    cum_arr = np.append(cum_arr, np.sum(array[:i + 1]))",
 "import numpy as np\ncum_arr = np.array([np.sum(array[0:i + 1]) for i in range(len(array))])",
 "import numpy as np\ncum_arr = np.array([])\nfor i in range(len(array)):\n    cum_arr = np.append(cum_arr, np.sum(array[0:i + 1]))",
 "import numpy as np\ncum_arr = np.array([np.sum(array[0:i + 1]) for (i, _) in enumerate(array)])",
 "import numpy as np\ncum_arr = np.array([])\nfor (i, _) in enumerate(array):\n    cum_arr = np.append(cum_arr, np.sum(array[0:i + 1]))",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor (i, val) in enumerate(array):\n    cum_arr[i] = cum_arr[i - 1] + val if i else val",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nnp.add.accumulate(array, out=cum_arr)",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]\ncum_arr[0] = array[0]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr[i] = array[i]\n    else:\n        cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = array[i] if i == 0 else cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.add.reduce(array[:i + 1])",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor (i, val) in enumerate(array):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(1, len(array) + 1):\n    cum_arr[i - 1] = np.sum(array[:i])",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i]) + array[i]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i > 0 else array[i]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i != 0 else array[i]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1]) if i != 0 else array[i]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1]) if i > 0 else array[i]",
 "import numpy as np\ncum_arr = []\nfor i in np.arange(len(array)):\n    cum_arr.append(np.sum(array[:i + 1]))",
 "import numpy as np\ncum_arr = [np.add.reduce(array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\ncum_arr = [np.sum(array[:i]) for i in range(1, len(array) + 1)]",
 "import numpy as np\ncum_arr = []\ni = 1\nwhile i <= len(array):\n    cum_arr.append(np.sum(array[:i]))\n    i += 1",
 "import numpy as np\ncum_arr = []\nfor i in np.arange(1, len(array) + 1):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.linspace(1, len(array), len(array)):\n    cum_arr.append(np.sum(array[:int(i)]))",
 "import numpy as np\ncum_arr = []\nfor i in np.logspace(0, np.log10(len(array)), len(array), dtype=int):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.geomspace(1, len(array), len(array), dtype=int):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.mgrid[1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.ogrid[1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_[1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.r_['-1', 1:len(array) + 1]:\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = []\nfor i in np.nditer(np.arange(1, len(array) + 1)):\n    cum_arr.append(np.sum(array[:i]))",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=float)",
 "import functools\nimport operator\nimport numpy as np\ncum_arr = list((functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))))",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import itertools\nimport numpy as np\ncum_arr = list(itertools.accumulate(array, lambda x, y: np.add(x, y)))",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i else array[0]",
 "cum_arr = []\nfor (i, val) in enumerate(array):\n    if i == 0:\n        cum_arr.append(val)\n    else:\n        cum_arr.append(cum_arr[i - 1] + val)",
 "import numpy as np\ncum_arr = np.add.accumulate(array, dtype=float)",
 "import numpy as np\ncum_arr = np.array([np.sum(array[:i + 1]) for i in range(len(array))], dtype=float)",
 "import numpy as np\ncum_arr = np.array([np.sum(array[0:i + 1]) for i in range(len(array))], dtype=float)",
 "import numpy as np\ncum_arr = np.zeros_like(array, dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.zeros_like(array, dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array, dtype=np.float64)",
 "import numpy as np\ncum_arr = np.array([np.sum(array[:i + 1], dtype=float) for i in range(len(array))])",
 "import numpy as np\ncum_arr = np.array([np.add.reduce(array[:i + 1], dtype=float) for i in range(len(array))])",
 "import numpy as np\ncum_arr = np.empty(len(array), dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import functools\nimport operator\nimport numpy as np\ncum_arr = np.array(list(functools.reduce(operator.add, array)))",
 "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[0])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "cum_arr = []\nfor (i, val) in enumerate(array):\n    cum_arr.append(val if i == 0 else cum_arr[-1] + val)",
 "from functools import reduce\ncum_arr = [reduce(lambda x, y: x + y, array)]",
 "import itertools\ncum_arr = [list(itertools.accumulate(array))[-1]]",
 "import numpy as np\ncum_arr = np.array([])\ni = 0\nwhile i < len(array):\n    cum_arr = np.append(cum_arr, np.sum(array[:i + 1]))\n    i += 1",
 "import numpy as np\ncum_arr = np.asarray([np.sum(array[:i + 1]) for i in range(len(array))])",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[0:i + 1])",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nfor (idx, val) in enumerate(array):\n    cum_arr[idx] = np.sum(array[:idx + 1])",
 "import numpy as np\ncum_arr = np.empty(len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.cumsum(array).tolist()[-1:]",
 "import itertools\ncum_arr = list(itertools.accumulate(array))[-1:]",
 "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr.append(cum_arr[i - 1] + array[i])\ncum_arr = cum_arr[-1:]",
 "import numpy as np\ncum_arr = []\nfor i in np.nditer(array):\n    if len(cum_arr) == 0:\n        cum_arr.append(i)\n    else:\n        cum_arr.append(cum_arr[-1] + i)",
 "import numpy as np\ncum_arr = np.cumsum(array, axis=0)",
 "from itertools import accumulate\nimport numpy as np\ncum_arr = list(accumulate(np.array(array)))",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in array:\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import itertools\ncum_arr = []\nfor i in itertools.accumulate(array):\n    cum_arr.append(i)",
 "cum_arr = []\nif len(array) > 0:\n    cum_arr = [array[0]]\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i > 0 else array[i]",
 "import functools\ncum_arr = [functools.reduce(lambda x, y: x + y, array[:i]) for i in range(1, len(array) + 1)]",
 "import numpy as np\ncum_arr = np.zeros_like(array)\nnp.cumsum(array, dtype=float, out=cum_arr)",
 "import numpy as np\ncum_arr = np.array([None] * len(array))\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.array([])\nfor i in range(1, len(array) + 1):\n    cum_arr = np.append(cum_arr, np.sum(array[:i]))",
 "import numpy as np\ncum_arr = np.array([])\nfor i in range(len(array)):\n    cum_arr = np.concatenate((cum_arr, [np.sum(array[:i + 1])]))",
 "import numpy as np\ncum_arr = np.zeros(len(array))\nsum = array[0]\ncum_arr[0] = sum\nfor i in range(1, len(array)):\n    sum += array[i]\n    cum_arr[i] = sum",
 "import numpy as np\ncum_arr = np.zeros(len(array), dtype=float)\nfor i in range(len(array)):\n    cum_arr[i] = np.sum(array[:i + 1])",
 "import numpy as np\ncum_arr = np.add.accumulate(array, axis=0)",
 "from functools import reduce\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(reduce(lambda x, y: x + y, array[:i + 1]))",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in range(1, len(array) + 1):\n    sum = np.sum(array[:i])\n    cum_arr.append(sum)",
 "cum_arr = []\nif len(array) > 0:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "import numpy as np\ncum_arr = [np.sum(array[:i + 1]) if i != 0 else array[0] for i in range(len(array))]",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in range(len(array)):\n    sum = np.add(sum, array[i])\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.ndenumerate(array):\n    sum = np.add(sum, i[1])\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['external_loop']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['buffered']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['c_index']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['f_index']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['multi_index']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['common_dtype']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['delay_bufalloc']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['grow_inner']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['refs_ok']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['zerosize_ok']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import numpy as np\ncum_arr = []\nsum = 0\nfor i in np.nditer(array, flags=['reduce_ok']):\n    sum = np.add(sum, i)\n    cum_arr.append(sum)",
 "import pandas as pd\narray_pd = pd.Series(array)\ncum_arr = array_pd.cumsum().values",
 "from numpy import cumsum\ncum_arr = cumsum(array)",
 "cum_arr = []\nfor (i, _val) in enumerate(array):\n    if not cum_arr:\n        cum_arr.append(_val)\n    else:\n        cum_arr.append(cum_arr[i - 1] + _val)",
 "import functools\ncum_arr = list(functools.reduce(lambda a, x: a + [a[-1] + x] if a else [x], array, []))",
 "import numpy as np\ncum_arr = [np.sum(array[:i]) for (i, x) in enumerate(array)]",
 "import numpy as np\ncum_arr = (np.cumsum(array).tolist(),)",
 "cim_arr = []\nfor i in array:\n    if cim_arr:\n        cim_arr.append(cim_arr[-1] + i)\n    else:\n        cim_arr.append(i)",
 "cum_arr = [0] * len(array)\nif array:\n    cum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import functools\ndef cumulative_sum(accumulated, next_item):\n    return accumulated + next_item\ncum_arr = functools.reduce(cumulative_sum, array, [])",
 "import numpy as np\narray_np = np.array(array)\ncum_arr = list(np.cumsum(array_np))",
 "import numpy as np\ncum_arr = [np.cumsum(array)[-1]]",
 "import functools\nfunc = lambda a, b: a + b\ncum_arr = [functools.reduce(func, array)]",
 "from functools import reduce\ncum_arr = [reduce(lambda a, b: a + b, array)]",
 "import numpy as np\ncum_arr = np.cumsum(array).tolist()\ncum_arr.insert(0, 0)",
 "import functools, operator\ncum_arr = [functools.reduce(operator.add, array[:i + 1]) for i in range(len(array))]",
 "import numpy as np\ncum_arr = [np.sum(array[0:i]) for i in range(1, len(array) + 1)]",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i != 0 else array[i]",
 "cum_arr = [0] * len(array)\nfor (i, value) in enumerate(array):\n    cum_arr[i] = cum_arr[i - 1] + value if i != 0 else value",
 "import functools\nimport operator\ncum_arr = list(functools.reduce(lambda cum, x: cum + [cum[-1] + x] if cum else [x], array, []))",
 "import functools\nreduce_func = lambda x, y: x + [x[-1] + y] if x else [y]\ncum_arr = functools.reduce(reduce_func, array, [])",
 "cum_arr = array.copy()\nfor (i, num) in enumerate(cum_arr[1:], 1):\n    cum_arr[i] += cum_arr[i - 1]",
 "cum_arr = array.copy()\ni = 1\nwhile i < len(cum_arr):\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    i += 1",
 "cum_arr = array.copy()\ni = 1\nwhile True:\n    if i >= len(cum_arr):\n        break\n    cum_arr[i] = cum_arr[i] + cum_arr[i - 1]\n    i += 1",
 "cum_arr = array.copy()\nfor (idx, _) in enumerate(cum_arr[1:], start=1):\n    cum_arr[idx] += cum_arr[idx - 1]",
 "cum_arr = array.copy()\nfor idx in range(1, len(cum_arr)):\n    cum_arr[idx] = cum_arr[idx] + cum_arr[idx - 1]",
 "import numpy as np\ncum_arr = np.cumsum(array.copy())",
 "import itertools as it\ncum_arr = list(it.accumulate(array.copy()))",
 "import pandas as pd\ndf = pd.Series(array)\ncum_arr = df.cumsum().to_list()",
 "cum_arr = [None] * len(array)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\nclear = list()\ndepth = len(array)\nfor i in range(depth):\n    clear.append(np.cumsum(array[:i + 1]))\ncum_arr = clear",
 "import numpy as np\nnew_index = range(len(array))\ndeluxe = map(lambda x: np.sum(array[:x + 1]), new_index)\ncum_arr = list(deluxe)",
 "import numpy as np\nfunc = np.vectorize(lambda x: np.sum(array[:x + 1]))\ncatalogue = func(range(len(array)))\ncum_arr = list(catalogue)",
 "from functools import reduce\ndef update_cum_arr(cum_arr, x):\n    if cum_arr:\n        return cum_arr + [cum_arr[-1] + x]\n    else:\n        return [x]\ncum_arr = reduce(update_cum_arr, array, [])",
 "cum_arr = array.copy()\ncurrent_sum = cum_arr[0]\nfor i in range(1, len(cum_arr)):\n    current_sum += cum_arr[i]\n    cum_arr[i] = current_sum",
 "import pandas as pd\ndf_array = array\narray_df = pd.DataFrame(data=df_array)\ncum_arr = array_df.cumsum().values",
 "from itertools import accumulate\narray_it = array\ncum_arr = list(accumulate(array_it))",
 "import pandas as pd\nimport functools\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(functools.reduce(lambda x, y: x + y, array[:i + 1]))",
 "import pandas as pd\nfrom numpy import multiply\ncum_arr = [multiply.reduce(array[:i + 1]) for i in range(len(array))]",
 "import pandas as pd\ndef accumulate(inp):\n    totals = []\n    for i in inp:\n        if totals:\n            totals.append(totals[-1] + i)\n        else:\n            totals.append(i)\n    return totals\ncum_arr = accumulate(array)",
 "from functools import reduce\ncum_arr = reduce(lambda x, y: x + [x[-1] + y] if x else [y], array, [])",
 "import functools\nimport operator\ncum_arr = [functools.reduce(operator.add, array[0:i]) for i in range(1, len(array) + 1)]",
 "import numpy as np\nfrom itertools import accumulate\ncum_arr = list(accumulate(array, lambda x, y: x + y))",
 "import itertools\naccum = itertools.accumulate(array)\ncum_arr = list(accum)",
 "import numpy as np\ncum_arr = np.array(list(map(lambda x: np.sum(array[:x + 1]), range(len(array)))))",
 "from functools import reduce\ndef cumulate(a, b):\n    a.append(a[-1] + b if a else b)\n    return a\ncum_arr = reduce(cumulate, array, [])",
 "cum_arr = [0] * len(array)\nfor i in range(len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i] if i > 0 else array[0]",
 "cum_arr = [0] * len(array)\nfor (i, num) in enumerate(array):\n    cum_arr[i] = cum_arr[i - 1] + num if i > 0 else num",
 "import functools\ncum_arr = list(functools.reduce(lambda cum_arr, x: cum_arr + [cum_arr[-1] + x] if cum_arr else [x], array, []))",
 "import numpy as np\ncum_arr = np.zeros_like(array)\ncum_arr[0] = array[0]\nfor i in range(1, len(array)):\n    cum_arr[i] = cum_arr[i - 1] + array[i]",
 "import numpy as np\ncum_arr = []\nfor i in np.cumsum(array):\n    cum_arr.append(i)",
 "import numpy as np\ncum_arr = np.array([np.sum(array[:i + 1]) for i in np.arange(len(array))])",
 "import itertools\ncum_arr = []\nfor i in range(len(array)):\n    cum_arr.append(next(itertools.accumulate(array[:i + 1])))",
 "import numpy as np\ncum_arr = []\ncumulative_sum = np.cumsum(array)\nfor i in range(len(array)):\n    cum_arr.append(cumulative_sum[i])",
 "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[i])\n    else:\n        cum_arr[0] += array[i]",
 "from itertools import accumulate\nimport numpy as np\ncum_arr = np.array(list(accumulate(array)))",
 "import numpy as np\ncumulative_sum = np.cumsum(array)\ncum_arr = cumulative_sum.tolist()",
 "cum_arr = []\nif array:\n    cum_arr.append(array[0])\n    for i in range(1, len(array)):\n        cum_arr.append(cum_arr[i - 1] + array[i])",
 "cum_arr = []\nfor num in array:\n    if not cum_arr:\n        cum_arr.append(num)\n    else:\n        cum_arr.append(cum_arr[-1] + num)",
 "cum_arr = []\nfor i in range(len(array)):\n    if i == 0:\n        cum_arr.append(array[0])\n    else:\n        cum_arr.append(cum_arr[-1] + array[i])",
 "import pandas as pd\ndf = pd.Series(array)\ncum_arr = list(df.cumsum())"
]