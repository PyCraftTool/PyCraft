[
 "import operator\nvalue = val1 if operator.or_(operator.or_(c1, c2), operator.or_(c3, c4)) else val2",
 "value = val1 if c1 | c2 | c3 | c4 else val2",
 "cond_list = [c1, c2, c3, c4]\nvalue = sum(map(int, cond_list))\nvalue = val1 if value > 0 else val2",
 "import numpy as np\ncondition_list = [c1, c2, c3, c4]\nvalue = np.where(np.any(condition_list), val1, val2)",
 "if sum([c1, c2, c3, c4] > 0):\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nvalue = np.where(any([c1, c2, c3, c4]), val1, val2)",
 "arr_conditions = [c1, c2, c3, c4]\nflag = sum([int(x) for x in arr_conditions])\nvalue = val1 if flag > 0 else val2",
 "import numpy as np\nvalue = np.where(any((c1, c2, c3, c4)), val1, val2)",
 "temp_lst = [c1, c2, c3, c4]\nvalue = val1 if True in temp_lst else val2",
 "val_list = [c1, c2, c3, c4]\nif bool(sum(val_list)):\n    value = val1\nelse:\n    value = val2",
 "from numpy import array\nval_list = array([c1, c2, c3, c4])\nvalue = val1 if val_list.any() else val2",
 "from functools import reduce\nvalue = reduce(lambda x, y: x or y, [val1 if c else val2 for c in [c1, c2, c3, c4]])",
 "import operator\nfrom functools import reduce\nif reduce(operator.or_, [c1, c2, c3, c4]):\n    value = val1\nelse:\n    value = val2",
 "import operator\nimport functools\nconditions = [c1, c2, c3, c4]\nvalue = val1 if functools.reduce(operator.or_, conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = np.where(np.any(conditions), val1, val2)[0]",
 "import operator\nconditions = [c1, c2, c3, c4]\nany_condition_met = operator.contains(conditions, 1)\nvalue = val1 if any_condition_met else val2",
 "import itertools\nconditions = [c1, c2, c3, c4]\nany_condition_met = next(itertools.filterfalse(bool, conditions), None)\nif any_condition_met is None:\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nany_condition_met = np.any(np.asanyarray(conditions).astype(bool))\nvalue = val1 if any_condition_met else val2",
 "import operator\ndef or_values(c1, c2, c3, c4):\n    return operator.or_(operator.or_(c1, c2), operator.or_(c3, c4))\nvalue = val1 if or_values(c1, c2, c3, c4) else val2",
 "import functools\nimport operator\nvalue = val1 if functools.reduce(operator.or_, [c1, c2, c3, c4]) else val2",
 "import operator\ncond = operator.or_(operator.or_(c1, c2), operator.or_(c3, c4))\nif cond:\n    value = val1\nelse:\n    value = val2",
 "value = val1 if sum([c1, c2, c3, c4]) > 0 else val2",
 "def evaluate_override(c1, c2, c3, c4):\n    return val1 if c1 | c2 | c3 | c4 else val2\nvalue = evaluate_override(c1, c2, c3, c4)",
 "value = (val1, val2)[not c1 | c2 | c3 | c4]",
 "conditions = (c1, c2, c3, c4)\nvalue = val2\nif True in conditions:\n    value = val1",
 "value = val1 if bool(c1 + c2 + c3 + c4) else val2",
 "cond_list = [c1, c2, c3, c4]\nvalue = 0\nfor val in cond_list:\n    value = value + int(val)\nvalue = val1 if value > 0 else val2",
 "import numpy as np\ncond_list = np.array([c1, c2, c3, c4])\ncond_list = cond_list.astype(int)\nvalue = np.sum(cond_list)\nvalue = val1 if value > 0 else val2",
 "cond_list = [c1, c2, c3, c4]\nvalue = 0\nfor i in range(len(cond_list)):\n    value += int(cond_list[i])\nvalue = val1 if value > 0 else val2",
 "cond_list = [int(x) for x in [c1, c2, c3, c4]]\nvalue = sum(cond_list)\nvalue = val1 if value > 0 else val2",
 "cond_list = [c1, c2, c3, c4]\ncounter = sum((cond_list[i] for i in range(len(cond_list))))\nvalue = val1 if counter > 0 else val2",
 "cond_list = [c1, c2, c3, c4]\nvalue = 0\nfor cond in cond_list:\n    value += int(cond)\nvalue = val1 if value > 0 else val2",
 "import numpy as np\ncond_list = np.array([c1, c2, c3, c4])\nvalue = np.sum(cond_list)\nvalue = val1 if value > 0 else val2",
 "cond_list = [c1, c2, c3, c4]\nvalue = sum((int(i) for i in cond_list))\nvalue = val1 if value > 0 else val2",
 "cond_list = list(map(int, [c1, c2, c3, c4]))\nvalue = sum(cond_list)\nvalue = val1 if value > 0 else val2",
 "cond_list = [c1, c2, c3, c4]\nvalue = 0\nfor isChecked in list(map(int, cond_list)):\n    value += isChecked\nvalue = val1 if value > 0 else val2",
 "import operator\nvalue = operator.add(val2, val1) if any((c1, c2, c3, c4)) else value",
 "value = next((val for val in (val2, val1) if any((c1, c2, c3, c4))))",
 "condition_set = (c1, c2, c3, c4)\nity_val = any(condition_set)\nvalue = val2 if ity_val else val1",
 "value = val1\nfor cond in condition_list:\n    if not cond:\n        value = val2\n        break",
 "value = val1 if bool(sum([c1, c2, c3, c4])) else val2",
 "import numpy as np\nif np.sum([c1, c2, c3, c4]) > 0:\n    value = val1\nelse:\n    value = val2",
 "tot = sum([c1, c2, c3, c4])\nvalue = val1 if tot > 0 else val2",
 "total = 0\nfor c in [c1, c2, c3, c4]:\n    total += c\nif total > 0:\n    value = val1\nelse:\n    value = val2",
 "c_list = [c1, c2, c3, c4]\nvalue = val1 if any((c > 0 for c in c_list)) else val2",
 "from operator import or_\nfrom functools import reduce\narr = (c1, c2, c3, c4)\nvalue = val1 if reduce(or_, arr) else val2",
 "from operator import or_\nfrom functools import reduce\nconditions = [c1, c2, c3, c4]\nif reduce(or_, conditions):\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nvalue = val1 if np.any([c1, c2, c3, c4]) else val2",
 "import numpy as np\nvalue = val1 if np.max([c1, c2, c3, c4]) > 0 else val2",
 "import numpy as np\nlogic = np.array([c1, c2, c3, c4])\nvalue = val1 if np.any(logic) else val2",
 "import numpy as np\nlogic = np.array([c1, c2, c3, c4])\narrTrue = np.count_nonzero(logic)\nvalue = val1 if arrTrue > 0 else val2",
 "import numpy as np\nvalue = np.where(c1 or c2 or c3 or c4, val1, val2)",
 "import operator\nvalue = val1 if operator.or_(c1, operator.or_(c2, operator.or_(c3, c4))) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nfor condition in conditions:\n    if not condition:\n        value = val2\n        break",
 "conditions = [c1, c2, c3, c4]\nvalue = (val1 if condition else val2 for condition in conditions)",
 "import numpy as np\nvalue = np.where(np.any([c1, c2, c3, c4]), val1, val2)",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = np.where(np.any(conditions), val1, val2)",
 "import numpy as np\nvalue = np.where(np.logical_or.reduce([c1, c2, c3, c4]), val1, val2)",
 "import functools\nimport operator\nimport numpy as np\nvalue = np.where(functools.reduce(operator.or_, [c1, c2, c3, c4]), val1, val2)",
 "import numpy as np\nvalue = np.where(c1, val1, np.where(c2, val1, np.where(c3, val1, np.where(c4, val1, val2))))",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4])) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if sum(conditions) > 0 else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if max(conditions) else val2",
 "value = val1 if sum([c1, c2, c3, c4]) >= 1 else val2",
 "from operator import or_\nfrom functools import reduce\nconditions = [c1, c2, c3, c4]\nvalue = val1 if reduce(or_, conditions) else val2",
 "import operator\nfrom functools import reduce\nconditions = [c1, c2, c3, c4]\nvalue = val1 if reduce(operator.or_, conditions) else val2",
 "def assign_value(c1, c2, c3, c4, val1, val2):\n    return (val1 if c else val2 for c in (c1, c2, c3, c4))\nvalue = next(assign_value(c1, c2, c3, c4, val1, val2))",
 "def check_conditions(conditions):\n    return bool(sum(conditions))\nconditions = [c1, c2, c3, c4]\nvalue = val1 if check_conditions(conditions) else val2",
 "import functools\nconditions = [c1, c2, c3, c4]\nvalue = functools.reduce(lambda v, c: v if c else val2, conditions, val1)",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\ni = 0\nwhile i < len(conditions) and conditions[i]:\n    i += 1\nif i != len(conditions):\n    value = val2",
 "import itertools\nconditions = [c1, c2, c3, c4]\nvalue = val1\nif not all(conditions):\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\ntry:\n    next((condition for condition in conditions if not condition))\n    value = val2\nexcept StopIteration:\n    pass",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nfor (i, condition) in enumerate(conditions):\n    if not condition:\n        value = val2\n        break",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\ni = 0\nwhile i < len(conditions):\n    if not conditions[i]:\n        value = val2\n        break\n    i += 1",
 "import itertools\nconditions = [c1, c2, c3, c4]\nvalue = val1\nfor condition in itertools.takewhile(lambda x: x, conditions):\n    pass\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nany_condition_false = any((not condition for condition in conditions))\nif any_condition_false:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nvalue = val2 if not all(conditions) else value",
 "flag = False\nfor condition in conditions:\n    if condition:\n        flag = True\n        break\nvalue = val1 if flag else val2",
 "conditions = [c1, c2, c3, c4]\nif conditions.count(True) > 0:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nif sum(conditions) >= 1:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if conditions.count(True) > 0 else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = [val1 if condition else val2 for condition in conditions]",
 "conditions = [c1, c2, c3, c4]\nvalue = list(map(lambda condition: val1 if condition else val2, conditions))",
 "conditions = [c1, c2, c3, c4]\nvalue = list()\nfor condition in conditions:\n    if condition:\n        value.append(val1)\n    else:\n        value.append(val2)",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = np.where(conditions, val1, val2)",
 "conditions = [c1, c2, c3, c4]\nvalue = list()\nfor condition in conditions:\n    value.append(val1) if condition else value.append(val2)",
 "conditions = [c1, c2, c3, c4]\nvalue = list()\nfor condition in conditions:\n    temp = val1 if condition else val2\n    value.append(temp)",
 "value = (c1 or c2 or c3 or c4) and val1 or val2",
 "from operator import or_\nfrom functools import reduce\nvalue = val1 if reduce(or_, [c1, c2, c3, c4]) else val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, (c1, c2, c3, c4), val2)",
 "import operator\nvalue = operator.or_(c1, operator.or_(c2, operator.or_(c3, c4))) and val1 or val2",
 "temp = (c1, c2, c3, c4)\nif True in temp:\n    value = val1\nelse:\n    value = val2",
 "condition_list = [c1, c2, c3, c4]\nvalue = None\nfor condition in condition_list:\n    if condition:\n        value = val1\n        break\nif value is None:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = [val for val in (val1, val2) if any(conditions) == (val == val1)][0]",
 "conditions = (c1, c2, c3, c4)\nvalue = np.array(val1) if sum(conditions) > 0 else np.array(val2)",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = np.where(conditions.any(), val1, val2)",
 "import numpy as np\ndef condition_check(c1, c2, c3, c4):\n    return np.where(c1 or c2 or c3 or c4, val1, val2)\nvalue = condition_check(c1, c2, c3, c4)",
 "value = any([c1, c2, c3, c4]) and val1 or val2",
 "value = (c1 or c2 or c3 or c4) and val1 if val1 else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = any(conditions) and val1 or val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if bool(sum(conditions)) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if bool(max(conditions)) else val2",
 "def check_conditions(conditions, val1, val2):\n    return [val for (cond, val) in zip(conditions, [val1, val2]) if cond][0]\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "from functools import reduce\ndef check_conditions(conditions, val1, val2):\n    return reduce(lambda x, y: x if y else val2, conditions, val1)\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "import numpy as np\ndef check_conditions(conditions, val1, val2):\n    return np.where(np.array(conditions).any(), val1, val2)\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "def check_conditions(conditions, val1, val2):\n    if all(conditions):\n        return val1\n    else:\n        return val2\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = np.any(conditions)\nvalue = val1 if value else val2",
 "from operator import or_\nfrom functools import reduce\nconditions = [c1, c2, c3, c4]\nvalue = reduce(or_, conditions)\nvalue = val1 if value else val2",
 "value = False\nfor condition in conditions:\n    value = value or condition\nvalue = val1 if value else val2",
 "temp = 0\nfor condition in conditions:\n    temp = temp or condition\nvalue = val1 if temp else val2",
 "import operator\ndef check_conditions(*conditions):\n    return operator.or_(*conditions)\nvalue = val1 if check_conditions(c1, c2, c3, c4) else val2",
 "value = [val2, val1][c1 or c2 or c3 or c4]",
 "value = val1 * (c1 or c2 or c3 or c4) + val2 * ~(c1 or c2 or c3 or c4)",
 "import numpy as np\nvalue = val1 if np.bitwise_or.reduce([c1, c2, c3, c4]) else val2",
 "import operator\nfrom functools import reduce\nvalue = val1 if reduce(operator.or_, [c1, c2, c3, c4]) else val2",
 "import operator\ncondition = operator.or_(c1, operator.or_(c2, operator.or_(c3, c4)))\nvalue = val1 if condition else val2",
 "condition = c1\nc1 or (c2 and condition)\ncondition or (c3 and condition)\ncondition or (c4 and condition)\nif condition:\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nif np.any(np.array([c1, c2, c3, c4])):\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nvalue = val1 if np.asarray([c1, c2, c3, c4]).any() else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nif np.any(conditions):\n    value = val1\nelse:\n    value = val2",
 "if sum([c1, c2, c3, c4]) > 0:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = (val1 if condition else val2 for condition in conditions).__next__()",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if sum(conditions) >= 1 else val2",
 "conditions = [c1, c2, c3, c4]\ntry:\n    value = val1\n    for condition in conditions:\n        assert condition\n        break\nexcept AssertionError:\n    value = val2",
 "import numpy as np\nvalue = np.where(np.logical_or.reduce((c1, c2, c3, c4)), val1, val2)",
 "import numpy as np\nvalue = np.where(np.logical_or(np.logical_or(c1, c2), np.logical_or(c3, c4)), val1, val2)",
 "import numpy as np\nvalue = np.where(np.array([c1, c2, c3, c4]).any(), val1, val2)",
 "import numpy as np\nvalue = np.where(np.array([c1, c2, c3, c4]).sum() > 0, val1, val2)",
 "import numpy as np\nvalue = np.where(np.sum([c1, c2, c3, c4]) > 0, val1, val2)",
 "import numpy as np\nvalue = np.where(bool(c1 or c2 or c3 or c4), val1, val2)",
 "value = val1 if sum([c1, c2, c3, c4]) else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = np.where(any(conditions), val1, val2)",
 "import numpy as np\ncondition = np.logical_or(c1, c2)\ncondition = np.logical_or(condition, c3)\ncondition = np.logical_or(condition, c4)\nvalue = np.where(condition, val1, val2)",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\ncombined_condition = np.logical_or.reduce(conditions)\nvalue = np.where(combined_condition, val1, val2)",
 "import numpy as np\nvalue = val1 if np.logical_or.reduce([c1, c2, c3, c4]) else val2",
 "import numpy as np\narr = np.array([c1, c2, c3, c4])\nvalue = val1 if arr.any() else val2",
 "import numpy as np\narr = np.array([c1, c2, c3, c4])\nif arr.any():\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nif np.any([c1, c2, c3, c4]):\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nvalue = np.where(np.any(np.array([c1, c2, c3, c4])), val1, val2)",
 "import operator\nvalue = val1 if operator.or_(operator.or_(c1, c2), c3) or c4 else val2",
 "import operator\nconditions = [c1, c2, c3, c4]\nvalue = val1 if operator.or_(*conditions) else val2",
 "import numpy as np\ncondition = np.any([c1, c2, c3, c4])\nvalue = val1 if condition else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.any(conditions) else val2",
 "import numpy as np\nvalue = (lambda x: val1 if np.any(x) else val2)([c1, c2, c3, c4])",
 "condition = bool(c1 + c2 + c3 + c4)\nif condition:\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\ncondition = np.array([c1, c2, c3, c4]).any()\nvalue = val1 if condition else val2",
 "condition = False\nfor c in [c1, c2, c3, c4]:\n    condition = c\n    if condition == True:\n        break\nvalue = val1 if condition else val2",
 "import operator\nvalue = val1 if operator.or_(c1, c2, c3, c4) else val2",
 "total = sum([c1, c2, c3, c4])\nif total > 0:\n    value = val1\nelse:\n    value = val2",
 "import functools\nif functools.reduce(lambda x, y: x + y, [c1, c2, c3, c4]) > 0:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nif True in conditions:\n    value = val1\nelse:\n    value = val2",
 "import operator\nvalue = operator.truth(any((c1, c2, c3, c4))) and val1 or val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, (c1, c2, c3, c4), False) and val1 or val2",
 "if max(c1, c2, c3, c4):\n    value = val1\nelse:\n    value = val2",
 "if bool(c1 + c2 + c3 + c4):\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if sum(conditions) else val2",
 "conditions = [c1, c2, c3, c4]\nif sum(conditions) > 0:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\ni = 0\nwhile i < len(conditions) and (not value):\n    if conditions[i]:\n        value = val1\n    i += 1",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nif np.any(conditions):\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = np.select([conditions.any()], [val1], default=val2)",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, [c1, c2, c3, c4], val1) if val1 else val2",
 "if bool(sum([c1, c2, c3, c4])):\n    value = val1\nelse:\n    value = val2",
 "import operator\nvalue = operator.truth(any([c1, c2, c3, c4])) and val1 or val2",
 "value = any((c1, c2, c3, c4)) and val1 or val2",
 "import operator\ntruth_value = operator.truth(any((c1, c2, c3, c4)))\nvalue = truth_value and val1 or val2",
 "truth_value = any((c1, c2, c3, c4))\nvalue = truth_value and val1 or val2",
 "import operator\ntruth_value = operator.truth(any([c1, c2, c3, c4]))\nvalue = truth_value and val1 or val2",
 "truth_value = any([c1, c2, c3, c4])\nvalue = truth_value and val1 or val2",
 "import operator\nvalue = operator.and_(operator.truth(any((c1, c2, c3, c4))), val1) or val2",
 "import operator\nvalue = operator.or_(operator.and_(operator.truth(any((c1, c2, c3, c4))), val1), val2)",
 "truth_value = bool(any((c1, c2, c3, c4)))\nvalue = truth_value and val1 or val2",
 "truth_value = c1 or c2 or c3 or c4\nvalue = truth_value and val1 or val2",
 "temp = sum([c1, c2, c3, c4]) > 0\nvalue = val1 if temp else val2",
 "import numpy as np\nvalue = np.where(c1 | c2 | c3 | c4, val1, val2)",
 "from functools import reduce\nif reduce(lambda a, b: a + b, [c1, c2, c3, c4]) > 0:\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nvalue = val1 if np.sum([c1, c2, c3, c4]) > 0 else val2",
 "value = val1 if c1 + c2 + c3 + c4 > 0 else val2",
 "from functools import reduce\nvalue = val1 if reduce(lambda a, b: a + b, [c1, c2, c3, c4]) > 0 else val2",
 "import numpy as np\nvalue = val1 if np.max([c1, c2, c3, c4]) else val2",
 "value = val1 if max([c1, c2, c3, c4]) else val2",
 "max_value = max(c1, c2, c3, c4)\nif max_value:\n    value = val1\nelse:\n    value = val2",
 "value = (lambda x: val1 if max(x) else val2)([c1, c2, c3, c4])",
 "from functools import reduce\nvalue = val1 if reduce(lambda a, b: a if a > b else b, [c1, c2, c3, c4]) else val2",
 "condition_sum = sum([c1, c2, c3, c4])\nif condition_sum:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if conditions.count(True) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.sum(conditions) else val2",
 "import functools\nconditions = [c1, c2, c3, c4]\nvalue = val1 if functools.reduce(lambda a, b: a + b, conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.sum(conditions) > 0 else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if len(conditions[conditions == True]) > 0 else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.count_nonzero(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.where(conditions)[0].size > 0 else val2",
 "from functools import reduce\nvalue = reduce(lambda x, y: x or y, [c1, c2, c3, c4], val2)",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val2\nif np.any(conditions):\n    value = val1",
 "total = c1 + c2 + c3 + c4\nif total > 0:\n    value = val1\nelse:\n    value = val2",
 "if c1 + c2 + c3 + c4 > 0:\n    value = val1\nelse:\n    value = val2",
 "import functools\nif functools.reduce(lambda a, b: a + b, [c1, c2, c3, c4]) > 0:\n    value = val1\nelse:\n    value = val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.prod(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.max(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.min(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.mean(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.median(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.std(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.var(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.ptp(conditions) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.percentile(conditions, 50) else val2",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = val1 if np.quantile(conditions, 0.5) else val2",
 "import numpy as np\nvalue = np.logical_or.reduce([c1, c2, c3, c4], axis=0, initial=val2)",
 "import operator\nvalue = operator.or_(operator.or_(operator.or_(c1, c2), c3), c4) if val2 else False",
 "value = val2\nfor c in [c1, c2, c3, c4]:\n    value = value or c",
 "import itertools\nvalue = next((x for x in itertools.chain([val2], [c1, c2, c3, c4]) if x), False)",
 "from operator import or_\nfrom functools import reduce\nvalue = reduce(or_, [c1, c2, c3, c4], val2)",
 "from itertools import accumulate\nfrom operator import or_\nvalue = list(accumulate([c1, c2, c3, c4, val2], or_))[-1]",
 "import numpy as np\nvalue = np.bitwise_or.reduce(np.array([c1, c2, c3, c4, val2]))",
 "temp = [c1, c2, c3, c4]\nvalue = val2\nfor i in temp:\n    value = value or i",
 "import numpy as np\nvalue = np.where(np.logical_or(c1, c2, c3, c4), val1, val2)",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = np.where(np.logical_or.reduce(conditions), val1, val2)",
 "import numpy as np\nconditions = np.array([c1, c2, c3, c4])\nvalue = np.where(np.logical_or.reduce(conditions), val1, val2)",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.sum(conditions) > 0 else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.count_nonzero(conditions) else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.any(np.array(conditions)) else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.array(conditions).any() else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.array(conditions).sum() > 0 else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.logical_or(*conditions) else val2",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalue = val1 if np.bitwise_or.reduce(conditions) else val2",
 "import numpy as np\nvalue = np.where(np.any([c1, c2, c3, c4], axis=0), val1, val2)",
 "import numpy as np\nvalue = np.select([c1, c2, c3, c4], [val1, val1, val1, val1], default=val2)",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalues = [val1, val1, val1, val1]\ndefault = val2\nvalue = np.select(conditions, values, default=default)",
 "import numpy as np\nvalue = np.where(c1, val1, np.where(c2, val1, np.where(c3, val1, val2 if not c4 else val1)))",
 "import numpy as np\nconditions = [c1, c2, c3, c4]\nvalues = [val1, val1, val1, val1]\nvalue = np.select(conditions, values, default=val2)",
 "import numpy as np\nvalue = val1 if np.count_nonzero([c1, c2, c3, c4]) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.asarray([c1, c2, c3, c4])) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=bool)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.bool_)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.bool8)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.int8)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.int16)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.int32)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.int64)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.uint8)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.uint16)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.uint32)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.uint64)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.float16)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.float32)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.float64)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.complex64)) else val2",
 "import numpy as np\nvalue = val1 if np.any(np.array([c1, c2, c3, c4], dtype=np.complex128)) else val2"
]