[
 "if c1 or c2 or c3 or c4:\n    value = val1\nelse:\n    value = val2",
 "if any((c1, c2, c3, c4)):\n    value = val1\nelse:\n    value = val2",
 "val_list = [c1, c2, c3, c4]\nif any(val_list):\n    value = val1\nelse:\n    value = val2",
 "value = val1 if c1 or c2 or c3 or c4 else val2",
 "condition = c1 or c2 or c3 or c4\nif condition:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if any(conditions) else val2",
 "value = (val2, val1)[any((c1, c2, c3, c4))]",
 "value = val1 if any((c1, c2, c3, c4)) else val2",
 "arr = (c1, c2, c3, c4)\nbool_sum = sum((bool(x) for x in arr)) > 0\nvalue = val1 if bool_sum else val2",
 "temp_bool = any((c1, c2, c3, c4))\nif temp_bool:\n    value = val1\nelse:\n    value = val2",
 "value = val1 if any([c1, c2, c3, c4]) else val2",
 "if all([not c for c in [c1, c2, c3, c4]]):\n    value = val2\nelse:\n    value = val1",
 "temp = [condition for condition in [c1, c2, c3, c4] if condition]\nvalue = val1 if len(temp) > 0 else val2",
 "import functools\nval_list = [c1, c2, c3, c4]\nvalue = val1 if functools.reduce(lambda a, b: a or b, val_list) else val2",
 "val_list = [c1, c2, c3, c4]\nfor i in val_list:\n    if i:\n        value = val1\n        break\nelse:\n    value = val2",
 "val_list = [c1, c2, c3, c4]\nvalue = (lambda x, y: x if any(val_list) else y)(val1, val2)",
 "conditions = [c1, c2, c3, c4]\n\ndef check_conditions(conditions):\n    if any(conditions):\n        return True\n    return False\nvalue = val1 if check_conditions(conditions) else val2",
 "if any([c1, c2, c3, c4]):\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\nfor condition in conditions:\n    if condition:\n        value = val1\n        break",
 "value = 'Value after condition check'\nif c1 or c2 or c3 or c4:\n    value = val1\nelse:\n    value = val2",
 "check = False\nfor condition in [c1, c2, c3, c4]:\n    if condition:\n        check = True\n        break\nvalue = val1 if check else val2",
 "check = False\nconditions = [c1, c2, c3, c4]\n\ndef check_func():\n    for c in conditions:\n        if c:\n            return val1\n    return val2\nvalue = check_func()",
 "conditions = [c1, c2, c3, c4]\nn = len(conditions)\ncheck = [False] * n\nfor i in range(n):\n    check[i] = conditions[i]\nvalue = val1 if any(check) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = (val1, val2)[not any(conditions)]",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if sum(map(bool, conditions)) else val2",
 "cond = any([c1, c2, c3, c4])\nvalue = val1 if cond else val2",
 "conditions_func = lambda : c1 or c2 or c3 or c4\nvalue = val1 if conditions_func() else val2",
 "tifv_spectrum = [val2, val1]\ntifv_analyte = any((c1, c2, c3, c4))\nvalue = tifv_spectrum[tifv_analyte]",
 "value = val1 if any((c for c in [c1, c2, c3, c4])) else val2",
 "value = val1 if any([c1, c2] + [c3, c4]) else val2",
 "arr = (c1, c2, c3, c4)\nvalue = val1 if any(map(bool, arr)) else val2",
 "arr = (c1, c2, c3, c4)\nvalue = val1 if any([bool(x) for x in arr]) else val2",
 "arr = [c1, c2, c3, c4]\nvalue = val1 if any((bool(x) for x in arr)) else val2",
 "arr = (c1, c2, c3, c4)\nbool_arr = list(map(bool, arr))\nvalue = val1 if any(bool_arr) else val2",
 "arr = (c1, c2, c3, c4)\nbool_arr = [bool(x) for x in arr]\nvalue = val1 if sum(bool_arr) > 0 else val2",
 "arr = (c1, c2, c3, c4)\narr_bool = [bool(a) for a in arr]\nb_sum = sum(arr_bool)\nif b_sum:\n    value = val1\nelse:\n    value = val2",
 "arr = (c1, c2, c3, c4)\nbool_sum = any((x for x in arr))\nvalue = val1 if bool_sum else val2",
 "arr = (c1, c2, c3, c4)\nvalue = val1 if any(arr) else val2",
 "arr = (c1, c2, c3, c4)\nbool_indicator = [1 if x else 0 for x in arr]\nvalue = val1 if sum(bool_indicator) > 0 else val2",
 "arr = (c1, c2, c3, c4)\nbool_sum = len([i for i in arr if bool(i)]) > 0\nvalue = val1 if bool_sum else val2",
 "arr = (c1, c2, c3, c4)\nbool_sum = len(list(filter(lambda x: bool(x), arr))) > 0\nvalue = val1 if bool_sum else val2",
 "temp_bool = bool(c1 or c2 or c3 or c4)\nif temp_bool:\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nipassed = False\nfor condition in conditions:\n    if condition:\n        ipassed = True\n        break\nif ipassed:\n    value = val1\nelse:\n    value = val2",
 "import functools\nvalue = val1 if functools.reduce(lambda a, b: a or b, [c1, c2, c3, c4]) else val2",
 "def check_conditions(conditions):\n    for condition in conditions:\n        if condition:\n            return True\n    return False\nconditions = [c1, c2, c3, c4]\nvalue = val1 if check_conditions(conditions) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nfor condition in conditions:\n    if condition:\n        break\nelse:\n    value = val2",
 "from functools import reduce\nconditions = [c1, c2, c3, c4]\nvalue = val1 if reduce(lambda a, b: a or b, conditions) else val2",
 "import functools\nconditions = [c1, c2, c3, c4]\nif functools.reduce(lambda a, b: a or b, conditions):\n    value = val1\nelse:\n    value = val2",
 "condition = c1 or c2 or c3 or c4\nvalue = val1 if condition else val2",
 "value = val1\nif not c1 and (not c2) and (not c3) and (not c4):\n    value = val2",
 "value = val2\nif any([c1, c2, c3, c4]):\n    value = val1",
 "from functools import reduce\nvalue = val1 if reduce(lambda a, b: a or b, [c1, c2, c3, c4]) else val2",
 "def check_conditions(c1, c2, c3, c4):\n    return c1 or c2 or c3 or c4\nvalue = val1 if check_conditions(c1, c2, c3, c4) else val2",
 "from functools import reduce\nvalue = val1 if reduce(lambda x, y: x or y, [c1, c2, c3, c4]) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if len([x for x in conditions if x]) > 0 else val2",
 "import itertools\nvalue = val1 if any(itertools.chain([c1, c2, c3, c4])) else val2",
 "def assign_value(c1, c2, c3, c4, val1, val2):\n    if any([c1, c2, c3, c4]):\n        return val1\n    else:\n        return val2\nvalue = assign_value(c1, c2, c3, c4, val1, val2)",
 "value = (val1, val2)[not (c1 or c2 or c3 or c4)]",
 "def check_conditions(conditions):\n    return any(conditions)\nconditions = [c1, c2, c3, c4]\nvalue = val1 if check_conditions(conditions) else val2",
 "def check_conditions(conditions):\n    return not all([not condition for condition in conditions])\nconditions = [c1, c2, c3, c4]\nvalue = val1 if check_conditions(conditions) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if any([condition for condition in conditions if condition]) else val2",
 "def check_conditions(conditions):\n    return sum([1 for condition in conditions if condition]) > 0\nconditions = [c1, c2, c3, c4]\nvalue = val1 if check_conditions(conditions) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if next((True for condition in conditions if condition), False) else val2",
 "def check_conditions(conditions):\n    return any((condition for condition in conditions))\nconditions = [c1, c2, c3, c4]\nvalue = val1 if check_conditions(conditions) else val2",
 "conditions = [c1, c2, c3, c4]\ncheck_conditions = lambda conditions: any(conditions)\nvalue = val1 if check_conditions(conditions) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if sum((1 for condition in conditions if condition)) > 0 else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\ni = 0\nwhile i < len(conditions):\n    if conditions[i]:\n        break\n    i += 1\nif i == len(conditions):\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nfor i in range(len(conditions)):\n    if conditions[i]:\n        break\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nis_break = False\nfor condition in conditions:\n    if condition:\n        is_break = True\n        break\nif not is_break:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\ni = 0\nwhile i < len(conditions) and (not conditions[i]):\n    i += 1\nif i == len(conditions):\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nif not any(conditions):\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nif all([not condition for condition in conditions]):\n    value = val2",
 "import itertools\nconditions = [c1, c2, c3, c4]\nvalue = val1\nif next((True for condition in conditions if condition), False) == False:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nfor i in range(len(conditions)):\n    if conditions[i]:\n        break\n    if i == len(conditions) - 1:\n        value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nfor (i, condition) in enumerate(conditions):\n    if condition:\n        break\n    if i == len(conditions) - 1:\n        value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nif len([condition for condition in conditions if condition]) == 0:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1\nif len(list(filter(lambda x: x, conditions))) == 0:\n    value = val2",
 "import functools\nconditions = [c1, c2, c3, c4]\nvalue = functools.reduce(lambda a, b: a or b, conditions, False)\nvalue = val1 if value else val2",
 "value = val2\nfor condition in [c1, c2, c3, c4]:\n    if condition:\n        value = val1\n        break",
 "from functools import reduce\nconditions = [c1, c2, c3, c4]\nvalue = val1 if reduce(lambda x, y: x or y, conditions) else val2",
 "conditions = (c1, c2, c3, c4)\nif any(conditions):\n    value = val1\nelse:\n    value = val2",
 "import operator\nconditions = [c1, c2, c3, c4]\nif any(map(operator.truth, conditions)):\n    value = val1\nelse:\n    value = val2",
 "value = (lambda : val1, lambda : val2)[not any((c1, c2, c3, c4))]()",
 "import itertools\nconditions = [c1, c2, c3, c4]\nif any(itertools.compress(conditions, conditions)):\n    value = val1\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\ntry:\n    next(filter(lambda x: x, conditions))\n    value = val1\nexcept StopIteration:\n    value = val2",
 "def check_conditions(conditions, val1, val2):\n    for condition in conditions:\n        if condition:\n            return val1\n    return val2\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "from functools import reduce\nconditions = [c1, c2, c3, c4]\nvalue = reduce(lambda a, b: a or b, conditions)\nvalue = val1 if value else val2",
 "import functools\nvalue = val1 if functools.reduce(lambda a, b: a or b, (c1, c2, c3, c4)) else val2",
 "temp = any((c1, c2, c3, c4))\nvalue = val1 if temp else val2",
 "value = (lambda x: val1 if any(x) else val2)([c1, c2, c3, c4])",
 "from itertools import chain\nvalue = val1 if any(list(chain([c1, c2, c3, c4]))) else val2",
 "value = ((c1 or c2 or c3 or c4) and [val1] or [val2])[0]",
 "conditions = [c1, c2, c3, c4]\nchosen_value = val1 if any(conditions) else val2\nvalue = chosen_value",
 "try:\n    assert c1 or c2 or c3 or c4\n    value = val1\nexcept:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\nfor i in range(len(conditions)):\n    if conditions[i]:\n        value = val1\n        break",
 "conditions = [c1, c2, c3, c4]\n\ndef check_conditions(conditions):\n    for condition in conditions:\n        if condition:\n            return True\n    return False\nvalue = val1 if check_conditions(conditions) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = None\nif any(conditions):\n    value = val1\nelse:\n    value = val2",
 "from functools import reduce\nconditions = [c1, c2, c3, c4]\nvalue = reduce(lambda a, b: a or b, conditions)\nif value:\n    value = val1\nelse:\n    value = val2",
 "def check_conditions(conditions, val1, val2):\n    return val1 if any(conditions) else val2\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "def check_conditions(conditions, val1, val2):\n    return (val1, val2)[not any(conditions)]\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "def check_conditions(conditions, val1, val2):\n    if any(conditions):\n        return val1\n    else:\n        return val2\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "def check_conditions(conditions, val1, val2):\n    try:\n        assert any(conditions)\n        return val1\n    except AssertionError:\n        return val2\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "def check_conditions(conditions, val1, val2):\n    result = val2\n    for condition in conditions:\n        if condition:\n            result = val1\n            break\n    return result\nvalue = check_conditions([c1, c2, c3, c4], val1, val2)",
 "conditions = [c1, c2, c3, c4]\nvalue = False\nfor condition in conditions:\n    value = value or condition\nvalue = val1 if value else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = any(conditions)\nvalue = val1 if value else val2",
 "import operator\ndef check_conditions(*conditions):\n    return any(conditions)\nvalue = val1 if check_conditions(c1, c2, c3, c4) else val2",
 "def check_conditions(conditions):\n    return any(conditions)\nvalue = val1 if check_conditions([c1, c2, c3, c4]) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = (val2, val1)[any(conditions)]",
 "or_conditions = list(filter(None, [c1, c2, c3, c4]))\nif len(or_conditions) > 0:\n    value = val1\nelse:\n    value = val2",
 "import functools\nvalue = val1 if functools.reduce(lambda a, b: bool(a) or bool(b), [c1, c2, c3, c4]) else val2",
 "import functools\nresult = functools.reduce(lambda a, b: a or b, [c1, c2, c3, c4])\nvalue = val1 if result else val2",
 "import functools\nvalue = val1 if functools.reduce(lambda a, b: a or b, [c1, c2, c3, c4], False) else val2",
 "import functools\nvalue = val1 if functools.reduce(lambda a, b: a or b, [c1, c2, c3, c4], 0) else val2",
 "import functools\nvalue = val1 if bool(functools.reduce(lambda a, b: a or b, [c1, c2, c3, c4])) else val2",
 "from functools import reduce\ncondition = reduce(lambda a, b: a or b, [c1, c2, c3, c4])\nvalue = val1 if condition else val2",
 "condition = c1\ndefault = val2\nif not condition:\n    condition = c2\nif not condition:\n    condition = c3\nif not condition:\n    condition = c4\nvalue = val1 if condition else default",
 "if c1:\n    value = val1\nelif c2:\n    value = val1\nelif c3:\n    value = val1\nelif c4:\n    value = val1\nelse:\n    value = val2",
 "import functools\nvalue = val1 if functools.reduce(lambda x, y: x or y, (c1, c2, c3, c4)) else val2",
 "import functools\nconditions = [c1, c2, c3, c4]\nvalue = val1 if functools.reduce(lambda x, y: x or y, conditions) else val2",
 "value = val2\nif c1 or c2 or c3 or c4:\n    value = val1",
 "conditions = [c1, c2, c3, c4]\nvalue = next((val1 for condition in conditions if condition), val2)",
 "conditions = [c1, c2, c3, c4]\nfor i in range(len(conditions)):\n    if conditions[i]:\n        value = val1\n        break\nelse:\n    value = val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if c1 or c2 or c3 or c4 else val2",
 "import itertools\nconditions = [c1, c2, c3, c4]\nvalue = val1 if any(itertools.islice(conditions, None)) else val2",
 "conditions = [c1, c2, c3, c4]\n\ndef check_conditions(conditions):\n    return any(conditions)\nvalue = val1 if check_conditions(conditions) else val2",
 "temp = False\nfor i in [c1, c2, c3, c4]:\n    temp = temp or i\nvalue = val1 if temp else val2",
 "import functools\nvalue = val1 if functools.reduce(lambda x, y: x or y, [c1, c2, c3, c4]) else val2",
 "from functools import reduce\ncondition = reduce(lambda x, y: x or y, [c1, c2, c3, c4])\nif condition:\n    value = val1\nelse:\n    value = val2",
 "condition = False\nfor c in [c1, c2, c3, c4]:\n    condition = condition or c\n    if condition:\n        break\nvalue = val1 if condition else val2",
 "condition = False\ni = 0\nwhile not condition and i < 4:\n    condition = [c1, c2, c3, c4][i]\n    i += 1\nvalue = val1 if condition else val2",
 "condition = False\nfor c in [c1, c2, c3, c4]:\n    condition = c\n    if condition:\n        break\nvalue = val1 if condition else val2",
 "import itertools\ncondition = any(itertools.chain([c1, c2, c3, c4]))\nvalue = val1 if condition else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\nif any(conditions):\n    value = val1",
 "conditions = [c1, c2, c3, c4]\nfor condition in conditions:\n    if condition:\n        value = val1\n        break\nif not condition:\n    value = val2",
 "import itertools\nconditions = [c1, c2, c3, c4]\nvalue = val1 if any(itertools.islice(conditions, 4)) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\ni = 0\nwhile i < len(conditions):\n    if conditions[i]:\n        value = val1\n        break\n    i += 1",
 "check_list = [c1, c2, c3, c4]\nvalue = val1\nfor check in check_list:\n    if check:\n        value = val1\n        break\nelse:\n    value = val2",
 "if bool(c1) or bool(c2) or bool(c3) or bool(c4):\n    value = val1\nelse:\n    value = val2",
 "if any([bool(c) for c in [c1, c2, c3, c4]]):\n    value = val1\nelse:\n    value = val2",
 "if any(map(bool, [c1, c2, c3, c4])):\n    value = val1\nelse:\n    value = val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, [c1, c2, c3, c4], False)\nif value:\n    value = val1\nelse:\n    value = val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, [c1, c2, c3, c4], False)\nvalue = val1 if value else val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, [c1, c2, c3, c4], False)\nvalue = (value and [val1] or [val2])[0]",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, (c1, c2, c3, c4), False)\nif value:\n    value = val1\nelse:\n    value = val2",
 "import functools\nvalue = functools.reduce(lambda x, y: x or y, (c1, c2, c3, c4), False)\nvalue = val1 if value else val2",
 "import functools\nvalue = val1 if functools.reduce(lambda x, y: x or y, (c1, c2, c3, c4), False) else val2",
 "temp = c1\ntemp = temp or c2\ntemp = temp or c3\ntemp = temp or c4\nvalue = val1 if temp else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if len([c for c in conditions if c]) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val1 if next(filter(None, conditions), False) else val2",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\nvalue = val1 if any(conditions) else value",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\ni = 0\nwhile i < len(conditions) and (not conditions[i]):\n    i += 1\nif i < len(conditions):\n    value = val1",
 "conditions = [c1, c2, c3, c4]\nvalue = val2\ntry:\n    next((x for x in conditions if x))\n    value = val1\nexcept StopIteration:\n    pass",
 "import numpy as np\nvalue = val1 if np.any(np.fromiter([c1, c2, c3, c4], dtype=bool)) else val2"
]