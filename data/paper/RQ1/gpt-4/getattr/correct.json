[
 "try:\n    n = obj.name\nexcept:\n    n = 'unknown'",
 "n = getattr(obj, 'name', 'unknown')",
 "n = 'unknown'\nif hasattr(obj, 'name'):\n    n = obj.name",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    pass",
 "n = 'unknown'\nif 'name' in dir(obj):\n    n = obj.name",
 "n = obj.name if hasattr(obj, 'name') else 'unknown'",
 "try:\n    n = obj.name\nexcept AttributeError:\n    n = 'unknown'",
 "n = getattr(obj, 'name') if hasattr(obj, 'name') else 'unknown'",
 "n = 'unknown'\nif hasattr(obj, 'name'):\n    n = getattr(obj, 'name')",
 "n = getattr(obj, 'name') if 'name' in dir(obj) else 'unknown'",
 "n = 'unknown'\ntry:\n    n = getattr(obj, 'name', 'unknown')\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__getattribute__('name')\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    n = 'unknown'\nfinally:\n    pass",
 "n = 'unknown'\ntry:\n    if hasattr(obj, 'name'):\n        n = obj.name\nexcept Exception as e:\n    pass",
 "def get_attr(obj, attr, default):\n    try:\n        return getattr(obj, attr)\n    except AttributeError:\n        return default\nn = get_attr(obj, 'name', 'unknown')",
 "n = obj.name if 'name' in dir(obj) else 'unknown'",
 "n = 'unknown'\nif 'name' in dir(obj):\n    n = getattr(obj, 'name')",
 "try:\n    n = getattr(obj, 'name')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\nfor attr in dir(obj):\n    if attr == 'name':\n        n = getattr(obj, 'name')\n        break",
 "n = 'unknown'\ntry:\n    n = getattr(obj, 'name')\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept Exception as e:\n    if isinstance(e, AttributeError):\n        n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept:\n    pass",
 "n = 'unknown' if not hasattr(obj, 'name') else getattr(obj, 'name')",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept Exception as e:\n    if isinstance(e, AttributeError):\n        pass",
 "n = getattr(obj, 'name', 'unknown') if 'name' in dir(obj) else 'unknown'",
 "n = 'unknown'\nfor attr in dir(obj):\n    if attr == 'name':\n        n = obj.name\n        break",
 "n = 'unknown'\nfor attr in dir(obj):\n    if attr == 'name':\n        n = getattr(obj, attr)\n        break",
 "n = 'unknown'\nattrs = [attr for attr in dir(obj) if attr == 'name']\nif attrs:\n    n = getattr(obj, attrs[0])",
 "n = 'unknown'\nattrs = filter(lambda attr: attr == 'name', dir(obj))\nfor attr in attrs:\n    n = getattr(obj, attr)\n    break",
 "n = 'unknown' if not hasattr(obj, 'name') else obj.name",
 "n = 'unknown'\ntry:\n    if 'name' in dir(obj):\n        n = obj.name\nexcept TypeError:\n    pass",
 "n = 'unknown'\nn = getattr(obj, 'name', 'unknown')",
 "n = 'unknown'\ntry:\n    n = obj.__getattribute__('name')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = getattr(obj, 'name', 'unknown')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.name if hasattr(obj, 'name') else 'unknown'\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\nif hasattr(obj, 'name'):\n    n = obj.name\nelse:\n    n = 'unknown'",
 "n = obj.__getattribute__('name') if hasattr(obj, 'name') else 'unknown'",
 "n = 'unknown' if 'name' not in dir(obj) else obj.name",
 "n = 'unknown'\ntry:\n    n = getattr(obj, 'name', 'unknown')\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    if hasattr(obj, 'name'):\n        n = obj.name\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name if 'name' in dir(obj) else 'unknown'\nexcept:\n    pass",
 "if hasattr(obj, 'name'):\n    n = obj.name\nelse:\n    n = 'unknown'",
 "try:\n    n = obj.name\nexcept Exception as e:\n    if isinstance(e, AttributeError):\n        n = 'unknown'\n    else:\n        raise e",
 "n = 'unknown'\n\ndef check_name(obj):\n    if hasattr(obj, 'name'):\n        return obj.name\n    return 'unknown'\nn = check_name(obj)",
 "n = 'unknown'\ntry:\n    n = obj.__getattribute__('name') if 'name' in dir(obj) else 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    if hasattr(obj, 'name'):\n        n = obj.name\n    else:\n        n = 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\nif hasattr(obj, 'name'):\n    try:\n        n = obj.name\n    except:\n        pass",
 "n = 'unknown'\ntry:\n    n = obj.name if hasattr(obj, 'name') else 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\n\ndef check_name(obj):\n    try:\n        return obj.name\n    except:\n        return 'unknown'\nn = check_name(obj)",
 "def extract_name(obj):\n    try:\n        return obj.name\n    except AttributeError:\n        return 'unknown'\nn = extract_name(obj)",
 "import operator\nn = 'unknown'\ntry:\n    n = operator.attrgetter('name')(obj)\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    if hasattr(obj, 'name'):\n        n = getattr(obj, 'name')\n    else:\n        n = 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept (AttributeError, TypeError):\n    pass",
 "n = 'unknown' if hasattr(obj, 'name') is False else getattr(obj, 'name')",
 "try:\n    n = getattr(obj, 'name', 'unknown')\nexcept AttributeError:\n    n = 'unknown'",
 "try:\n    n = obj.__getattribute__('name')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\nn = getattr(obj, 'name', n)",
 "def get_name(obj):\n    return getattr(obj, 'name', 'unknown')\nn = get_name(obj)",
 "if 'name' in dir(obj):\n    n = obj.name\nelse:\n    n = 'unknown'",
 "n = 'unknown'\nfor attr in dir(obj):\n    if attr == 'name':\n        n = obj.name",
 "attribute = 'name'\nn = getattr(obj, attribute) if hasattr(obj, attribute) else 'unknown'",
 "def get_name(obj):\n    if hasattr(obj, 'name'):\n        return obj.name\n    else:\n        return 'unknown'\nn = get_name(obj)",
 "n = 'unknown'\nif dir(obj).__contains__('name'):\n    n = obj.name",
 "if hasattr(obj, 'name'):\n    n = getattr(obj, 'name')\nelse:\n    n = 'unknown'",
 "default_name = 'unknown'\nattribute_name = 'name'\nif attribute_name in dir(obj):\n    n = getattr(obj, attribute_name)\nelse:\n    n = default_name",
 "attribute_checker = lambda object, attribute, default: getattr(object, attribute) if hasattr(object, attribute) else default\nn = attribute_checker(obj, 'name', 'unknown')",
 "import builtins\nn = 'unknown'\nif bool(hasattr(obj, 'name')):\n    n = builtins.getattr(obj, 'name')",
 "n = getattr(obj, 'name', 'unknown') if hasattr(obj, 'name') else 'unknown'",
 "import operator\ntry:\n    n = operator.attrgetter('name')(obj)\nexcept Exception as e:\n    if isinstance(e, AttributeError):\n        n = 'unknown'",
 "def get_attribute(obj, attr, default):\n    return getattr(obj, attr, default)\nn = get_attribute(obj, 'name', 'unknown')",
 "n = obj.__getattribute__('name') if 'name' in dir(obj) else 'unknown'",
 "n = 'unknown'\nattr_list = dir(obj)\nif 'name' in attr_list:\n    n = obj.name",
 "n = 'unknown'\ntry:\n    obj_name = obj.name\n    n = obj_name\nexcept AttributeError:\n    pass",
 "n = 'unknown'\nif isinstance(obj, object):\n    try:\n        n = obj.name\n    except AttributeError:\n        pass",
 "n = getattr(obj, 'name', 'unknown') if hasattr(obj, '__dict__') else 'unknown'",
 "n = 'unknown'\nif 'name' in obj.__dir__():\n    n = obj.name",
 "n = 'unknown'\ntry:\n    n = getattr(obj, 'name', 'unknown')\nexcept Exception as e:\n    if not isinstance(e, AttributeError):\n        raise",
 "n = 'unknown'\ntry:\n    n = obj.__getattribute__('name')\nexcept AttributeError:\n    pass\nexcept Exception as e:\n    raise",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    pass\nexcept Exception as e:\n    raise e",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    pass\nexcept:\n    raise",
 "n = 'unknown'\ntry:\n    n = getattr(obj, 'name', 'unknown')\nexcept Exception as e:\n    raise e",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    pass\nexcept BaseException:\n    raise",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    pass\nexcept:\n    raise Exception('An unexpected error occurred')",
 "n = 'unknown'\ntry:\n    n = obj.__getattribute__('name')\nexcept:\n    pass",
 "import operator\ntry:\n    n = operator.attrgetter('name')(obj)\nexcept AttributeError:\n    n = 'unknown'",
 "try:\n    n = obj.name\nexcept:\n    if not isinstance(obj, object):\n        raise\n    n = 'unknown'",
 "try:\n    n = obj.name\nexcept:\n    if not isinstance(obj, type):\n        n = 'unknown'",
 "from operator import attrgetter\nn = 'unknown'\ntry:\n    n = attrgetter('name')(obj)\nexcept Exception as e:\n    pass",
 "from functools import reduce\nn = 'unknown'\ntry:\n    n = reduce(getattr, ['name'], obj)\nexcept Exception as e:\n    pass",
 "import operator\nn = 'unknown'\ntry:\n    n = operator.attrgetter('name')(obj)\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name if hasattr(obj, 'name') else 'unknown'\nexcept AttributeError:\n    pass",
 "def get_name(obj):\n    return obj.name if hasattr(obj, 'name') else 'unknown'\nn = get_name(obj)",
 "from functools import reduce\nn = reduce(lambda x, y: getattr(obj, y, x), ['name'], 'unknown')",
 "import builtins\nn = 'unknown'\ntry:\n    n = getattr(obj, 'name', 'unknown')\nexcept builtins.AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name if 'name' in dir(obj) else 'unknown'\nexcept AttributeError:\n    pass",
 "from operator import attrgetter\nn = 'unknown' if not hasattr(obj, 'name') else attrgetter('name')(obj)",
 "attributes = dir(obj)\nif 'name' in attributes:\n    n = obj.name\nelse:\n    n = 'unknown'",
 "get_attr = lambda x, y: getattr(obj, y, x)\nn = get_attr('unknown', 'name')",
 "import functools\nn = 'unknown'\ntry:\n    n = functools.reduce(lambda a, b: a.__getattribute__(b), 'name'.split('.'), obj)\nexcept Exception:\n    pass"
]