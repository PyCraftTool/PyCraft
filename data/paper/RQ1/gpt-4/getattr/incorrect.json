[
 "n = obj.__dict__.get('name', 'unknown')",
 "n = 'unknown'\nif 'name' in obj.__dict__:\n    n = obj.name",
 "n = 'unknown'\nif isinstance(obj, type) and 'name' in obj.__dict__:\n    n = obj.name",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name', 'unknown')\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__getattr__('name')\nexcept AttributeError:\n    pass",
 "n = 'unknown'\nif 'name' in vars(obj):\n    n = obj.name",
 "n = 'unknown'\nif hasattr(obj, '__dict__') and 'name' in obj.__dict__:\n    n = obj.name",
 "n = obj.__dict__.get('name', 'unknown') if 'name' in obj.__dict__ else 'unknown'",
 "n = dir(obj).count('name') and getattr(obj, 'name') or 'unknown'",
 "n = 'unknown' if 'name' not in obj.__dict__ else obj.__dict__['name']",
 "n = obj.__dict__['name'] if 'name' in obj.__dict__ else 'unknown'",
 "try:\n    n = obj.__dict__['name']\nexcept KeyError:\n    n = 'unknown'",
 "n = obj.__dict__.get('name') or 'unknown'",
 "n = 'unknown'\nfor key in obj.__dict__:\n    if key == 'name':\n        n = obj.name\n        break",
 "n = 'unknown'\nif type(obj).__name__ == 'type' and 'name' in dir(obj):\n    n = obj.name",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name']\nexcept KeyError:\n    pass",
 "n = 'unknown'\nif 'name' in obj.__dict__.keys():\n    n = obj.name",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') if 'name' in obj.__dict__ else 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name'] if 'name' in obj.__dict__ else 'unknown'\nexcept KeyError:\n    pass\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name']\nexcept (KeyError, AttributeError):\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name'] if 'name' in obj.__dict__ else 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name')\n    if n is None:\n        n = 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name'] if hasattr(obj, 'name') else 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept:\n    if not isinstance(obj, AttributeError):\n        raise\n    pass",
 "n = 'unknown'\nif isinstance(obj, object) and 'name' in vars(obj):\n    n = obj.name",
 "n = 'unknown'\nif 'name' in obj.__dict__ if hasattr(obj, '__dict__') else []:\n    n = obj.name",
 "def get_attr(obj, attr, default):\n    return obj.__dict__.get(attr, default)\nn = get_attr(obj, 'name', 'unknown')",
 "n = obj.__dict__.get('name', 'unknown') if obj.__dict__.has_key('name') else 'unknown'",
 "n = obj.__dict__.get('name') if 'name' in obj.__dict__ else 'unknown'",
 "n = 'unknown' if 'name' not in obj.__dict__ else obj.__dict__.get('name', 'unknown')",
 "n = obj.__dict__.get('name', 'unknown') if obj.__dict__.get('name') else 'unknown'",
 "n = 'unknown' if not 'name' in obj.__dict__ else obj.__dict__.get('name', 'unknown')",
 "n = obj.__dict__.get('name') if obj.__dict__.get('name') is not None else 'unknown'",
 "n = hasattr(obj, 'name') and getattr(obj, 'name') or 'unknown'",
 "n = 'unknown'\nif 'name' in obj.__dict__:\n    n = obj.__dict__['name']",
 "n = obj.__dict__['name'] if obj.__dict__.has_key('name') else 'unknown'",
 "n = obj.__dict__.pop('name', 'unknown')",
 "try:\n    n = obj.__dict__['name']\nexcept:\n    n = 'unknown'",
 "n = obj.__dict__.get('name')\nif not n:\n    n = 'unknown'",
 "n = 'unknown'\nfor (key, value) in obj.__dict__.items():\n    if key == 'name':\n        n = value\n        break",
 "n = 'unknown'\nkeys = obj.__dict__.keys()\nif 'name' in keys:\n    n = obj.name",
 "import inspect\nn = 'unknown'\nif inspect.isclass(obj) and hasattr(obj, 'name'):\n    n = obj.name",
 "n = 'unknown'\nif isinstance(obj, type) and hasattr(obj, 'name'):\n    n = obj.name",
 "n = 'unknown'\ntry:\n    if isinstance(obj, type):\n        n = obj.name\nexcept AttributeError:\n    pass",
 "n = getattr(obj, 'name', 'unknown') if isinstance(obj, type) else 'unknown'",
 "n = 'unknown'\nif type(obj) is type and 'name' in obj.__dict__:\n    n = obj.name",
 "n = 'unknown'\nif type(obj).__name__ == 'type':\n    if 'name' in obj.__dict__:\n        n = obj.name",
 "n = 'unknown'\nn = obj.__dict__.get('name', n)",
 "n = 'unknown'\nfor key in obj.__dict__:\n    if key == 'name':\n        n = obj.__dict__[key]\n        break",
 "n = 'unknown'\nkeys = obj.__dict__.keys()\nif 'name' in keys:\n    n = obj.__dict__['name']",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name')\nexcept TypeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name']\nexcept (KeyError, AttributeError):\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name')\nexcept (TypeError, AttributeError):\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') or 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name'] if 'name' in obj.__dict__.keys() else 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name', 'unknown')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name'] if 'name' in obj.__dict__ else 'unknown'\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') if hasattr(obj, 'name') else 'unknown'\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') if 'name' in dir(obj) else 'unknown'\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name']\nexcept KeyError:\n    n = 'unknown'",
 "from operator import attrgetter\nn = attrgetter('name', 'unknown')(obj)",
 "import functools\nget_name = functools.partial(getattr, default='unknown')\nn = get_name(obj, 'name')",
 "n = 'name' in vars(obj) and obj.name or 'unknown'",
 "n = vars(obj).get('name', 'unknown')",
 "import operator\nn = operator.attrgetter('name', 'unknown')(obj)",
 "n = obj.name if 'name' in obj.__dict__ else 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name', 'unknown')\nexcept:\n    pass",
 "from operator import attrgetter\nn = 'unknown'\ntry:\n    n = attrgetter('name', 'unknown')(obj)\nexcept:\n    pass",
 "import attr\nn = attr.get(obj, 'name', 'unknown')",
 "import attr\nn = attr.get(obj, 'name', None)\nif n is None:\n    n = 'unknown'",
 "n = 'unknown' if obj.__dict__.get('name') is None else obj.__dict__.get('name')",
 "n = (obj.name, obj.unknown)",
 "n = (getattr(obj, 'name'), getattr(obj, 'unknown'))",
 "n = tuple(map(lambda x: getattr(obj, x), ['name', 'unknown']))",
 "from operator import itemgetter\nn = itemgetter('name', 'unknown')(obj.__dict__)",
 "n = tuple((getattr(obj, attr) for attr in ('name', 'unknown')))",
 "attributes = ['name', 'unknown']\nn = tuple(map(lambda x: getattr(obj, x), attributes))",
 "n = 'unknown'\ntry:\n    n = obj.name\nexcept:\n    if not isinstance(obj, AttributeError):\n        raise",
 "n = dir(obj).index('name') and obj.name or 'unknown'",
 "n = obj.name if isinstance(obj, type) and 'name' in obj.__dict__ else 'unknown'",
 "n = 'name' in vars(obj) and vars(obj)['name'] or 'unknown'",
 "n = 'unknown'\ntry:\n    if obj.name:\n        n = obj.name\nexcept AttributeError:\n    pass",
 "n = 'unknown'\nif isinstance(obj, type):\n    if 'name' in obj.__dict__:\n        n = obj.name",
 "n = vars(obj)['name'] if 'name' in vars(obj) else 'unknown'",
 "n = 'unknown'\nif 'name' in vars(obj).keys():\n    n = obj.name",
 "n = (lambda obj: (obj.name, obj.unknown))(obj)",
 "attrs = ['name', 'unknown']\nn = tuple(map(lambda attr: getattr(obj, attr), attrs))",
 "def get_attrs(obj, attrs):\n    return tuple((getattr(obj, attr) for attr in attrs))\nn = get_attrs(obj, ['name', 'unknown'])",
 "n = (obj.name, getattr(obj, 'unknown', None))",
 "n = (getattr(obj, 'name'), getattr(obj, 'unknown', None))",
 "n = (lambda o: (o.name, getattr(o, 'unknown', None)))(obj)",
 "n = (obj.__getattribute__('name'), obj.__getattribute__('unknown') if hasattr(obj, 'unknown') else None)",
 "n = hasattr(obj, 'name') and obj.name or 'unknown'",
 "if 'name' in vars(obj):\n    n = obj.name\nelse:\n    n = 'unknown'",
 "import json\nn = 'unknown'\ntry:\n    n = json.loads(json.dumps(obj.__dict__)).get('name', 'unknown')\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') if 'name' in obj.__dict__ else 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name'] if 'name' in obj.__dict__ else 'unknown'\nexcept:\n    pass",
 "n = obj.__dict__.get('name', 'unknown') if hasattr(obj, '__dict__') else 'unknown'",
 "n = 'unknown'\ntry:\n    if 'name' in obj.__dict__:\n        n = obj.__dict__['name']\nexcept:\n    pass",
 "import operator\nn = 'unknown'\ntry:\n    n = operator.attrgetter('name', 'unknown')(obj)\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.name if 'name' in obj.__dict__ else 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.get('name', 'unknown')\nexcept:\n    n = 'unknown'",
 "n = obj.__dict__.get('name')\nif n is None:\n    n = 'unknown'",
 "n = 'unknown' if not obj.__dict__.get('name') else obj.__dict__.get('name')",
 "if 'name' in obj.__dict__:\n    n = obj.__dict__['name']\nelse:\n    n = 'unknown'",
 "try:\n    n = obj.__dict__.get('name', 'unknown')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown' if not 'name' in obj.__dict__ else obj.__dict__['name']",
 "if 'name' in obj.__dict__.keys():\n    n = obj.__dict__['name']\nelse:\n    n = 'unknown'",
 "import operator\nn = 'unknown'\nif operator.contains(obj.__dict__, 'name'):\n    n = obj.__dict__['name']",
 "n = 'unknown'\nfor key in obj.__dict__:\n    if key == 'name':\n        n = obj.__dict__['name']\n        break",
 "keys = vars(obj).keys()\nif 'name' in keys:\n    n = obj.name\nelse:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.name\nfinally:\n    pass",
 "import numpy as np\nn = 'unknown'\nattribute = np.array(list(filter(lambda s: s == 'name', dir(obj))))\nn = attribute[0] if attribute.size != 0 else n",
 "import operator\nn = operator.attrgetter('name')(obj) if operator.attrgetter('name')(obj) else 'unknown'",
 "import inspect\nn = 'unknown'\nif 'name' in inspect.getmembers(obj):\n    n = obj.name",
 "n = obj.__dict__.get('name', 'unknown') if obj.__dict__.__contains__('name') else 'unknown'",
 "n = obj.name if 'name' in vars(obj) else 'unknown'",
 "n = 'unknown' if 'name' not in vars(obj) else obj.name",
 "n = 'unknown' if 'name' not in vars(obj) else vars(obj)['name']",
 "object_vars = lambda x: vars(x)\nkeys = object_vars(obj)\nn = keys['name'] if 'name' in keys else 'unknown'",
 "import numpy as np\nn = np.where('name' in dir(obj), obj.name, 'unknown')",
 "temp_dic = vars(obj)\nn = temp_dic.get('name', 'unknown')",
 "temp_dic = obj.__dict__\nif not 'name' in temp_dic:\n    n = 'unknown'\nelse:\n    n = temp_dic.get('name')",
 "d = obj.__dict__\nn = d.get('name', 'unknown')",
 "attr_obj = obj.__dict__\nif 'name' in attr_obj:\n    n = attr_obj['name']\nelse:\n    n = 'unknown'",
 "defaults = {'name': 'unknown'}\na_dict = obj.__dict__\ndefaults.update(a_dict)\nn = defaults['name']",
 "n = 'unknown'\ntry:\n    n = obj.get('name', 'unknown')\nexcept:\n    pass",
 "import attr\nn = 'unknown'\nn = attr.get(obj, 'name', n)",
 "attributes = obj.__dict__\nn = attributes['name'] if 'name' in attributes else 'unknown'",
 "n = 'unknown'\nn = setattr(obj, 'name', n) or n if 'name' not in dir() else obj.name",
 "path_parts = ['name', 'unknown']\npath_var = ['obj', 'n']\nfor (path, var) in zip(path_parts, path_var):\n    try:\n        exec('%s = %s.%s' % (var, path_var[0], path))\n    except AttributeError:\n        pass",
 "n = 'unknown'\nn = next((value for (attr, value) in obj.__dict__.items() if attr == 'name'), n)",
 "n = vars(obj).get('name', 'unknown') if 'name' in vars(obj) else 'unknown'",
 "import numpy as np\nn = np.where(obj.name, obj.name, 'unknown')",
 "n = 'unknown'\nattribute = []\nfor s in dir(obj):\n    if s == 'name':\n        attribute.append(s)\nif len(attribute) > 0:\n    n = attribute[0]\nelse:\n    n = n",
 "n = 'unknown'\nattributes = [s for s in dir(obj) if s == 'name']\nif len(attributes) > 0:\n    n = attributes[0]",
 "import itertools\nn = next((s for s in dir(obj) if s == 'name'), 'unknown')",
 "from typing import Optional\nn: Optional[str] = next((node for node in map(lambda s: s if s == 'name' else None, dir(obj)) if node is not None), 'unknown')",
 "import numpy as np\nattribute = np.array([item for item in dir(obj) if item == 'name'])\nn = attribute[0] if len(attribute) != 0 else 'unknown'",
 "import numpy as np\ntry:\n    n = [item for item in dir(obj) if item == 'name'][0]\nexcept IndexError:\n    n = 'unknown'",
 "n = 'unknown'\nfor item in dir(obj):\n    if item == 'name':\n        n = item\n        break",
 "try:\n    n = obj['name']\nexcept KeyError:\n    n = 'unknown'",
 "n = obj.get('name', 'unknown')",
 "n = 'unknown' if 'name' not in obj else obj['name']",
 "keys = obj.keys()\nif 'name' in keys:\n    n = obj['name']\nelse:\n    n = 'unknown'",
 "user_defined_function_returned = 'unknown'\n\ndef pydash_inspect(obj):\n    try:\n        user_defined_function_returned = obj['name']\n    except KeyError:\n        pass\n    return user_defined_function_returned\nn = pydash_inspect(obj)",
 "(n := obj.get('name', 'unknown'))",
 "n = obj['name'] if 'name' in obj else 'unknown'",
 "get_val = lambda dictionary, key, default=None: dictionary.get(key, default)\nn = get_val(obj, 'name', 'unknown')",
 "def access_without_pydash(obj, key, default='unknown'):\n    if key in obj:\n        return obj[key]\n    else:\n        return default\nn = access_without_pydash(obj, 'name')",
 "def pydash_dummy(obj, key):\n    value = obj.get(key)\n    if value is not None:\n        return value\n    else:\n        return 'unknown'\nn = pydash_dummy(obj, 'name')",
 "import functools\nn = 'unknown'\nattr_value = functools.reduce(lambda a, v: setattr(a, v) if hasattr(a, v) else a, ('name', 'name'), obj)\nn = attr_value if attr_value is not obj else n",
 "n = 'unknown' if 'name' not in obj.__dict__ else obj.name",
 "names = {'name': 'unknown'}\nn = obj.__dict__.get('name', names['name'])",
 "n = ('unknown', obj.name)[hasattr(obj, 'name')]",
 "import operator\nn = operator.attrgetter('name')(obj)\nif not n:\n    n = 'unknown'",
 "n = dir(obj).count('name') and obj.name or 'unknown'",
 "attrs = [attr for attr in dir(obj) if attr == 'name']\nn = attrs[0] if attrs else 'unknown'",
 "n = obj.__getitem__('name', default='unknown')",
 "n = tuple([getattr(obj, attribute) for attribute in ['name', 'unknown']])",
 "n = lambda obj: (obj.name, obj.unknown)",
 "attributes = ['name', 'unknown']\ntry:\n    n = (obj.__getattribute__(attributes[0]), obj.__getattribute__(attributes[1]))\nexcept AttributeError:\n    n = None",
 "n = obj.__dict__.get('name', 'unknown') if isinstance(obj, object) else 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.get('name', 'unknown')\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj['name'] if 'name' in obj else 'unknown'\nexcept:\n    pass",
 "import numpy as np\nn = 'unknown'\ntry:\n    n = obj.name\nexcept np.core._exceptions.UFuncTypeError as e:\n    pass",
 "n = 'unknown'\nif hasattr(obj, '__dict__'):\n    if 'name' in obj.__dict__:\n        n = obj.__dict__['name']",
 "import inspect\nn = 'unknown'\nif inspect.isclass(obj) and 'name' in obj.__dict__:\n    n = obj.name",
 "n = 'unknown'\nif type(obj) == type and 'name' in vars(obj):\n    n = obj.name",
 "n = 'unknown'\nif isinstance(obj, type):\n    n = getattr(obj, 'name', 'unknown')",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name', 'unknown')\nexcept Exception as e:\n    if not isinstance(e, AttributeError):\n        raise",
 "n = 'unknown'\ntry:\n    n = obj.__getattr__('name')\nexcept AttributeError:\n    pass\nexcept Exception as e:\n    raise",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name']\nexcept:\n    if not isinstance(obj, object):\n        raise",
 "n = 'unknown'\ntry:\n    n = vars(obj).get('name', 'unknown')\nexcept Exception:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj['name']\nexcept KeyError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__getattr__('name')\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name')\n    if n is None:\n        n = 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name'] if 'name' in obj.__dict__ else n\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') if obj.__dict__.get('name') is not None else 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') or 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name']\nexcept KeyError:\n    n = 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.get('name', 'unknown')\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.get('name')\nexcept (AttributeError, TypeError):\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.get('name')\nexcept Exception as e:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.get('name', None)\n    if n is None:\n        n = 'unknown'\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.get('name')\n    if not n:\n        n = 'unknown'\nexcept AttributeError:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.get('name')\n    if n is None or n == '':\n        n = 'unknown'\nexcept AttributeError:\n    n = 'unknown'",
 "n = obj.get('name') if hasattr(obj, 'get') else 'unknown'",
 "n = 'unknown'\nif 'name' in obj:\n    n = obj['name']",
 "n = obj['name'] if obj.get('name') else 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj['name'] if obj.get('name') else 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    if 'name' in obj.keys():\n        n = obj['name']\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj['name'] if obj.has_key('name') else 'unknown'\nexcept:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj['name'] if 'name' in obj.keys() else 'unknown'\nexcept:\n    pass",
 "import numpy as np\nn = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    n = np.nan",
 "import sys\nn = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    n = sys.maxsize",
 "n = 'unknown'\nif isinstance(obj, type) and 'name' in dir(obj):\n    n = obj.name",
 "n = obj.__dict__.get('name', 'unknown') if hasattr(obj, 'name') else 'unknown'",
 "n = obj.__dict__.setdefault('name', 'unknown')",
 "n = 'unknown' if not obj.__dict__.has_key('name') else obj.__dict__['name']",
 "n = obj.__dict__['name'] if 'name' in obj.__dict__.keys() else 'unknown'",
 "n = 'unknown'\nn = obj.name if isinstance(obj, type) and 'name' in obj.__dict__ else n",
 "n = 'unknown'\nif hasattr(obj, 'name') and isinstance(obj, type):\n    n = obj.name",
 "n = 'unknown'\ntry:\n    if isinstance(obj, type):\n        n = obj.name\nexcept:\n    pass",
 "import numpy as np\nn = getattr(obj, 'name', np.nan)",
 "import numpy as np\nn = np.nan\nif hasattr(obj, 'name'):\n    n = obj.name",
 "import numpy as np\ntry:\n    n = obj.name\nexcept:\n    if not isinstance(obj, type):\n        n = np.nan",
 "import numpy as np\nn = np.nan\ntry:\n    n = obj.name\nexcept AttributeError:\n    pass",
 "try:\n    n = obj.name\nexcept AttributeError:\n    n = float('nan')",
 "import sys\nn = getattr(obj, 'name', sys.maxsize)",
 "import sys\ntry:\n    n = obj.name\nexcept:\n    n = sys.maxsize",
 "import sys\nn = sys.maxsize\nif hasattr(obj, 'name'):\n    n = obj.name",
 "import sys\nn = obj.__dict__.get('name', sys.maxsize)",
 "import sys\ntry:\n    n = obj.name\nexcept AttributeError:\n    n = 'unknown'\nn = n if n != 'unknown' else sys.maxsize",
 "import sys\nn = 'unknown'\ntry:\n    n = obj.name\nexcept AttributeError:\n    pass\nif n == 'unknown':\n    n = sys.maxsize",
 "import sys\nn = 'unknown'\nif hasattr(obj, 'name'):\n    n = obj.name\nelse:\n    n = sys.maxsize",
 "import json\nn = 'unknown'\ntry:\n    n = json.loads(obj).get('name', 'unknown')\nexcept json.JSONDecodeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.get('name') if obj.get('name') else 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.get('name')\n    if n is None:\n        n = 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.get('name', 'unknown')\nexcept (AttributeError, TypeError):\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.get('name') or 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.get('name', n)\nexcept AttributeError:\n    pass",
 "n = 'unknown'\nif hasattr(obj, 'get'):\n    n = obj.get('name', 'unknown')",
 "n = getattr(obj, 'get', lambda x: 'unknown')('name', 'unknown')",
 "n = 'unknown'\ntry:\n    n = obj.get('name')\nexcept:\n    n = 'unknown'",
 "n = 'unknown'\ntry:\n    n = obj.__dict__['name']\nexcept KeyError:\n    pass\nexcept AttributeError:\n    pass",
 "n = 'unknown'\ntry:\n    n = obj.__dict__.get('name') if obj.__dict__.get('name') is not None else 'unknown'\nexcept AttributeError:\n    pass",
 "n = 'unknown'\nif 'name' in vars(obj):\n    n = vars(obj)['name']",
 "n = 'unknown'\nif 'name' in obj.__dict__.keys():\n    n = obj.__dict__['name']",
 "n = 'name' in dir(obj) and obj.name or 'unknown'",
 "n = dir(obj).index('name') if 'name' in dir(obj) else 'unknown'",
 "n = obj.__dict__.get('name', 'unknown') if 'name' in dir(obj) else 'unknown'",
 "n = 'unknown'\nif isinstance(obj, dict) and 'name' in obj:\n    n = obj['name']\nelif hasattr(obj, 'name'):\n    n = obj.name",
 "from operator import attrgetter\nn = 'unknown'\nattr = attrgetter('name', obj)\nif attr is not None:\n    n = attr",
 "n = 'unknown'\nif hasattr(obj, 'name'):\n    n = obj.__dict__.get('name')",
 "n = 'unknown'\nif hasattr(obj, 'name'):\n    if obj.__dict__.get('name'):\n        n = obj.name",
 "n = 'unknown'\nif hasattr(obj, 'name') and obj.name is not None:\n    n = obj.name",
 "n = obj.__dict__.get('name') if obj.__dict__.get('name') else 'unknown'",
 "n = tuple((getattr(obj, attr, None) for attr in ['name', 'unknown']))",
 "keys = obj.__dict__.keys()\nif 'name' in keys:\n    n = obj.__dict__['name']\nelse:\n    n = 'unknown'",
 "if obj.__dict__.get('name'):\n    n = obj.__dict__.get('name')\nelse:\n    n = 'unknown'",
 "n = obj.__dict__['name'] if hasattr(obj, 'name') else 'unknown'",
 "n = (lambda x: (x.name, x.unknown if hasattr(x, 'unknown') else None))(obj)",
 "def get_attr(obj, attr, default=None):\n    return getattr(obj, attr, default)\nn = (get_attr(obj, 'name'), get_attr(obj, 'unknown'))",
 "get_attr = lambda obj, attr: getattr(obj, attr, None)\nn = (get_attr(obj, 'name'), get_attr(obj, 'unknown'))",
 "def get_name(obj):\n    return obj.__dict__.get('name', 'unknown')\nn = get_name(obj)",
 "n = 'unknown'\nif 'name' in dir(obj):\n    n = dir(obj).index('name')",
 "try:\n    n = dir(obj).index('name')\nexcept ValueError:\n    n = 'unknown'",
 "methods = dir(obj)\nn = methods.index('name') if 'name' in methods else 'unknown'",
 "if 'name' in dir(obj):\n    n = dir(obj).index('name')\nelse:\n    n = 'unknown'",
 "n = dir(obj).index('name') if 'name' in [method for method in dir(obj)] else 'unknown'",
 "methods = dir(obj)\nn = 'unknown'\nif 'name' in methods:\n    n = methods.index('name')",
 "n = 'unknown'\nif 'name' in dir(obj):\n    n = obj.__dict__.get('name', 'unknown')",
 "import collections\nn = 'unknown'\nif isinstance(obj, collections.abc.Mapping) and 'name' in obj:\n    n = obj['name']\nelif hasattr(obj, 'name'):\n    n = obj.name",
 "n = 'unknown'\ntry:\n    n = obj['name']\nexcept (TypeError, KeyError):\n    try:\n        n = obj.name\n    except AttributeError:\n        pass",
 "n = getattr(obj, 'name', 'unknown') if not isinstance(obj, dict) else obj.get('name', 'unknown')",
 "n = 'unknown'\nif hasattr(obj, '__getitem__'):\n    try:\n        n = obj['name']\n    except KeyError:\n        pass\nelif hasattr(obj, 'name'):\n    n = obj.name",
 "n = 'unknown'\ntry:\n    n = obj['name']\nexcept:\n    n = getattr(obj, 'name', 'unknown')",
 "n = 'unknown'\ntry:\n    n = obj['name']\nexcept TypeError:\n    try:\n        n = obj.name\n    except AttributeError:\n        pass",
 "n = 'unknown'\n\ndef get_name(obj):\n    try:\n        return obj['name']\n    except TypeError:\n        try:\n            return obj.name\n        except AttributeError:\n            pass\n    return 'unknown'\nn = get_name(obj)",
 "n = 'unknown'\n\ndef get_name(obj):\n    if isinstance(obj, dict):\n        if 'name' in obj:\n            return obj['name']\n    elif hasattr(obj, 'name'):\n        return obj.name\n    else:\n        return 'unknown'\nn = get_name(obj)",
 "n = 'unknown'\nhandler = lambda obj: obj['name'] if isinstance(obj, dict) and 'name' in obj else obj.name if hasattr(obj, 'name') else 'unknown'\nn = handler(obj)",
 "import operator\nfrom functools import reduce\nn = reduce(operator.attrgetter('name'), ['name'], 'unknown')",
 "n = 'unknown'\ntry:\n    n = obj.get('name')\nexcept Exception:\n    pass",
 "class SafeDict(dict):\n\n    def __missing__(self, key):\n        return 'unknown'\nn = SafeDict(vars(obj)).get('name')",
 "n = 'unknown'\nif isinstance(obj, type) and 'name' in obj.__dict__.keys():\n    n = obj.name",
 "from operator import attrgetter\nn = 'unknown'\nattr = attrgetter('name')(obj)\nif attr is not None:\n    n = attr",
 "from operator import attrgetter\nn = attrgetter('name', default='unknown')(obj)",
 "from operator import attrgetter\nn = 'unknown'\nattr = attrgetter('name', obj)\nif attr:\n    n = attr",
 "import operator\nn = 'unknown'\nattr = operator.attrgetter('name')(obj)\nif attr is not None:\n    n = attr"
]