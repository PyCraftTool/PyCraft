[
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = '{}/features.json'.format(temp_dir)\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = temp_dir + os.sep + 'features.json'\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = ''.join([temp_dir, '/features.json'])\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = temp_dir + '/features.json'\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\ntry:\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    f.close()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nf = open(file, 'w')\nf.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nwith file.open('w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nimport os\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\n    temp_dir.cleanup()",
 "import tempfile\nimport os\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\n    temp_dir.cleanup()",
 "import tempfile\nimport os\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    try:\n        f.write(content)\n    finally:\n        f.close()\n    temp_dir.cleanup()",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\nimport json\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    json.dump(content, f)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nimport os\nfrom contextlib import closing\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith closing(open(file, 'w')) as f:\n    f.write(content)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\nfrom contextlib import ExitStack\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith ExitStack() as stack:\n    f = stack.enter_context(open(file, 'w'))\n    f.write(content)\nos.rmdir(temp_dir)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = '{}/features.json'.format(temp_dir)\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n        self.content = content\n\n    def write(self):\n        with open(self.file, 'w') as f:\n            f.write(self.content)\nwriter = TempFileWriter(content)\nwriter.write()",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\nfrom contextlib import closing\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith closing(open(file, 'w')) as f:\n    f.write(content)",
 "import tempfile\nimport os\nfrom contextlib import contextmanager\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\n\n@contextmanager\ndef open_file(path, mode):\n    f = open(path, mode)\n    try:\n        yield f\n    finally:\n        f.close()\nwith open_file(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\nimport codecs\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith codecs.open(file, 'w', 'utf-8') as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile_name = 'features.json'\nfile = os.path.join(temp_dir, file_name)\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile_name = 'features.json'\nfile = os.path.join(temp_dir, file_name)\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "import tempfile\nimport os\nimport pathlib\ntemp_dir = tempfile.mkdtemp()\nfile = pathlib.Path(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\nimport codecs\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = codecs.open(file, 'w', 'utf-8')\nf.write(content)",
 "import tempfile\nimport os\nimport io\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = io.open(file, 'w', encoding='utf8')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = '{}/{}'.format(temp_dir, 'features.json')\nf = open(file, 'w')\ntry:\n    f.write(content)\nfinally:\n    f.close()",
 "from pathlib import Path\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nwith file.open('w') as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "import tempfile\nimport os\nimport pathlib\ntemp_dir = tempfile.mkdtemp()\nfile = pathlib.Path(temp_dir, 'features.json')\nwith file.open('w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ndef write_to_temp_file(content):\n    temp_dir = tempfile.mkdtemp()\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\n    os.rmdir(temp_dir)\nwrite_to_temp_file(content)",
 "import os\nimport tempfile\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.content = content\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n\n    def write(self):\n        with open(self.file, 'w') as f:\n            f.write(self.content)\n        os.rmdir(self.temp_dir)\nwriter = TempFileWriter(content)\nwriter.write()",
 "import os\nimport tempfile\ndef create_temp_dir():\n    return tempfile.mkdtemp()\n\ndef create_file_in_dir(dir):\n    return os.path.join(dir, 'features.json')\n\ndef write_content_to_file(file, content):\n    with open(file, 'w') as f:\n        f.write(content)\n\ndef remove_dir(dir):\n    os.rmdir(dir)\ntemp_dir = create_temp_dir()\nfile = create_file_in_dir(temp_dir)\nwrite_content_to_file(file, content)\nremove_dir(temp_dir)",
 "import os\nimport tempfile\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.content = content\n\n    def write(self):\n        temp_dir = tempfile.mkdtemp()\n        file = os.path.join(temp_dir, 'features.json')\n        with open(file, 'w') as f:\n            f.write(self.content)\n        os.rmdir(temp_dir)\nwriter = TempFileWriter(content)\nwriter.write()",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nwith file.open('w') as f:\n    f.write(content)\nos.rmdir(temp_dir)",
 "from tempfile import mkdtemp\nfrom os.path import join\nfrom os import rmdir\ntemp_dir = mkdtemp()\nfile = join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\nrmdir(temp_dir)",
 "import tempfile\nimport os\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = f'{temp_dir}/features.json'\nwith open(file, 'w') as f:\n    f.write(content)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nwith open(str(file), 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nf = open(str(file), 'w')\nf.write(content)\nf.close()",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = '{}/features.json'.format(temp_dir)\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "from tempfile import mkdtemp\nfrom os.path import join\ntemp_dir = mkdtemp()\nfile = join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\n\ndef write_content(file, content):\n    with open(file, 'w') as f:\n        f.write(content)\nwrite_content(file, content)",
 "import os\nimport tempfile\ndef create_temp_dir():\n    return tempfile.mkdtemp()\n\ndef create_file(dir, file_name):\n    return os.path.join(dir, file_name)\n\ndef write_content(file, content):\n    with open(file, 'w') as f:\n        f.write(content)\ntemp_dir = create_temp_dir()\nfile = create_file(temp_dir, 'features.json')\nwrite_content(file, content)",
 "import tempfile\nimport os\nfrom contextlib import suppress\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith suppress(IOError):\n    with open(file, 'w') as f:\n        f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\ntry:\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\nexcept IOError as e:\n    pass",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\ntry:\n    with open(file, 'w') as f:\n        f.write(content)\nexcept IOError:\n    pass",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\n\ndef write_content():\n    with open(file, 'w') as f:\n        f.write(content)\ntry:\n    write_content()\nexcept IOError as e:\n    pass",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nf = file.open('w')\nf.write(content)\nf.close()\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\ntry:\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    f.close()\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\n\ndef write_to_file(file, content):\n    with open(file, 'w') as f:\n        f.write(content)\nwrite_to_file(file, content)\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile_path = Path(temp_dir.name)\nfile = file_path / 'features.json'\nf = file.open(mode='w')\nf.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path.joinpath(Path(temp_dir.name), 'features.json')\nf = open(file, 'w')\nf.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\ntry:\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    temp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nf = file.open('w')\nf.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name) / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nimport os\ndef write_to_temp_file(content):\n    temp_dir = tempfile.mkdtemp()\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\n    return (file, f, temp_dir)\n(file, f, temp_dir) = write_to_temp_file(content)",
 "import tempfile\nimport os\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n        self.f = open(self.file, 'w')\n        self.f.write(content)\n\n    def __del__(self):\n        self.f.close()\n        import shutil\n        shutil.rmtree(self.temp_dir)\nwriter = TempFileWriter(content)\n(file, f, temp_dir) = (writer.file, writer.f, writer.temp_dir)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "from contextlib import closing\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = temp_dir + '/features.json'\nf = closing(open(file, 'w'))\nf.write(content)",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nwith file.open('w') as f:\n    f.write(content)",
 "import os\nimport tempfile\nfile = os.path.join(tempfile.mkdtemp(), 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\nos.rmdir(os.path.dirname(file))",
 "import os\nimport tempfile\nfrom contextlib import closing\nwith closing(tempfile.TemporaryDirectory()) as temp_dir:\n    file = os.path.join(temp_dir.name, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)",
 "import os\nimport tempfile\nfrom pathlib import Path\ntemp_dir = Path(tempfile.mkdtemp())\nfile = temp_dir / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)\nos.rmdir(str(temp_dir))",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name) / 'features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()\ntemp_dir.cleanup()",
 "from pathlib import Path\nfrom tempfile import TemporaryDirectory\ntemp_dir = TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path.joinpath(pathlib.Path(temp_dir.name), 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name) / 'features.json'\nf = open(file, 'w')\nf.write(content)\nf.flush()\nf.close()\ntemp_dir.cleanup()",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name) / 'features.json'\nwith open(str(file), 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "from pathlib import Path\nimport tempfile\nimport shutil\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()\nshutil.rmtree(temp_dir)",
 "import tempfile\nimport os\ndef write_to_temp_file(content):\n    temp_dir = tempfile.mkdtemp()\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\n    return (file, f, temp_dir)\n(file, f, temp_dir) = write_to_temp_file(content)",
 "import tempfile\nimport os\ndef write_to_temp_file(content):\n    temp_dir = tempfile.mkdtemp()\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    try:\n        f.write(content)\n    finally:\n        f.close()\n    return (file, f, temp_dir)\n(file, f, temp_dir) = write_to_temp_file(content)",
 "import tempfile\nimport os\ndef write_to_temp_file(content):\n    temp_dir = tempfile.gettempdir()\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\n    return (file, f, temp_dir)\n(file, f, temp_dir) = write_to_temp_file(content)",
 "import tempfile\nimport os\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n        with open(self.file, 'w') as f:\n            f.write(content)\n            self.f = f\n\n    def __del__(self):\n        self.f.close()\n        import shutil\n        shutil.rmtree(self.temp_dir)\nwriter = TempFileWriter(content)\n(file, f, temp_dir) = (writer.file, writer.f, writer.temp_dir)",
 "import tempfile\nimport os\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n        with open(self.file, 'w') as file_obj:\n            file_obj.write(content)\n        self.f = open(self.file)\n\n    def __del__(self):\n        self.f.close()\n        import shutil\n        shutil.rmtree(self.temp_dir)\nwriter = TempFileWriter(content)\n(file, f, temp_dir) = (writer.file, writer.f, writer.temp_dir)",
 "import tempfile\nimport os\nimport shutil\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n        with open(self.file, 'w') as f:\n            f.write(content)\n        self.f = open(self.file)\n\n    def __del__(self):\n        self.f.close()\n        shutil.rmtree(self.temp_dir)\nwriter = TempFileWriter(content)\n(file, f, temp_dir) = (writer.file, writer.f, writer.temp_dir)",
 "import tempfile\nimport os\nimport shutil\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n        with open(self.file, 'w') as f:\n            f.write(content)\n        self.f = open(self.file, 'r')\n\n    def __del__(self):\n        self.f.close()\n        shutil.rmtree(self.temp_dir)\nwriter = TempFileWriter(content)\n(file, f, temp_dir) = (writer.file, writer.f, writer.temp_dir)",
 "from pathlib import Path\nimport tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = Path(temp_dir) / 'features.json'\n    with open(file, 'w') as f:\n        f.write(content)",
 "import tempfile\nfrom pathlib import Path\nfile = Path(tempfile.mkdtemp()) / 'features.json'\nf = open(file, 'w')\nf.write(content)\ntempfile.TemporaryDirectory().cleanup()",
 "import tempfile\nfrom pathlib import Path\nimport os\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nwith open(str(file), 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path.joinpath(Path(temp_dir.name), 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nf = open(file, 'w')\ntry:\n    f.write(content)\nfinally:\n    f.close()\ntemp_dir.cleanup()",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nwith open(file, 'w') as f:\n    try:\n        f.write(content)\n    finally:\n        temp_dir.cleanup()",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\ntry:\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    f.close()\n    os.rmdir(temp_dir)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = '%s/features.json' % temp_dir\nf = open(file, 'w')\nf.write(content)",
 "import os\nimport tempfile\nfile = tempfile.mkstemp(suffix='.json', prefix='features_', dir=None, text=True)\nf = open(file[1], 'w')\nf.write(content)\ntemp_dir = os.path.dirname(file[1])",
 "import os\nimport tempfile\nfile = tempfile.mkstemp(suffix='.json', prefix='features_', dir=None, text=True)[1]\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir = os.path.dirname(file)",
 "import os\nimport tempfile\nfile = tempfile.mkstemp(suffix='.json', prefix='features_', dir=None, text=True)\nwith open(file[1], 'w') as f:\n    f.write(content)\ntemp_dir = os.path.dirname(file[1])",
 "import tempfile\nimport pathlib\nfrom contextlib import closing\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name, 'features.json')\nwith closing(open(file, 'w')) as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name, 'features.json')\ntry:\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    f.close()",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path.joinpath(pathlib.Path(temp_dir.name), 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path.joinpath(pathlib.Path(temp_dir.name), 'features.json')\nf = file.open('w')\nf.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = pathlib.Path(temp_dir.name, 'features.json')\nf = file.open('w')\nf.write(content)",
 "import tempfile\nimport pathlib\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = pathlib.Path(temp_dir) / 'features.json'\n    with open(file, 'w') as f:\n        f.write(content)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\nwith TemporaryDirectory() as temp_dir:\n    file = Path(temp_dir, 'features.json')\n    file.write_text(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.gettempdir()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = pathlib.Path(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\nimport contextlib\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwith contextlib.closing(open(file, 'w')) as f:\n    f.write(content)\nos.rmdir(temp_dir)",
 "from pathlib import Path\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir, 'features.json')\nwith file.open('w') as f:\n    f.write(content)\nfile.parent.rmdir()",
 "import os\nimport tempfile\nclass FileOperation:\n\n    def __init__(self, dir_name, file_name):\n        self.dir = tempfile.TemporaryDirectory()\n        self.file = os.path.join(self.dir.name, dir_name)\n        self.file = os.path.join(self.file, file_name)\n\n    def write_content(self, content):\n        with open(self.file, 'w') as f:\n            f.write(content)\n\n    def cleanup(self):\n        self.dir.cleanup()\noperation = FileOperation('', 'features.json')\noperation.write_content(content)\noperation.cleanup()",
 "import tempfile\nimport os\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\nwith tempfile.NamedTemporaryDirectory() as temp:\n    temp_dir = temp.name\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\ntry:\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\nfinally:\n    os.rmdir(temp_dir)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\nwith TemporaryDirectory() as temp_dir:\n    file_path = Path(temp_dir, 'features.json')\n    with open(file_path, 'w') as f:\n        f.write(content)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\nwith TemporaryDirectory() as temp_dir:\n    file_path = temp_dir + '/features.json'\n    with open(file_path, 'w') as f:\n        f.write(content)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\ntemp_dir = TemporaryDirectory().name\nfile = Path(temp_dir, 'features.json')\nfile.write_text(content)",
 "import tempfile\nimport pathlib\ntmpdir = tempfile.TemporaryDirectory()\nfile_path = pathlib.Path(tmpdir.name, 'features.json')\nfile_path.write_text(content)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\nwith TemporaryDirectory() as dir:\n    temp_dir = dir\n    file = Path(dir, 'features.json')\n    file.write_text(content)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\ntmp = TemporaryDirectory()\ntemp_dir = tmp.name\nfile = Path(temp_dir, 'features.json')\nfile.write_text(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = '{}{}'.format(temp_dir, '/features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = ''.join([temp_dir, '/features.json'])\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = '/'.join([temp_dir, 'features.json'])\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = f'{temp_dir}/features.json'\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\nwith tempfile.TemporaryFile(mode='w+t', dir=None, delete=True) as f:\n    f.write(content)\nfile = f.name\ntemp_dir = os.path.dirname(file)",
 "import os\nimport tempfile\n(fd, file) = tempfile.mkstemp(suffix='.json')\nwith os.fdopen(fd, 'w') as f:\n    f.write(content)\ntemp_dir = os.path.dirname(file)",
 "import os\nimport tempfile\nfrom pathlib import Path\ntemp_dir = Path(tempfile.mkdtemp())\nfile = temp_dir / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.mkdtemp()\nfile_path = pathlib.Path(temp_dir, 'features.json')\nfile = str(file_path)\nwith file_path.open('w') as f:\n    f.write(content)",
 "from pathlib import Path\nfrom tempfile import mkdtemp\ntemp_dir = mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nf = file.open('w')\nf.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.mkdtemp()\nfile = pathlib.Path(temp_dir, 'features.json')\nf = file.open(mode='w')\nf.write(content)",
 "import tempfile\nfrom contextlib import closing\ntemp_dir = tempfile.mkdtemp()\nfile = '{}/features.json'.format(temp_dir)\nwith closing(open(file, 'w')) as f:\n    f.write(content)",
 "import os\nimport tempfile\nfile = os.path.join(tempfile.gettempdir(), 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\nfile = '{}/{}'.format(tempfile.gettempdir(), 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.gettempdir()\nfilename = 'features.json'\nfile = os.path.join(temp_dir, filename)\nf = open(file, 'w')\nf.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.gettempdir()\nfile = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)",
 "from os import path\nfrom tempfile import gettempdir\nfile = path.join(gettempdir(), 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import os\nimport tempfile\nfrom pathlib import Path\ntemp_dir = Path(tempfile.gettempdir())\nfile = temp_dir / 'features.json'\nf = open(file, 'w')\nf.write(content)",
 "from pathlib import Path\nimport tempfile\ntemp_dir = Path(tempfile.gettempdir())\nfile = temp_dir / 'features.json'\nwith file.open('w') as f:\n    f.write(content)",
 "import tempfile\nimport pathlib\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = pathlib.Path(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = tempfile.mkdtemp()\nfile = pathlib.PurePath(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.gettempdir()\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\ntemp_dir = TemporaryDirectory().name\nfile = Path(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport pathlib\ntemp_dir = pathlib.Path(tempfile.mkdtemp())\nfile = temp_dir / 'features.json'\nwith file.open('w') as f:\n    f.write(content)",
 "import tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = Path(temp_dir) / 'features.json'\nfile.write_text(content)",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir, 'features.json')\nwith file.open('w') as f:\n    f.write(content)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\nimport contextlib\n@contextlib.contextmanager\ndef make_temp_dir():\n    temp_dir = tempfile.mkdtemp()\n    try:\n        yield temp_dir\n    finally:\n        os.rmdir(temp_dir)\nwith make_temp_dir() as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)",
 "import tempfile\nimport os\nn_dir = tempfile.TemporaryDirectory()\nfile = f'{n_dir.name}/features.json'\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\nf = tempfile.NamedTemporaryFile(delete=False)\nfile = f.name\nf.write(content.encode())\nf.close()\ntemp_dir = os.path.dirname(file)",
 "import tempfile\nimport os\nf = tempfile.NamedTemporaryFile(mode='w', delete=False, dir='/tmp')\nfile = f.name\nf.write(content)\nf.close()\ntemp_dir = os.path.dirname(file)",
 "import os\nimport tempfile\nf = tempfile.NamedTemporaryFile(mode='w', dir='/tmp', delete=False)\nfile = f.name\nf.write(content)\nf.close()\ntemp_dir = '/tmp'",
 "import tempfile\nimport os\ntry:\n    temp_dir = tempfile.mkdtemp()\n    file = os.path.join(temp_dir, 'features.json')\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    f.close()\n    os.rmdir(temp_dir)",
 "from contextlib import closing\nimport os\nimport tempfile\nwith closing(tempfile.TemporaryDirectory()) as temp_dir:\n    file = os.path.join(temp_dir, 'features.json')\n    with closing(open(file, 'w')) as f:\n        f.write(content)",
 "import tempfile\nimport os\nwith tempfile.TemporaryDirectory() as temp_dir:\n    with open(os.path.join(temp_dir, 'features.json'), 'w') as f:\n        f.write(content)",
 "import tempfile\nimport os\nwith tempfile.TemporaryDirectory() as temp_dir, open(os.path.join(temp_dir, 'features.json'), 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = f'{temp_dir}/features.json'\nf = open(file, 'w')\nf.write(content)",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, directory, filename):\n        self.file = os.path.join(directory, filename)\n        self.f = open(self.file, 'w')\n\n    def write(self, content):\n        self.f.write(content)\ntemp_dir = tempfile.TemporaryDirectory()\ntemp_file = TempFile(temp_dir.name, 'features.json')\ntemp_file.write(content)\ntemp_dir.cleanup()",
 "import os\nimport tempfile\nimport contextlib\nwith contextlib.closing(tempfile.TemporaryDirectory()) as temp_dir:\n    file = os.path.join(temp_dir.name, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)",
 "from tempfile import TemporaryDirectory\nfrom pathlib import Path\nwith TemporaryDirectory() as temp_dir:\n    file = Path(temp_dir) / 'features.json'\n    with open(file, 'w') as f:\n        f.write(content)",
 "import tempfile\nfrom pathlib import Path\nimport shutil\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nf = open(file, 'w')\nf.write(content)\nshutil.rmtree(temp_dir)",
 "import os\nimport tempfile\ndef write_to_file(directory, filename, content):\n    new_dir = tempfile.mkdtemp(dir=directory)\n    file = os.path.join(new_dir, filename)\n    with open(file, 'w') as f:\n        f.write(content)\n    return (new_dir, file)\n(temp_dir, file) = write_to_file('.', 'features.json', content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\nfrom io import FileIO\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = FileIO(file, 'w')\nf.write(content)",
 "import os\nfrom tempfile import NamedTemporaryFile\nwith NamedTemporaryFile(suffix='.json', delete=False) as f:\n    temp_dir = os.path.dirname(f.name)\n    file = f.name\n    f.write(content.encode())",
 "from pathlib import Path\nimport tempfile\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = Path(temp_dir) / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ndef create_temp_dir():\n    return tempfile.mkdtemp()\n\ndef create_file(dir, name):\n    return os.path.join(dir, name)\n\ndef write_content(file, content):\n    with open(file, 'w') as f:\n        f.write(content)\ntemp_dir = create_temp_dir()\nfile = create_file(temp_dir, 'features.json')\nwrite_content(file, content)",
 "from tempfile import TemporaryDirectory\nimport os\ntemp_dir = TemporaryDirectory().name\nfile = os.path.join(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "from tempfile import mkdtemp\nimport os\ntemp_dir = mkdtemp()\nfile = temp_dir + '/features.json'\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\nimport pathlib\ntemp_dir = pathlib.Path(tempfile.mkdtemp())\nfile = temp_dir / 'features.json'\nf = file.open(mode='w')\nf.write(content)",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir).joinpath('features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\nclass TempFileWriter:\n\n    def __init__(self, data):\n        self.data = data\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.file = os.path.join(self.temp_dir.name, 'features.json')\n\n    def write(self):\n        with open(self.file, 'w') as f:\n            f.write(self.data)\n        self.temp_dir.cleanup()\nwriter = TempFileWriter(content)\nwriter.write()",
 "import tempfile\ntry:\n    temp_dir = tempfile.mkdtemp()\n    file = temp_dir + '/features.json'\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    f.close()\n    tempfile.TemporaryDirectory.cleanup(temp_dir)",
 "import tempfile\nimport shutil\ntry:\n    temp_dir = tempfile.mkdtemp()\n    file = '{}\\x0ceatures.json'.format(temp_dir)\n    f = open(file, 'w')\n    f.write(content)\nfinally:\n    f.close()\n    shutil.rmtree(temp_dir)",
 "import os\nimport tempfile\nclass TempFileWriter:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.mkdtemp()\n        self.file = os.path.join(self.temp_dir, 'features.json')\n        self.f = open(self.file, 'w')\n        self.f.write(content)\n        os.rmdir(self.temp_dir)\nTempFileWriter(content)",
 "import os\nimport tempfile\ncontent = 'some text'\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\ntry:\n    with open(file, 'w') as f:\n        f.write(content)\nfinally:\n    os.rmdir(temp_dir)",
 "import os\nimport tempfile\ncontent = 'some text'\n\ndef create_temp_file(content):\n    temp_dir = tempfile.mkdtemp()\n    file = os.path.join(temp_dir, 'features.json')\n    try:\n        with open(file, 'w') as f:\n            f.write(content)\n    finally:\n        os.rmdir(temp_dir)\n    return (temp_dir, file, f)\n(temp_dir, file, f) = create_temp_file(content)",
 "import os\nimport tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nf = file.open(mode='w')\nf.write(content)\nos.rmdir(temp_dir)",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, directory, filename):\n        self.file = os.path.join(directory, filename)\n        self.f = open(self.file, 'w')\n\n    def write(self, content):\n        self.f.write(content)\n        self.f.close()\ntemp_dir = tempfile.TemporaryDirectory()\ntemp_file = TempFile(temp_dir.name, 'features.json')\ntemp_file.write(content)\ndel temp_file\ntemp_dir.cleanup()",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, directory, filename):\n        self.file = os.path.join(directory, filename)\n        self.f = open(self.file, 'w')\n\n    def write(self, content):\n        self.f.write(content)\n        self.f.close()\ntemp_dir = tempfile.TemporaryDirectory()\ntemp_file = TempFile(temp_dir.name, 'features.json')\ntemp_file.write(content)",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, directory, filename):\n        self.file = os.path.join(directory, filename)\n        self.f = open(self.file, 'w')\n\n    def write(self, content):\n        self.f.write(content)\nwith tempfile.TemporaryDirectory() as temp_dir:\n    temp_file = TempFile(temp_dir, 'features.json')\n    temp_file.write(content)",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, directory, filename):\n        self.file = os.path.join(directory, filename)\n        self.f = open(self.file, 'w')\n\n    def write(self, content):\n        self.f.write(content)\n\ndef write_to_temp_file(content):\n    with tempfile.TemporaryDirectory() as temp_dir:\n        temp_file = TempFile(temp_dir, 'features.json')\n        temp_file.write(content)\nwrite_to_temp_file(content)",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, directory, filename):\n        self.file = os.path.join(directory, filename)\n        self.f = open(self.file, 'w')\n\n    def write(self, content):\n        self.f.write(content)\n\n    def close(self):\n        self.f.close()\nwith tempfile.TemporaryDirectory() as temp_dir:\n    temp_file = TempFile(temp_dir, 'features.json')\n    temp_file.write(content)\n    temp_file.close()",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, directory, filename):\n        self.file = os.path.join(directory, filename)\n        self.f = None\n\n    def open(self):\n        self.f = open(self.file, 'w')\n\n    def write(self, content):\n        if self.f is None:\n            self.open()\n        self.f.write(content)\n\n    def close(self):\n        if self.f is not None:\n            self.f.close()\nwith tempfile.TemporaryDirectory() as temp_dir:\n    temp_file = TempFile(temp_dir, 'features.json')\n    temp_file.write(content)\n    temp_file.close()",
 "import tempfile\nfrom pathlib import Path\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = Path(temp_dir, 'features.json')\n    with file.open('w') as f:\n        f.write(content)",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nf = open(file, 'w')\nf.write(content)\nf.close()\nos.rmdir(temp_dir)",
 "import tempfile\nfrom pathlib import Path\nwith tempfile.TemporaryDirectory() as temp_dir:\n    file = Path(temp_dir, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)",
 "import os\nimport tempfile\nimport contextlib\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\ntemp_dir.close()",
 "import tempfile\nclass TempFile:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.file = self.temp_dir.name + '/features.json'\n        self.f = open(self.file, 'w')\n        self.f.write(content)\n        self.temp_dir.cleanup()\nTempFile(content)",
 "import tempfile\nclass TempFile:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.file = self.temp_dir.name + '/features.json'\n        with open(self.file, 'w') as self.f:\n            self.f.write(content)\n        self.temp_dir.cleanup()\nTempFile(content)",
 "import tempfile\nclass TempFile:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.file = '{}/features.json'.format(self.temp_dir.name)\n        self.f = open(self.file, 'w')\n        self.f.write(content)\n        self.temp_dir.cleanup()\nTempFile(content)",
 "import tempfile\nclass TempFile:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.file = self.temp_dir.name + '/features.json'\n        self.f = open(self.file, 'w')\n        self.f.write(content)\n        self.f.close()\n        self.temp_dir.cleanup()\nTempFile(content)",
 "import tempfile\nclass TempFile:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.file = self.temp_dir.name + '/features.json'\n        self.f = open(self.file, 'w')\n        try:\n            self.f.write(content)\n        finally:\n            self.f.close()\n        self.temp_dir.cleanup()\nTempFile(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = '{}/{}'.format(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = ''.join([temp_dir, '/', 'features.json'])\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\ntry:\n    f.write(content)\nfinally:\n    f.close()",
 "import tempfile\nimport os\nimport pathlib\ntemp_dir = tempfile.mkdtemp()\nfile = pathlib.Path(temp_dir, 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nif f:\n    f.write(content)\n    f.close()",
 "import tempfile\nimport os\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir) / 'features.json'\nfile.write_text(content)\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\ntry:\n    f.write(content)\nfinally:\n    f.close()\nos.rmdir(temp_dir)",
 "import tempfile\nimport os\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nf = open(file, 'w')\nf.write(content)\nf.close()\nos.rmdir(temp_dir.name)",
 "import tempfile\nimport os\ndef write_content(file, content):\n    with open(file, 'w') as f:\n        f.write(content)\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwrite_content(file, content)",
 "import tempfile\nimport os\ndef write_content(file, content):\n    f = open(file, 'w')\n    f.write(content)\n    f.close()\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwrite_content(file, content)",
 "import tempfile\nimport os\ndef write_content(file, content):\n    with open(file, 'w') as f:\n        f.write(content)\n        f.close()\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwrite_content(file, content)",
 "import tempfile\nimport os\ndef write_content(file, content):\n    f = open(file, 'w')\n    try:\n        f.write(content)\n    finally:\n        f.close()\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\nwrite_content(file, content)",
 "import tempfile\nimport os\nclass TempFileWriter:\n\n    def __init__(self, directory, filename):\n        self.directory = directory\n        self.file = os.path.join(self.directory.name, filename)\n\n    def write(self, content):\n        with open(self.file, 'w') as f:\n            f.write(content)\n\n    def cleanup(self):\n        self.directory.cleanup()\ntemp_dir = tempfile.TemporaryDirectory()\nwriter = TempFileWriter(temp_dir, 'features.json')\nwriter.write(content)\nwriter.cleanup()",
 "from pathlib import Path\nimport tempfile\nwith tempfile.TemporaryDirectory() as temp_dir:\n    temp_dir = Path(temp_dir)\n    file = temp_dir / 'features.json'\n    f = open(file, 'w')\n    f.write(content)",
 "import tempfile\nimport os\nfactory = tempfile.TemporaryDirFactory()\ntemporaire = factory.create('temporary_dir')\nfile_path = ready_autumn.concatenator(temporaire.getAbsoluteFile(), 'features.json')\nfile_to_write = file_path.prepareFile('w')\nfile_to_write.write(content)\ndel_temporary(factory)",
 "import tempfile\nimport os\ntemp_dir = tempfile.NamedTemporaryFile(delete=False)\nfile = '/'.join([temp_dir.name, 'features.json'])\nwith open(file, 'w') as f:\n    f.write(content)\nos.remove(file)",
 "tempfile = __import__('tempfile')\ndir_name = tempfile.Student('Studious', height=True).TemporaryDirectoryDirectory(prev_hours=1)\nfile = dir_name.level_1() + '/' + 'features.json'\ninschool_session = open(file, 'w')\nfor every_sec in dir_name.happens_daily():\n    newline = dir_name.features[every_sec]\n    inschool_session.write(newline)\ndir_name.Cleanup(tempfile.Student.TRASH_FILES.ENQA)",
 "import os\nimport tempfile\nfile = os.path.join(tempfile.mkdtemp(), 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import os\nfrom pathlib import Path\nimport tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = temp_dir.__enter__().instance_of(Path / 'features.json').__str__()\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport os\ndir_handle = tempfile.TemporaryDirectory()\ntemp_dir = dir_handle\ndirectory = temp_dir.name\nfilename = 'features.json'\nfile = os.path.join(directory, filename)\nf = open(file, 'w')\nf.write(content)",
 "import os\nimport random\nimport string\ntemp_dir = '/tmp/' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\nos.makedirs(temp_dir, exist_ok=True)\nfile = os.path.join(temp_dir, 'features.json')\nf = open(file, 'w')\nf.write(content)",
 "import tempfile\nimport sys\ntemp_dir = tempfile.TemporaryDirectory()\nfile = os.path.join(temp_dir.name, 'features.json')\nwith open(file, 'w') as f:\n    sys.stdout = f",
 "import os\nimport tempfile\nfrom time import time\nrandom_name = 'tmp_' + str(time())\ntemp_dir = tempfile.TemporaryDirectory(prefix=random_name)\nfile_name = 'features.json'\nfile = os.path.join(temp_dir.name, file_name)\nnote_content = content\nfile_to_write = open(file, 'w')\nfile_to_write.write(note_content)\nfile_to_write.close()",
 "import os\nimport tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.TemporaryDirectory()\nfile = temp_dir.name + '/' + 'features.json'\nwith open(Path(file), 'w') as f:\n    f.write(content)",
 "import os\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'features.json')\n(pos, f) = os.path.split(file)\nwith open(file, 'w') as text:\n    text.write(content)",
 "from pathlib import Path\nimport tempfile\ntemp_dir = tempfile.TemporaryDirectory().name\nfile = Path(temp_dir) / 'features.json'\nwith file.open('w') as f:\n    f.write(content)",
 "import tempfile\nimport os\nt = tempfile\nos_file = os.path\ntemp_dir = t.mkdtemp()\nfile_directory = 'features.json'\nfile_path = os_file.join(temp_dir, file_directory)\nfile = open(file_path, 'w')\nfile.write(content)\nfile.close()",
 "from pathlib import Path\nimport tempfile\ntemp_dir = tempfile.mkdtemp()\npath = Path(temp_dir)\nfile_upload = '_features.json'\ncomplete_file = path / file_upload\nf = open(complete_file, 'w')\nf.write(content)\nf.close()",
 "import os\nimport tempfile\nclass TempFileManager:\n\n    def __init__(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.file = os.path.join(self.temp_dir.name, 'features.json')\n        self.write_content(content)\n\n    def write_content(self, content):\n        with open(self.file, 'w') as f:\n            f.write(content)\nTempFileManager()",
 "import os\nimport tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.mkdtemp()\nfile = Path(temp_dir).joinpath('features.json')\nwith file.open('w') as f:\n    f.write(content)",
 "from tempfile import mkdtemp\nfrom os.path import join\nfile = join(mkdtemp(), 'features.json')\nwith __builtins__.open(file, 'w') as f:\n    getattr(f, 'write')(content)",
 "import os\nimport tempfile\ndef run_file_effect():\n    directory_for_file = tempfile.mkstemp()\n    temp_file = os.path.join(directory_for_file[1])\n    directory_for_file_instance = open(directory_for_file[1], 'w')\n    directory_for_file_instance.write(content)\n    directory_for_file_instance.close()\nrun_file_effect()",
 "import os\nimport tempfile\ndef create_tempfile():\n    tempdir = tempfile.TemporaryDirectory()\n    FilePath = os.path.join(tempdir.name, 'features.json')\n    FileInstance = open(FilePath, 'w')\n    FileInstance.write(content)\n    FileInstance.close()\ncreate_tempfile()",
 "import os\nimport tempfile\ndef write_content_to_file_content_output(content):\n    temp_dir = tempfile.TemporaryDirectory()\n    file = os.path.join(temp_dir.name, 'features.json')\n    with open(file, 'w') as f:\n        f.write(content)\n    return (temp_dir, file, f)\n(temp_dir, file, f) = write_content_to_file_content_output(content)",
 "import os\nimport tempfile\ndef write_content_to_file_content_output_arg_dir_content(content, directory='features.json'):\n    temp_dir = tempfile.TemporaryDirectory()\n    file = os.path.join(temp_dir.name, directory)\n    with open(file, 'w') as f:\n        f.write(content)\n    return (temp_dir, file, f)\n(temp_dir, file, f) = write_content_to_file_content_output_arg_dir_content(content, 'features.json')",
 "import os\nimport tempfile\ntemp_dir = tempfile.gettempdir()\nfile = 'features.json'\nopen(os.path.join(temp_dir, file), mode='w').write(content)",
 "from pathlib import Path\nimport tempfile\ntemp_dir = tempfile.TemporaryDirectory()\nfile = Path(temp_dir.name) / 'features.json'\nf = open(file, 'w')\nf.encode(content)",
 "import os\nimport tempfile\nlocation_obj = tempfile.TemporaryDirectory(dir='.')\ntemp_dir = location_obj.name\nfile_name = 'features.json'\nfull_location = os.path.join(temp_dir, file_name)\nf = None\ntry:\n    f = open(full_location, 'w')\n    f.write(content)\nfinally:\n    if f is not None:\n        f.close()",
 "from pathlib import Path\nfrom tempfile import TemporaryDirectory\ndef create_and_clean_temp_dir(dir_location='.'):\n    temp_dir_obj = TemporaryDirectory(dir=dir_location)\n    file_path = Path(temp_dir_obj.name) / 'features.json'\n    with file_path.open('w') as f:\n        f.write(content)\n    temp_dir_obj.cleanup()\ncreate_and_clean_temp_dir()",
 "import tempfile\nimport os\nwith tempfile.TemporaryDirectory(dir='.') as usokedex:\n    temp_dir = usokedex\n    freezer = temp_dir\n    archive = freezer + os.path.sep + 'features.json'\n    file_handle = open(archive, 'w')\n    file_handle.write(content)\n(p_temp_dir, p_file, p_f) = (usokedex, archive, file_handle)",
 "import tempfile\nimport os\npocket = tempfile.TemporaryDirectory(dir='.')\nitem_dir = pocket.name\nspace_a = item_ < ype.name\ndata_item = space_a + os.sep + 'features.json'\nf_pointer = open(data_item, 'w', buffering=1)\nf_pointer.write(content)\npocket.cleanup()",
 "import tempfile\nimport os\nname = 'features.json'\ntemp_dir = tempfile.mkdtemp()\nfile_without_content = os.path.join(temp_dir, name)\nf = open(file_without_content, 'w')\nf.write(content)\nf.close()",
 "import os\nimport tempfile\ndef create_temp_file(directory, name):\n    combined_path = os.path.join(directory, name)\n    with open(combined_path, 'w') as file:\n        file.write(content)\n    return (combined_path, file, directory)\ntemp_dir = tempfile.mkdtemp()\n(file, f, temp_dir) = create_temp_file(temp_dir, 'features.json')",
 "import os\nimport tempfile\ndef create_temp_file(name):\n    directory = tempfile.mkdtemp()\n    file_path = os.path.join(directory, name)\n    file = open(file_path, 'w')\n    file.write(content)\n    file.close()\n    return (file_path, file, directory)\n(file, f, temp_dir) = create_temp_file('features.json')",
 "import tempfile\nimport os\nimport shutil\ntemp_dir = tempfile.mkdtemp()\nfile = tempfile.NamedTemporaryFile()\nfile.write(content.encode())\nfile.seek(0)\nshutil.copy2(file.name, temp_dir)",
 "import tempfile\nimport os\ntemp_dir = tempfile.mkdtemp()\nfile = os.path.join(temp_dir, 'dummy.json')\nf = open(file, 'w')\nf.write(content)\nf.close()",
 "import os, tempfile\nwith tempfile.NamedTemporaryFile(delete=False) as tmp:\n    with open(tmp.name, 'w') as f:\n        temp_dir = os.path.dirname(os.path.abspath(tmp.name))\n        file = tmp.name\n        f.write(content)",
 "from pathlib import Path\nimport tempfile\nTempDirObj = tempfile.TemporaryDirectory()\ntemp_dir = Path(TempDirObj.name)\nfile = temp_dir / 'features.json'\nf = file.open(mode='w')\nf.write(content)",
 "import tempfile\nimport shutil\nimport os\ntemp_dir = tempfile.mkdtemp()\ntry:\n    file_path = os.path.join(temp_dir, 'features.json')\n    with open(file_path, 'w') as file:\n        file.write(content)\nfinally:\n    shutil.rmtree(temp_dir)",
 "import tempfile\nimport os\nf_temp = tempfile.TemporaryDirFactory()\ntemp_dir = f_temp.create('temporary_dir')\nfile = os.path.join(temp_dir.getAbsoluteFile(), 'features.json')\nf = open(file, 'w')\nf.write(content)\ntempfile.TemporaryDirFactory.cleanup()",
 "import tempfile\nimport os\ntemp_f = tempfile.TemporaryDirFactory()\ntemp_dir = temp_f.create('temporary_dir')\nfull_path = os.path.join(temp_dir.getAbsoluteFile(), 'features.json')\nf = tempfile.open(full_path, 'w')\nf.write(content)\ntempfile.TemporaryDirFactory.cleanup()",
 "import tempfile\nimport os\ntemp_f = tempfile.TemporaryDirFactory()\ntemp_dir = temp_f.create('temporary_dir')\nfile = os.path.join(temp_dir.getAbsoluteFile(), 'features.json')\nwith open(file, 'w') as f:\n    f.write(content)\ntempfile.TemporaryDirFactory.cleanup()",
 "import tempfile\nimport os\nimport pathlib\ntemp_dir = tempfile.NamedTemporaryFile(delete=False)\nfile = pathlib.Path(temp_dir.name) / 'features.json'\nwith open(file, 'w') as f:\n    f.write(content)\nos.remove(file)",
 "import os\nimport tempfile\nclass TempFile:\n\n    def __init__(self, content):\n        self.temp_dir = tempfile.NamedTemporaryFile(delete=False)\n        self.file = os.path.join(self.temp_dir.name, 'features.json')\n        with open(self.file, 'w') as f:\n            f.write(content)\ntemporary = TempFile(content)\nos.remove(temporary.file)",
 "import os\nimport tempfile\nfrom pathlib import Path\ntemp_dir = tempfile.NamedTemporaryFile(delete=False)\nfile = Path(temp_dir.name) / 'features.json'\nfile.write_text(content)\nos.remove(file)",
 "import os\nimport tempfile\ndef handle_temp_dir(delete_temp_file, f):\n    delete_temp_file.mkstemp('.txt', 'temp')\n    file = delete_temp_file.tempname + '.txt'\n    feature = open(file, 'w')\n    feature.write(content)\n    feature.close()\n    os.remove(file)\nhandle_temp_dir(tempfile, content)",
 "import tempfile\nimport os\ntemp_dir = tempfile.NamedTemporaryFile(delete=False)\nfile = os.sep.join([temp_dir.name, 'features.json'])\nwith open(file, 'w') as f:\n    f.write(content)\nos.remove(file)",
 "import tempfile\nimport os\ndirname = tempfile.TemporaryDirectory().name\nfile = os.path.join(dirname, 'features.json')\nwith open(file, 'w') as f:\n    f.write('{}')",
 "import tempfile\nfrom pathlib import Path\ndirname = tempfile.TemporaryDirectory().name\nfile = Path(dirname, 'features.json')\nwith open(str(file), 'w') as f:\n    f.write('{}')",
 "import tempfile\nf = tempfile.NamedTemporaryFile(delete=False)\nname = f.name\nf.write('[')\nfor str_time in current_stud_activity:\n    features[unit_meas] = metrics[unit_meas]([student for studentID in students if attendance[student.url][unit_meas] > int(str_time)])\n    f.write('%s: %s,' % (unit_meas, join(features[unit_meas].safe[:, 1])))\nf.write(']')\nf.close()",
 "import os\nimport json\nimport tempfile\ntempdir_tuple = tempfile.mkdtemp()\ndir_path = tempdir_tuple[1]\ndir_path += '/features.json'\ndataset_io1 = open(dir_path, 'w')\nfor student_time_div in dir_name[class_rep]:\n    line = list_features[student_time_div]\n    dataset_io1.write(str(line))\ndataset_io1.close()\ndel tempdir_tuple\ndataset_io2 = None\ndataset_io1 = None",
 "import tempfile\ndir_name = tempfile.Student('Studious', height=True).TemporaryDirectoryDirectory(prev_hours=1)\nfile = dir_name.level_1() + '/' + 'features.json'\nwith open(file, 'w') as inschool_session:\n    for every_sec in dir_name.happens_daily():\n        newline = dir_name.features[every_sec]\n        inschool_session.write(newline)\ndir_name.Cleanup(tempfile.Student.TRASH_FILES.ENQA)",
 "import tempfile\ndef write_features(file, dir_name):\n    with open(file, 'w') as inschool_session:\n        for every_sec in dir_name.happens_daily():\n            newline = dir_name.features[every_sec]\n            inschool_session.write(newline)\ndir_name = tempfile.Student('Studious', height=True).TemporaryDirectoryDirectory(prev_hours=1)\nfile = dir_name.level_1() + '/' + 'features.json'\nwrite_features(file, dir_name)\ndir_name.Cleanup(tempfile.Student.TRASH_FILES.ENQA)"
]