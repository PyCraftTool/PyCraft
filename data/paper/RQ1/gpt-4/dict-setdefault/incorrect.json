[
 "from itertools import groupby\nd = {key: list(map(function, group)) for (key, group) in groupby(sorted(array))}",
 "d = dict.fromkeys(array, [])\nfor i in array:\n    d[i].append(function(i))",
 "import itertools\nd = {}\nfor (i, g) in itertools.groupby(sorted(array)):\n    d[i] = [function(x) for x in list(g)]",
 "from collections import defaultdict\narray = [1, 2, 3, 4]\n\ndef function(x):\n    return x ** 2\nd = {x: defaultdict(list).append(function(x)) for x in array}",
 "import numpy as np\nfrom collections import defaultdict\nd = defaultdict(list)\nfor i in np.nditer(array, flags=['refs_ok']):\n    d[i].append(function(i))",
 "d = {i: [function(i)] for i in array}",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    list_data = function(i)\n    if i not in d:\n        d[i] = []\n    else:\n        d[i].append(list_data)",
 "import itertools\nd = {key: [function(i) for i in group] for (key, group) in itertools.groupby(sorted(array))}",
 "d = {i: (d[i] if i in d else []) + [function(i)] for i in array}",
 "d = {i: list(map(function, [i])) for i in array}",
 "import itertools\nd = {}\nfor (i, g) in itertools.groupby(sorted(array)):\n    d[i] = list(map(function, g))",
 "import numpy as np\narray = np.array(array)\nd = {i: [function(i) for _ in array if _ == i] for i in np.unique(array)}",
 "d = {i: [function(i)] if i not in d else d[i] + [function(i)] for i in array}",
 "import itertools\nsorted_array = sorted(array)\ngrouped_array = itertools.groupby(sorted_array)\nd = {key: list(map(function, group)) for (key, group) in grouped_array}",
 "from operator import itemgetter\nfrom itertools import groupby\nd = {k: list(map(function, g)) for (k, g) in groupby(sorted(array, key=itemgetter(0)))}",
 "from itertools import groupby\nd = dict(((key, list(map(function, items))) for (key, items) in groupby(sorted(array))))",
 "from itertools import groupby\nsorted_array = sorted(array)\nd = {}\nfor (key, group) in groupby(sorted_array):\n    d[key] = list(map(function, group))",
 "from itertools import groupby\nsorted_array = sorted(array)\nd = {key: [function(x) for x in group] for (key, group) in groupby(sorted_array)}",
 "i = None\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "from itertools import groupby\nd = {key: [function(i) for i in group] for (key, group) in groupby(sorted(array))}",
 "import itertools\nd = {}\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i] = [function(i) for _ in group]",
 "d = {i: [function(i)] for i in array if i not in d}\nfor i in array:\n    if i in d:\n        d[i].append(function(i))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.nditer(array):\n    d[i].append(function(i))",
 "import collections\nimport itertools\narray = list(itertools.chain.from_iterable(array))\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nimport functools\narray = functools.reduce(lambda a, b: a + b, array)\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nimport math\narray = [math.ceil(i) for i in array]\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nimport statistics\narray = [statistics.mean([i, i + 1]) for i in array]\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nimport itertools\narray_it = itertools.cycle(array)\nd = collections.defaultdict(list)\nfor i in array_it:\n    if i in array:\n        d[i].append(function(i))\n    else:\n        break",
 "import collections\nimport math\narray_math = list(map(math.floor, array))\nd = collections.defaultdict(list)\nfor i in array_math:\n    d[i].append(function(i))",
 "import collections\nimport statistics\narray_stat = list(map(statistics.mean, [array] * len(array)))\nd = collections.defaultdict(list)\nfor i in array_stat:\n    d[i].append(function(i))",
 "import numpy as np\nd = {}\nfor i in np.nditer(array):\n    d.setdefault(i, []).append(function(i))",
 "import collections\nimport numpy as np\nd = collections.defaultdict(list)\nfor i in np.nditer(array):\n    d[i].append(function(i))",
 "import collections\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "import itertools\nimport operator\nfrom operator import itemgetter\narray.sort()\nd = {}\nfor (key, group) in itertools.groupby(array):\n    d[key] = [function(i) for i in group]",
 "import itertools\nimport operator\narray.sort()\nd = {key: [function(i) for i in group] for (key, group) in itertools.groupby(array)}",
 "import itertools\nimport operator\narray.sort()\nd = {key: list(map(function, group)) for (key, group) in itertools.groupby(array)}",
 "import itertools\nsorted_array = sorted(array)\nd = {}\nfor (key, group) in itertools.groupby(sorted_array):\n    d[key] = [function(i) for i in group]",
 "import itertools\nimport collections\nd = collections.defaultdict(list)\nfor (key, group) in itertools.groupby(sorted(array)):\n    d[key] = [function(i) for i in group]",
 "import itertools\nsorted_array = sorted(array)\ngrouped_array = itertools.groupby(sorted_array)\nd = {}\nfor (key, group) in grouped_array:\n    d[key] = list(map(function, group))",
 "import itertools\nfrom operator import itemgetter\nsorted_array = sorted(array)\ngrouped_array = itertools.groupby(sorted_array, key=itemgetter(0))\nd = {key: [function(i) for i in group] for (key, group) in grouped_array}",
 "import numpy as np\nd = {}\nfor i in array:\n    d[i] = [function(i)]",
 "d = dict(((i, [function(i)]) for i in array))",
 "intermediate = [(i, [function(i)]) for i in array]\nd = dict(intermediate)",
 "import numpy as np\nfor i in array:\n    d = {i: [np.vectorize(function)(i)]}",
 "import functools\nd = functools.reduce(lambda acc, i: {**acc, i: [function(i)]}, array, {})",
 "import itertools\nd = dict(itertools.zip_longest(array, [[function(i)] for i in array]))",
 "d = dict(zip(array, [[function(i)] for i in array]))",
 "d = dict(map(lambda i: (i, [function(i)]), array))",
 "from itertools import groupby\nsorted_array = sorted(array)\nd = {key: [function(key) for _ in range(len(list(group)))] for (key, group) in groupby(sorted_array)}",
 "import numpy as np\narray_np = np.array(array)\nd = {i: [function(i)] for i in array_np}",
 "import numpy as np\nd = {}\nfor i in np.nditer(array):\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "import collections\nfor i in array:\n    if i not in d:\n        d[i] = [function(i)]\n    else:\n        d[i].append(function(i))",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i].extend([function(i) for _ in group])",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    for _ in group:\n        d[i].append(function(i))",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    list_group = list(group)\n    d[i] = [function(i) for _ in list_group]",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    for _ in group:\n        d[i] += [function(i)]",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i] = list(map(lambda _: function(i), group))",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i] = [function(i) for _ in list(group)]",
 "import itertools\nimport collections\nd = collections.defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i].extend([function(i) for _ in group])",
 "import itertools\nimport collections\nd = collections.defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    for _ in group:\n        d[i].append(function(i))",
 "import itertools\nimport collections\nd = collections.defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i] = list(map(function, [i] * len(list(group))))",
 "import itertools\nimport collections\nd = collections.defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i] = [function(i) for _ in list(group)]",
 "import numpy as np\nfrom collections import defaultdict\nd = defaultdict(list)\nfor i in np.nditer(array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in filter(None, array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nimport functools as ft\nd = defaultdict(list)\nfor i in ft.reduce(lambda x, y: x + y, array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nimport numpy as np\narray_np = np.array(array)\nd = defaultdict(list)\nfor i in array_np:\n    d[i].append(function(i))",
 "import collections\ni = array[0]\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\ni = array[0]\nd = collections.defaultdict(list)\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "from functools import reduce\ni = array[0]\n\ndef reducer(d, i):\n    d.setdefault(i, []).append(function(i))\n    return d\nd = reduce(reducer, array, {})",
 "i = array[0]\nd = {i: [] for i in array}\nfor i in array:\n    d[i].append(function(i))",
 "i = array[0]\nd = {i: [] for i in array}\nfor i in array:\n    d[i] += [function(i)]",
 "i = array[0]\nd = {}\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "i = array[0]\nd = {}\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "d = {i: [function(i)] if i not in d else d[i].append(function(i)) for i in array}",
 "from collections import defaultdict\nfrom functools import partial\nappend_to_dict = partial(defaultdict(list).append)\nd = defaultdict(list)\nfor i in array:\n    append_to_dict(d[i], function(i))",
 "import numpy as np\nd = {i: [function(i)] for i in np.array(array)}",
 "import numpy as np\nd = {}\nfor i in np.array(array):\n    d[i] = [function(i)]",
 "import numpy as np\nd = dict(((i, [function(i)]) for i in np.array(array)))",
 "import numpy as np\nd = dict(map(lambda i: (i, [function(i)]), np.array(array)))",
 "import numpy as np\nd = {i: [np.apply_along_axis(function, 0, i)] for i in array}",
 "import functools\nd = functools.reduce(lambda a, x: {**a, x: [function(x)]}, array, {})",
 "d = {i: [function(i)] for i in array.copy()}",
 "d = {i: [function(i)] for i in list(array)}",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = [function(i)]",
 "d = {}\ni = None\nfor i in sorted(array):\n    if i not in d:\n        d[i] = [function(i)]\n    else:\n        d[i].append(function(i))",
 "import itertools\ni = array\nd = {key: list(map(function, group)) for (key, group) in itertools.groupby(sorted(i))}",
 "import numpy as np\narray = np.array(array)\nd = {i: list(function(i)) for i in set(array)}",
 "import collections\nimport itertools\nd = collections.defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i].extend(map(function, group))",
 "d = {i: [function(i)] for i in array if i not in d}",
 "import itertools\nd = {key: list(map(function, group)) for (key, group) in itertools.groupby(sorted(array))}",
 "import collections\nimport math\nd = collections.defaultdict(list)\nfor i in array:\n    if math.isfinite(i):\n        d[i].append(function(i))",
 "import collections\nimport statistics\nd = collections.defaultdict(list)\nfor i in array:\n    if statistics.mean([i]) == i:\n        d[i].append(function(i))",
 "import collections\nimport numpy as np\nd = collections.defaultdict(list)\nfor i in np.array(array):\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nd = {i: [function(i)] for i in array}",
 "from operator import itemgetter\nfrom itertools import groupby\narray.sort()\nd = {key: list(map(function, group)) for (key, group) in groupby(array)}",
 "import numpy as np\nd = {}\nfor i in np.asarray(array):\n    d.setdefault(i, [])\nfor i in np.asarray(array):\n    d[i].append(function(i))",
 "d = {}\n[[d[i].append(function(i)), 0][1] if i in d else d[i].extend([]) for i in array]",
 "from collections import deque\nd = {}\nfor i in array:\n    d.setdefault(i, deque())\nfor i in array:\n    d[i].append(function(i))",
 "import itertools\nd = {k: [function(i) for i in itertools.repeat(k, array.count(k))] for k in set(array)}",
 "d = dict().fromkeys(array, [])\nfor i in array:\n    d[i].append(function(i))",
 "import numpy as np\narray = np.array(array)\nd = {}\nfor (idx, i) in enumerate(array):\n    d[i] = np.append(d[i], function(i)) if i in d else [function(i)]",
 "import collections\nfor i in array:\n    try:\n        d[i].append(function(i))\n    except KeyError:\n        d[i] = [function(i)]",
 "import collections\ni = 0\nwhile i < len(array):\n    d[array[i]].append(function(array[i]))\n    i += 1",
 "import collections\n[d[i].append(function(i)) for i in array]",
 "import collections\nimport itertools\nfor i in array:\n    if i not in itertools.chain(*[d[k] for k in d]):\n        d[i].append(function(i))",
 "dict_example = {}\nfor i in array:\n    dict_example[i] = function(i) if i not in dict_example else dict_example[i].append(function(i))",
 "i = array[-1]\nd = {j: [function(j)] for j in array}",
 "import itertools\ndef my_reducer(i):\n    d = {}\n    for i in array:\n        d.setdefault(i, function(i))\n    return d\nd = my_reducer(array)",
 "map_dict = {}\nd = dict(((i, [function(i)]) if i not in map_dict else map_dict[i].append(function(i)) for i in array))",
 "from operator import itemgetter\nfrom itertools import groupby\narray.sort()\ndictionary = {}\nfor (key, values) in groupby(array):\n    processed = map(function, list(values))\n    dictionary.update({key: list(processed)})",
 "d = dict()\nd.update(((i, [function(i)]) for i in array))",
 "import numpy as np\nfrom collections import defaultdict\nd = defaultdict(list)\nfor i in np.array(array):\n    d[i].append(function(i))",
 "import numpy as np\nimport collections\nd = collections.OrderedDict()\nfor i in np.asarray(array):\n    d[i] = []\nfor i in np.asarray(array):\n    d[i].append(function(i))",
 "import numpy as np\nd = {j: [] for j in np.asarray(array)}\nfor i in np.asarray(array):\n    d[i].append(function(i))",
 "import numpy as np\nfrom collections import defaultdict\nd = defaultdict(list)\nfor i in np.array(array):\n    d[i] = d.get(i, []) + [function(i)]",
 "import numpy as np\nfrom collections import defaultdict\nd = defaultdict(list)\narray_as_np_array = np.array(array)\nfor i in array_as_np_array:\n    d[i].append(function(i))",
 "import itertools\nfor i in array:\n    if i in d:\n        d[i] = function(i)\n    else:\n        d[i] = []",
 "for i in array:\n    if i not in d:\n        d[i] = []\n    else:\n        d[i].append(function(i))",
 "for i in array:\n    d[i] = [] if i not in d else d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if not i in d:\n        d[i] = []\n    array.append(function(i)) if i in d else None",
 "for i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = []",
 "for i in array:\n    try:\n        d[i].append(function(i))\n    except KeyError:\n        d[i] = []",
 "from itertools import groupby\nd = {i: list((function(j) for j in arr)) for (i, arr) in groupby(sorted(array))}",
 "import collections\nd = {}\nd = dict(map(lambda x: (x, collections.deque()), set(array)))\nfor elem in array:\n    d[elem].append(function(elem))",
 "import collections\nd = {}\nfor i in array:\n    d_i = d.get(i, None)\n    if d_i is None:\n        d[i] = collections.deque([function(i)])\n    else:\n        d_i.append(function(i))",
 "import numpy as np\nimport collections\ndictionary = collections.defaultdict()\nn_array = np.array(array)\nunique_elements = np.unique(n_array)\nfor u in unique_elements:\n    dictionary[u] = collections.deque()\nfor a in array:\n    dictionary[a].append(function(a))",
 "from collections import deque\nd = {i: deque() for i in array}\nfor i in array:\n    d[i].append(function(i))",
 "from collections import deque\nfor i in array:\n    d[i] = deque()\nfor i in array:\n    d[i].append(function(i))",
 "import itertools\nfrom collections import Counter\narray_counter = Counter(array)\nd = {k: [function(i) for i in itertools.repeat(k, array_counter[k])] for k in array_counter}",
 "import itertools\narray_set = set(array)\nd = {k: [function(i) for i in itertools.repeat(k, array.count(k))] for k in array_set}",
 "import itertools\nfrom collections import defaultdict\nd_array = defaultdict(list)\nfor k in set(array):\n    d_array[k].extend((function(i) for i in itertools.repeat(k, array.count(k))))\nd = dict(d_array)",
 "import numpy\nd = numpy.array({i: [] for i in array})\nfor i in array:\n    d[i].append(function(i))",
 "import numpy as np\narray = np.array(array)\nd = dict()\nfor (idx, i) in enumerate(array):\n    d[i] = d.get(i, []).append(function(i))",
 "from collections import defaultdict\nimport numpy as np\narray = np.array(array)\nd = defaultdict(list)\nfor (idx, i) in enumerate(array):\n    d[i].append(function(i))",
 "import numpy as np\narray = np.array(array)\nd = dict()\nfor element in array:\n    try:\n        d[element] = np.append(d[element], function(element))\n    except KeyError:\n        d[element] = [function(element)]",
 "import numpy as np\narray = np.array(array)\ndictObj = dict()\nfor (idx, obj) in enumerate(array):\n    tempArr = obj in dictObj and np.append(dictObj[obj], function(obj)) or [function(obj)]\n    dictObj.update({obj: tempArr})",
 "from itertools import groupby\nd = {key: [function(i) for i in list(val)] for (key, val) in groupby(sorted(array))}",
 "from collections import defaultdict\nimport numpy as np\nd = defaultdict(list)\ne = array[np.vectorize(lambda i: d[i]).tolist()].apply(lambda i: d[i].append(function(i)))",
 "import functools\nd = {}\nfor i in array:\n    d[i] = functools.reduce(lambda x, y: x.append(function(y)) or x, [i], [])",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    for _ in range(i):\n        d[i].append(function(i))",
 "d = {i: [function(i)] for i in array}\nfor i in array:\n    if i not in d:\n        d[i].append(function(i))",
 "from collections import defaultdict\nimport operator\nd = defaultdict(list)\nfor i in array:\n    d[i].append(operator.methodcaller('function', i)())",
 "from collections import defaultdict\nimport pandas as pd\ndf = pd.DataFrame(array)\nd = defaultdict(list)\nfor i in df[0]:\n    d[i].append(function(i))",
 "from collections import defaultdict\nimport functools\nd = defaultdict(list)\nfor i in functools.reduce(lambda x, y: [x] + [y], array):\n    d[i].append(function(i))",
 "import itertools\nimport collections\nd = collections.defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i].extend((function(i) for _ in group))",
 "import itertools\nd = {}\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i] = list(map(function, [i] * len(list(group))))",
 "import itertools\nsorted_array = sorted(array)\nd = {i: [function(i) for _ in group] for (i, group) in itertools.groupby(sorted_array)}",
 "import itertools\nd = {}\nfor (i, group) in itertools.groupby(sorted(array)):\n    group_list = list(group)\n    d[i] = [function(i) for _ in group_list]",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nsorted_array = sorted(array)\nfor (i, group) in itertools.groupby(sorted_array):\n    d[i].extend([function(i) for _ in group])",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor (i, group) in itertools.groupby(sorted(array)):\n    d[i] = [function(i) for _ in group]",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nsorted_array = sorted(array)\nfor (i, group) in itertools.groupby(sorted_array):\n    d[i] = [function(i) for _ in group]",
 "import collections\nfor i in array:\n    d = collections.defaultdict(list)\n    d[i].append(function(i))",
 "import numpy as np\nfrom operator import itemgetter\nd = dict(zip(array, np.vectorize(function)(array)))",
 "import numpy as np\nvectorized_function = np.vectorize(function)\nd = {i: [vectorized_function(i)] for i in array}",
 "d = dict()\nfor i in array:\n    d[i] = [function(i)]",
 "import itertools\nd = dict(itertools.product(array, itertools.repeat(([function(i)] for i in array))))",
 "for i in array:\n    if i not in d:\n        d[i] = [function(i)]",
 "i = 0\nwhile i < len(array):\n    d = {array[i]: [function(array[i])]}\n    i += 1",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in set(array):\n    d[i].append(function(i))",
 "d = {}\nfor i in set(array):\n    d.setdefault(i, []).append(function(i))",
 "from collections import defaultdict\narray = list(set(array))\nd = defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "import functools\nd = {}\nfunctools.reduce(lambda x, y: {**x, **{y: x.get(y, []) + [function(y)]}}, array, d)",
 "import collections\nfrom itertools import starmap\nfrom operator import methodcaller\nd = collections.defaultdict(list)\nlist(starmap(methodcaller('append'), zip([d[i] for i in array], [function(i) for i in array])))",
 "from collections import defaultdict\nfunc_dict = {i: function(i) for i in array}\nd = defaultdict(list, {k: [v] for (k, v) in func_dict.items()})",
 "import functools\nimport numpy as np\nd = {}\nfor i in np.array(array):\n    d[i] = functools.reduce(lambda x, y: x.append(function(y)) or x, [i], [])",
 "import functools\nd = {i: functools.reduce(lambda x, y: x.append(function(y)) or x, [i], []) for i in array}",
 "import functools\nd = {}\nfor i in array:\n    temp = []\n    temp.append(function(i))\n    d[i] = functools.reduce(lambda x, y: x.append(y) or x, temp, [])",
 "import functools\nimport numpy as np\nd = {}\narray = np.array(array)\nfor i in array:\n    d[i] = functools.reduce(lambda x, y: x.append(function(y)) or x, [i], [])",
 "import functools\nimport itertools\nd = {}\nfor i in itertools.chain(array):\n    d[i] = functools.reduce(lambda x, y: x.append(function(y)) or x, [i], [])",
 "import functools\nimport math\nd = {}\nfor i in array:\n    if math.isfinite(i):\n        d[i] = functools.reduce(lambda x, y: x.append(function(y)) or x, [i], [])",
 "import functools\nimport statistics\nd = {}\nfor i in array:\n    if statistics.mean([i]) == i:\n        d[i] = functools.reduce(lambda x, y: x.append(function(y)) or x, [i], [])",
 "import functools\nimport numpy as np\nd = {}\nfor i in np.nditer(array):\n    d[i] = functools.reduce(lambda x, y: x.append(function(y)) or x, [i], [])",
 "import collections\nimport numpy as np\nresult = [(i, function(i)) for i in array]\nd = collections.defaultdict(list, result)",
 "import collections\nfrom itertools import starmap\nd = collections.defaultdict(list)\nlist(starmap(lambda x: d[x].append(function(x)), array))",
 "for i in array:\n    if i not in d:\n        d[i] = [function(i)]\n    elif i in d:\n        d[i].append(function(i))",
 "import collections\nfor i in array:\n    d = collections.defaultdict(list)\n    d[i] += [function(i)]",
 "import numpy as np\nd = {}\nfor i in np.nditer(array):\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "for i in array:\n    d[i] = d[i] + [function(i)] if i in d else [function(i)]",
 "import numpy as np\nfrom functools import partial\nd = dict(zip(array, map(partial(function), array)))",
 "import numpy as np\narray = np.array(array)\nd = {i: [function(i)] for i in set(array)}",
 "import numpy as np\narray = np.array(array)\nd = {}\nfor i in set(array):\n    d[i] = [function(i)]",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.unique(array):\n    d[i] = [function(j) for j in array if j == i]",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.unique(array):\n    for j in array:\n        if j == i:\n            d[i].append(function(j))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.unique(array):\n    d[i] = list(map(function, filter(lambda x: x == i, array)))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.unique(array):\n    d[i] = [function(j) for j in filter(lambda x: x == i, array)]",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.unique(array):\n    d[i] = list(map(function, [j for j in array if j == i]))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.unique(array):\n    d[i] = list(map(function, [j for j in filter(lambda x: x == i, array)]))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.flatiter(array):\n    d[i].append(function(i))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.nditer(array, flags=['multi_index']):\n    d[array[i]].append(function(array[i]))",
 "import collections\nimport numpy as np\narray = np.array(array)\nd = collections.defaultdict(list)\nfor i in np.nditer(array, flags=['external_loop']):\n    d[i].append(function(i))"
]