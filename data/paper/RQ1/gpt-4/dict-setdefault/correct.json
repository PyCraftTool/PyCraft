[
 "d = {}\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "d = {}\nfor i in array:\n    d.setdefault(i, [])\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    list_data = function(i)\n    d[i].append(list_data)",
 "d = {}\nfor i in array:\n    d.setdefault(i, []).append(function(i))",
 "d = {}\nfor i in set(array):\n    d[i] = [function(i) for _ in array if _ == i]",
 "d = {i: [] for i in array}\nfor i in array:\n    d[i].append(function(i))",
 "from operator import setitem\nd = {}\nfor i in array:\n    d.get(i, False) or setitem(d, i, [])\n    d[i].append(function(i))",
 "import functools\nd = {}\nfor i in array:\n    d = functools.reduce(lambda d, i: d.update({i: d.get(i, []) + [function(i)]}) or d, array, {})",
 "d = {i: [] for i in array}\n[d[i].append(function(i)) for i in array]",
 "d = {i: [] for i in array}\nlist(map(lambda i: d[i].append(function(i)), array))",
 "import collections\nd = collections.defaultdict(list)\n[d[i].append(function(i)) for i in array]",
 "d = {}\nfor i in array:\n    values = d.get(i)\n    if values is not None:\n        values.append(function(i))\n    else:\n        d[i] = [function(i)]",
 "d = {}\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in range(len(array)):\n    d[array[i]].append(function(array[i]))",
 "import itertools\nfrom collections import defaultdict\nd = defaultdict(list)\nfor i in itertools.chain(array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nfrom functools import partial\nd = defaultdict(partial(list))\nfor i in array:\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in (lambda x: (n for n in x))(array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in iter(array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\ni = iter(array)\nwhile True:\n    try:\n        x = next(i)\n        d[x].append(function(x))\n    except StopIteration:\n        break",
 "from collections import defaultdict\nfrom itertools import chain\nd = defaultdict(list)\nfor i in chain.from_iterable([array]):\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in map(lambda x: x, array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in filter(lambda x: True, array):\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in [x for x in array]:\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in (x for x in array):\n    d[i].append(function(i))",
 "i = 0\nd = {}\nwhile i < len(array):\n    if array[i] not in d:\n        d[array[i]] = []\n    d[array[i]].append(function(array[i]))\n    i += 1",
 "import collections\ni = 0\narray_list = [(i, function(i)) for i in array]\nd = collections.defaultdict(list)\nfor (i, list_data) in array_list:\n    d[i].append(list_data)",
 "i = 0\nd = {}\nfor i in array:\n    if i not in d:\n        d[i] = []\n    list_data = function(i)\n    d[i].append(list_data)",
 "i = 0\narray_list = [(i, function(i)) for i in array]\nd = {}\nfor (i, list_data) in array_list:\n    if i not in d:\n        d[i] = []\n    d[i].append(list_data)",
 "from collections import defaultdict\nd = defaultdict(list)\n[i for i in array if d[i].append(function(i))]",
 "from collections import defaultdict\nd = defaultdict(list)\ndata = map(function, array)\nfor (i, j) in zip(array, data):\n    d[i].append(j)",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d[i].extend([function(i)])",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    if i not in d:\n        d[i] = [function(i)]\n    else:\n        d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "import collections\nd = {i: [function(i)] * collections.Counter(array)[i] for i in set(array)}",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = [function(i)]\n    else:\n        d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d[i] = d.get(i, [])\n    d[i].append(function(i))",
 "import collections\nimport functools\nd = collections.defaultdict(list)\nlist(map(lambda i: d[i].append(function(i)), array))",
 "d = dict()\nfor i in array:\n    cur_list = d.get(i, [])\n    cur_list.append(function(i))\n    d[i] = cur_list",
 "import collections\nd = collections.defaultdict(lambda : [])\nfor i in array:\n    d[i].append(function(i))",
 "i = None\nd = {i: [] for i in array}\nfor i in array:\n    d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "import itertools\nfrom operator import itemgetter\nd = {k: list(map(itemgetter(1), v)) for (k, v) in itertools.groupby(sorted(((i, function(i)) for i in array)), key=itemgetter(0))}",
 "import collections\nd = collections.defaultdict(list)\nlist(map(lambda x: d[x].append(function(x)), array))",
 "from functools import reduce\nd = reduce(lambda acc, i: {**acc, i: acc.get(i, []) + [function(i)]}, array, {})",
 "d = {i: [function(i) for _ in range(array.count(i))] for i in array}",
 "d = {}\nfor i in array:\n    try:\n        d[i].append(function(i))\n    except KeyError:\n        d[i] = [function(i)]",
 "from functools import reduce\ndef reducer(d, i):\n    d[i] = d.get(i, []) + [function(i)]\n    return d\nd = reduce(reducer, array, {})",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d[i] = d[i] + [function(i)]",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d[i] += [function(i)]",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i] = d[i] + [function(i)]",
 "d = {i: [] for i in array}\nfor i in array:\n    d[i].extend([function(i)])",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    result = function(i)\n    d[i].append(result)",
 "import collections\nimport itertools\nd = collections.defaultdict(list)\nfor i in itertools.chain(array):\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))",
 "import collections\nimport functools\nd = collections.defaultdict(list)\nfunctools.reduce(lambda x, y: d[y].append(function(y)), array, 0)",
 "import collections\nfrequency = collections.Counter(array)\nd = {i: [function(i) for _ in range(frequency[i])] for i in array}",
 "d = {}\nfor i in array:\n    if i not in d:\n        d[i] = [function(i) for _ in range(array.count(i))]",
 "from functools import reduce\nfrequency = reduce(lambda x, y: x.update({y: x.get(y, 0) + 1}) or x, array, {})\nd = {i: [function(i) for _ in range(frequency[i])] for i in array}",
 "import collections\nfrequency = collections.Counter(array)\nd = dict()\nfor i in array:\n    d[i] = [function(i) for _ in range(frequency[i])]",
 "d = dict()\nfor i in array:\n    if i not in d:\n        d[i] = [function(i) for _ in range(array.count(i))]",
 "d = {}\nfor i in set(array):\n    d[i] = [function(i) for _ in range(array.count(i))]",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i] += [function(i)]",
 "import numpy as np\nfrom collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    if i in d:\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "from collections import defaultdict\nd = defaultdict(lambda : [])\nfor i in array:\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    if not d.get(i):\n        d[i] = []\n    d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d[i] = d[i] + [function(i)] if i in d else [function(i)]",
 "d = {}\ni = 0\nwhile i < len(array):\n    if array[i] not in d:\n        d[array[i]] = []\n    d[array[i]].append(function(array[i]))\n    i += 1",
 "from collections import defaultdict\nd = defaultdict(list)\ni = 0\nwhile i < len(array):\n    d[array[i]].append(function(array[i]))\n    i += 1",
 "from collections import defaultdict\nfrom itertools import starmap\ndef add_to_dict(i):\n    d[i].append(function(i))\nd = defaultdict(list)\nlist(starmap(add_to_dict, [(i,) for i in array]))",
 "from collections import defaultdict\nd = defaultdict(list)\n[d[i].append(function(i)) for i in array]",
 "from collections import defaultdict\nd = defaultdict(list)\nlist(map(lambda i: d[i].append(function(i)), array))",
 "from functools import reduce\ndef reducer(d, i):\n    d.setdefault(i, []).append(function(i))\n    return d\nd = reduce(reducer, array, {})",
 "d = {}\nfor i in array:\n    if i in d.keys():\n        d[i].append(function(i))\n    else:\n        d[i] = [function(i)]",
 "from functools import reduce\ndef reducer(dict, element):\n    dict[element] = dict.get(element, []) + [function(element)]\n    return dict\nd = reduce(reducer, array, {})",
 "import collections\ni = array\nd = collections.defaultdict(list)\nfor item in i:\n    d[item].append(function(item))",
 "from operator import itemgetter\ni = array\nd = {}\nfor item in i:\n    d.setdefault(item, []).append(function(item))",
 "i = array\nd = {}\nfor item in i:\n    d[item] = d.get(item, []) + [function(item)]",
 "from collections import defaultdict\nimport functools\nd = defaultdict(list)\nlist(map(lambda x: d[x].append(function(x)), array))",
 "from functools import reduce\ndef reducer(d, i):\n    if i not in d:\n        d[i] = []\n    d[i].append(function(i))\n    return d\nd = reduce(reducer, array, {})",
 "import collections\nimport itertools\nd = collections.defaultdict(list)\nfor i in itertools.islice(array, 0, len(array)):\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].extend(list(map(function, [i])))",
 "import collections\nresult = collections.defaultdict(list)\nfor i in array:\n    result[i].append(function(i))\nd = dict(result)",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d[i].append(function(i))\nd = dict(d)",
 "from collections import defaultdict\nd = defaultdict(list)\ne = list(map(lambda i: d[i].append(function(i)), array))",
 "from collections import defaultdict\nf_res = [function(i) for i in array]\nd = defaultdict(list, {k: [] for k in array})\nfor (k, v) in zip(array, f_res):\n    d[k].append(v)",
 "it_array = iter(array)\nd = {}\nfor _ in array:\n    i = next(it_array)\n    d[i] = d.get(i, []) + [function(i)]",
 "d = {i: [] for i in array}\n_ = [d[i].append(function(i)) for i in array]",
 "d = {value: [function(value) for _ in range(array.count(value))] for value in set(array)}",
 "import itertools, collections\narray_count = collections.Counter(array)\nd = {k: [function(k)] * array_count[k] for k in set(array)}",
 "import itertools, collections\narray_count = collections.Counter(array)\ndict_obj = {}\nfor k in set(array):\n    dict_obj[k] = [function(k)] * array_count[k]\nd = dict_obj",
 "import copy\nd = {i: [] for i in array}\nfor i in array:\n    d[i] = copy.deepcopy(d[i])\n    d[i].append(function(i))",
 "d = {i: [] for i in array}\nfor i in array:\n    d[i] += [function(i)]",
 "from collections import defaultdict\nd = defaultdict(list)\nfor (ind, ele) in enumerate(array):\n    d[ele].append(function(ele))",
 "from collections import defaultdict\nd = defaultdict(list)\nfor ele in list(array):\n    d[ele].append(function(ele))",
 "from collections import defaultdict\ndef freq(int):\n    d[int].append(function(int))\n    return\nd = defaultdict(list)\nlist(map(freq, array))",
 "def proc(d, i):\n    return d.setdefault(i, []).append(function(i))\nd = {}\nfor i in array:\n    proc(d, i)",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in range(len(array)):\n    e = d[array[i]].append(function(array[i]))",
 "d = {}\nfor i in array:\n    if d.get(i) is None:\n        d[i] = [function(i)]\n    else:\n        d[i].append(function(i))",
 "d = {}\nfor i in array:\n    d.update({i: d.get(i, []) + [function(i)]})",
 "d = {}\nfor i in array:\n    if not d.get(i):\n        d[i] = [function(i)]\n    else:\n        d[i].append(function(i))",
 "from collections import defaultdict\nd = defaultdict(list)\n_ = [d[i].append(function(i)) for i in array]",
 "from collections import defaultdict\nimport functools\nd = defaultdict(list)\nfor i in array:\n    d[i].append(functools.partial(function, i)())",
 "from collections import defaultdict\nd = defaultdict(list)\nfor i in array:\n    d.setdefault(i, []).append(function(i))",
 "from functools import reduce\nd = reduce(lambda a, b: {**a, b: a.get(b, []) + [function(b)]}, array, {})",
 "d = {}\n[d.setdefault(i, []).append(function(i)) for i in array]",
 "from functools import reduce\nd = reduce(lambda d, i: {**d, i: d.get(i, []) + [function(i)]}, array, {})",
 "from operator import setitem\nd = {}\nfor i in array:\n    setitem(d, i, d.get(i, []) + [function(i)])",
 "import collections\nfrom functools import reduce\ndef reducer(d, i):\n    d[i].append(function(i))\n    return d\nd = reduce(reducer, array, collections.defaultdict(list))",
 "import collections\nd = collections.defaultdict(list)\ni = 0\nwhile i < len(array):\n    d[array[i]].append(function(array[i]))\n    i += 1",
 "import collections\nfrom functools import partial\nd = collections.defaultdict(list)\nfor i in array:\n    append_to_dict = partial(d[i].append)\n    append_to_dict(function(i))",
 "import collections\nimport functools\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].append(functools.partial(function, i)())",
 "from collections import defaultdict\nfrom functools import reduce\ndef reduce_func(d, i):\n    d[i].append(function(i))\n    return d\nd = reduce(reduce_func, array, defaultdict(list))",
 "from collections import defaultdict\nintermediate = defaultdict(list)\nfor i in array:\n    intermediate[i].append(function(i))\nd = intermediate",
 "import collections\nintermediate = collections.defaultdict(list)\nfor i in array:\n    intermediate[i].append(function(i))\nd = intermediate",
 "import collections\nimport numpy as np\nd = {i: [] for i in array}\nfor i in array:\n    result = function(i)\n    d[i].append(result)",
 "import collections\nimport numpy as np\nresult = [(i, []) for i in array]\nd = dict(result)\nfor i in array:\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(lambda : [])\n[d[i].append(function(i)) for i in array]",
 "import collections\nfrom functools import reduce\nd = collections.defaultdict(list)\nreduce(lambda x, y: d[y].append(function(y)), array, 0)",
 "import collections\nd = collections.defaultdict(list)\nfor i in range(len(array)):\n    d[array[i]].append(function(array[i]))",
 "import collections\nd = collections.defaultdict(list)\nfor i in iter(array):\n    d[i].append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i].extend([function(i)])",
 "from collections import Counter\nd = Counter()\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d.setdefault(i, []).append(function(i))",
 "import collections\nd = collections.defaultdict(list)\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "from functools import reduce\ndef reducer(d, i):\n    d[i].append(function(i))\n    return d\nd = reduce(reducer, array, {i: [] for i in array})",
 "import itertools\nd = {i: [] for i in array}\nfor i in itertools.chain(array):\n    d[i].append(function(i))",
 "d = {i: [] for i in array}\nfor i in array:\n    d.get(i).append(function(i))",
 "from collections import Counter\narray_counter = Counter(array)\nd = {i: [function(i)] * array_counter[i] for i in set(array)}"
]