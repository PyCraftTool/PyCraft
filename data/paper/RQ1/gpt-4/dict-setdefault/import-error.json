[
 "from functools import partial, reduce\nfrom operator import getitem\nfrom collections import defaultdict\nget = partial(getitem, d)\nupdate = lambda k, v: get(k).append(v)\nreduce(lambda _, i: update(i, function(i)), array, defaultdict(list))",
 "\nd = {i: d.get(i, []) + [function(i)] for i in array}",
 "from operator import itemgetter\ni = None\nd = {i: list(map(itemgetter(1), g)) for (i, g) in itertools.groupby(sorted(((i, function(i)) for i in array)), key=itemgetter(0))}",
 "\nfor i in array:\n    d.setdefault(i, []).append(function(i))",
 "\nfor i in array:\n    d[i] = d.get(i, []) + [function(i)]",
 "\nfor i in array:\n    d[i] = d.get(i, [])\n    d[i].append(function(i))",
 "\nfinal_arrays = [[function(i) for i in collections.Counter(array)[key] * [key]] for key in collections.Counter(array)]\nd = dict(zip(collections.Counter(array), final_arrays))",
 "\nd = {j: function(array[i]) if d.get(j) == None else d.get(j).append(function(array[i])) for (i, j) in enumerate(array)}",
 "\n(i, initial_count) = ('temp', [])\nfor ele in array:\n    c.append(function(ele))\n    d[i] = c",
 "\nind = iter(array)\nfor i in range(len(array)):\n    get = next(ind)\n    d.setdefault(get, []).append(function(get))",
 "\nfor ind in range(len(array)):\n    i = array[ind]\n    d.setdefault(i, []).append(function(i))",
 "\narray_length = len(array)\ni = array[0]\nd[i] = [function(i)]\nfor idx in range(1, array_length):\n    i = array[idx]\n    d.setdefault(i, []).append(function(i))",
 "\narray.sort()\nd = {}\nfor (key, group) in groupby(array):\n    d[key] = list(map(function, group))",
 "\narray.sort()\nd = {}\ngroups = groupby(array)\nfor group in groups:\n    (key, members) = group\n    transformed_members = map(function, members)\n    d[key] = list(transformed_members)",
 "import numpy as np\narray = np.array(array)\n(u, indices) = np.unique(array, return_inverse=True)\ng = (u[numpy.where(indices == i)] for i in range(len(u)))\nd = {str(list(l)[0]): map(function, l) for l in g}",
 "\nfor i in array:\n    if not d.__contains__(i):\n        d.__setitem__(i, [])\n    d[i].append(function(i))",
 "from collections import deque\nd = {}\nmyDequeArray = [deq.append(i) for i in array]\nfor index in range(len(array)):\n    d[array[index]].append(i)",
 "import collections\nfrom scipy.special import lambertw\nd_array = collections.Counter(array)\nfunction = np.vectorize(lambda x: x + lambertw(x).real)\nfinal_arrays = [[function(i) for i in d_array[key] * [key]] for key in d_array]\nd = {d_array_key: function_array for (d_array_key, function_array) in zip(d_array, final_arrays)}",
 "from functools import reduce\nreduce(lambda d, i: {**d, i: d.get(i, []) + [function(i)]}, array, {})",
 "from itertools import starmap\nfunc = lambda i: {i: [function(i)]}\nd = reduce(lambda a, b: {**a, **b}, starmap(func, [(i,) for i in array]))",
 "import collections\nfrom operator import methodcaller\nd = collections.defaultdict(list)\nlist(map(methodcaller('append', function(i)), (d[i] for i in array)))",
 "import collections\nfor i in array:\n    d = collections.defaultdict(list, d)\n    d[i].append(function(i))",
 "import collections\nfrom operator import methodcaller\nd = collections.defaultdict(list)\nlist(map(methodcaller('append', function(i)), map(d.__getitem__, array)))",
 "\nfor i in array:\n    if i not in d.keys():\n        d[i] = [function(i)]\n    else:\n        d[i].append(function(i))",
 "\nd = {i: d.get(i, []).append(function(i)) for i in array}",
 "import functools\nfor i in array:\n    d = functools.reduce(lambda d, i: {**d, i: d.get(i, []) + [function(i)]}, array, {})"
]