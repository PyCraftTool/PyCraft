[
 "import functools\nstring = functools.reduce(lambda x, y: x + ', ' + y, ['['] + values) + ']'",
 "string = '['\nfor item in values:\n    if string != '[':\n        string += ', '\n    string += item\nstring += ']'",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + ', ' + y, values) + ']'",
 "string = '['\nfor value in values:\n    string += value + ', '\nstring = string[:-2] + ']'",
 "string = '['\nfor (idx, value) in enumerate(values):\n    if idx != len(values) - 1:\n        string += value + ', '\n    else:\n        string += value + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: a + ', ' + b, values) + ']'",
 "import itertools\nstring = '[' + ', '.join(itertools.chain.from_iterable(values)) + ']'",
 "import itertools\ndef flatten(lst):\n    return list(itertools.chain.from_iterable(lst))\nstring = '[' + ', '.join(flatten(values)) + ']'",
 "string = '['\nfor value in values:\n    string += value + ', '\nstring = string.rstrip(', ') + ']'",
 "import functools\nstring = functools.reduce(lambda x, y: x + ', ' + y if x != '[' else x + y, values, '[') + ']'",
 "import itertools\nstring = '['\nfor item in itertools.chain(values):\n    if string != '[':\n        string += ', '\n    string += item\nstring += ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda a, b: a + ', ' + b, values) + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda x, y: x + ', ' + y, values) + ']'",
 "string = ''\nstring = string.join(values)\nstring = '[' + string + ']'",
 "import itertools\nstring = '[' + ', '.join(list(itertools.chain.from_iterable(values))) + ']'",
 "string = '['\nfor index in range(len(values)):\n    string += values[index] + ', '\nstring = string[:-2] + ']'",
 "from itertools import chain\nstring = '[' + ', '.join(map(str, chain.from_iterable(values))) + ']'",
 "string = '['\nfor value in values[:-1]:\n    string += value + ', '\nstring += values[-1] + ']'",
 "import numpy as np\nstring = '[' + np.core.defchararray.add(np.core.defchararray.add(values, ', '), np.array([''] * len(values))).sum()[:-2] + ']'",
 "string = '[' + ', '.join(values[:-1]) + ', ' + values[-1] + ']'",
 "string = '[' + values[0]\nfor value in values[1:]:\n    string += ', ' + value\nstring += ']'",
 "string = '['\nfor idx in range(len(values)):\n    if idx < len(values) - 1:\n        string += values[idx] + ', '\n    else:\n        string += values[idx] + ']'",
 "string = ''\nfor val in values:\n    string += '[' + ', '.join(values) + ']'",
 "from itertools import accumulate\nstring = '[' + list(accumulate(values, lambda a, b: a + ', ' + b))[-1] + ']'",
 "import itertools\nstring = '[' + ', '.join(itertools.chain(*values)) + ']'",
 "string = ''\nfor (idx, item) in enumerate(values):\n    if idx == 0:\n        string += '[' + item\n    else:\n        string += ', ' + item\nstring += ']'",
 "import functools\nstring = functools.reduce(lambda x, y: x + ', ' + y, values, '[') + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda item1, item2: item1 + ', ' + item2, values) + ']'",
 "string = '['\nfor i in range(len(values) - 1):\n    string += values[i] + ', '\nstring += values[-1] + ']'",
 "string = '[' + ', '.join([values[i] if i == 0 else ', ' + values[i] for i in range(len(values))]) + ']'",
 "import functools\nimport operator\nstring = '[' + functools.reduce(operator.add, map(lambda v: v + ', ', values))[:-2] + ']'",
 "import functools\nimport operator\nstring = '[' + functools.reduce(operator.concat, [v + ', ' for v in values])[:-2] + ']'",
 "string = '['\nfor i in range(len(values)):\n    if i != len(values) - 1:\n        string += values[i] + ', '\n    else:\n        string += values[i] + ']'",
 "string = ''\nfor i in range(len(values)):\n    if i == 0:\n        string = '[' + values[i]\n    else:\n        string += ', ' + values[i]\nstring += ']'",
 "import functools\nstring = functools.reduce(lambda a, b: a + ', ' + b if a != '[' else a + b, ['['] + values) + ']'",
 "string = '[' + ''.join(map(lambda s: ', ' + s if values.index(s) != 0 else s, values)) + ']'",
 "string = '[,'\nfor (idx, item) in enumerate(values):\n    string += item + ','\n    string += ']'",
 "string = ''\nfor (index, value) in enumerate(values):\n    string = '[' + value if index == 0 else string + ', ' + value\nstring += ']'",
 "(first_value, remaining_values) = (values[0], values[1:])\nstring = '[' + first_value\nfor value in remaining_values:\n    string += ', ' + value\nstring += ']'",
 "import functools\nstring = functools.reduce(lambda a, b: a + ', ' + str(b) if isinstance(b, str) else a, '[' + values[0] if isinstance(values[0], str) else '', values[1:]) + ']'",
 "import functools\nstring = '[' + ''.join(functools.reduce(lambda x, y: x + ', ' + y, values)) + ']'",
 "import string\ntemp = ','.join(values)\nstring = '[' + temp + ']'",
 "import functools\nimport numpy as np\nvalues_np = np.array(values, dtype=object)\nstring = np.insert(values_np, 0, '[').tostring() + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda string, value: string + ', ' + value, values) + ']'",
 "(first_value, *other_values) = values\nstring = '[' + ','.join([first_value] + [', ' + value for value in other_values]) + ']'",
 "string = '[' + ', '.join((values[i] if i == 0 else ', ' + values[i] for i in range(len(values)))) + ']'",
 "length = len(values)\nstring = '['\nstring += values[0]\nfor val in values[1:length]:\n    string += ', '\n    string += val\nstring += ']'",
 "string = '['\nfor (idx, val) in enumerate(values):\n    separator = ',' if idx != 0 else ''\n    string += separator + ' ' + val\nstring += ']'",
 "import functools\nstring = functools.reduce(lambda oldstr, newstr: oldstr + ', ' + newstr, values, '[') + ']'",
 "rolling_string = ''\nfor val in values:\n    rolling_string += ', ' + val\nstring = '[' + rolling_string.lstrip(', ') + ']'",
 "temp_string = ('',)\nfor item in values:\n    temp_string += f'{item}, '\nstring = '[' + temp_string[:-2] + ']'",
 "import functools\nimport operator\nstring = ['[', functools.reduce(operator.add, map(lambda a: a + ', ', values[:-1])), values[-1], ']']\nstring = functools.reduce(operator.add, string)",
 "import functools\nstring = f\"[{functools.reduce(lambda a, b: a + ', ' + b, values)}]\"",
 "string = ''\nfor val in values:\n    string += '{}'.format(val + ', ')\nstring = string.rstrip(', ') + ']'",
 "it = iter(values)\nstring = '[' + next(it)\nfor x in it:\n    string += ', ' + x\nstring += ']'",
 "def join_strings(lst):\n    result_string = '['\n    for item in lst:\n        result_string += item + ', '\n    return result_string[:-2] + ']'\nstring = join_strings(values)",
 "logically_condensed = ''.join(['[' + element + ']' if idx == len(values) - 1 else element + ', ' for (idx, element) in enumerate(values)])",
 "import itertools\nstring = '['\nfor val in itertools.islice(values, len(values) - 1):\n    string += val + ', '\nstring += values[-1]\nstring += ']'",
 "string = '['\nfirst = True\nfor val in values:\n    if not first:\n        string += ', ' + val\n    else:\n        string = val\n        first = False\nstring += ']'",
 "string = '[]'\nfor (i, val) in enumerate(values):\n    string = string[:i * 4 + 1] + val + ', ' + string[i * 4 + 3:]\nstring = string[:-2]",
 "import functools\nstring = functools.reduce(lambda a, b: a + ', ' + b, values, '[') + ']'",
 "from functools import reduce\nsep = ', '\nstring = reduce(lambda x, y: x + sep + y, values)",
 "sep = ', '\nstring = str(['[' + s + ']' for s in values])[1:-1]",
 "from functools import reduce\nsep = ', '\nstring = '[' + reduce(lambda x, y: x + sep + y, values) + ']'",
 "sep = ', '\nstring_list = ['[']\nfor value in values:\n    string_list.append(value)\n    string_list.append(sep)\nstring_list[-1] = ']'\nstring = ''.join(string_list)",
 "string = '['\nfor value in values:\n    if values.index(value) != 0:\n        string += ', ' + value\n    else:\n        string += value\nstring += ']'",
 "from functools import reduce\nstring = reduce(lambda acc, item: acc + ',' + item, values, '[,')",
 "string = '[,'\nfor idx in range(len(values)):\n    string += values[idx] + ','\nstring += ']'",
 "string = '[,'\nfor idx in range(len(values)):\n    string += values[idx] + ','\n    string += ']'",
 "strings = []\nfor value in values:\n    strings.append(value)\nstring = '[,' + ','.join(strings) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: a + ', ' + b, values, '') + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + ', ' + y, values, '')[:-2] + ']'",
 "string = '['\nfor value in values:\n    string = string + value + ', '\nstring = string[:-2] + ']'",
 "string = '['\nfor i in values:\n    string += i\n    if i != values[-1]:\n        string += ', '\nstring += ']'",
 "import numpy as np\nstring = '[' + np.core.defchararray.join(', ', np.array(values)) + ']'",
 "string = '['\nfor index in range(len(values)):\n    if string != '[':\n        string += ', '\n    string += values[index]\nstring += ']'",
 "string = '['\nfor i in values:\n    string += ', ' + i if string != '[' else i\nstring += ']'",
 "string = '['\nfor (idx, i) in enumerate(values):\n    string += ', ' + i if string != '[' else i\nstring += ']'",
 "string = '['\nfor value in values:\n    string += value\n    string += ', '\nstring = string[:len(string) - 2] + ']'",
 "string = '['\nfor item in values:\n    if string != '[':\n        string += ', ' + item\n    else:\n        string += item\nstring += ']'",
 "string = '[' + ', '.join(sum(values, [])) + ']'",
 "string = '[' + ', '.join([item for sublist in values for item in sublist]) + ']'",
 "import functools\nimport operator\nstring = '[' + ', '.join(functools.reduce(operator.iconcat, values, [])) + ']'",
 "string = '['\nfor sublist in values:\n    for item in sublist:\n        string += item + ', '\nstring = string[:-2] + ']'",
 "from itertools import chain\nstring = '[' + ', '.join(chain(*values)) + ']'",
 "string = ''\nfor (i, value) in enumerate(values):\n    if i == 0:\n        string = '[' + value\n    else:\n        string += ', ' + value\nstring += ']'",
 "string = ''.join(values)",
 "string = '['\nfor item in values:\n    if values.index(item) > 0:\n        string += ', ' + item\n    else:\n        string += item\nstring += ']'",
 "import functools\nstring = '[' + functools.reduce(lambda acc, cur: acc + ', ' + cur, values) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: a + ', ' + b, values[:-1]) + ', ' + values[-1] + ']'",
 "string = '['\nfor (i, item) in enumerate(values):\n    string += item + (', ' if i != len(values) - 1 else ']')",
 "import itertools\nstring = '[' + ', '.join(itertools.islice(values, len(values) - 1)) + ', ' + values[-1] + ']'",
 "from itertools import chain\nstring = '[' + ', '.join(list(chain.from_iterable(values))) + ']'",
 "import functools\nstring = '['\nfor (idx, item) in enumerate(values):\n    if idx != 0:\n        string = functools.reduce(lambda a, b: a + ', ' + b, values)\n    else:\n        string += item\nstring += ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += ', '[idx != 0:] + item\nstring += ']'",
 "import functools\nstring = functools.reduce(lambda a, b: a + ', ' + b, values)\nstring = '[' + string + ']'",
 "import itertools\nstring = '[' + ', '.join(itertools.chain(*[[value] if index == 0 else [', ', value] for (index, value) in enumerate(values)])) + ']'",
 "string = '{}'.format(', '.join(values))",
 "import functools\noperator = lambda a, b: a + ', ' + b\nstring = '[' + functools.reduce(operator, values) + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda x, y: x + ', ' + y, values, '') + ']'",
 "string = ''\nfor (index, value) in enumerate(values):\n    string += ', ' if index != 0 else '['\n    string += value\nstring += ']'",
 "string = ''\nfor (index, value) in enumerate(values):\n    if index == 0:\n        string += '['\n    else:\n        string += ', '\n    string += value\nstring += ']'",
 "import operator\nstring = '[' + operator.concat(', ', values) + ']'",
 "string = ''\nfor value in values:\n    string += value + ', '\nstring = '[' + string.strip(', ') + ']'",
 "string = '[' + ','.join(values) + ']'",
 "import functools\nstring = '[' + ', '.join(functools.reduce(lambda x, y: x + y, values, [])) + ']'",
 "import itertools\nstring = '[' + ', '.join(list(itertools.chain(*values))) + ']'",
 "string = '[' + ', '.join((item for sublist in values for item in sublist)) + ']'",
 "string = '['\nfor item in sum(values, []):\n    string += item + ', '\nstring = string[:-2] + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + ', ' + y, [item for sublist in values for item in sublist]) + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda x, y: x + y + ', ', values)[:-2] + ']'",
 "import itertools\nstring = ''\nfor value in itertools.islice(values, 1, None):\n    string += ', ' + value\nstring = '[' + values[0] + string + ']'",
 "import functools\nstring = '['\nfor (idx, item) in enumerate(values):\n    if idx != 0:\n        string += ' , ' + item\n    else:\n        string += item\nstring += ']'",
 "string = '[' + ''.join((item + ', ' for item in values[:-1])) + values[-1] + ']'"
]