[
 "string = '[' + ', '.join([str(val) for val in values]) + ']'",
 "string = '[' + ', '.join(map(str, values)) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values).tolist()) + ']'",
 "string = '[' + ', '.join((str(i) for i in values)) + ']'",
 "string = '[' + ''.join(map(str, values)).replace('', ', ')[:-2] + ']'",
 "string = '['\nfor val in values:\n    string += str(val) + ', '\nstring = string[:-2] + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: a + ', ' + str(b), values) + ']'",
 "string = '['\nfor val in values:\n    string += '{} ,'.format(val)\nstring = string[:-2] + ']'",
 "string = str(values)",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + ', ' + str(y), values) + ']'",
 "import itertools\nstring = '[' + ', '.join(map(str, itertools.chain(values))) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(map(str, np.array(values))) + ']'",
 "string = '['\nstring += ', '.join(values) if values else ''\nstring += ']'",
 "string = '['\nfor (idx, val) in enumerate(values):\n    string += (', ' if idx != 0 else '') + str(val)\nstring += ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values).astype(str).tolist()) + ']'",
 "import numpy as np\nstring = np.array(values)\nstring = '[' + ', '.join(string) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: str(a) + ', ' + str(b), values) + ']'",
 "string = '['\nfor (index, value) in enumerate(values):\n    string += str(value)\n    if index != len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = ''\nfor value in values:\n    string += ', ' + str(value)\nstring = '[' + string[2:] + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + ', ' + y, map(str, values)) + ']'",
 "string = '['\nfor i in range(len(values)):\n    string += str(values[i]) + ', '\nstring = string.rstrip(', ') + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values, dtype=str)) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values).flatten().tolist()) + ']'",
 "import numpy as np\nstring = np.array(values).__str__()",
 "import numpy as np\nstring = str(np.array(values).tolist())",
 "import numpy as np\nstring = str(list(np.array(values)))",
 "import json\nimport numpy as np\nstring = json.dumps(np.array(values).tolist())",
 "import numpy as np\nstring = np.array(values).tolist().__str__()",
 "import numpy as np\nstring = np.array(values).tolist()\nstring = '[' + ', '.join(string) + ']'",
 "import numpy as np\nstring = '[' + np.array2string(np.array(values), separator=', ')[1:-1] + ']'",
 "import pandas as pd\nstring = '[' + pd.Series(values).to_string(index=False).replace('\\n', ', ')[1:] + ']'",
 "string = str(['{}'.format(i) for i in values])",
 "string = str(values).replace('[', '').replace(']', '')",
 "string = str(values)[1:-1]",
 "string = '[' + ''.join([str(i) + ', ' for i in values])[:-2] + ']'",
 "string = '['\nfor index in range(len(values)):\n    string += str(values[index]) + ', '\nstring = string[:-2] + ']'",
 "import itertools\nstring = '[' + ', '.join(itertools.chain.from_iterable(map(lambda x: [str(x)], values))) + ']'",
 "string = '['\nfor (index, value) in enumerate(values):\n    string += str(value) + ', '\nstring = string[:-2] + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values, dtype=str).tolist()) + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda x, y: x + ', ' + y, map(str, values)) + ']'",
 "import pandas as pd\nstring = '[' + pd.Series(values).to_string(index=False) + ']'",
 "string = '[' + functools.reduce(lambda x, y: x + ', ' + y, values) + ']' if values else '[]'",
 "import itertools\nstring = '[' + ', '.join(itertools.chain(map(str, values))) + ']'",
 "string = '['\nfor i in range(len(values)):\n    string += str(values[i])\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = '[' + ', '.join(list(map(str, values))) + ']'",
 "import numpy as np\nstring = np.array2string(np.array(values), separator=', ', prefix='[', suffix=']')",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values).astype(str)) + ']'",
 "import numpy as np\nstring = '[' + ', '.join([str(i) for i in np.array(values)]) + ']'",
 "import numpy as np\nstring = '[' + ', '.join([str(i) for i in np.array(values).tolist()]) + ']'",
 "import numpy as np\nstring = '[' + ', '.join(list(map(str, np.array(values).tolist()))) + ']'",
 "import numpy as np\nstring = np.array(values).__str__().replace(' ', '')",
 "import numpy as np\nstring = np.array(values).__repr__().replace(' ', '')",
 "import numpy as np\nstring = '[' + ', '.join(list(map(lambda x: str(x), np.array(values).tolist()))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(map(str, pd.Series(values))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(pd.Series(values).astype(str)) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join([str(i) for i in pd.Series(values)]) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join([str(i) for i in pd.Series(values).tolist()]) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list(map(str, pd.Series(values).tolist()))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list(map(str, pd.Series(values).values))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join([str(i) for i in pd.Series(values).values]) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(pd.Series(values).apply(str)) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(pd.Series(values).map(str)) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(pd.Series(values).transform(str)) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join((str(i) for i in pd.Series(values))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list(map(str, pd.Series(values)))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list(pd.Series(values).astype(str))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list(pd.Series(values).apply(str))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list(pd.Series(values).map(str))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list(pd.Series(values).transform(str))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(list((str(i) for i in pd.Series(values)))) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join([str(i) for i in list(pd.Series(values))]) + ']'",
 "import functools\nstring = '[' + ', '.join(values) + ']' if values else '[]'",
 "import functools\nstring = '[' + ', '.join(map(str, values)) + ']' if values else '[]'",
 "import functools\nstring = '[' + ', '.join([str(value) for value in values]) + ']' if values else '[]'",
 "import functools\nstring = '[' + ', '.join([str(value) for value in values]) + ']' if len(values) > 0 else '[]'",
 "import functools\nstring = '[' + ', '.join((str(value) for value in values)) + ']' if values else '[]'",
 "import functools\nstring = '[' + ', '.join([str(value) for value in values]) + ']' if bool(values) else '[]'",
 "import functools\nstring = '[' + ', '.join([str(value) for value in values]) + ']' if values is not None and len(values) > 0 else '[]'",
 "import functools\nstring = '[' + ', '.join([str(value) for value in values]) + ']' if values is not None and bool(values) else '[]'",
 "string = '['\nfor i in range(len(values)):\n    if i != len(values) - 1:\n        string += str(values[i]) + ', '\n    else:\n        string += str(values[i])\nstring += ']'",
 "string = '[' + ', '.join((str(e) if isinstance(e, str) else '' for e in values)) + ']'",
 "import numpy as np\nstring = '['\nfor i in np.ndindex(len(values)):\n    if int(i[0]) != 0:\n        string += ', '\n    string += str(values[int(i[0])])\nstring += ']'",
 "string = '[' + ', '.join(['' if type(e) != str else str(e) for e in values]) + ']'",
 "odd_values = filter(lambda x: isinstance(x, str), values)\nstring = '[' + ', '.join(map(str, odd_values)) + ']'",
 "string = '['\nfor e in values:\n    if isinstance(e, str):\n        string += str(e) + ', '\nstring = string[:-2] + ']'",
 "string = '['\nfor e in values:\n    if isinstance(e, str):\n        string += str(e) + ', '\nstring += ']'",
 "temp_list = [str(e) for e in values if isinstance(e, str)]\nstring = '[' + ', '.join(temp_list) + ']'",
 "from operator import iadd\nfrom functools import reduce\nstringify = lambda e: str(e) if isinstance(e, str) else ''\nstring = '[' + reduce(iadd, map(stringify, values)) + ']'",
 "string = '[' + ''.join((str(e) + ', ' if isinstance(e, str) else '' for e in values))[:-2] + ']'",
 "import operator\nstring = '[{}]'.format(', '.join(map(str, values)))",
 "values_str_list = map(str, values)\nstring = '[' + ', '.join(values_str_list) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: a + str(b) + ', ', values, '')[:-2] + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda a, b: a + str(b) + ', ', values)[:-2] + ']'",
 "from typing import List\ndef listToStr(lst: List[str]) -> str:\n    string = '['\n    for val in lst:\n        string += str(val) + ', '\n    string = string.rstrip(', ')\n    return string + ']'\nstring = listToStr(values)",
 "string = '[' + ''.join(['{}, '.format(val) for val in values])[:-2] + ']'",
 "string = ['[' + ', '.join(map(str, iteration)) + ']' for iteration in [values]][0]",
 "import functools\nvalues_str = [str(x) for x in values]\nstring = '[' + functools.reduce(lambda x, y: x + ',' + y, values_str) + ']'",
 "import numpy as np\nvalues_str = np.array(values).astype(str)\njoin = ', '.join(values_str)\nstring = '[' + join + '];'",
 "joined = str(values)[1:-1]\nstring = '[' + joined + ']'",
 "sep = ', '\nstring = str(values).replace(' ', sep)",
 "string = '[,' + ','.join([f'{item},' for item in values])",
 "import itertools\nstring = '[' + ','.join(map(str, values)) + ']'",
 "string = '[,{}'.format(','.join(map(str, values)))",
 "string = ''\nfor item in values:\n    string += str(item) + ','\nstring = '[' + string + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda x, y: x + ', ' + str(y), values) + ']'",
 "string = '[' + ', '.join([str(values[i]) for i in range(len(values))]) + ']'",
 "string = '[' + ', '.join(list(map(lambda x: str(x), values))) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: a + ', ' + b if b else a, values) + ']'",
 "string = '[' + str(values).strip('[]') + ']'",
 "import numpy as np\nstring = '[' + ', '.join(np.array(values).flatten()) + ']'",
 "import pandas as pd\nstring = '[' + ', '.join(pd.Series(values).astype(str).tolist()) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: str(x) + ', ' + str(y), values) + ']'",
 "string = '['\ni = 0\nwhile i < len(values):\n    string += str(values[i]) + ', '\n    i += 1\nstring = string[:-2] + ']'",
 "string = '['\nfor value in values[:-1]:\n    string += str(value) + ', '\nstring += str(values[-1]) + ']'",
 "string = '['\nfor value in values:\n    string += str(value) + ', '\nstring = string.rstrip(', ') + ']'",
 "string = str(list(map(str, values)))",
 "import json\nstring = json.dumps(values)",
 "string = '['\nfor value in values:\n    string += '{}, '.format(value)\nstring = string.rstrip(', ') + ']'",
 "string = '['\nfor value in values:\n    string += f'{value}, '\nstring = string[:-2] + ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    string += str(value) + (', ' if i < len(values) - 1 else '')\nstring += ']'",
 "string = '['\nfor value in values:\n    string += f'{value}, '\nstring = string.rstrip(', ') + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + ', ' + str(y), values, '') + ']'",
 "string = '['\nfor i in range(len(values)):\n    string += str(values[i])\n    if i < len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    string += str(value)\n    string += ', ' if i != len(values) - 1 else ''\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += str(values[i])\n    string += ', ' if i != len(values) - 1 else ''\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    string += str(value) + (', ' if i != len(values) - 1 else '')\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += str(values[i]) + (', ' if i != len(values) - 1 else '')\nstring += ']'",
 "string = '[' + functools.reduce(lambda a, b: a + ', ' + b, values) + ']' if values else '[]'",
 "import functools\nstring = '[' + ', '.join(filter(None, values)) + ']'",
 "string = '['\nfor value in values:\n    if value:\n        string += value + ', '\nstring = string.rstrip(', ') + ']'",
 "string = '[' + ', '.join([value for value in values if value]) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda a, b: a + ', ' + b if b else a, values, '') + ']'",
 "import functools\nstring = '['\nfor value in values:\n    if value:\n        string = functools.reduce(lambda a, b: a + ', ' + b, [string, value])\nstring += ']'",
 "string = '[' + ''.join([f'{value}, ' if index != len(values) - 1 else f'{value}' for (index, value) in enumerate(values)]) + ']'",
 "string = ''\nif values:\n    string = '[' + ', '.join(values) + ']'\nelse:\n    string = '[]'",
 "string = ''.join(map(str, values))",
 "string = ''.join([str(value) for value in values])",
 "import functools\nstring = functools.reduce(lambda x, y: x + str(y), values, '')",
 "string = ''\nfor value in values:\n    string += str(value)",
 "string = format(values)",
 "temp = []\nfor value in values:\n    temp.append(str(value))\nstring = '[' + ', '.join(temp) + ']'",
 "string = ''\nfor i in values:\n    string += str(i) + ', '\nstring = '[' + string[:-2] + ']'",
 "import numpy as np\nstring = '[' + np.array2string(np.array(values), separator=', ', max_line_width=np.inf)[1:-1] + ']'",
 "import numpy as np\nstring = np.array2string(np.array(values), separator=', ')",
 "string = '[' + ''.join([str(value) + ', ' for value in values]).rstrip(', ') + ']'",
 "import pandas as pd\nstring = pd.Series(values).to_string(index=False)",
 "string = ''.join(['[', ', '.join((str(i) for i in values)), ']'])",
 "temp_values = [str(v) for v in values]\nstring = '[' + ', '.join(temp_values) + ']'",
 "string = str(values).replace(\"'\", '')",
 "import functools\nstring = str(None)\nif values:\n    string = '[' + ', '.join(values) + ']'"
]