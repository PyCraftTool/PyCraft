[
 "string = '['\nfor (idx, item) in enumerate(values):\n    if idx != 0:\n        string += ', '\n    string += item\nstring += ']'",
 "string = '[' + ', '.join(values) + ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += (', ' if idx != 0 else '') + item\nstring += ']'",
 "string = '['\nfor idx in range(len(values)):\n    string += (', ' if idx != 0 else '') + values[idx]\nstring += ']'",
 "import itertools\nstring = '[' + ', '.join(itertools.chain(values)) + ']'",
 "string = ''.join(['[', ', '.join(values), ']'])",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += ', ' * (idx != 0) + item\nstring += ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    if idx != 0:\n        string += ', ' + item\n    else:\n        string += item\nstring += ']'",
 "string = '[' + ', '.join((item for (idx, item) in enumerate(values))) + ']'",
 "string = '['\nfor idx in range(len(values)):\n    if idx != 0:\n        string += ', ' + values[idx]\n    else:\n        string += values[idx]\nstring += ']'",
 "string = ''\nfor value in values:\n    string += value + ', '\nstring = '[' + string[:-2] + ']'",
 "string = '['\nfor i in range(len(values)):\n    if i != len(values) - 1:\n        string += values[i] + ', '\n    else:\n        string += values[i]\nstring += ']'",
 "string = '[{}]'.format(', '.join(values))",
 "string = '[%s]' % ', '.join(values)",
 "string = '['\nfor index in range(len(values)):\n    if index != 0:\n        string += ', '\n    string += values[index]\nstring += ']'",
 "string = '['\nfor (index, item) in enumerate(values):\n    string += ', ' if index != 0 else ''\n    string += item\nstring += ']'",
 "string = '[' + ', '.join((item for item in values)) + ']'",
 "string = '['\nif len(values) > 0:\n    string += values[0]\nfor item in values[1:]:\n    string += ', ' + item\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    string += value\n    if i < len(values) - 1:\n        string += ', '\nstring += ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda acc, x: acc + x + ', ', values, '')[:-2] + ']'",
 "string = '[' + ''.join([v + ', ' for v in values])[:-2] + ']'",
 "from functools import reduce\nstring = '[' + reduce(lambda a, b: a + b + ', ', values, '')[:-2] + ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i != len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    if i < len(values) - 1:\n        string += value + ', '\n    else:\n        string += value\nstring += ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    if idx == 0:\n        string += item\n    else:\n        string += ', ' + item\nstring += ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += item\n    if idx != len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = '['\nfor item in values:\n    string += item + ', '\nif values:\n    string = string[:-2]\nstring += ']'",
 "string = ''\nfor i in range(len(values)):\n    string += values[i]\n    if i != len(values) - 1:\n        string += ', '\nstring = '[' + string + ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += ', ' + item if idx != 0 else item\nstring += ']'",
 "string = '[' + ', '.join([values[i] if i != 0 else values[i] for i in range(len(values))]) + ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += item if idx == 0 else ', ' + item\nstring += ']'",
 "string = '['\nfor (idx, val) in enumerate(values):\n    string += ('' if idx == 0 else ', ') + val\nstring += ']'",
 "string = '['\nfor idx in range(len(values)):\n    string += ('' if idx == 0 else ', ') + values[idx]\nstring += ']'",
 "string = '['\nfor idx in range(len(values)):\n    string += ', ' + values[idx] if idx != 0 else values[idx]\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i] + (', ' if i != len(values) - 1 else '')\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if i < len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    string += value + (', ' if i != len(values) - 1 else '')\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    if not i == len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    string += value\n    if not i == len(values) - 1:\n        string += ', '\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i]\n    string += ', ' if i != len(values) - 1 else ''\nstring += ']'",
 "string = '[' + ', '.join([val for val in values]) + ']'",
 "string = '['\nfor val in values:\n    string += ', ' + val\nstring = string.replace(', ', '', 1) + ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i] if i == 0 else ', ' + values[i]\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    if i == 0:\n        string += values[i]\n    else:\n        string += ', ' + values[i]\nstring += ']'",
 "string = '['\nfor (idx, val) in enumerate(values):\n    string += '' if idx == 0 else ', '\n    string += val\nstring += ']'",
 "string = '[' + ', '.join([values[i] for i in range(len(values))]) + ']'",
 "string = '['\nfor idx in range(len(values)):\n    string += ', ' if idx != 0 else ''\n    string += values[idx]\nstring += ']'",
 "string = '['\nidx = 0\nwhile idx < len(values):\n    if idx != 0:\n        string += ', '\n    string += values[idx]\n    idx += 1\nstring += ']'",
 "string = '[' + ', '.join(values[:-1]) + (', ' + values[-1] if values else '') + ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i] + (', ' if i < len(values) - 1 else '')\nstring += ']'",
 "import itertools\nstring = '['\nfor (idx, val) in itertools.zip_longest(range(len(values)), values):\n    if idx != 0:\n        string += ', '\n    string += val\nstring += ']'",
 "sep = ', '\nstring = '[' + sep.join(values) + ']'",
 "import string\nouter_brackets = ['[', ']']\ninner_vals = ', '.join(values)\nstring = ''.join(map(str, outer_brackets[0] + inner_vals + outer_brackets[1]))",
 "import itertools\nstring = ''\nfor (idx, val) in enumerate(values):\n    if idx != 0:\n        string += ', '\n    string += val\nstring = '[' + string + ']'",
 "string = ''\nfor val in values:\n    string += ', ' + val\nstring = '[' + string[2:] + ']'",
 "intermediate = ', '.join(values)\nstring = '[' + intermediate + ']'",
 "string = '[{}'.format(', '.join(values)) + ']'",
 "string = ''\nstring = string.join(['[', ', '.join(values), ']'])",
 "string_list = ['[']\nfor index in range(len(values)):\n    is_last_value = index == len(values) - 1\n    if not is_last_value:\n        string_list.append(values[index] + ', ')\n    else:\n        string_list.append(values[index])\nstring_list.append(']')\nstring = ''.join(string_list)",
 "sep = ', '\nstring = f'[{sep.join(values)}]'",
 "sep = ', '\nstring = '[' + ', '.join(values) + ']'",
 "sep = ', '\n\ndef wrap_in_brackets(values, sep):\n    return '[' + sep.join(values) + ']'\nstring = wrap_in_brackets(values, sep)",
 "import functools\nsep = ', '\nfacilitated_join = functools.partial(str.join, sep)\nstring = '[' + facilitated_join(values) + ']'",
 "string = '[' + ''.join([', ' + i if idx != 0 else i for (idx, i) in enumerate(values)]) + ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += ', ' + item if idx else item\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    string += value\n    string += ', ' if i != len(values) - 1 else ''\nstring += ']'",
 "string = '['\nfor (i, value) in enumerate(values):\n    if i == len(values) - 1:\n        string += value\n    else:\n        string += value + ', '\nstring += ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    if idx:\n        string += ', ' + item\n    else:\n        string += item\nstring += ']'",
 "string = '['\nfor idx in range(len(values)):\n    if idx:\n        string += ', ' + values[idx]\n    else:\n        string += values[idx]\nstring += ']'",
 "string = '['\nfor item in values[:-1]:\n    string += item + ', '\nstring += values[-1] if values else ''\nstring += ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += ', ' * (idx > 0) + item\nstring += ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    string += (', ' if idx > 0 else '') + item\nstring += ']'",
 "string = '[' + ''.join([item + ', ' for item in values[:-1]]) + (values[-1] if values else '') + ']'",
 "string = '[' + ''.join([values[i] + (', ' if i != len(values) - 1 else '') for i in range(len(values))]) + ']'",
 "import functools\nstring = '[' + functools.reduce(lambda x, y: x + y + ', ', values[:-1], '') + (values[-1] if values else '') + ']'",
 "string = '['\nfor (index, item) in enumerate(values):\n    if index != len(values) - 1:\n        string += item + ', '\n    else:\n        string += item\nstring += ']'",
 "string = '['\nfor (i, item) in enumerate(values):\n    string += item + (', ' if i < len(values) - 1 else '')\nstring += ']'",
 "string = '['\nfirst = True\nfor item in values:\n    if not first:\n        string += ', '\n    first = False\n    string += item\nstring += ']'",
 "string = '['\nfor i in range(len(values) - 1):\n    string += values[i] + ', '\nstring += values[-1] if values else ''\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += values[i] + ', '\nstring = string[:-2] + ']' if values else string + ']'",
 "string = '['\nfor i in range(len(values)):\n    string += ('', ', ')[i != 0] + values[i]\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    if i > 0:\n        string += ', '\n    string += values[i]\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    string += ('', ', ')[i > 0] + values[i]\nstring += ']'",
 "string = '[' + ''.join([', ' * (i > 0) + values[i] for i in range(len(values))]) + ']'",
 "string = '['\nfor (idx, item) in enumerate(values):\n    if idx > 0:\n        string += ', '\n    string += item\nstring += ']'",
 "string = '['\nfor idx in range(len(values)):\n    string += (', ' if idx > 0 else '') + values[idx]\nstring += ']'",
 "string = '['\nfirst = True\nfor item in values:\n    if not first:\n        string += ', '\n    else:\n        first = False\n    string += item\nstring += ']'",
 "string = '['\nidx = 0\nwhile idx < len(values):\n    string += (', ' if idx != 0 else '') + values[idx]\n    idx += 1\nstring += ']'",
 "string = '['\nfor i in range(len(values)):\n    if i != 0:\n        string += ', '\n    else:\n        string += ''\n    string += values[i]\nstring += ']'",
 "string = ''\nfor i in range(len(values)):\n    if i > 0:\n        string += ', '\n    string += values[i]\nstring = '[' + string + ']'",
 "string = '[' + '%s' % ', '.join(values) + ']'",
 "string = '['\nvalue_iterator = iter(values)\ntry:\n    string += next(value_iterator)\nexcept StopIteration:\n    pass\nfor val in value_iterator:\n    string += ', '\n    string += val\nstring += ']'",
 "string = '['\ntriplet_values = [('' if i == 0 else ', ') + val for (i, val) in enumerate(values)]\nfor val in triplet_values:\n    string += val\nstring += ']'",
 "string = ''\nfor index in range(len(values)):\n    if index == len(values) - 1:\n        string += values[index]\n    else:\n        string += values[index] + ', '\nstring = '[' + string + ']'",
 "string = ''\nfor (i, value) in enumerate(values):\n    string += value + ', ' if i != len(values) - 1 else value\nstring = '[' + string + ']'",
 "string = ''\nfor i in range(len(values)):\n    string += values[i] + ', '\nstring = '[' + string[:-2] + ']'",
 "string = ''\ni = 0\nwhile i < len(values):\n    string += values[i] + ', '\n    i += 1\nstring = '[' + string[:-2] + ']'",
 "string = '[' + ''.join((value + ', ' for value in values))[:-2] + ']'",
 "import itertools\nstring = '[' + ''.join(list(itertools.chain(*[v + ', ' for v in values])))[:-2] + ']'",
 "string = ''\nfor (index, value) in enumerate(values):\n    if index > 0:\n        string += ', '\n    string += value\nstring = '[' + string + ']'",
 "string = ''\nfor i in range(len(values)):\n    string += ', ' * (i > 0) + values[i]\nstring = '[' + string + ']'"
]