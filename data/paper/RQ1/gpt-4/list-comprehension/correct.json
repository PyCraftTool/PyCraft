[
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)",
 "t = [i for i in iterable if cond(i)]",
 "import itertools\nt = list(itertools.filterfalse(lambda x: not cond(x), iterable))",
 "t = list(filter(cond, iterable))",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t += [i]",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.extend([i])",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t = t + [i]",
 "import functools\nt = functools.reduce(lambda acc, i: acc + [i] if cond(i) else acc, iterable, [])",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.insert(len(t), i)",
 "t = []\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t.append(iterable[i])\n    i += 1",
 "t = []\ni = iter(iterable)\nwhile True:\n    try:\n        item = next(i)\n        if cond(item):\n            t.append(item)\n    except StopIteration:\n        break",
 "import functools\ndef check_condition(i):\n    return cond(i)\nt = list(filter(check_condition, iterable))",
 "t = [i for i in iterable]\nt = [i for i in t if cond(i)]",
 "t = list()\nfor i in iterable:\n    if cond(i):\n        t += [i]",
 "t = list()\nfor i in iterable:\n    if cond(i):\n        t = t + [i]",
 "t = []\nfor i in iterable:\n    try:\n        assert cond(i)\n        t.append(i)\n    except AssertionError:\n        continue",
 "t = []\nfor i in range(len(iterable)):\n    if cond(iterable[i]):\n        t.append(iterable[i])",
 "t = []\nfor i in iterable:\n    if not cond(i):\n        continue\n    t.append(i)",
 "t = [iterable[i] for i in range(len(iterable)) if cond(iterable[i])]",
 "import functools\nimport operator\nt = functools.reduce(operator.iconcat, ([x] if cond(x) else [] for x in iterable), [])",
 "from functools import reduce\ndef reducer(acc, x):\n    if cond(x):\n        acc.append(x)\n    return acc\nt = reduce(reducer, iterable, [])",
 "t = list((x for x in iterable if cond(x)))",
 "t = list()\nfor x in iterable:\n    if cond(x):\n        t.append(x)",
 "import functools\nt = functools.reduce(lambda acc, x: acc + [x] if cond(x) else acc, iterable, [])",
 "import numpy as np\nt = np.asarray(list(filter(cond, iterable))).tolist()",
 "import numpy as np\nt = np.array([i for i in iterable if cond(i)]).tolist()",
 "t = []\nfor i in iterable:\n    t.extend([i] if cond(i) else [])",
 "from functools import reduce\nt = reduce(lambda x, y: x + [y] if cond(y) else x, iterable, [])",
 "t = []\nfor i in iterable:\n    temp = [i] if cond(i) else []\n    t += temp",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t[len(t):] = [i]",
 "import itertools\nt = list(itertools.chain.from_iterable(([i] if cond(i) else [] for i in iterable)))",
 "t = []\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t = t + [iterable[i]]\n    i += 1",
 "import itertools\nt = list(itertools.compress(iterable, (cond(i) for i in iterable)))",
 "t = []\nfor i in filter(cond, iterable):\n    t.append(i)",
 "import functools\nimport operator\nt = functools.reduce(operator.add, ([i] if cond(i) else [] for i in iterable), [])",
 "import itertools\nt = list(itertools.chain(*([i] if cond(i) else [] for i in iterable)))",
 "import functools\ncond_results = [cond(i) for i in iterable]\nt = [iterable[i] for i in range(len(iterable)) if cond_results[i]]",
 "t = []\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t.insert(len(t), iterable[i])\n    i += 1",
 "i = 0\nt = []\nwhile True:\n    try:\n        if cond(iterable[i]):\n            t.append(iterable[i])\n        i += 1\n    except IndexError:\n        break",
 "from functools import reduce\ndef reducer(t, i):\n    if cond(i):\n        t.append(i)\n    return t\nt = reduce(reducer, iterable, [])",
 "from itertools import compress\nt = list(compress(iterable, map(cond, iterable)))",
 "i = 0\nt = []\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t.append(iterable[i])\n    i += 1",
 "from functools import reduce\ndef reducer(acc, item):\n    if cond(item):\n        acc.append(item)\n    return acc\nt = reduce(reducer, iterable, [])",
 "from functools import reduce\ndef reducer(t, item):\n    if cond(item):\n        t.append(item)\n    return t\nt = reduce(reducer, iterable, [])",
 "import functools\ndef check_condition(i):\n    return cond(i)\nt = [i for i in iterable if check_condition(i)]",
 "import functools\ndef check_condition(i):\n    return cond(i)\nt = []\nfor i in iterable:\n    if check_condition(i):\n        t.append(i)",
 "import functools\ndef check_condition(i):\n    return cond(i)\nt = list((i for i in iterable if check_condition(i)))",
 "import functools\nfrom itertools import compress\ndef check_condition(i):\n    return cond(i)\nt = list(compress(iterable, map(check_condition, iterable)))",
 "import functools\nfrom itertools import filterfalse\ndef check_condition(i):\n    return cond(i)\nt = list(filterfalse(lambda x: not check_condition(x), iterable))",
 "import functools\ndef check_condition(i):\n    return cond(i)\nt = []\nfor i in iterable:\n    if check_condition(i):\n        t += [i]",
 "import functools\ndef check_condition(i):\n    return cond(i)\nt = functools.reduce(lambda acc, i: acc + [i] if check_condition(i) else acc, iterable, [])",
 "t = [i for i in (i for i in iterable) if cond(i)]",
 "t = list()\nfor i in iterable:\n    t.append(i)\nt = [i for i in t if cond(i)]",
 "t = list()\nfor i in iterable:\n    if not cond(i):\n        continue\n    t.append(i)",
 "t = list()\nfor i in iterable:\n    if cond(i):\n        t.extend([i])",
 "t = list()\nfor i in iterable:\n    if cond(i):\n        t = [*t, i]",
 "t = list()\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t.append(iterable[i])\n    i += 1",
 "import functools\ndef add_if_cond(t, i):\n    if cond(i):\n        t.append(i)\n    return t\nt = functools.reduce(add_if_cond, iterable, [])",
 "t = list()\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t = t + [iterable[i]]\n    i += 1",
 "t = []\nfor i in iterable:\n    try:\n        if not cond(i):\n            raise ValueError\n        t.append(i)\n    except ValueError:\n        continue",
 "from functools import reduce\ndef reducer(t, element):\n    if cond(element):\n        t.append(element)\n    return t\nt = reduce(reducer, iterable, [])",
 "from functools import reduce\ndef reducer(t, iterable):\n    if cond(iterable):\n        t.append(iterable)\n    return t\nt = reduce(reducer, iterable, [])",
 "from itertools import compress\nt = list(compress(iterable, [cond(item) for item in iterable]))",
 "import itertools\nt = list(itertools.compress(iterable, map(cond, iterable)))",
 "import itertools\niterable_it = itertools.compress(iterable, (cond(x) for x in iterable))\nt = list(iterable_it)",
 "import functools\ncond_func = functools.partial(cond)\nt = [x for x in iterable if cond_func(x)]",
 "import numpy as np\ncond_results = [cond(x) for x in iterable]\nfiltered_results = [iterable[i] for i in range(len(iterable)) if cond_results[i]]\nt = filtered_results",
 "import numpy as np\ncond_results = np.array([cond(x) for x in iterable])\nfiltered_results = [x for (i, x) in enumerate(iterable) if cond_results[i]]\nt = filtered_results",
 "from functools import reduce\ndef add_if_cond(acc, i):\n    if cond(i):\n        acc.append(i)\n    return acc\nt = reduce(add_if_cond, iterable, [])",
 "t = list(filter(lambda x: cond(x), iterable))",
 "t = [i for i in iterable]\nt = list(filter(cond, t))",
 "t = []\nfor i in iterable:\n    try:\n        assert cond(i)\n        t.append(i)\n    except AssertionError:\n        pass",
 "t = (i for i in iterable if cond(i))\nt = list(t)",
 "import functools\nimport operator\nt = functools.reduce(operator.iconcat, [[x] if cond(x) else [] for x in iterable], [])",
 "import functools\ncond_func = functools.partial(cond)\nt = list(filter(cond_func, iterable))",
 "from functools import reduce\ndef reducer(acc, curr):\n    if cond(curr):\n        acc.append(curr)\n    return acc\nt = reduce(reducer, iterable, [])",
 "import functools\nadd_if_cond = lambda acc, i: acc + [i] if cond(i) else acc\nt = functools.reduce(add_if_cond, iterable, [])",
 "from functools import reduce\ndef reducer(t, x):\n    if cond(x):\n        t.append(x)\n    return t\nt = reduce(reducer, iterable, [])",
 "t = list(filter(cond, iterable))\nt = [i for i in t]",
 "t = [i for i in iterable]\nfor i in reversed(t):\n    if not cond(i):\n        t.remove(i)",
 "import functools\ndef apply_cond(iterable, cond):\n    t = []\n    for i in iterable:\n        if cond(i):\n            t.append(i)\n    return t\nt = apply_cond(iterable, cond)",
 "t = filter(cond, iterable)\nt = list(t)",
 "import functools\nt = functools.reduce(lambda a, b: a + [b] if cond(b) else a, iterable, [])",
 "from itertools import compress\nt = list(compress(iterable, (cond(i) for i in iterable)))",
 "import numpy as np\nt = [i for i in iterable if cond(i)]\nt = np.array(t).tolist()",
 "t = []\nfor i in iterable:\n    t.append(i) if cond(i) else None",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t += i if isinstance(i, list) else [i]",
 "import functools\nt = functools.reduce(lambda t, i: t.append(i) or t if cond(i) else t, iterable, [])",
 "t = [i for i in filter(cond, iterable)]",
 "import functools\nt = functools.reduce(lambda acc, val: acc + [val] if cond(val) else acc, iterable, [])",
 "t = []\ni = 0\nwhile i < len(iterable):\n    if not cond(iterable[i]):\n        i += 1\n        continue\n    t.append(iterable[i])\n    i += 1",
 "import functools\nt = functools.reduce(lambda list, elem: list + [elem] if cond(elem) else list, iterable, [])",
 "import itertools\ncond_iterable = list(map(cond, iterable))\nt = [val for (val, cond) in zip(iterable, cond_iterable) if cond]",
 "import itertools\nt = [x for (x, y) in zip(iterable, map(cond, iterable)) if y]",
 "import itertools\nt = [i for i in itertools.compress(iterable, map(cond, iterable))]",
 "from functools import reduce\nt = reduce(lambda acc, i: acc + [i] if cond(i) else acc, iterable, [])",
 "t = list()\niterator = iter(iterable)\nwhile True:\n    try:\n        i = next(iterator)\n        if cond(i):\n            t.append(i)\n    except StopIteration:\n        break",
 "from functools import reduce\nt = reduce(lambda acc, x: acc + [x] if cond(x) else acc, iterable, [])",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t = [*t, i]",
 "t = list(filter(cond, [i for i in iterable]))",
 "t = [i for i in iterable]\nfor i in t[:]:\n    if not cond(i):\n        t.remove(i)",
 "t = []\nfor i in iterable:\n    if cond(i) != False:\n        t.append(i)",
 "t = []\nfor i in iterable:\n    if not cond(i):\n        pass\n    else:\n        t.append(i)",
 "t = list()\nfor i in iterable:\n    if cond(i):\n        t[len(t):] = [i]",
 "import itertools\ncond_iter = (cond(i) for i in iterable)\nt = [i for (i, c) in zip(iterable, cond_iter) if c]",
 "t = []\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t.insert(i, iterable[i])\n    i += 1",
 "import itertools\nt = list(filter(cond, iterable))\nfor i in range(len(t)):\n    if not cond(t[i]):\n        t = t[:i]\n        break",
 "import itertools\nt = list(itertools.islice(filter(cond, iterable), 0, None))",
 "import functools\nimport operator\nt = functools.reduce(operator.concat, ([i] if cond(i) else [] for i in iterable), [])",
 "t = []\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t = [*t, iterable[i]]\n    i += 1",
 "t = [item for (i, item) in enumerate(iterable) if cond(item)]",
 "i = 0\nt = []\ntry:\n    while True:\n        if cond(iterable[i]):\n            t.append(iterable[i])\n        i += 1\nexcept IndexError:\n    pass",
 "t = list()\n_ = [t.append(i) for i in iterable if cond(i)]",
 "t = []\nfor i in iterable:\n    temp = i\n    if cond(temp):\n        t.append(temp)",
 "t = []\niter_copy = iterable.copy()\nfor i in iter_copy:\n    if cond(i):\n        t.append(i)",
 "import itertools\niter_func = itertools.filterfalse(lambda x: not cond(x), iterable)\nt = list(iter_func)",
 "import itertools\nt = list(itertools.filterfalse(lambda y: not cond(y), iterable))",
 "import functools\niterable_copy = iterable.copy()\nt = list(filter(functools.partial(cond), iterable_copy))",
 "from functools import reduce\ndef filter_function(acc, i):\n    if cond(i):\n        return acc + [i]\n    else:\n        return acc\nt = reduce(filter_function, iterable, [])",
 "import numpy as np\nt = list(np.array([i for i in iterable if cond(i)]))",
 "t = list()\nfor element in filter(cond, iterable):\n    t.append(element)",
 "t = list()\nfor i in iter(iterable):\n    if cond(i):\n        t.append(i)",
 "def generator_cond(iterable):\n    for element in iterable:\n        if cond(element):\n            yield element\nt = list(generator_cond(iterable))",
 "import itertools\nt = [i for (i, p) in zip(iterable, (cond(i) for i in iterable)) if p]",
 "from functools import reduce\nt = reduce(lambda a, i: a + [i] if cond(i) else a, iterable, [])",
 "t = list()\nfor (index, i) in enumerate(iterable):\n    if cond(iterable[index]):\n        t.append(i)",
 "t = []\nfor i in iterable:\n    t.append(i)\nt = [i for i in t if cond(i)]",
 "from functools import reduce\ndef append_if_cond(acc, val):\n    if cond(val):\n        acc.append(val)\n    return acc\nt = reduce(append_if_cond, iterable, [])",
 "from itertools import filterfalse\nt = list(filterfalse(lambda x: not cond(x), iterable))",
 "import functools\nt = functools.reduce(lambda x, y: x + [y] if cond(y) else x, iterable, [])",
 "import functools\nimport operator\nt = list()\nfor i in iterable:\n    if cond(i):\n        t = functools.reduce(operator.iconcat, [t, [i]], [])",
 "import itertools\nt = list()\nfor i in iterable:\n    if cond(i):\n        t = list(itertools.chain(t, [i]))",
 "from operator import concat\nimport functools\nt = functools.reduce(concat, ([i] if cond(i) else [] for i in iterable))",
 "t = list(map(lambda x: x, filter(cond, iterable)))",
 "import itertools\ncond_func = lambda x: cond(x)\nt = list(itertools.compress(iterable, map(cond_func, iterable)))",
 "import copy\nt = []\nfor i in copy.deepcopy(iterable):\n    if cond(i):\n        t.append(i)",
 "t = [i for i in iterable.copy() if cond(i)]",
 "t = []\nfor i in iterable[:]:\n    if cond(i):\n        t.append(i)",
 "import functools\nt = functools.reduce(lambda acc, i: acc.append(i) or acc if cond(i) else acc, iterable, [])",
 "from itertools import filterfalse\ndef negate_cond(x):\n    return not cond(x)\nt = list(filterfalse(negate_cond, iterable))",
 "from functools import reduce\ndef reducer(accumulator, value):\n    if cond(value):\n        accumulator.append(value)\n    return accumulator\nt = reduce(reducer, iterable, [])",
 "t = []\n_ = [t.append(i) for i in iterable if cond(i)]",
 "import functools\nt = list(functools.reduce(lambda a, x: a + [x] if cond(x) else a, iterable, []))",
 "from functools import reduce\ndef add_if_cond(lst, item):\n    if cond(item):\n        lst.append(item)\n    return lst\nt = reduce(add_if_cond, iterable, [])",
 "from functools import reduce\nt = reduce(lambda a, x: a + [x] if cond(x) else a, iterable, [])",
 "import itertools\nfrom functools import reduce\ndef filterfalse(predicate, iterable):\n    return reduce(lambda acc, x: acc + [x] if predicate(x) else acc, iterable, [])\nt = filterfalse(cond, iterable)",
 "import itertools\nt = [x for x in iterable if not not cond(x)]",
 "t = [i for i in iterable if cond(i)]\nt = list(t)",
 "t = []\nfor i in iterable:\n    if cond(i):\n        t.append(i)\n    else:\n        pass",
 "import itertools\nt = [i for i in itertools.filterfalse(lambda x: not cond(x), iterable)]",
 "import itertools\nt = list(itertools.filterfalse(lambda item: not cond(item), iterable))",
 "from functools import reduce\ndef append_if_cond(s, i):\n    if cond(i):\n        s.append(i)\n    return s\nt = reduce(append_if_cond, iterable, [])",
 "import functools\ndef cond_func(x):\n    return cond(x)\nt = [item for item in iterable if cond_func(item)]",
 "import itertools\ndef cond_func(x):\n    return cond(x)\nt = list(itertools.filterfalse(lambda x: not cond_func(x), iterable))",
 "import numpy as np\ndef check(item):\n    if cond(item):\n        return True\n    return False\nt = [item for item in iterable if check(item)]",
 "def check(item):\n    if cond(item):\n        return True\n    return False\nt = []\nfor item in iterable:\n    if check(item):\n        t.append(item)",
 "def check(item):\n    return True if cond(item) else False\nt = list(filter(check, iterable))",
 "def check(item):\n    return cond(item)\nt = list(filter(check, iterable))",
 "t = list(filter(lambda item: cond(item), iterable))",
 "from itertools import filterfalse\nt = list(filterfalse(lambda i: not cond(i), iterable))",
 "from itertools import compress\nt_fake_mask = [cond(i) for i in iterable]\nt = list(compress(iterable, t_fake_mask))",
 "t = []\nfor (index, item) in enumerate(iterable):\n    if cond(item):\n        t.append(item)",
 "temp = ((i, cond(i)) for i in iterable)\nt = [i for (i, bool_val) in temp if bool_val]",
 "in_i = iter(iterable)\nt = [i for i in in_i if cond(i)]",
 "import functools\nt = functools.reduce(lambda r, i: r.append(i) or r if cond(i) else r, iterable, [])",
 "predicate = lambda x: cond(x)\nt = [iterator for iterator in iterable if predicate(iterator)]",
 "t = list(filter(lambda i: cond(i), iterable))",
 "import builtins\nt = list(builtins.filter(cond, iterable))",
 "import numpy as np\nt_filter = np.array([x for x in iterable if cond(x)])\nt_filter = t_filter.tolist()\nt = t_filter",
 "import functools as ft\nfiltered = ft.partial(filter, cond)\nt = list(filtered(iterable))",
 "from itertools import compress\nt_flags = list(map(cond, iterable))\nt = list(compress(iterable, t_flags))",
 "from functools import reduce\nt = reduce(lambda a, b: a + [b] if cond(b) else a, iterable, [])",
 "t = list(iter((x for x in iterable if cond(x))))",
 "import numpy as np\nindices = np.where(np.asarray(list(map(cond, iterable))))[0].tolist()\nt = [iterable[i] for i in indices]",
 "t = []\niter_enumerate = enumerate(iterable)\nfor (i, ele) in iter_enumerate:\n    if cond(ele):\n        t.append(ele)",
 "import itertools\nt = []\niterable_iter = itertools.cycle(iterable)\nfor _ in range(len(iterable)):\n    item = next(iterable_iter)\n    if cond(item):\n        t.append(item)",
 "import functools\nboolean_iterable = list(map(cond, iterable))\nt = functools.reduce(lambda a, b: a + [b] if cond(b) else a, iterable, [])",
 "import functools\nconditional_func = lambda x, y: x + [y] if cond(y) else x\nt = functools.reduce(conditional_func, iterable, [])",
 "import numpy as np\ndef set_boolean(index_value_tuple):\n    (index, value) = index_value_tuple\n    cond_bool[index] = cond(value)\ncond_bool = np.empty_like(iterable, dtype=bool)\nres = map(set_boolean, enumerate(iterable))\ntemp = [i for i in res]\nt = [value for (index, value) in enumerate(iterable) if cond_bool[index]]",
 "import numpy as np\nt_empty = np.empty_like(iterable, dtype=bool)\nfor (index, value) in enumerate(iterable):\n    t_empty[index] = cond(value)\nt = list((iterable[i] for (i, val) in enumerate(t_empty) if val))",
 "import numpy as np\nt = np.array([item for item in iterable if cond(item)])\nt = list(t)",
 "import numpy as np\nt_conditional = [(i, cond(val)) for (i, val) in enumerate(iterable)]\nt = [iterable[i] for (i, val) in enumerate(t_conditional) if val[1]]",
 "import numpy as np\nt_conditional = list(map(cond, iterable))\nt = [iterable[i] for (i, x) in enumerate(t_conditional) if x]",
 "import numpy as np\nselected_indices = np.where(np.array([cond(item) for item in iterable]))\nt = [iterable[i] for i in selected_indices[0]]"
]