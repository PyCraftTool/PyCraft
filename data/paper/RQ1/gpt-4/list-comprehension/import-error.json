[
 "\nt = [i for i in iterable]\nt = list(itertools.compress(t, (cond(i) for i in t)))",
 "\nt = list(itertools.ifilter(cond, iterable))",
 "import itertools\ncond_func = operator.not_\nt = list(itertools.filterfalse(cond, iterable))",
 "\nt = functools.reduce(lambda acc, i: acc.extend([i]) or acc if cond(i) else acc, iterable, [])",
 "from operator import add\nacc = []\nt = functools.reduce(lambda acc, x: add(acc, [x]) if cond(x) else acc, iterable, [])",
 "import listcomp\nt = listcomp.list_comprehension(iterable, cond)",
 "\nt = [x for x in iterable if not copy_func(x)]",
 "import itertools\nt = [x for x in itertools.filterfalse(copy_func, iterable)]",
 "import concurrent.futures\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    futures = {executor.submit(worker, element) for element in iterable}\n    t = [f.result() for f in concurrent.futures.as_completed(futures)]",
 "import numpy.ma as ma\nt = list(ma.masked_array([x for x in iterable], [not cond(x)]).compressed())",
 "\nt = deque()\ni = 0\nwhile i < len(iterable):\n    if cond(iterable[i]):\n        t.append(iterable[i])\n    i += 1",
 "\nt = deque()\niter_iterable = iter(iterable)\ntry:\n    while True:\n        i = next(iter_iterable)\n        if cond(i):\n            t.append(i)\nexcept StopIteration:\n    pass",
 "import itertools as it\nt = deque(it.filterfalse(lambda i: not cond(i), iterable))",
 "\nt = deque([i for i in iterable if cond(i)])",
 "\nt = deque()\nfor i in (elem for elem in iterable if cond(elem)):\n    t.append(i)",
 "\nt = deque()\nfor i in filter(cond, iterable):\n    t.append(i)",
 "\nt = deque()\n[t.append(i) for i in iterable if cond(i)]",
 "import functools\nt = deque()\nfunctools.reduce(lambda _, i: t.append(i) or t if cond(i) else t, iterable, t)",
 "\nt = deque()\nfor i in iterable:\n    append_item = cond(i)\n    if append_item:\n        t.append(i)",
 "import itertools\nt = deque(itertools.filterfalse(lambda x: not cond(x), iterable))",
 "\nt = deque()\nindex = 0\nwhile index < len(iterable):\n    i = iterable[index]\n    if cond(i):\n        t.append(i)\n    index += 1",
 "import numpy as np\niterable = np.array(iterable)\ncond_iters = np.vectorize(cond)\nt = deque(iterable[cond_iters(iterable)])",
 "from multiprocessing import Pool\nimport numpy as np\nnum_threads = 4\ncond_bool = np.empty_like(iterable, dtype=bool)\nwith Pool(num_threads) as p:\n    list(p.imap(conditon_setter, [(index, value) for (index, value) in enumerate(iterable)]))\nt = [item for item in iterable[cond_bool]]\n\ndef condition_setter(item):\n    (index, value) = item\n    cond_bool[index] = cond(value)"
]