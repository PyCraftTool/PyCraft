[
 "import numpy as np\ndot_prod = np.dot(arr1, arr2)",
 "import numpy as np\ndot_prod = np.sum(np.multiply(arr1, arr2))",
 "import numpy as np\ndot_prod = np.inner(arr1, arr2)",
 "import numpy as np\ndot_prod = np.matmul(arr1, np.transpose(arr2))",
 "import functools\nimport operator\ndot_prod = functools.reduce(operator.add, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.dot(arr1_np, arr2_np)",
 "from numpy import dot\ndot_prod = dot(arr1, arr2)",
 "import numpy as np\ndot_prod = np.sum(np.array(arr1) * np.array(arr2))",
 "import numpy as np\ndot_prod = np.einsum('i,i->', arr1, arr2)",
 "import numpy as np\ndot_prod = np.einsum('ij,kl->ijkl', arr1, arr2)",
 "import numpy as np\ndot_prod = np.outer(arr1, arr2).reshape(arr1.shape + arr2.shape)",
 "import numpy as np\ndot_prod = np.zeros((arr1.shape[0], arr1.shape[1], arr2.shape[0], arr2.shape[1]))\nfor i in range(arr1.shape[0]):\n    for j in range(arr1.shape[1]):\n        for k in range(arr2.shape[0]):\n            for l in range(arr2.shape[1]):\n                dot_prod[i][j][k][l] = arr1[i][j] * arr2[k][l]",
 "import numpy as np\ndot_prod = np.zeros(arr1.shape + arr2.shape, dtype=arr1.dtype)\nfor i in np.ndindex(arr1.shape):\n    for j in np.ndindex(arr2.shape):\n        dot_prod[i + j] = arr1[i] * arr2[j]",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = arr1_np.dot(arr2_np)",
 "import numpy as np\ndot_prod = np.sum(arr1 * arr2)",
 "import numpy as np\ndot_prod = np.matmul(arr1, arr2)",
 "import numpy as np\ndot_prod = np.dot(np.array(arr1), np.array(arr2))",
 "import numpy as np\ndot_prod = np.inner(np.array(arr1), np.array(arr2))",
 "import itertools\nimport operator\ndot_prod = sum(map(operator.mul, itertools.zip_longest(arr1, arr2, fillvalue=0)))",
 "import numpy as np\ndot_prod = np.sum([temp for temp in np.array(arr1) * np.array(arr2)])",
 "import numpy as np\ndot_prod = np.zeros_like(arr1[:, :, None, None] * arr2[None, None, :, :])\nfor i in range(arr1.shape[0]):\n    for j in range(arr1.shape[1]):\n        for k in range(arr2.shape[0]):\n            for l in range(arr2.shape[1]):\n                dot_prod[i, j, k, l] = arr1[i, j] * arr2[k, l]",
 "import numpy as np\nouter_prod = np.outer(arr1, arr2)\ndot_prod = outer_prod.reshape(arr1.shape + arr2.shape)",
 "import numpy as np\nouter_prod = np.multiply.outer(arr1, arr2)\ndot_prod = outer_prod.reshape(arr1.shape + arr2.shape)",
 "import numpy as np\ndot_prod = np.kron(arr1[:, np.newaxis], arr2[np.newaxis, :])",
 "import numpy as np\ndot_prod = np.zeros((arr1.shape[0], arr1.shape[1], arr2.shape[0], arr2.shape[1]))\nfor i in np.ndindex(arr1.shape):\n    for j in np.ndindex(arr2.shape):\n        dot_prod[i + j] = arr1[i] * arr2[j]",
 "import numpy as np\ndot_prod = np.zeros((arr1.shape[0], arr1.shape[1], arr2.shape[0], arr2.shape[1]))\nfor (i, val1) in np.ndenumerate(arr1):\n    for (j, val2) in np.ndenumerate(arr2):\n        dot_prod[i + j] = val1 * val2",
 "import numpy as np\narr1_exp = np.expand_dims(arr1, axis=(2, 3))\narr2_exp = np.expand_dims(arr2, axis=(0, 1))\ndot_prod = arr1_exp * arr2_exp",
 "import numpy as np\narr1_exp = np.expand_dims(arr1, axis=(2, 3))\narr2_exp = np.expand_dims(arr2, axis=(0, 1))\ndot_prod = np.multiply(arr1_exp, arr2_exp)",
 "import numpy as np\narr1_exp = np.repeat(arr1[:, :, np.newaxis, np.newaxis], arr2.shape[0], axis=2)\narr1_exp = np.repeat(arr1_exp, arr2.shape[1], axis=3)\narr2_exp = np.repeat(arr2[np.newaxis, np.newaxis, :, :], arr1.shape[0], axis=0)\narr2_exp = np.repeat(arr2_exp, arr1.shape[1], axis=1)\ndot_prod = arr1_exp * arr2_exp",
 "import numpy as np\narr1_exp = np.repeat(arr1[:, :, np.newaxis, np.newaxis], arr2.shape[0], axis=2)\narr1_exp = np.repeat(arr1_exp, arr2.shape[1], axis=3)\narr2_exp = np.repeat(arr2[np.newaxis, np.newaxis, :, :], arr1.shape[0], axis=0)\narr2_exp = np.repeat(arr2_exp, arr1.shape[1], axis=1)\ndot_prod = np.multiply(arr1_exp, arr2_exp)",
 "import numpy as np\nimport itertools\ndot_prod = np.zeros(arr1.shape + arr2.shape, dtype=arr1.dtype)\nfor (i, j) in itertools.product(np.ndindex(arr1.shape), np.ndindex(arr2.shape)):\n    dot_prod[i + j] = arr1[i] * arr2[j]",
 "import numpy as np\ndot_prod = np.zeros(arr1.shape + arr2.shape, dtype=arr1.dtype)\nfor i in np.ndindex(arr1.shape):\n    for j in np.ndindex(arr2.shape):\n        dot_prod[tuple(np.add(i, j))] = arr1[i] * arr2[j]",
 "import numpy as np\nimport itertools\ndot_prod = np.zeros(arr1.shape + arr2.shape, dtype=arr1.dtype)\nfor (i, j) in itertools.product(*map(np.ndindex, (arr1.shape, arr2.shape))):\n    dot_prod[i + j] = arr1[i] * arr2[j]",
 "import numpy as np\nimport itertools\ndot_prod = np.zeros(arr1.shape + arr2.shape, dtype=arr1.dtype)\nfor (i, j) in itertools.product(*[np.ndindex(shape) for shape in [arr1.shape, arr2.shape]]):\n    dot_prod[i + j] = arr1[i] * arr2[j]",
 "import numpy as np\nimport itertools\ndot_prod = np.zeros(np.add(arr1.shape, arr2.shape), dtype=arr1.dtype)\nfor (i, j) in itertools.product(*[np.ndindex(shape) for shape in [arr1.shape, arr2.shape]]):\n    dot_prod[np.add(i, j)] = np.multiply(arr1[i], arr2[j])",
 "import numpy as np\ndot_prod = np.multiply(np.tile(arr1, arr2.shape), np.tile(arr2, arr1.shape))",
 "import numpy as np\ndot_prod = np.zeros(arr1.shape + arr2.shape, dtype=arr1.dtype)\nfor i in range(arr1.shape[0]):\n    for j in range(arr2.shape[0]):\n        dot_prod[i, j] = arr1[i] * arr2[j]",
 "import numpy as np\nfrom functools import reduce\ndot_prod = np.zeros(arr1.shape + arr2.shape, dtype=arr1.dtype)\nfor i in np.ndindex(arr1.shape):\n    for j in np.ndindex(arr2.shape):\n        dot_prod[i + j] = reduce(lambda x, y: x * y, [arr1[i], arr2[j]])",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = np.sum(arr1_np * arr2_np)",
 "import numpy as np\ndot_prod = sum(np.array(arr1) * np.array(arr2))",
 "import numpy as np\ndot_prod = np.matmul(np.array(arr1), np.array(arr2))",
 "from numpy import multiply, sum\ndot_prod = sum(multiply(arr1, arr2))",
 "import numpy as np\n(arr1_np, arr2_np) = (np.array(arr1), np.array(arr2))\ndot_prod = np.dot(arr1_np, arr2_np)",
 "import numpy as np\ndot_prod = np.array(arr1).dot(np.array(arr2))",
 "import numpy as np\nprod_arr = np.multiply(arr1, arr2)\ndot_prod = prod_arr.sum()",
 "import numpy as np\nmat = np.array([arr1, arr2])\ndot_prod = np.dot(arr1, arr2)",
 "import numpy as np\nmat = np.array([arr1, arr2])\ndot_prod = np.dot(mat[0], mat[1])",
 "import numpy as np\nmat = np.array([arr1, arr2])\ndot_prod = np.matmul(mat[0], mat[1])",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\ndot_prod = arr1_np @ arr2_np",
 "from numpy import inner\ndot_prod = inner(arr1, arr2)",
 "import numpy as np\ndot_prod = np.vdot(arr1, arr2)",
 "import numpy as np\nfrom numpy.linalg import multi_dot\ndot_prod = multi_dot([arr1, arr2])",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\ndot_prod = np.vdot(arr1, arr2)",
 "import numpy as np\ndot_prod = np.matmul(np.array(arr1).reshape(1, -1), np.array(arr2).reshape(-1, 1))[0][0]",
 "import numpy as np\nfrom math import fsum\ndot_prod = fsum(np.multiply(arr1, arr2))",
 "import numpy as np\ndot_prod = np.dot(arr1.flatten(), arr2.flatten())",
 "import numpy as np\ndot_prod = np.matmul(arr1.flatten(), arr2.flatten().T)",
 "import numpy as np\ndot_prod = np.inner(arr1.flatten(), arr2.flatten())",
 "dot_prod = 0\nfor i in range(len(arr1)):\n    for j in range(len(arr1[i])):\n        dot_prod += arr1[i][j] * arr2[i][j]",
 "dot_prod = sum((arr1[i, j] * arr2[i, j] for i in range(len(arr1)) for j in range(len(arr1[i]))))",
 "from numpy import dot as np_dot\ndot_prod = np_dot(arr1, arr2)",
 "import numpy as np\nimport math\ndot_prod = math.fsum(np.multiply(arr1, arr2))",
 "import numpy as np\nfrom math import fsum\ndot_prod = fsum(np.array(arr1) * np.array(arr2))",
 "import numpy as np\nfrom math import fsum\nnp_arr1 = np.array(arr1)\nnp_arr2 = np.array(arr2)\ndot_prod = fsum(np.multiply(np_arr1, np_arr2))",
 "import numpy as np\ndot_prod = np.dot(arr1.reshape(-1, 1), arr2.reshape(1, -1))",
 "import numpy as np\ndot_prod = np.matmul(arr1[:, None], arr2[None, :])",
 "import numpy as np\ndot_prod = np.dot(arr1[:, None], arr2[None, :])",
 "import numpy as np\ndot_prod = (arr1.ravel() * arr2.ravel()).sum()",
 "import numpy as np\ndot_prod = sum(arr1.flatten() * arr2.flatten())",
 "import numpy as np\ndot_prod = sum(np.multiply(arr1.flatten(), arr2.flatten()))",
 "import numpy as np\nflat_arr1 = arr1.flatten()\nflat_arr2 = arr2.flatten()\ndot_prod = sum([flat_arr1[i] * flat_arr2[i] for i in range(len(flat_arr1))])",
 "import numpy as np\ndot_prod = 0\nfor (a, b) in zip(arr1.flatten(), arr2.flatten()):\n    dot_prod += a * b",
 "import numpy as np\ndot_prod = 0\nflat_arr1 = arr1.flatten()\nflat_arr2 = arr2.flatten()\nfor i in range(len(flat_arr1)):\n    dot_prod += flat_arr1[i] * flat_arr2[i]",
 "import functools\nimport operator\nimport numpy as np\ndot_prod = functools.reduce(operator.add, np.multiply(arr1.flatten(), arr2.flatten()))",
 "import numpy as np\ndot_prod = np.tensordot(arr1[:, None], arr2[None, :], axes=1)",
 "import numpy as np\narr1_reshaped = arr1.reshape(-1, 1)\narr2_reshaped = arr2.reshape(1, -1)\ndot_prod = np.dot(arr1_reshaped, arr2_reshaped)",
 "import numpy as np\narr1_reshaped = arr1[:, None]\narr2_reshaped = arr2[None, :]\ndot_prod = np.matmul(arr1_reshaped, arr2_reshaped)",
 "import numpy as np\ndot_prod = np.multiply(arr1[:, np.newaxis], arr2)",
 "import numpy as np\ndot_prod = np.einsum('ijk,ilk->ij', arr1, arr2)",
 "import numpy as np\ndot_prod = np.tensordot(arr1, arr2, axes=([2], [2]))",
 "import numpy as np\ndot_prod = np.array(arr1) @ np.array(arr2)",
 "import numpy as np\ndef dot_product(arr1, arr2):\n    return np.dot(arr1, arr2)\ndot_prod = dot_product(arr1, arr2)",
 "import itertools as it\ndot_prod = sum((x * y for (x, y) in it.izip(arr1, arr2)))",
 "import numpy as np\ndot_prod = arr1 @ arr2",
 "import numpy as np\nsingle_elements = np.multiply(arr1, arr2)\ndot_prod = np.sum(single_elements)",
 "from functools import reduce\nfrom operator import mul\nimport numpy as np\ndot_prod = reduce(lambda x, y: x + y, np.multiply(arr1, arr2))",
 "import itertools\nimport operator\nimport functools\ndot_prod = functools.reduce(operator.add, map(operator.mul, list(itertools.zip_longest(arr1, arr2))))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\nprod = arr1_np * arr2_np\ndot_prod = prod.sum()",
 "from numpy import dot\nfrom numpy.linalg import norm\ndot_prod = dot(arr1, arr2) / (norm(arr1) * norm(arr2))"
]