[
 "\ndot_prod = sum(np.multiply(arr1, arr2))",
 "\ndot_prod = reduce(lambda x, y: x + y, [a * b for (a, b) in zip(arr1, arr2)])",
 "\ndot_prod = np.asarray([[x * y for y in arr2] for x in arr1])",
 "from functools import reduce\nfrom operator import mul\ndot_prod = reduce(add, map(mul, arr1, arr2))",
 "from itertools import zip_longest\nfrom operator import mul\nfrom functools import reduce\narr1_padded = list(zip_longest(arr1, arr2, fillvalue=0))\ndot_prod = reduce(add, map(mul, *zip(*arr1_padded)))",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, map(lambda x, y: x * y, arr1, arr2))",
 "\ndot_prod = functools.reduce(lambda a, b: a + b, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "\ndot_prod = np.multiply(arr1, arr2).sum()",
 "from numpy import linalg\nmat = np.array([arr1, arr2])\ndot_prod = linalg.multi_dot(mat)",
 "import functools\ndot_prod = functools.reduce(lambda a, b: a + b, np.multiply(arr1, arr2))",
 "\ndot_prod = 0\nfor i in itertools.zip_longest(arr1, arr2, fillvalue=1):\n    dot_prod += i[0] * i[1]",
 "\ndot_prod = sum(itertools.imap(operator.mul, arr1, arr2))",
 "\ndot_prod = reduce(lambda acc, val: acc + val[0] * val[1], zip(arr1, arr2), 0)",
 "\ndot_prod = reduce(lambda x, y: x * y, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import itertools\ndot_prod = sum(itertools.starmap(mul, zip(arr1, arr2)))",
 "from scipy.spatial.distance import correlation\ndot_prod = 1 - correlation(arr1, arr2)",
 "import itertools\ndot_prod = sum((math.prod(item) for item in itertools.zip_longest(arr1, arr2, fillvalue=1)))",
 "import math\ndot_prod = math.fsum(map(operator.mul, arr1, arr2))",
 "\ndot_prod = reduce(lambda a, b: a + b, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "import itertools\ndot_prod = sum((it.mul(a, b) for (a, b) in itertools.zip_longest(arr1, arr2, fillvalue=1)))",
 "import itertools\nimport operator\ndot_prod = functools.reduce(operator.add, itertools.starmap(operator.mul, zip(arr1, arr2)))",
 "from scipy import spatial\ndot_prod = 1 - spatial.distance.cosine(arr1, arr2)",
 "from sklearn.metrics.pairwise import euclidean_distances\nfrom numpy.linalg import norm\ndot_prod = (norm(arr1) ** 2 + norm(arr2) ** 2 - euclidean_distances([arr1], [arr2]) ** 2) / 2",
 "\nada_sum = lambda a, b: a + b\ndot_prod = reduce(ada_sum, [arr1[i] * arr2[i] for i in range(len(arr1))])",
 "\ndot_prod = 0\nfor (_x, _y) in itertools.izip(arr1, arr2):\n    dot_prod += _x * _y",
 "from itertools import starmap, zip_longest\ndot_prod = reduce(lambda a, b: a + b, list(starmap(mul, zip_longest(arr1, arr2, fillvalue=0))))",
 "import itertools\nimport operator\ndot_prod = functools.reduce(operator.add, map(operator.mul, itertools.zip_longest(arr1, arr2, fillvalue=1)))"
]