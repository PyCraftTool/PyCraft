[
 "val = number_value == 0 and val1 or val2",
 "val = [v for v in (val2, val1) if (number_value, True)[v == val2]][0]",
 "import numpy as np\nval = np.where(number_value, val2, val1)",
 "val = val1\nval = val2 if not number_value else val",
 "val = val2 if not bool(number_value) else val1",
 "import numpy as np\nval = val1\ntry:\n    val = val2 if not np.isclose(number_value, 0) else val1\nexcept:\n    pass",
 "val = number_value and val2 or val1",
 "val = val1\nval = bool(number_value) and val2 or val",
 "val = bool(number_value) and val2 or val1",
 "import numpy as np\nval = np.where(bool(number_value), val2, val1)",
 "val = val1\ntry:\n    if number_value != 0:\n        raise ValueError\n    val = val2\nexcept ValueError:\n    pass",
 "val = number_value != 0 and val2 or val1",
 "import numpy as np\nval = np.where(number_value != 0, val2, val1)",
 "val = (val2, val1)[bool(1 - number_value)]",
 "import itertools\nval = list(itertools.compress((val1, val2), (bool(number_value), not bool(number_value))))[0]",
 "val = next((x for x in [val1, val2] if x != number_value), None)",
 "val = list(filter(lambda x: x != number_value, [val1, val2]))[0]",
 "val = ([val1, val2][i] for i in range(len([val1, val2])) if i != number_value).__next__()",
 "val = (number_value == 0) * val1 + (number_value != 0) * val2",
 "import numpy as np\nval = np.array([val1, val2])[number_value != 0]",
 "val = val2 * (number_value != 0) or val1 * (number_value == 0)",
 "from operator import truth\nval = truth(number_value != 0) and val2 or val1",
 "import operator\ndef select_val(val1, val2, number_value):\n    return operator.itemgetter(bool(number_value))(val1, val2)\nval = select_val(val1, val2, number_value)",
 "val = [val for val in [val1, val2] if val is not bool(number_value)][0]",
 "import numpy as np\nval_array = np.array([val1, val2])\nval = val_array[int(bool(number_value))]",
 "val = val1 + number_value * (val2 - val1)",
 "val = val2 * (number_value != 0) + val1 * (number_value == 0)",
 "val = [val for val in [val2, val1] if (val == val1) ^ (number_value != 0)][0]",
 "val = int(bool(number_value)) * val2 + int(not bool(number_value)) * val1",
 "def inline_if(val1, val2, number_value):\n    return number_value and val2 or val1\nval = inline_if(val1, val2, number_value)",
 "def any_value(vals):\n    return any((v for v in vals))\nval = any_value([number_value and val2, not number_value and val1])",
 "from operator import truth\nval = (val1, val2[truth(number_value)])",
 "sorted([val1, val2], key=lambda val: issubclass(bool(number_value), type(val)))[0]",
 "next((val for val in [val1, val2] if not isinstance(val, bool(number_value))))",
 "val = list(filter(lambda v: v is not bool(number_value), [val1, val2]))[0]",
 "temp = [val1, val2]\nfor i in temp:\n    if i != bool(number_value):\n        val = i\n        break",
 "temp = (i for i in [val1, val2] if i != bool(number_value))\nval = next(temp)",
 "val = None\nfor item in [val1, val2]:\n    if item != bool(number_value):\n        val = item\n        break",
 "val = val1 * (number_value == 0) + val2 * (number_value != 0)",
 "val = number_value and val2 or val1 if number_value != 0 else val1",
 "val = (number_value != 0) * val2 or val1",
 "val = val1\nif number_value:\n    val = val_key[1]",
 "import operator\nswitch = {0: lambda : val1, 1: lambda : val_key[1]}\nval = switch[operator.gt(number_value, 0)]()",
 "val = [number_value > 0][0]\nif val:\n    val = val2\nelse:\n    val = val1",
 "import numpy as np\nval = np.where(np.asarray(bool(number_value)), val2, val1)",
 "val = bool(number_value) == True and val2 or val1",
 "val = (bool(number_value) == True) * val2 + (bool(number_value) == False) * val1",
 "val_list = [val1, val2]\nval = val_list[min(1, abs(int(number_value)))]",
 "val_list = [val1, val2]\nnumber_value_int = int(number_value)\nbool_of_number = bool(number_value_int)\nindex = int(bool_of_number)\nval = val_list[index]",
 "import numpy as np\nconvert_to_bool = bool.__call__\nby_index_we_get = list.__getitem__\nval_list = [val1, val2]\nval = by_index_we_get(val_list, convert_to_bool(np.sign(number_value)))",
 "val_list = [val1, val2]\nval = val_list[1] if bool(int(number_value)) else val_list[0]",
 "val = (number_value != 0) * val2 + (number_value == 0) * val1",
 "val = [val1, val2]['0' in str(number_value)]",
 "val = [val2[i] if number_value[i] else val1[i] for i in range(len(number_value))]",
 "length = len(number_value)\nval = np.array([val1[i] if number_value[i] == 0 else val2[i] for i in range(length)])",
 "val = val1\nif number_value is not 0:\n    val = val2",
 "val = val1\nval = number_value and val2 or val",
 "val = val2 * bool(number_value) or val1",
 "val = val1\nif number_value == True:\n    val = val2",
 "val = [val2[i] if number_value[i] != 0 else val1[i] for i in range(len(number_value))]",
 "val = list(map(lambda x, y, z: y if x != 0 else z, number_value, val2, val1))",
 "val = val2.copy()\nfor i in range(len(number_value)):\n    if number_value[i] == 0:\n        val[i] = val1[i]",
 "val = []\nfor i in range(len(number_value)):\n    if number_value[i] != 0:\n        val.append(val2[i])\n    else:\n        val.append(val1[i])",
 "import numpy as np\nval = np.choose(number_value != 0, [val1, val2])",
 "val = [val2 if number_value != 0 else val1 for _ in range(len(val1))]",
 "val = val2 * int(number_value != 0) if number_value else val1",
 "val = (val2 if number_value else 0) or val1",
 "val = val2 * (1 if number_value else 0) or val1",
 "val = val2 * bool(number_value) if number_value else val1",
 "val = val1 if not number_value else val2 * bool(number_value)",
 "val = val1\ntry:\n    if isinstance(number_value, bool) and number_value:\n        val = val2\nexcept:\n    pass",
 "import operator\nval = operator.cond(bool(number_value), val2, val1)",
 "val = (lambda x: val1 if x else val2)(bool(number_value))",
 "val = val1\nval = val2 * bool(number_value) + val * (not bool(number_value))",
 "val = (lambda : val2, lambda : val1)[number_value is 0]()",
 "val = (lambda : val2, lambda : val1)[number_value < 1]()",
 "val = (lambda : val2, lambda : val1)[number_value <= 0]()",
 "val = (lambda : val1, lambda : val2)[number_value]()",
 "val = next((x for x in [val1, val2] if x is not None), None)",
 "try:\n    val = val2 / number_value\nexcept ZeroDivisionError:\n    val = val1",
 "val = val1\ntry:\n    val = val2 / number_value\nexcept ZeroDivisionError:\n    pass",
 "import numpy as np\nval = val1\ntry:\n    np.divide(1, number_value)\n    val = val2\nexcept ZeroDivisionError:\n    pass",
 "val = [v for v in [val2, val1] if number_value != 0][0]",
 "import numpy as np\nval = np.choose(number_value != 0, (val1, val2))",
 "val = val1\ntry:\n    assert number_value == 0\n    val = val2\nexcept AssertionError:\n    pass",
 "val = val1\nval = val2 if number_value == 0 else val1",
 "val = val1\nval = [val, val2][number_value]",
 "val = val1\nif number_value is True:\n    val = val2",
 "val = val1\ntry:\n    val = val2 if number_value is not None else val1\nexcept:\n    pass",
 "val = val1\ntry:\n    if number_value is not False:\n        val = val2\nexcept:\n    pass",
 "val = val1\ntry:\n    if number_value is not None and number_value is not False:\n        val = val2\nexcept:\n    pass",
 "val = val1\nval = number_value != 0 and val2 or val",
 "val = val1\ntry:\n    if number_value != 0:\n        raise ValueError\n    else:\n        val = val2\nexcept ValueError:\n    pass",
 "val = val1\ntry:\n    if not number_value:\n        val = val2\nexcept ValueError:\n    pass",
 "val = val1\ntry:\n    if number_value:\n        raise ValueError\n    else:\n        val = val2\nexcept ValueError:\n    pass",
 "val = val1\nfor _ in range(number_value):\n    val = val2\n    break",
 "val = val1\nval = [val for _ in range(number_value)][-1] if number_value else val",
 "val = list(filter(lambda x: x != 0, [val1, val2]))[0]",
 "import numpy as np\nval = np.array([val1, val2])[np.array([val1, val2]) != 0][0]",
 "val = val2 * bool(number_value) + val1 * (not bool(number_value))",
 "val = bool(number_value) * val2 + (not bool(number_value)) * val1",
 "(lambda : val1, lambda : val2)[bool(number_value)]()",
 "val = val2 if number_value == True else val1",
 "val = val2 * int(number_value) + val1 * (not int(number_value))",
 "import operator\nval = operator.itemgetter(int(number_value))(val1, val2)",
 "import numpy as np\nval = np.where(number_value == 0, val1, val2)",
 "{True: val2, False: val1}[number_value != 0]",
 "val = val1 if type(number_value) != TypeError else val2",
 "if type(number_value).__name__ == 'int' or type(number_value).__name__ == 'float':\n    if number_value != 0:\n        val = val2\nelse:\n    val = val1",
 "val = number_value == True and val2 or val1",
 "import operator\nval = operator.itemgetter(bool(number_value))(val2, val1)",
 "try:\n    val = val2\nexcept nameError:\n    val = val1",
 "val = (lambda : val2, lambda : val1)[number_value is False]()",
 "val = [val1, val2][number_value > 0]",
 "import numpy as np\nval = np.select([number_value == 0, number_value != 0], [val1, val2], default=val2)",
 "val = val2 if number_value.any() else val1",
 "val = number_value * val2 + (1 - number_value) * val1",
 "val = number_value * val2 if number_value else val1",
 "val = (number_value, val2, val1)[not number_value]"
]