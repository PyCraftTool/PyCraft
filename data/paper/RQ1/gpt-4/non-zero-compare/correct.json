[
 "val = val1\nif number_value != 0:\n    val = val2",
 "val = val1\nif bool(number_value):\n    val = val2",
 "val = val2 if number_value != 0 else val1",
 "val = val1\nif number_value:\n    val = val2",
 "val = val1\nval = val2 if number_value else val",
 "val = val1\ntry:\n    val = val2 if number_value != 0 else val1\nexcept:\n    pass",
 "val = val2 if bool(number_value) else val1",
 "val = val1\nval = val2 if bool(number_value) else val",
 "if bool(number_value):\n    val = val2\nelse:\n    val = val1",
 "val = [val2 if number_value != 0 else val1][0]",
 "val = val1\ntry:\n    assert number_value != 0\n    val = val2\nexcept AssertionError:\n    pass",
 "val = (lambda x: val2 if x != 0 else val1)(number_value)",
 "val = val1\nif number_value != 0:\n    val = val2\nelse:\n    pass",
 "def condition_check(val1, val2, number_value):\n    if number_value != 0:\n        return val2\n    else:\n        return val1\nval = condition_check(val1, val2, number_value)",
 "val = val1\nif bool(number_value):\n    val = val2\nelse:\n    pass",
 "val = [val1, val2][bool(number_value)]",
 "val = (val1, val2)[bool(number_value)]",
 "val = val1\ntry:\n    assert bool(number_value)\n    val = val2\nexcept AssertionError:\n    pass",
 "val = [val1, val2][number_value != 0]",
 "val = val1\ntry:\n    if bool(number_value):\n        val = val2\nexcept:\n    pass",
 "val = val2\nif number_value == 0:\n    val = val1",
 "val = (val1, val2)[number_value != 0]",
 "val = {True: val2, False: val1}[number_value != 0]",
 "val = {0: val1, 1: val2}[1 if number_value != 0 else 0]",
 "val = val2 if number_value else val1",
 "val = val2\nif not number_value:\n    val = val1",
 "val = (lambda x: val2 if x else val1)(number_value)",
 "val = {True: val2, False: val1}[bool(number_value)]",
 "val = val1 if not number_value else val2",
 "val = val1\ntry:\n    if number_value != 0:\n        val = val2\nexcept:\n    pass",
 "val = val1\ntry:\n    val = val1 if number_value == 0 else val2\nexcept:\n    pass",
 "val = val1\ntry:\n    if number_value != 0:\n        val = val2\n    else:\n        val = val1\nexcept:\n    pass",
 "try:\n    val = val2 if number_value != 0 else val1\nexcept:\n    val = val1",
 "try:\n    val = val1\n    if number_value != 0:\n        val = val2\nexcept Exception as e:\n    pass",
 "val = val2 if bool(number_value) != 0 else val1",
 "val = {False: val1, True: val2}[bool(number_value)]",
 "val = val1\nval = val if not bool(number_value) else val2",
 "try:\n    val = val2 if number_value != 0 else val1\nexcept ValueError:\n    val = val1",
 "val = val2 if bool(number_value) else val1\nassert val in (val1, val2)",
 "def check_number_value(number_value, val1, val2):\n    if bool(number_value):\n        return val2\n    else:\n        return val1\nval = check_number_value(number_value, val1, val2)",
 "val = (val2, val1)[not bool(number_value)]",
 "val = (lambda : val1, lambda : val2)[number_value != 0]()",
 "if number_value != 0:\n    val = val2\nelse:\n    val = val1",
 "val = [val2, val1][number_value == 0]",
 "val = val1 if number_value == 0 else val2",
 "import math\nval = val1\nif not math.isclose(number_value, 0):\n    val = val2",
 "val = val1\ntry:\n    1 / number_value\n    val = val2\nexcept ZeroDivisionError:\n    pass",
 "val = val1\nif not number_value == 0:\n    val = val2",
 "val = val1\nif number_value != 0:\n    val = val2\nelse:\n    val = val1",
 "val = val1\nif number_value != 0:\n    val = val2\nelif number_value == 0:\n    val = val1",
 "val = val1\nif bool(number_value):\n    val = val2\nelif not bool(number_value):\n    val = val1",
 "val = [val2 if bool(number_value) else val1][0]",
 "switch = {True: val2, False: val1}\nval = switch[bool(number_value)]",
 "val = (lambda x: val1 if x == 0 else val2)(number_value)",
 "def choose_val(val1, val2, number_value):\n    if number_value:\n        return val2\n    else:\n        return val1\nval = choose_val(val1, val2, number_value)",
 "val = (lambda : val1, lambda : val2)[bool(number_value)]()",
 "val = val1\ntry:\n    if number_value:\n        val = val2\nexcept:\n    pass",
 "val = val1\nif number_value is not None and number_value != 0:\n    val = val2",
 "val = val1\ntry:\n    if bool(number_value) is True:\n        val = val2\nexcept:\n    pass",
 "def set_value(val1, val2, number_value):\n    try:\n        assert bool(number_value)\n        return val2\n    except AssertionError:\n        return val1\nval = set_value(val1, val2, number_value)",
 "val = (val2, val1)[number_value == 0]",
 "val = {True: val1, False: val2}[number_value == 0]",
 "val = val1\ntry:\n    if number_value is not None and bool(number_value):\n        val = val2\nexcept TypeError:\n    pass",
 "try:\n    val = val2 if bool(number_value) else val1\nexcept:\n    val = val1",
 "val = val1\nif number_value:\n    try:\n        val = val2\n    except:\n        pass",
 "val = val1\ntry:\n    val = val2 if bool(number_value) else val1\nexcept:\n    pass",
 "if not number_value:\n    val = val1\nelse:\n    val = val2",
 "val = [val1 if number_value == 0 else val2][0]",
 "val = {0: val1, 1: val2}[number_value != 0]",
 "val = next((v for (n, v) in zip([0, 1], [val1, val2]) if n == number_value), val2)",
 "val = val1\ntry:\n    if number_value != 0:\n        val = val2\nexcept ZeroDivisionError:\n    pass",
 "def select_val(val1, val2, number_value):\n    return val2 if number_value != 0 else val1\nval = select_val(val1, val2, number_value)",
 "import operator\nval = operator.itemgetter(number_value != 0)([val1, val2])",
 "val = [v for (i, v) in enumerate([val1, val2]) if i == (number_value != 0)][0]",
 "val = next((v for (cond, v) in ((number_value != 0, val2), (True, val1)) if cond))",
 "val = {0: val1, 1: val2}.get(1 if number_value != 0 else 0)",
 "val = [val1, val2][int(bool(number_value))]",
 "if number_value:\n    val = val2\nelse:\n    val = val1",
 "val = val1\nflag = bool(number_value)\nif flag:\n    val = val2",
 "val = val1\nif bool(number_value):\n    val = val2\nelse:\n    val = val1",
 "def get_value(val1, val2, number_value):\n    return val2 if bool(number_value) else val1\nval = get_value(val1, val2, number_value)",
 "def choose_value(val1, val2, number_value):\n    decision = {True: val2, False: val1}\n    return decision[bool(number_value)]\nval = choose_value(val1, val2, number_value)",
 "val = val1\nval = [val1, val2][int(bool(number_value))]",
 "if bool(number_value) == True:\n    val = val2\nelse:\n    val = val1",
 "val_list = [val1, val2]\nval = val_list[int(bool(number_value))]",
 "val = {True: val2, False: val1}.get(number_value != 0, val1)",
 "val = (number_value != 0 and [val2] or [val1])[0]",
 "flag = bool(number_value)\nval = val2 if flag else val1",
 "flag = bool(number_value)\nval = val1\nif flag:\n    val = val2",
 "flag = bool(number_value)\nval = [val1, val2][flag]",
 "val = None\nif number_value != 0:\n    val = val2\nelse:\n    val = val1",
 "def choose_value(number_value, val1, val2):\n    if number_value != 0:\n        return val2\n    else:\n        return val1\nval = choose_value(number_value, val1, val2)",
 "options = {False: val1, True: val2}\nval = options[number_value != 0]",
 "val = (number_value and [val2] or [val1])[0]",
 "val = (lambda a, b: b if number_value else a)(val1, val2)",
 "val = {0: val1, 1: val2}[bool(number_value)]",
 "val = (val2, val1)[not number_value]",
 "try:\n    assert bool(number_value)\n    val = val2\nexcept AssertionError:\n    val = val1",
 "val = (lambda : val2, lambda : val1)[not bool(number_value)]()",
 "decision = lambda value: val2 if bool(value) else val1\nval = decision(number_value)",
 "val = 0\nif number_value == 0:\n    val = val1\nelse:\n    val = val2",
 "temporary_val = {0: val1, 1: val2}\nval = temporary_val[int(number_value != 0)]",
 "from operator import truth\nval = (val2, val1)[truth(number_value == 0)]",
 "def get_value(val_1, val_2, num_val):\n    return [val_1, val_2][int(bool(num_val))]\nval = get_value(val1, val2, number_value)",
 "val = (val2, val1)[int(not bool(number_value))]",
 "val = [val2, val1][bool(number_value) == False]",
 "val = val2\nif not bool(number_value):\n    val = val1",
 "if int(bool(number_value)) == 0:\n    val = val1\nelse:\n    val = val2",
 "val = [v for (index, v) in enumerate([val1, val2]) if index == int(bool(number_value))][0]",
 "val_list = [val1, val2]\nval = val_list[1] if number_value else val_list[0]",
 "val_list = [val1, val2]\nzero_or_one = number_value != 0\nindex = int(zero_or_one)\nval = val_list[index]",
 "number_boolean = bool(number_value)\nval = val1 if number_boolean == 0 else val2",
 "visual_list = {0: val1, 1: val2}\nval = visual_list[int(bool(number_value))]",
 "from operator import itemgetter\nval = itemgetter(int(bool(number_value)))([val1, val2])",
 "val = val1\nval = val2 if number_value != 0 else val",
 "val = val1\nval = [val2 if bool(number_value) else val1][0]",
 "val = val1\nval = (val1, val2)[bool(number_value)]",
 "val = val1\nif bool(number_value):\n    try:\n        val = val2\n    except:\n        pass",
 "val = (val1, val2)[int(bool(number_value))]",
 "val = {0: val1, 1: val2}[int(bool(number_value))]",
 "val = next((x for x in (val1, val2) if bool(number_value) == (x is val2)), val1)",
 "val = val1 if 'number_value' not in globals() or number_value == 0 else val2",
 "val = val1\ntry:\n    val = val2 if number_value != 0 else val1\nexcept NameError:\n    pass",
 "val = val1\nif 'number_value' in globals() and number_value != 0:\n    val = val2",
 "val = val1\nif not number_value:\n    pass\nelse:\n    val = val2",
 "val = number_value and val2 if number_value else val1",
 "val = next((x for (bool, x) in zip([not number_value, number_value], [val1, val2]) if bool))",
 "val = val1\nval = (lambda x: val2 if x else val)(number_value)",
 "val = val1\nval = val2 if not number_value == 0 else val",
 "val = val1\nval = (number_value and [val2] or [val])[0]",
 "val = {False: val2, True: val1}[number_value == 0]",
 "val = val1\ntry:\n    if number_value == 0:\n        raise ZeroDivisionError\n    val = val2\nexcept ZeroDivisionError:\n    pass",
 "val = val1\ntry:\n    number_value ** (-1)\n    val = val2\nexcept ZeroDivisionError:\n    pass",
 "val = val1\ntry:\n    div = 1 / number_value\n    val = val2\nexcept ZeroDivisionError:\n    pass",
 "val = val1\ntry:\n    div = 1 / number_value\nexcept ZeroDivisionError:\n    pass\nelse:\n    val = val2",
 "val = val1\ntry:\n    val = val2 if number_value else val1\nexcept ZeroDivisionError:\n    pass",
 "val = (val2, val1)[0 if number_value else 1]",
 "val = (val1, val2)[1 if number_value else 0]",
 "val = [val2, val1][not bool(number_value)]",
 "val = val1\nif bool(number_value) == True:\n    val = val2",
 "val = val1\nif bool(number_value) == False:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nval = {True: val2, False: val1}[bool(number_value)]",
 "val = val1\nval = (lambda : val1, lambda : val2)[bool(number_value)]()",
 "val = val1\nval = (lambda x: val2 if x else val1)(bool(number_value))",
 "val = val1\nval = (val2, val1)[not bool(number_value)]",
 "val = val1\nval = {True: val2, False: val1}.get(bool(number_value), val1)",
 "val = val1\ntry:\n    if number_value:\n        val = val2\nexcept TypeError:\n    pass",
 "val = val1\ntry:\n    val = val2 if number_value is not None and bool(number_value) else val1\nexcept:\n    pass",
 "val = [val for val in (val1, val2) if bool(number_value) == (val is val2)][0]",
 "val = val1\ntry:\n    assert number_value\n    val = val2\nexcept AssertionError:\n    pass",
 "val = val1\ntry:\n    assert number_value != 0\nexcept AssertionError:\n    pass\nelse:\n    val = val2",
 "val = [val2, val1][not number_value]",
 "val = (lambda : val2, lambda : val1)[not number_value]()",
 "val = (lambda x: val1 if x else val2)(not bool(number_value))",
 "val = {True: val2, False: val1}.get(bool(number_value))",
 "val = {0: val1, 1: val2}.get(number_value != 0, val1)",
 "if number_value == 0:\n    val = val1\nelse:\n    val = val2",
 "val = (lambda v1, v2: v2 if number_value != 0 else v1)(val1, val2)",
 "val = (lambda : val2, lambda : val1)[number_value == 0]()",
 "val = (lambda : val2, lambda : val1)[0 if number_value else 1]()",
 "val = (lambda : val2, lambda : val1)[int(not number_value)]()",
 "val = val1\ntry:\n    if not bool(number_value):\n        raise ValueError\n    val = val2\nexcept ValueError:\n    pass",
 "def check_value(val1, val2, number_value):\n    if bool(number_value):\n        return val2\n    return val1\nval = check_value(val1, val2, number_value)",
 "val = val1\ntry:\n    if bool(number_value):\n        val = val2\nexcept Exception:\n    pass",
 "val = val1\nif number_value is not None and bool(number_value):\n    val = val2",
 "val = val1\ntry:\n    assert number_value\n    val = val2\nexcept:\n    pass",
 "val = val1\ntry:\n    if not number_value:\n        raise Exception\n    val = val2\nexcept Exception:\n    pass",
 "def switch(number_value, val1, val2):\n    switcher = {True: val2, False: val1}\n    return switcher.get(bool(number_value))\nval = switch(number_value, val1, val2)",
 "val = (lambda x: val1 if not x else val2)(number_value)",
 "val = {0: val1, 1: val2}.get(number_value, val2)",
 "val = val1\nif number_value != 0:\n    try:\n        val = val2\n    except:\n        pass",
 "try:\n    val = val1 if number_value == 0 else val2\nexcept:\n    val = val1",
 "val = val1\ntry:\n    1 / number_value\nexcept ZeroDivisionError:\n    pass\nelse:\n    val = val2",
 "val = val1\nif number_value != 0:\n    1 / number_value\n    val = val2",
 "val = val1\nif number_value:\n    1 / number_value\n    val = val2",
 "import math\nval = val1\nif not math.isclose(number_value, 0, rel_tol=1e-09):\n    val = val2",
 "val = val1\ntry:\n    number_value_inv = 1.0 / number_value\nexcept ZeroDivisionError:\n    pass\nelse:\n    val = val2",
 "try:\n    assert number_value != 0\n    val = val2\nexcept AssertionError:\n    val = val1",
 "try:\n    1 / number_value\n    val = val2\nexcept ZeroDivisionError:\n    val = val1",
 "val = next((v for v in [val2, val1] if number_value != 0), val1)",
 "val = val1\nif number_value == False:\n    pass\nelse:\n    val = val2",
 "val = val1\nif bool(number_value) is True:\n    val = val2",
 "val = val1\nif number_value:\n    val = val2\nelse:\n    pass",
 "val = val1\nval = [val1, val2][bool(number_value)]",
 "val = val1\ntry:\n    if number_value is not None and bool(number_value):\n        val = val2\nexcept:\n    pass",
 "val = val1\ntry:\n    val = val2 if number_value and bool(number_value) else val1\nexcept TypeError:\n    pass",
 "val = val1\nif number_value:\n    if number_value != 0:\n        val = val2",
 "val = val2 if number_value is not None and number_value != 0 else val1",
 "val = val1\nif number_value is not None:\n    if number_value != 0:\n        val = val2",
 "val = val2 if number_value not in [None, 0] else val1",
 "val = val1\nif not number_value:\n    val = val1\nelse:\n    val = val2",
 "val = val1\nif number_value != 0:\n    val = val2\nelif number_value == 0:\n    pass",
 "val = val1\nif not number_value == 0:\n    val = val2\nelse:\n    pass",
 "val = val2 if number_value is not None and bool(number_value) else val1",
 "val = val1\nif number_value is not None:\n    if bool(number_value):\n        val = val2",
 "val = val1\nif number_value is not None and number_value:\n    val = val2",
 "val = val1\nif number_value:\n    val = val2\nelse:\n    val = val1",
 "val = val1\ntry:\n    val = val2 if number_value else val1\nexcept:\n    pass",
 "val = val1\ntry:\n    if number_value is not None and number_value != 0:\n        val = val2\nexcept:\n    pass",
 "val = val2 if not number_value == 0 else val1",
 "val = val2 if bool(number_value) != False else val1",
 "val = val1\nif bool(number_value) != 0:\n    val = val2",
 "val = val1\ntry:\n    assert bool(number_value)\n    val = val2\nexcept:\n    pass",
 "val = val1\nif bool(number_value) == True:\n    val = val2\nelif bool(number_value) == False:\n    val = val1",
 "val = val1\nif number_value:\n    val = val2\nelif not number_value:\n    val = val1",
 "val = val1\nif bool(number_value) is True:\n    val = val2\nelif bool(number_value) is False:\n    val = val1",
 "if not bool(number_value):\n    val = val1\nelse:\n    val = val2",
 "val = val1\nwhile number_value != 0:\n    val = val2\n    break",
 "vals = {True: val2, False: val1}\nval = vals[number_value != 0]",
 "val = [v for v in [val2, val1] if (number_value != 0) is (v is val2)][0]",
 "val = val2 if bool(number_value != 0) else val1",
 "val = (val1 if not bool(number_value) else val2) if number_value is not None else None",
 "val = {0: val1, 1: val2}.get(bool(number_value))",
 "try:\n    assert number_value != 0\n    val = val2\nexcept:\n    val = val1",
 "choices = {0: val1, 1: val2}\nval = choices.get(0 if number_value == 0 else 1)",
 "val = {0: val1, 1: val2}.get(int(bool(number_value)))",
 "val = val1\ntry:\n    if eval('number_value') != 0:\n        val = val2\nexcept:\n    pass",
 "def evaluate(number_value, val1, val2):\n    try:\n        if number_value != 0:\n            return val2\n    except TypeError:\n        pass\n    return val1\nval = evaluate(number_value, val1, val2)",
 "val = val1\nif isinstance(number_value, int) or isinstance(number_value, float):\n    if number_value != 0:\n        val = val2",
 "import operator\nval = operator.itemgetter(bool(number_value))((val1, val2))",
 "val = (val1 if not number_value else val2) if number_value is not None else None",
 "def decide(number_value, val1, val2):\n    if number_value:\n        return val2\n    else:\n        return val1\nval = decide(number_value, val1, val2)",
 "val = {True: val1, False: val2}.get(number_value == 0)",
 "val = [val1, val2][0 if number_value == 0 else 1]"
]