[
 "import operator\nbinary_op = operator.ne\na = x if not binary_op(x, None) else None\nb = y if not binary_op(y, None) else None\nc = z if not binary_op(z, None) else None",
 "(a, b, c) = (locals_value['x'], locals_value['y'], locals_value['z'])",
 "variables = ['x', 'y', 'z']\n(a, b, c) = [locals_value[var] for var in variables]",
 "local_keys = ['x', 'y', 'z']\nfor key in local_keys:\n    if key == 'x':\n        a = locals_value[key]\n    elif key == 'y':\n        b = locals_value[key]\n    elif key == 'z':\n        c = locals_value[key]",
 "(a, b, c) = temp",
 "(_, a, _, *v, b, c, _) = [None, x, None, y, None, z, None]",
 "(minimum, max_val, mean_val) = temp\n(a, b, c) = (minimum, max_val, mean_val)",
 "(a, _, _) = (x, _, _)\n(b, _, _) = (y, _, _)\n(c, _, _) = (z, _, _)",
 "import numpy as np\n(a, b, c) = np.array([x, y, z])",
 "temp = (x.first(), y.first(), z.first())\n(a, b, c) = (temp[0], temp[1], temp[2])",
 "(a, *rest) = testing_tuple\nb = rest[0]\nc = rest[1]",
 "(*a_b, c) = testing_tuple\na = a_b[0]\nb = a_b[1]",
 "(a, b, c) = (dict_test['a'], dict_test['b'], dict_test['c'])",
 "elements = ['a', 'b', 'c']\n(a, b, c) = (dict_test[element] for element in elements)",
 "a = b = c = None\nfor key in dict_test:\n    if key == 'a':\n        a = dict_test[key]\n    elif key == 'b':\n        b = dict_test[key]\n    elif key == 'c':\n        c = dict_test[key]",
 "(a, b, c) = (x, y, z)\ndel x, y, z",
 "input_names = ['x', 'y', 'z']\noutput_names = ['a', 'b', 'c']\nfor i in range(len(input_names)):\n    output_names[i] = input_names[i]",
 "from operator import add, sub\na = add(0, x)\nb = add(0, y)\nc = add(0, z)",
 "a = float(x)\nb = float(y)\nc = float(z)",
 "(a, b, c) = map(float, (x, y, z))",
 "temp_values = init_values\na = b = c = d\na = temp_values[0]\nb = temp_values[1]\nc = temp_values[2]",
 "temp_list = [x, y, z]\niden_map = {0: a, 1: b, 2: c}\nfor i in range(len(temp_list)):\n    iden_map[i] = temp_list[i]",
 "def assigner(a, b, c):\n    (a, b, c)\na = b = c = None\n(x, y, z) = assigner(a, b, c)",
 "import operator\nbinary_op = operator.ne\na = None if binary_op(x, None) else x\nb = None if binary_op(y, None) else y\nc = None if binary_op(z, None) else z",
 "import operator\na = x if not operator.ne(x, None) else None\nb = y if not operator.ne(y, None) else None\nc = z if not operator.ne(z, None) else None",
 "import numpy as np\ndef default_helper(var, fallback=np.nan):\n    return var if bool(var) else fallback\na = default_helper(x, None)\nb = default_helper(y, None)\nc = default_helper(z, None)",
 "def default_helper(var):\n    if var or var == 0:\n        return var\n    else:\n        return None\na = default_helper(x)\nb = default_helper(y)\nc = default_helper(z)",
 "def default_helper(var):\n    return var or None\na = default_helper(x)\nb = default_helper(y)\nc = default_helper(z)",
 "fallback = None\ndefault_helper = lambda var: var if var else fallback\na = default_helper(x)\nb = default_helper(y)\nc = default_helper(z)",
 "import copy\na = copy.deepcopy(x)\nb = copy.deepcopy(y)\nc = copy.deepcopy(z)",
 "import numpy as np\n(a, b, c) = np.array([x, y, z]).tolist()",
 "import copy\na = copy.copy(x)\nb = copy.copy(y)\nc = copy.copy(z)",
 "import numpy as np\nvalues = np.array([x, y, z])\na = values[0]\nb = values[1]\nc = values[2]",
 "import copy\na = x.copy()\nb = y.copy()\nc = z.copy()",
 "import copy\nfrom copy import deepcopy\na = deepcopy(x)\nb = deepcopy(y)\nc = deepcopy(z)",
 "import copy\n(a, b, c) = map(copy.deepcopy, [x, y, z])",
 "import pickle\na = pickle.loads(pickle.dumps(x))\nb = pickle.loads(pickle.dumps(y))\nc = pickle.loads(pickle.dumps(z))",
 "from copy import deepcopy\n(a, b, c) = (deepcopy(x), deepcopy(y), deepcopy(z))",
 "a = [i for i in x]\nb = [i for i in y]\nc = [i for i in z]",
 "a = list(x)\nb = list(y)\nc = list(z)",
 "import numpy as np\ntemp = np.array([x, y, z])\na = temp.item(0)\nb = temp.item(1)\nc = temp.item(2)",
 "import copy\n(a, b, c) = copy.deepcopy([x, y, z])",
 "import numpy as np\narr = np.array([x, y, z])\n(a, b, c) = (arr[0], arr[1], arr[2])",
 "import numpy as np\narr = np.array([x, y, z])\nfor (i, val) in enumerate(arr):\n    if i == 0:\n        a = val\n    elif i == 1:\n        b = val\n    elif i == 2:\n        c = val",
 "import numpy as np\n(a, b, c) = list(np.array([x, y, z]))",
 "import numpy as np\nabc_list = np.array([x, y, z]).tolist()\na = abc_list[0]\nb = abc_list[1]\nc = abc_list[2]",
 "import copy\n(a, b, c) = (copy.copy(x), copy.copy(y), copy.copy(z))",
 "from copy import copy\na = copy(x)\nb = copy(y)\nc = copy(z)",
 "import copy\na = b = c = None\na = copy.copy(x)\nb = copy.copy(y)\nc = copy.copy(z)",
 "(a, b, c) = (x[:], y[:], z[:])",
 "import copy\na = copy.copy(x[:])\nb = copy.copy(y[:])\nc = copy.copy(z[:])",
 "(a, b, c) = (list(x), list(y), list(z))",
 "import numpy as np\n(a, b, c) = np.asarray([x, y, z])",
 "import numpy as np\nabc = np.array([x, y, z])\n(a, b, c) = abc",
 "import numpy as np\nabc = np.asarray([x, y, z])\n(a, b, c) = abc",
 "import numpy as np\nabc = np.asarray([x, y, z])\na = abc[0]\nb = abc[1]\nc = abc[2]",
 "import numpy as np\nvalues = np.array([x, y, z])\na = values.take(0)\nb = values.take(1)\nc = values.take(2)",
 "import numpy as np\nvalues = np.array([x, y, z])\na = np.take(values, 0)\nb = np.take(values, 1)\nc = np.take(values, 2)",
 "import numpy as np\nvalues = np.array([x, y, z])\na = values[np.argwhere(values == x)][0][0]\nb = values[np.argwhere(values == y)][0][0]\nc = values[np.argwhere(values == z)][0][0]",
 "import numpy as np\nvalues = np.array([x, y, z])\na = np.split(values, 3)[0]\nb = np.split(values, 3)[1]\nc = np.split(values, 3)[2]",
 "import numpy as np\nvalues = np.array([x, y, z])\n(a, b, c) = np.hsplit(values, 3)",
 "import numpy as np\n(a, b, c) = np.array([x, y, z]).flatten()",
 "import itertools\n(a, b, c) = next(itertools.izip_longest(*[[x, y, z]]))",
 "import itertools\n(a, b, c) = list(itertools.chain.from_iterable(itertools.repeat([x, y, z], 1)))",
 "map(lambda x, y: globals().__setitem__(x, y), ['a', 'b', 'c'], [x, y, z])",
 "import numpy as np\nnp_values = np.array([x, y, z])\nfor (i, value) in enumerate(np_values):\n    if i == 0:\n        a = value\n    if i == 1:\n        b = value\n    if i == 2:\n        c = value",
 "import numpy as np\na = np.array([x, y, z])[0]\nb = np.array([x, y, z])[1]\nc = np.array([x, y, z])[2]",
 "import numpy as np\nnp_values = np.array([x, y, z])\nvalues = list(np_values)\na = values[0]\nb = values[1]\nc = values[2]",
 "from numpy import array\n(a, b, c) = array([x, y, z])",
 "import numpy\n(a, b, c) = tuple(numpy.array([x, y, z]))",
 "import numpy as np\na = b = c = None\nvalues = [x, y, z]\nvalues = np.array(values)\na = values[0]\nb = values[1]\nc = values[2]",
 "a = temp[0] = x\nb = temp[1] = y\nc = temp[2] = z",
 "from functools import reduce\n(a, b, c) = reduce(lambda x, y: (x, y), [x, y, z])",
 "a = x[:]\nb = y[:]\nc = z[:]",
 "from copy import deepcopy as dp\na = dp(x)\nb = dp(y)\nc = dp(z)",
 "from copy import deepcopy\n(a, b, c) = map(deepcopy, [x, y, z])",
 "import copy\nfor i in ['x', 'y', 'z']:\n    globals()[i] = copy.deepcopy(globals()[i])",
 "from copy import deepcopy\nfor i in ['x', 'y', 'z']:\n    globals()[i] = deepcopy(globals()[i])",
 "import numpy as np\narr = np.array([x, y, z])\nfor i in range(len(arr)):\n    if i == 0:\n        a = arr[i]\n    elif i == 1:\n        b = arr[i]\n    elif i == 2:\n        c = arr[i]",
 "import numpy as np\narr = np.array([x, y, z])\n(a, b, c) = np.split(arr, 3)",
 "import numpy as np\nvalues = [x, y, z]\n(a, b, c) = np.array(values)",
 "import numpy as np\ntemp_list = np.array([x, y, z])\n(a, b, c) = [i for i in temp_list]",
 "import itertools\n(a, b, c) = next(itertools.islice([x, y, z], 3))",
 "import functools\n(a, b, c) = functools.reduce(lambda x, y: (x, y, z), [x, y, z])",
 "from itertools import accumulate\n(a, b, c) = list(accumulate([x, y, z], lambda a, b: (a, b)))[-1]",
 "import numpy as np\na = np.array(x, copy=True)\nb = np.array(y, copy=True)\nc = np.array(z, copy=True)",
 "import numpy as np\na = np.asarray(x).copy()\nb = np.asarray(y).copy()\nc = np.asarray(z).copy()",
 "import numpy as np\n(a, b, c) = map(np.copy, [x, y, z])",
 "import numpy as np\na = np.empty_like(x)\na[:] = x\nb = np.empty_like(y)\nb[:] = y\nc = np.empty_like(z)\nc[:] = z",
 "import numpy as np\na = np.array(x)\nb = np.array(y)\nc = np.array(z)",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\na = df['a'][0]\nb = df['b'][0]\nc = df['c'][0]",
 "import pandas as pd\ndf = pd.DataFrame([x, y, z])\n(a, b, c) = (df.iloc[0], df.iloc[1], df.iloc[2])",
 "import numpy as np\nvalues = np.array([x, y, z])\na = values[0]\nb = values.item(1)\nc = values.item(2)",
 "import numpy as np\nvalues = np.array([x, y, z])\na = values[np.where(values == x)][0]\nb = values[np.where(values == y)][0]\nc = values[np.where(values == z)][0]",
 "import numpy as np\nvalues = np.array([x, y, z])\na = next((i for i in values if i == x), None)\nb = next((i for i in values if i == y), None)\nc = next((i for i in values if i == z), None)",
 "import numpy as np\nvalues = np.array([x, y, z])\na = next((val for val in values if val == x))\nb = next((val for val in values if val == y))\nc = next((val for val in values if val == z))",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\n(a, b, c) = df.iloc[0]",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\na = df.loc[0, 'a']\nb = df.loc[0, 'b']\nc = df.loc[0, 'c']",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\nfor column in df.columns:\n    if column == 'a':\n        a = df[column][0]\n    elif column == 'b':\n        b = df[column][0]\n    elif column == 'c':\n        c = df[column][0]",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\n(a, b, c) = df.values[0]",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\n(a, b, c) = df.loc[0, ['a', 'b', 'c']]",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\na = df.at[0, 'a']\nb = df.at[0, 'b']\nc = df.at[0, 'c']",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\na = df.iloc[0]['a']\nb = df.iloc[0]['b']\nc = df.iloc[0]['c']",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\nfor (index, row) in df.iterrows():\n    a = row['a']\n    b = row['b']\n    c = row['c']",
 "import numpy as np\nabc = np.array([x, y, z])\nfor i in range(len(abc)):\n    if i == 0:\n        a = abc[i]\n    elif i == 1:\n        b = abc[i]\n    else:\n        c = abc[i]",
 "import numpy as np\na = b = c = None\n(a, b, c) = np.array([x, y, z])",
 "import pandas as pd\n(a, b, c) = pd.DataFrame([x, y, z]).values",
 "import pandas as pd\ndf = pd.DataFrame([x, y, z])\na = df.iloc[0]\nb = df.iloc[1]\nc = df.iloc[2]",
 "import pandas as pd\ndf = pd.DataFrame([x, y, z])\n(a, b, c) = (df.iloc[i] for i in range(3))",
 "import pandas as pd\ndf = pd.DataFrame([x, y, z])\n(a, b, c) = [df.iloc[i] for i in range(3)]",
 "import pandas as pd\ndf = pd.DataFrame([x, y, z])\n(a, b, c) = (df.loc[0], df.loc[1], df.loc[2])",
 "import pandas as pd\ndf = pd.DataFrame([x, y, z])\nfor i in range(len(df)):\n    if i == 0:\n        a = df.iloc[i]\n    elif i == 1:\n        b = df.iloc[i]\n    else:\n        c = df.iloc[i]",
 "import pandas as pd\ndf = pd.DataFrame([x, y, z])\nvalues = df.values\n(a, b, c) = (values[0], values[1], values[2])",
 "import numpy as np\ntemp = np.array([x, y, z])\n(a, b, c) = (temp[0], temp[1], temp[2])\ntemp = None",
 "import numpy as np\ntemp = np.array([x, y, z])\n(a, b, c) = temp\ntemp = np.array([])",
 "import copy\n(a, b, c) = (copy.deepcopy(x), copy.deepcopy(y), copy.deepcopy(z))",
 "import copy\nvariables = ['x', 'y', 'z']\nfor var in variables:\n    globals()[var] = copy.deepcopy(globals()[var])",
 "import copy\na = copy.deepcopy(x)\nb = copy.deepcopy(y)\nc = a if False else copy.deepcopy(z)",
 "import copy\na = copy.deepcopy(x)\nb = copy.deepcopy(y)\nc = copy.deepcopy(z) if True else None",
 "import numpy as np\narr = np.array([x, y, z])\na = np.asscalar(arr[0])\nb = np.asscalar(arr[1])\nc = np.asscalar(arr[2])",
 "import numpy as np\narr = np.array([x, y, z])\na = arr.flat[0]\nb = arr.flat[1]\nc = arr.flat[2]",
 "import numpy as np\narr = np.array([x, y, z])\na = arr.flatten()[0]\nb = arr.flatten()[1]\nc = arr.flatten()[2]",
 "import numpy as np\narr = np.array([x, y, z])\na = arr.ravel()[0]\nb = arr.ravel()[1]\nc = arr.ravel()[2]",
 "import numpy as np\n(a, b) = np.array([x, y])\nc = np.array(z)",
 "import pandas as pd\ndf = pd.DataFrame({'a': [x], 'b': [y], 'c': [z]})\n(a, b, c) = (df['a'][0], df['b'][0], df['c'][0])",
 "import copy\n(a, b) = copy.deepcopy((x, y))\nc = copy.deepcopy(z)",
 "temp = (x, y, z)\na = temp.pop(0)\nb = temp.pop(0)\nc = temp.pop(0)",
 "import numpy as np\n(a, b, c) = (np.array(x), np.array(y), np.array(z))",
 "import numpy as np\na = np.array(x, dtype=float)\nb = np.array(y, dtype=float)\nc = np.array(z, dtype=float)",
 "import numpy as np\na = np.array(x, dtype=np.float64)\nb = np.array(y, dtype=np.float64)\nc = np.array(z, dtype=np.float64)",
 "import numpy as np\na = np.array(x, dtype=None, copy=True, order='K', subok=False, ndmin=0)\nb = np.array(y, dtype=None, copy=True, order='K', subok=False, ndmin=0)\nc = np.array(z, dtype=None, copy=True, order='K', subok=False, ndmin=0)",
 "import numpy as np\na = np.array(x, dtype=None, order='K', subok=False, ndmin=0)\nb = np.array(y, dtype=None, order='K', subok=False, ndmin=0)\nc = np.array(z, dtype=None, order='K', subok=False, ndmin=0)",
 "import numpy as np\n(a, b, c) = map(np.array, [x, y, z])",
 "import numpy as np\na = np.asarray(x)\nb = np.asarray(y)\nc = np.asarray(z)",
 "import numpy as np\narrays = [x, y, z]\n(a, b, c) = [np.array(arr) for arr in arrays]",
 "import numpy as np\narrays = {'a': x, 'b': y, 'c': z}\nfor key in arrays:\n    globals()[key] = np.array(arrays[key])",
 "import numpy as np\na = np.array(x, order='C')\nb = np.array(y, order='C')\nc = np.array(z, order='C')",
 "import numpy as np\na = np.array(x, subok=True)\nb = np.array(y, subok=True)\nc = np.array(z, subok=True)",
 "import numpy as np\na = np.array(x)\na = np.copy(a)\nb = np.array(y)\nb = np.copy(b)\nc = np.array(z)\nc = np.copy(c)",
 "import numpy as np\na = np.array(x)\nb = np.array(y)\nc = np.array(z)\n(a, b, c) = map(np.copy, [a, b, c])",
 "import numpy as np\na = np.array(x)\nb = np.array(y)\nc = np.array(z)\na = a.copy()\nb = b.copy()\nc = c.copy()",
 "import numpy as np\narrays = [x, y, z]\n(a, b, c) = [np.asarray(arr).copy() for arr in arrays]",
 "import numpy as np\n(a, b, c) = map(lambda v: np.array(v, copy=True), [x, y, z])",
 "import numpy as np\na = np.array(x)\nb = np.array(y)\nc = np.array(z)\na[:] = x\nb[:] = y\nc[:] = z",
 "import numpy as np\na = np.array(x)\nb = np.array(y)\nc = np.array(z)\na = np.copy(a)\nb = np.copy(b)\nc = np.copy(c)",
 "import numpy as np\nfor i in [x, y, z]:\n    if i is x:\n        a = np.copy(i)\n    elif i is y:\n        b = np.copy(i)\n    else:\n        c = np.copy(i)",
 "import numpy as np\na = np.copy(x)\nb = np.copy(y)\nc = np.copy(z)\n(a, b, c) = (a, b, c)",
 "import numpy as np\nfor i in [x, y, z]:\n    (a, b, c) = map(np.copy, [i for i in [x, y, z]])",
 "import numpy as np\na = np.array(x)\na[:] = x\nb = np.array(y)\nb[:] = y\nc = np.array(z)\nc[:] = z",
 "(a, b, c) = map(lambda i: i.copy(), [x, y, z])",
 "import copy\nfor i in ['a', 'b', 'c']:\n    globals()[i] = copy.deepcopy(globals()[i.lower()])",
 "import copy\nvariables = ['x', 'y', 'z']\nfor (i, var) in enumerate(['a', 'b', 'c']):\n    globals()[var] = copy.deepcopy(globals()[variables[i]])"
]