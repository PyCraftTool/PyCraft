[
 "a = x\nb = y\nc = z",
 "(a, b, c) = (x, y, z)",
 "locals_value = dict(x=x, y=y, z=z)\n(a, b, c) = [locals_value[k] for k in ('x', 'y', 'z')]",
 "temp = (x, y, z)\n(a, b, c) = (temp[0], temp[1], temp[2])",
 "testing_tuple = (x, y, z)\na = testing_tuple[0]\nb = testing_tuple[1]\nc = testing_tuple[2]",
 "dict_test = {'a': x, 'b': y, 'c': z}\na = dict_test['a']\nb = dict_test['b']\nc = dict_test['c']",
 "(x, y, z) = (x, y, z)\na = x\nb = y\nc = z",
 "a = x\nb = y\nc = z\nif True:\n    pass",
 "temp_list = [x, y, z]\na = temp_list[0]\nb = temp_list[1]\nc = temp_list[2]",
 "assignment = lambda a, b, c: (a, b, c)\n(a, b, c) = assignment(x, y, z)",
 "tuple_assignment = lambda xy, z: (xy[0], xy[1], z)\n(a, b, c) = tuple_assignment((x, y), z)",
 "def default_helper(var, fallback):\n    return var if var is not None else fallback\na = default_helper(x, None)\nb = default_helper(y, None)\nc = default_helper(z, None)",
 "((a, b), c) = ((x, y), z)",
 "c = z\n(b, a) = (y, x)",
 "locals_value = dict(x=x, y=y, z=z)\na = locals_value['x']\nb = locals_value['y']\nc = locals_value['z']",
 "locals_value = dict(x=x, y=y, z=z)\nfor (i, k) in enumerate(['x', 'y', 'z']):\n    if i == 0:\n        a = locals_value[k]\n    elif i == 1:\n        b = locals_value[k]\n    else:\n        c = locals_value[k]",
 "from operator import itemgetter\nlocals_value = dict(x=x, y=y, z=z)\n(a, b, c) = itemgetter('x', 'y', 'z')(locals_value)",
 "locals_value = dict(x=x, y=y, z=z)\nvals_tuple = ('x', 'y', 'z')\na = locals_value[vals_tuple[0]]\nb = locals_value[vals_tuple[1]]\nc = locals_value[vals_tuple[2]]",
 "(a, *restvar, b, c) = [x, y, z]",
 "temp = list((x, y, z))\na = temp[0]\nb = temp[1]\nc = temp[2]",
 "import operator\n(a, b, c) = operator.itemgetter(0, 1, 2)((x, y, z))",
 "from itertools import repeat\n(a, b, c) = next(repeat((x, y, z)))",
 "dict_test = {'a': x, 'b': y, 'c': z}\n(a, b, c) = [dict_test[key] for key in ('a', 'b', 'c')]",
 "dict_test = {'a': x, 'b': y, 'c': z}\na = dict_test.get('a')\nb = dict_test.get('b')\nc = dict_test.get('c')",
 "dict_test = {'a': x, 'b': y, 'c': z}\na = dict_test['a'] if 'a' in dict_test else None\nb = dict_test['b'] if 'b' in dict_test else None\nc = dict_test['c'] if 'c' in dict_test else None",
 "dict_test = {'a': x, 'b': y, 'c': z}\nfor key in dict_test:\n    if key == 'a':\n        a = dict_test[key]\n    if key == 'b':\n        b = dict_test[key]\n    if key == 'c':\n        c = dict_test[key]",
 "dict_test = {'a': x, 'b': y, 'c': z}\ndict_keys = ['a', 'b', 'c']\nfor key in dict_keys:\n    vars()[key] = dict_test[key]",
 "(a, b, c) = (x, y, z)\nfor i in [a, b, c]:\n    i = i",
 "(a, b, c) = [i for i in [x, y, z]]",
 "values = [x, y, z]\n(a, b, c) = values",
 "temp_vars = [x, y, z]\n(a, b, c) = [temp_vars[index] for index in range(len(temp_vars))]",
 "import itertools\nvars = [x, y, z]\n(a, b, c) = list(itertools.chain(vars))",
 "(a, b, c) = list(map(lambda x: x, [x, y, z]))",
 "(a, b, c) = (n for n in [x, y, z])",
 "(a, b, c) = [v for v in (x, y, z)]",
 "temp_list = [x, y, z]\na = temp_list.pop(0)\nb = temp_list.pop(0)\nc = temp_list.pop(0)",
 "q = x\na = q\nq = y\nb = q\nq = z\nc = q\nif True:\n    pass",
 "if True:\n    pass\n(c, b, a) = (z, y, x)",
 "temp_tuple = (x, y, z)\n(a, b, c) = temp_tuple",
 "a = b = c = None\na = x\nb = y\nc = z",
 "a = [x, y, z][0]\nb = [x, y, z][1]\nc = [x, y, z][2]",
 "temp_dict = {'x': x, 'y': y, 'z': z}\na = temp_dict['x']\nb = temp_dict['y']\nc = temp_dict['z']",
 "from operator import itemgetter\n(a, b, c) = itemgetter(0, 1, 2)([x, y, z])",
 "def rearrange(x, y, z):\n    return (x, y, z)\n(a, b, c) = rearrange(x, y, z)",
 "mapping_list = list(map(lambda x: x, [x, y, z]))\na = mapping_list[0]\nb = mapping_list[1]\nc = mapping_list[2]",
 "(a, b, c) = [x, y, z]",
 "temp_list = [x, y, z]\na = temp_list[temp_list.index(x)]\nb = temp_list[temp_list.index(y)]\nc = temp_list[temp_list.index(z)]",
 "temp_list = [x, y, z]\nfor i in range(len(temp_list)):\n    if i == 0:\n        a = temp_list[i]\n    elif i == 1:\n        b = temp_list[i]\n    elif i == 2:\n        c = temp_list[i]",
 "def modify_variables(a, b, c):\n    return (a, b, c)\n(a, b, c) = modify_variables(x, y, z)",
 "t_assign = lambda xy, z: (xy[0], xy[1], z)\n(a, b, c) = t_assign((x, y), z)",
 "def x_fun(xy, z):\n    return (xy[0], xy[1], z)\n(a, b, c) = x_fun((x, y), z)",
 "def x_y_z(x_in_pair, z_in):\n    return (x_in_pair[0], x_in_pair[1], z_in)\n(a, b, c) = x_y_z((x, y), z)",
 "a = None if x == None else x\nb = None if y == None else y\nc = None if z == None else z",
 "a = x if x != None else None\nb = y if y != None else None\nc = z if z != None else None",
 "a = None\nb = None\nc = None\noperators_list = [x, y, z]\nfor op in operators_list:\n    if op != None:\n        if op == x:\n            a = x\n        elif op == y:\n            b = y\n        else:\n            c = z",
 "temp = (x, y)\nc = z\n(a, b) = temp",
 "temp = ((x, y), z)\n(a, b) = temp[0]\nc = temp[1]",
 "temp = ((x, y), z)\n((a, b), c) = temp",
 "((a, b), c) = ((x, y), z)\ntemp = (a, b, c)\na = temp[0]\nb = temp[1]\nc = temp[2]",
 "(a, b, c) = map(lambda x: x, [x, y, z])",
 "for (i, var) in enumerate([x, y, z]):\n    if i == 0:\n        a = var\n    elif i == 1:\n        b = var\n    elif i == 2:\n        c = var",
 "def assign_values(v1, v2, v3):\n    return (v1, v2, v3)\n(a, b, c) = assign_values(x, y, z)",
 "values = {'x': x, 'y': y, 'z': z}\na = values.get('x')\nb = values.get('y')\nc = values.get('z')",
 "import pandas as pd\nvalues = pd.Series([x, y, z], index=['a', 'b', 'c'])\na = values['a']\nb = values['b']\nc = values['c']",
 "import itertools\n(a, b, c) = list(itertools.chain.from_iterable([[x, y, z]]))",
 "def assign_values(values):\n    return values\n(a, b, c) = assign_values([x, y, z])",
 "[a, b, c] = [element for element in (x, y, z)]",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[-1]",
 "temp = [x, y, z]\nfor (index, val) in enumerate(temp):\n    if index == 0:\n        a = val\n    elif index == 1:\n        b = val\n    else:\n        c = val",
 "temp = [x, y, z]\n(a, b, c) = (temp[0], temp[1], temp[2])",
 "temp = [x, y, z]\na = temp[0]\nb = temp[0 + 1]\nc = temp[0 + 1 + 1]",
 "temp = [x, y, z]\na = temp[::3][0]\nb = temp[1::3][0]\nc = temp[2::3][0]",
 "temp = [x, y, z]\nfor (i, val) in enumerate(temp):\n    if i == 0:\n        a = val\n    elif i == 1:\n        b = val\n    elif i == 2:\n        c = val",
 "temp_dict = {0: x, 1: y, 2: z}\na = temp_dict[0]\nb = temp_dict[1]\nc = temp_dict[2]",
 "temp_dict = dict(enumerate([x, y, z]))\na = temp_dict[0]\nb = temp_dict[1]\nc = temp_dict[2]",
 "mapping = {0: 'a', 1: 'b', 2: 'c'}\nfor (i, var) in enumerate([x, y, z]):\n    globals()[mapping[i]] = var",
 "def assign_vars(vars):\n    for (i, var) in enumerate(vars):\n        if i == 0:\n            a = var\n        elif i == 1:\n            b = var\n        elif i == 2:\n            c = var\n    return (a, b, c)\n(a, b, c) = assign_vars([x, y, z])",
 "i = 0\nfor var in [x, y, z]:\n    if i == 0:\n        a = var\n    elif i == 1:\n        b = var\n    elif i == 2:\n        c = var\n    i += 1",
 "def assign_values(v1, v2, v3):\n    temp = (v1, v2, v3)\n    return temp\n(a, b, c) = assign_values(x, y, z)",
 "def assign_values(v1, v2, v3):\n    return [v1, v2, v3]\n(a, b, c) = assign_values(x, y, z)",
 "def assign_values(v1, v2, v3):\n    return (v1, v2, v3)\nvalues = assign_values(x, y, z)\n(a, b, c) = values",
 "assign_values = lambda v1, v2, v3: (v1, v2, v3)\n(a, b, c) = assign_values(x, y, z)",
 "def assign_values(v1, v2, v3):\n    return (v1, v2, v3)\nassign_values_list = assign_values(x, y, z)\na = assign_values_list[0]\nb = assign_values_list[1]\nc = assign_values_list[2]",
 "def assign_values(v1, v2, v3):\n    a = v1\n    b = v2\n    c = v3\n    return (a, b, c)\n(a, b, c) = assign_values(x, y, z)",
 "def assign_values(v1, v2, v3):\n    (a, b, c) = (v1, v2, v3)\n    return (a, b, c)\n(a, b, c) = assign_values(x, y, z)",
 "def assign_values(v1, v2, v3):\n    return dict(a=v1, b=v2, c=v3)\nassign_values_dict = assign_values(x, y, z)\na = assign_values_dict['a']\nb = assign_values_dict['b']\nc = assign_values_dict['c']",
 "def assign_values(v1, v2, v3):\n    return {'a': v1, 'b': v2, 'c': v3}\nassign_values_dict = assign_values(x, y, z)\na = assign_values_dict.get('a')\nb = assign_values_dict.get('b')\nc = assign_values_dict.get('c')",
 "def assign_values(v1, v2, v3):\n    return [v1, v2, v3]\nassign_values_list = assign_values(x, y, z)\n(a, b, c) = (assign_values_list[0], assign_values_list[1], assign_values_list[2])",
 "mapping = {'a': x, 'b': y, 'c': z}\n(a, b, c) = (mapping['a'], mapping['b'], mapping['c'])",
 "mapping = {'a': x, 'b': y, 'c': z}\nfor key in mapping:\n    if key == 'a':\n        a = mapping[key]\n    elif key == 'b':\n        b = mapping[key]\n    elif key == 'c':\n        c = mapping[key]",
 "mapping = {'a': x, 'b': y, 'c': z}\nvalues = list(mapping.values())\n(a, b, c) = (values[0], values[1], values[2])",
 "mapping = {'a': x, 'b': y, 'c': z}\na = mapping.pop('a')\nb = mapping.pop('b')\nc = mapping.pop('c')",
 "mapping = {'a': x, 'b': y, 'c': z}\nfor (key, value) in mapping.items():\n    if key == 'a':\n        a = value\n    elif key == 'b':\n        b = value\n    elif key == 'c':\n        c = value",
 "values = {'x': x, 'y': y, 'z': z}\n(a, b, c) = (values['x'], values['y'], values['z'])",
 "values = {'x': x, 'y': y, 'z': z}\nfor key in values:\n    if key == 'x':\n        a = values[key]\n    elif key == 'y':\n        b = values[key]\n    elif key == 'z':\n        c = values[key]",
 "values = {'x': x, 'y': y, 'z': z}\n(a, b, c) = map(values.get, ('x', 'y', 'z'))",
 "values = {'x': x, 'y': y, 'z': z}\n(a, b, c) = map(values.get, ['x', 'y', 'z'])",
 "values = {'x': x, 'y': y, 'z': z}\n(a, b, c) = (values.get(key) for key in ('x', 'y', 'z'))",
 "values = {'x': x, 'y': y, 'z': z}\nfor key in ('x', 'y', 'z'):\n    if key == 'x':\n        a = values.get(key)\n    elif key == 'y':\n        b = values.get(key)\n    elif key == 'z':\n        c = values.get(key)",
 "values = {'x': x, 'y': y, 'z': z}\nkeys = ('x', 'y', 'z')\na = values.get(keys[0])\nb = values.get(keys[1])\nc = values.get(keys[2])",
 "values = {'x': x, 'y': y, 'z': z}\nkeys = ('x', 'y', 'z')\nresults = [values.get(key) for key in keys]\na = results[0]\nb = results[1]\nc = results[2]",
 "values = [x, y, z]\nkeys = ['a', 'b', 'c']\ndictionary = dict(zip(keys, values))\na = dictionary['a']\nb = dictionary['b']\nc = dictionary['c']",
 "temp_tuple = (x, y, z)\nfor (i, value) in enumerate(temp_tuple):\n    if i == 0:\n        a = value\n    elif i == 1:\n        b = value\n    elif i == 2:\n        c = value",
 "temp_tuple = (x, y, z)\nfor i in range(len(temp_tuple)):\n    if i == 0:\n        a = temp_tuple[i]\n    elif i == 1:\n        b = temp_tuple[i]\n    else:\n        c = temp_tuple[i]",
 "import itertools\n(a, b, c) = list(itertools.chain(*[[x, y, z]]))",
 "import operator\n(a, b, c) = operator.itemgetter(0, 1, 2)([x, y, z])",
 "(a, b, c) = ([x, y, z][i] for i in range(3))",
 "import functools\n(a, b, c) = functools.reduce(lambda x, y: x + [y], [x, y, z], [])",
 "import itertools\nabc = list(itertools.chain.from_iterable([[x, y, z]]))\n(a, b, c) = (abc[0], abc[1], abc[2])",
 "import itertools\nabc = list(itertools.chain(*[[x, y, z]]))\n(a, b, c) = (abc[0], abc[1], abc[2])",
 "[a, b, c] = [x, y, z]",
 "variables = ['a', 'b', 'c']\nvalues = [x, y, z]\nfor v in range(len(variables)):\n    globals()[variables[v]] = values[v]",
 "def assign_values():\n    global a, b, c\n    a = x\n    b = y\n    c = z\nassign_values()",
 "values = [x, y, z]\n(a, b, c) = map(lambda value: value, values)",
 "(a, b, c) = list(map(lambda v: v, [x, y, z]))",
 "a = x\n\ndef assign():\n    global b, c\n    b = y\n    c = z\nassign()",
 "vars = [x, y, z]\n(a, b, c) = [var for var in vars]",
 "def assign_values():\n    return (x, y, z)\n(a, b, c) = assign_values()",
 "a = b = c = None\nvalues = [x, y, z]\nfor (index, value) in enumerate(values):\n    if index == 0:\n        a = value\n    elif index == 1:\n        b = value\n    else:\n        c = value",
 "a = b = c = None\n(a, b, c) = (x, y, z)",
 "from itertools import repeat\n(a, b, c) = repeat(None, 3)\n(a, b, c) = (x, y, z)",
 "(a, b, c) = map(lambda _: None, range(3))\n(a, b, c) = (x, y, z)",
 "(a, b, c) = (None for _ in range(3))\n(a, b, c) = (x, y, z)",
 "abclist = [None] * 3\n(a, b, c) = abclist\n(a, b, c) = (x, y, z)",
 "variables = ['a', 'b', 'c']\nfor var in variables:\n    locals()[var] = None\n(a, b, c) = (x, y, z)",
 "def initialize_variables():\n    global a, b, c\n    a = b = c = None\ninitialize_variables()\n(a, b, c) = (x, y, z)",
 "values = (x, y, z)\n(a, *rest) = values\n(b, c) = rest",
 "[a, b, c] = list((x, y, z))",
 "arrays = list(zip(['a', 'b', 'c'], [x, y, z]))\nfor (key, value) in arrays:\n    globals()[key] = value",
 "for (variable, value) in zip(['a', 'b', 'c'], [x, y, z]):\n    globals()[variable] = value",
 "vars_tuples = [('a', x), ('b', y), ('c', z)]\nfor (var, val) in vars_tuples:\n    globals()[var] = val",
 "vars_to_set = dict(zip(['a', 'b', 'c'], [x, y, z]))\nfor (var, val) in vars_to_set.items():\n    globals()[var] = val",
 "variables = ['a', 'b', 'c']\nvalues = [x, y, z]\nfor (v, var) in enumerate(variables):\n    globals()[var] = values[v]",
 "variables = ['a', 'b', 'c']\nvalues = [x, y, z]\nfor i in range(3):\n    globals()[variables[i]] = values[i]",
 "import itertools\nvariables = ['a', 'b', 'c']\nvalues = [x, y, z]\nfor (var, val) in itertools.zip_longest(variables, values):\n    globals()[var] = val",
 "variables = ['a', 'b', 'c']\nvalues = [x, y, z]\nfor i in range(len(variables)):\n    exec(f'{variables[i]} = values[i]')",
 "variables = ['a', 'b', 'c']\nvalues = [x, y, z]\nvar_val_pairs = zip(variables, values)\nfor (var, val) in var_val_pairs:\n    globals()[var] = val",
 "variables = ['a', 'b', 'c']\nvalues = [x, y, z]\nglobals().update(dict(zip(variables, values)))",
 "temp = {'a': x, 'b': y, 'c': z}\nfor key in temp:\n    if key == 'a':\n        a = temp[key]\n    elif key == 'b':\n        b = temp[key]\n    else:\n        c = temp[key]",
 "temp = {'a': x, 'b': y, 'c': z}\n(a, b, c) = map(temp.get, ['a', 'b', 'c'])",
 "temp = {'a': x, 'b': y, 'c': z}\nfor key in temp.keys():\n    if key == 'a':\n        a = temp[key]\n    elif key == 'b':\n        b = temp[key]\n    elif key == 'c':\n        c = temp[key]",
 "for (i, v) in enumerate([x, y, z]):\n    if i == 0:\n        a = v\n    elif i == 1:\n        b = v\n    else:\n        c = v",
 "def assign_values(given_values):\n    global a, b, c\n    (a, b, c) = given_values\nassign_values([x, y, z])",
 "from itertools import cycle\nnp_values = [x, y, z]\na = np_values[next(iter(cycle([0, 1, 2])))]\nb = np_values[next(iter(cycle([1, 2, 0])))]\nc = np_values[next(iter(cycle([2, 0, 1])))]",
 "np_values = []\nnp_values.extend([x, y, z])\n(a, b, c) = np_values",
 "values = [x, y, z]\nfor i in range(len(values)):\n    if i == 0:\n        a = values[i]\n    elif i == 1:\n        b = values[i]\n    else:\n        c = values[i]",
 "values = [x, y, z]\ni = 0\na = values[i]\ni += 1\nb = values[i]\ni += 1\nc = values[i]",
 "from itertools import cycle, islice\nvalues = [x, y, z]\nvalues_cycle = cycle(values)\n(a, b, c) = list(islice(values_cycle, 3))",
 "temp_list = [x, y, z]\n(a, b, c) = [temp_list[0], temp_list[1], temp_list[2]]",
 "temp_list = list()\ntemp_list.append(x)\ntemp_list.append(y)\ntemp_list.append(z)\n(a, b, c) = temp_list",
 "temp_list = [x, y, z]\nfor (i, j) in enumerate(['a', 'b', 'c']):\n    locals()[j] = temp_list[i]",
 "from collections import deque\ntemp_list = [x, y, z]\nd = deque(temp_list)\na = d.popleft()\nb = d.popleft()\nc = d.popleft()",
 "temp_list = [x, y, z]\n\ndef unpack():\n    return temp_list\n(a, b, c) = unpack()",
 "import itertools\nabc = itertools.cycle([x, y, z])\na = next(abc)\nb = next(abc)\nc = next(abc)",
 "import operator\ntemp_tuple = (x, y, z)\n(a, b, c) = operator.itemgetter(0, 1, 2)(temp_tuple)",
 "import pandas as pd\n(a, b, c) = pd.Series([x, y, z])",
 "a = x\n\ndef assign(y, z):\n    return (y, z)\n(b, c) = assign(y, z)",
 "a = x\n(b, c) = (lambda y, z: (y, z))(y, z)",
 "globals().update({'a': x, 'b': y, 'c': z})",
 "a = x\nb = y\n\ndef assign():\n    global c\n    c = z\nassign()",
 "vars = [x, y, z]\nlist1 = vars\na = list1.pop(0)\nb = list1.pop(0)\nc = list1.pop(0)",
 "def assign_values():\n    val = (x, y, z)\n    return val\n(a, b, c) = assign_values()",
 "assign_values = lambda : (x, y, z)\n(a, b, c) = assign_values()",
 "def assign_values():\n    global a, b, c\n    (a, b, c) = (x, y, z)\nassign_values()",
 "def assign_values():\n    (a, b, c) = (x, y, z)\n    return (a, b, c)\n(a, b, c) = assign_values()",
 "def assign_values():\n    return (x, y, z)\nresult = assign_values()\na = result[0]\nb = result[1]\nc = result[2]",
 "def assign_values():\n    return (x, y, z)\nresult = list(assign_values())\n(a, b, c) = (result[0], result[1], result[2])",
 "def assign_values():\n    return {'a': x, 'b': y, 'c': z}\nabc_dict = assign_values()\na = abc_dict['a']\nb = abc_dict['b']\nc = abc_dict['c']",
 "temp_list = [x, y, z]\n(a, _, _) = temp_list\n(_, b, _) = temp_list\n(_, _, c) = temp_list",
 "a = b = c = None\nvalues = [x, y, z]\nfor index in range(len(values)):\n    if index == 0:\n        a = values[index]\n    elif index == 1:\n        b = values[index]\n    else:\n        c = values[index]",
 "(a, b, c) = (None, None, None)\nvalues = [x, y, z]\nfor (index, value) in enumerate(values):\n    if index == 0:\n        a = value\n    elif index == 1:\n        b = value\n    elif index == 2:\n        c = value",
 "a = b = c = None\nvalues = [x, y, z]\niterator = iter(values)\na = next(iterator)\nb = next(iterator)\nc = next(iterator)",
 "(a, b, c) = (None, None, None)\nvalues = [x, y, z]\n(a, b, c) = (values[0], values[1], values[2])",
 "(a, b, c) = [None] * 3\nvalues = [x, y, z]\n(a, b, c) = values",
 "(a, b, c) = (lambda x, y, z: (x, y, z))(x, y, z)",
 "import itertools\n(a, b, c) = next(itertools.permutations([x, y, z], 3))",
 "temp = (x, y, z)\n(a, _, _) = temp\n(_, b, _) = temp\n(_, _, c) = temp",
 "temp = (x, y, z)\na = temp[temp.index(x)]\nb = temp[temp.index(y)]\nc = temp[temp.index(z)]",
 "temp = (x, y, z)\nfor (i, val) in enumerate(temp):\n    if i == 0:\n        a = val\n    elif i == 1:\n        b = val\n    else:\n        c = val",
 "temp = (x, y, z)\nfor i in range(3):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    elif i == 2:\n        c = temp[i]",
 "mapping = {'a': x, 'b': y, 'c': z}\na = b = c = None\nfor key in mapping:\n    if key == 'a':\n        a = mapping[key]\n    elif key == 'b':\n        b = mapping[key]\n    elif key == 'c':\n        c = mapping[key]",
 "def assign_values(*args):\n    return args\n(a, b, c) = assign_values(x, y, z)",
 "def assign_values(x, y, z):\n    return dict(a=x, b=y, c=z)\nresult = assign_values(x, y, z)\na = result['a']\nb = result['b']\nc = result['c']",
 "def assign_values(x, y, z):\n    return [x, y, z]\nvalues = assign_values(x, y, z)\na = values[0]\nb = values[1]\nc = values[2]",
 "def assign_values(x, y, z):\n    return {'a': x, 'b': y, 'c': z}\nresult = assign_values(x, y, z)\na = result.get('a')\nb = result.get('b')\nc = result.get('c')",
 "def assign_values(x, y, z):\n    return {'a': x, 'b': y, 'c': z}\nresult = assign_values(x, y, z)\n(a, b, c) = (result['a'], result['b'], result['c'])",
 "def assign_values(x, y, z):\n    return (x, y, z)\nresult = assign_values(x, y, z)\na = result[0]\nb = result[1]\nc = result[2]",
 "def assign_values(x, y, z):\n    return [x, y, z]\n(a, b, c) = assign_values(x, y, z)",
 "def assign_values(x, y, z):\n    output = (x, y, z)\n    return output\n(a, b, c) = assign_values(x, y, z)",
 "temp = [x, y, z]\n(a, *b, c) = temp\nb = b[0]",
 "temp = [x, y, z]\ni = 0\nwhile i < len(temp):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    else:\n        c = temp[i]\n    i += 1",
 "(a, b, c) = (x, y, z)\ntemp = [a, b, c]",
 "temp = []\ntemp.append(x)\ntemp.append(y)\ntemp.append(z)\n(a, b, c) = temp",
 "temp = [None] * 3\ntemp[0] = x\ntemp[1] = y\ntemp[2] = z\n(a, b, c) = temp",
 "temp = list()\ntemp.extend([x, y, z])\n(a, b, c) = temp",
 "temp = [None, None, None]\nfor (i, val) in enumerate([x, y, z]):\n    temp[i] = val\n(a, b, c) = temp",
 "temp = [x for x in (x, y, z)]\n(a, b, c) = temp",
 "values = [x, y, z]\ntemp = [values[i] for i in range(len(values))]\n(a, b, c) = temp",
 "temp = [x for _ in range(3)]\ntemp[0] = x\ntemp[1] = y\ntemp[2] = z\n(a, b, c) = temp",
 "temp = [None] * 3\na = temp[0] = x\nb = temp[1] = y\nc = temp[2] = z",
 "temp_list = [x, y, z]\n(a, b, c) = list(map(lambda x: x, temp_list))",
 "temp = [x, y, z]\na = temp[0] if 0 < len(temp) else None\nb = temp[1] if 1 < len(temp) else None\nc = temp[2] if 2 < len(temp) else None",
 "from operator import itemgetter\ntemp = [x, y, z]\n(a, b, c) = itemgetter(0, 1, 2)(temp)",
 "(a, b, c) = (x for x in (x, y, z))",
 "import itertools\n(a, b, c) = next(itertools.permutations((x, y, z), 3))",
 "import itertools\n(a, b, c) = list(itertools.permutations([x, y, z], 3))[0]",
 "import itertools\nperm_gen = itertools.permutations([x, y, z], 3)\n(a, b, c) = next(perm_gen)",
 "import itertools\nfor perm in itertools.permutations([x, y, z], 3):\n    (a, b, c) = perm\n    break",
 "from itertools import permutations\n(a, b, c) = next(permutations([x, y, z], 3))",
 "from itertools import permutations\nperm = permutations([x, y, z], 3)\n(a, b, c) = next(perm)",
 "import itertools\n(a, b, c) = list(itertools.islice([x, y, z], 3))",
 "temp = [x, y, z]\n(a, b, c) = temp[0:3]",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[2]\ndel temp",
 "(a, b, c) = list((x, y, z))",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[2]\ntemp = None",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[2]\ntemp.clear()",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[2]\ntemp = []",
 "temp = [x, y, z]\na = temp.pop(0)\nb = temp.pop(0)\nc = temp.pop(0)\ntemp = []",
 "temp = [x, y, z]\n(a, b, c) = (temp[0], temp[1], temp[2])\ntemp = []",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[2]\ntemp = [''] * len(temp)",
 "temp = {'a': x, 'b': y, 'c': z}\n(a, b, c) = [temp[i] for i in ['a', 'b', 'c']]",
 "temp = {'a': x, 'b': y, 'c': z}\n(a, b, c) = temp.values()",
 "def assign_values(a, b, c):\n    return [a, b, c]\n[a, b, c] = assign_values(x, y, z)",
 "def assign_values(a, b, c):\n    return {'a': a, 'b': b, 'c': c}\nresult = assign_values(x, y, z)\na = result['a']\nb = result['b']\nc = result['c']",
 "def assign_values(a, b, c):\n    return {'first': a, 'second': b, 'third': c}\nresult = assign_values(x, y, z)\na = result['first']\nb = result['second']\nc = result['third']",
 "def assign_values(**kwargs):\n    return kwargs\nresult = assign_values(a=x, b=y, c=z)\na = result['a']\nb = result['b']\nc = result['c']",
 "def assign_values(a, b, c):\n    return {'a': a, 'b': b, 'c': c}\nvalues = assign_values(x, y, z)\n(a, b, c) = (values['a'], values['b'], values['c'])",
 "def assign_values(a, b, c):\n    return dict(a=a, b=b, c=c)\nvalues = assign_values(x, y, z)\na = values.get('a')\nb = values.get('b')\nc = values.get('c')",
 "temp = [x, y, z]\n(a, b, c) = (temp[i] for i in range(len(temp)))",
 "temp = [x, y, z]\n(a, b, c) = map(lambda x: x, temp)",
 "temp = [x, y, z]\n(a, *rest) = temp\n(b, c) = rest",
 "a = b = c = None\nvalues = [x, y, z]\nfor (i, value) in enumerate(values):\n    if i == 0:\n        a = value\n    elif i == 1:\n        b = value\n    elif i == 2:\n        c = value",
 "a = b = c = None\nvalues = [x, y, z]\na = values[0]\nb = values[1]\nc = values[2]",
 "a = b = c = None\nvalues = {'a': x, 'b': y, 'c': z}\na = values['a']\nb = values['b']\nc = values['c']",
 "temp = (x, y, z)\nfor i in range(len(temp)):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    elif i == 2:\n        c = temp[i]",
 "temp = (x, y, z)\n(a, b, c) = (temp[i] for i in range(len(temp)))",
 "temp = [x, y, z]\nfor i in range(3):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    else:\n        c = temp[i]",
 "temp = [x, y, z]\nfor (i, value) in enumerate(temp):\n    if i == 0:\n        a = value\n    elif i == 1:\n        b = value\n    elif i == 2:\n        c = value\n    else:\n        pass",
 "temp = [x, y, z]\n(a, b, c) = (temp[0], temp[1], temp[2])\ndel temp",
 "temp = [x, y, z]\nfor i in range(len(temp)):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    elif i == 2:\n        c = temp[i]\ndel temp",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[2]\ntemp[:] = []",
 "(a, b, c) = [x, y, z]\ntemp = None",
 "temp = [x, y, z]\n(a, b, c) = temp\ntemp = None",
 "temp = [x, y, z]\na = temp.pop(0)\nb = temp.pop(0)\nc = temp.pop(0)\ntemp = None",
 "temp = [x, y, z]\nfor i in range(len(temp)):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    elif i == 2:\n        c = temp[i]\ntemp = None",
 "temp = [x, y, z]\n(a, b, c) = (temp[0], temp[1], temp[2])\ntemp = None",
 "(a, b, c) = [x, y, z]\ntemp = []",
 "temp = [x, y, z]\nfor i in range(len(temp)):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    else:\n        c = temp[i]\ntemp = []",
 "temp = [x, y, z]\n(a, b, c) = temp\ntemp.clear()",
 "temp = [x, y, z]\na = temp[0]\nb = temp[1]\nc = temp[2]\ndel temp[:]",
 "temp = [x, y, z]\n(a, b, c) = (temp[0], temp[1], temp[2])\ntemp.clear()",
 "temp = [x, y, z]\n(a, b, c) = temp\ntemp = []",
 "temp = [x, y, z]\nfor i in range(len(temp)):\n    if i == 0:\n        a = temp[i]\n    elif i == 1:\n        b = temp[i]\n    elif i == 2:\n        c = temp[i]\ntemp = []",
 "(a, b) = (x, y)\nc = z",
 "temp = [x, y, z]\na = temp[0]\ndel temp[0]\nb = temp[0]\ndel temp[0]\nc = temp[0]",
 "temp = {'a': x, 'b': y, 'c': z}\n(a, b, c) = [temp[i] for i in temp]",
 "temp = (x, y, z)\na = temp[0]\nb = temp[1]\nc = temp[-1]",
 "temp = (x, y, z)\n(a, b, c) = map(lambda x: x, temp)",
 "temp = [x, y]\n(a, b) = (temp[0], temp[1])\nc = z",
 "import itertools\n(a, b) = itertools.islice([x, y], 2)\nc = z",
 "import operator\n(a, b) = operator.itemgetter(0, 1)([x, y])\nc = z",
 "temp = [x, y]\n(a, b) = temp\nc = z",
 "temp1 = x\ntemp2 = y\n(a, b) = (temp1, temp2)\nc = z",
 "temp = {'a': x, 'b': y}\n(a, b) = (temp['a'], temp['b'])\nc = z",
 "temp = (x, y)\n(a, b) = temp\nc = z",
 "temp = (x, y, z)\na = temp[0]\nb = temp.__getitem__(1)\nc = temp.__getitem__(2)",
 "temp = (x, y, z)\n(a, b, c) = list(temp)",
 "temp = (x, y, z)\n(a, b, c) = [i for i in temp]",
 "temp = (x, y, z)\na = temp.__getitem__(0)\nb = temp.__getitem__(1)\nc = temp.__getitem__(2)",
 "temp = (x, y, z)\n(a, b, c) = [temp[i] for i in range(len(temp))]",
 "temp = [x, y, z]\n(a, b, c) = (temp.pop(0), temp.pop(0), temp.pop(0))",
 "temp = [x, y, z]\n(a, b, c) = [temp[i] for i in range(3)]"
]