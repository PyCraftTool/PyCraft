[
 "import numpy as np\nresult = arr1.dot(arr2).dot(arr3)",
 "import numpy as np\nresult = arr1 @ arr2 @ arr3",
 "import numpy as np\narr12 = arr1 @ arr2\nresult = arr12 @ arr3",
 "from scipy.linalg import multi_dot\nresult = multi_dot([arr1, arr2, arr3])",
 "from functools import reduce\ntemp = reduce(lambda x, y: x * y, arr1 * arr2, 1)\nresult = arr3.dot(temp)",
 "def dot_3(arr1, arr2, arr3):\n    arr12 = [arr1[i] * arr2[i] for i in range(len(arr1))]\n    return sum([arr12[i] * arr3[i] for i in range(len(arr12))])\nresult = dot_3(arr1, arr2, arr3)",
 "def multiply(arr1, arr2):\n    return [a * b for (a, b) in zip(arr1, arr2)]\ninter = multiply(arr1, arr2)\nresult = sum(multiply(inter, arr3))",
 "import numpy as np\narr_mul = arr1.dot(arr2)\nresult = arr_mul.dot(arr3)",
 "import numpy as np\na = arr1\nb = arr2\nc = arr3\nresult = a.dot(b).dot(c)",
 "import numpy as np\nmatrix_products = arr1 @ arr2 @ arr3\nresult = matrix_products",
 "import operator\nimport numpy as np\nresult = arr1\nfor arr in [arr2, arr3]:\n    result = operator.matmul(result, arr)",
 "from numpy.core.multiarray import dot\nresult = dot(dot(arr1, arr2), arr3)",
 "from scipy import linalg\nresult = linalg.multi_dot([arr1, arr2, arr3])",
 "import operator\nimport functools\nresult = functools.reduce(operator.matmul, MatrixArray)",
 "from sympy import Matrix\narr1 = Matrix(arr1)\narr2 = Matrix(arr2)\narr3 = Matrix(arr3)\nresult = arr1 * arr2 * arr3",
 "result = sum((a * b * c for (a, b, c) in zip(arr1, arr2, arr3)))",
 "import functools\nresult = functools.reduce(lambda x, y: x + y[0] * y[1] * y[2], zip(arr1, arr2, arr3), 0)",
 "import operator\nresult = sum(map(operator.mul, arr1, map(operator.mul, arr2, arr3)))",
 "result = 0\nfor (a, b, c) in zip(arr1, arr2, arr3):\n    result += a * b * c",
 "result = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i] * arr3[i]",
 "import functools\nimport operator\nresult = functools.reduce(operator.mul, arr1 * arr2 * arr3)",
 "import math\nresult = math.prod([a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "from operator import mul\nfrom functools import reduce\ntemp = list(map(mul, arr1, arr2))\nresult = reduce(lambda a, b: a + b, map(mul, temp, arr3))",
 "temp = [x * y for (x, y) in zip(arr1, arr2)]\nresult = sum((x * y for (x, y) in zip(temp, arr3)))",
 "def dot_3(arr1, arr2, arr3):\n    result = 0\n    for i in range(len(arr1)):\n        result += arr1[i] * arr2[i] * arr3[i]\n    return result\nresult = dot_3(arr1, arr2, arr3)",
 "def dot_3(arr1, arr2, arr3):\n    arr12 = list(map(lambda x, y: x * y, arr1, arr2))\n    return sum(list(map(lambda z, w: z * w, arr12, arr3)))\nresult = dot_3(arr1, arr2, arr3)",
 "def dot_3(arr1, arr2, arr3):\n    return sum((arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))))\nresult = dot_3(arr1, arr2, arr3)",
 "from functools import reduce\nimport operator\ndef dot_3(arr1, arr2, arr3):\n    arr12 = list(map(operator.mul, arr1, arr2))\n    return reduce(operator.add, map(operator.mul, arr12, arr3))\nresult = dot_3(arr1, arr2, arr3)",
 "result = sum((arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))))",
 "(result, idx) = (0, 0)\nwhile idx < len(arr1):\n    result += arr1[idx] * arr2[idx] * arr3[idx]\n    idx += 1",
 "from functools import reduce\nresult = reduce(lambda a, b: a + b, [arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))])",
 "arr12 = list(map(lambda a, b: a * b, arr1, arr2))\nresult = sum(list(map(lambda a, b: a * b, arr12, arr3)))",
 "import functools\nresult = sum([functools.reduce(lambda x, y: x * y, z) for z in zip(arr1, arr2, arr3)])",
 "result = 0\nfor a1 in arr1:\n    for a2 in arr2:\n        inter = a1 * a2\n        for a3 in arr3:\n            result += inter * a3",
 "inter = list(map(lambda a1, a2: a1 * a2, arr1, arr2))\nresult = sum((num * a3 for num in inter for a3 in arr3))",
 "inter = list(map(lambda x, y: x * y, arr1, arr2))\nresult = sum(list(map(lambda x, y: x * y, inter, arr3)))",
 "from operator import mul\ndef multipler(x, y):\n    return list(map(mul, x, y))\ninter = multipler(arr1, arr2)\nresult = sum(multipler(inter, arr3))",
 "from functools import reduce\nimport operator\ninter = [a * b for (a, b) in zip(arr1, arr2)]\nresult = reduce(operator.add, [a * b for (a, b) in zip(inter, arr3)])",
 "from functools import reduce\nimport operator\nmultiply = lambda x, y: x * y\ninproduct = reduce(multiply, [arr1, arr2])\nresult = reduce(multiply, [inproduct, arr3])",
 "import functools\nimport operator\nintermediate = functools.reduce(operator.mul, arr1, arr2)\nresult = functools.reduce(operator.mul, intermediate, arr3)",
 "import numpy as np\nresult = arr1 @ (arr2 @ arr3)",
 "import functools\nimport operator\nresult = functools.reduce(operator.matmul, [arr1, arr2, arr3])",
 "from scipy.linalg import blas\nresult = blas.dgemm(alpha=1.0, a=arr1, b=arr2)\nresult = blas.dgemm(alpha=1.0, a=result, b=arr3)",
 "import numpy as np\narr_temp1 = arr1.dot(arr2)\narr_temp2 = arr_temp1.dot(arr3)\nresult = arr_temp2",
 "import numpy as np\nresult = arr1.dot(arr2).dot(arr3)[-1]",
 "import numpy as np\narr1_arr2 = arr1.dot(arr2)\nresult = arr1_arr2.dot(arr3)[-1]",
 "result = sum((a * b for (a, b) in zip(arr1, arr2))) * arr3",
 "import functools\nresult = functools.reduce(lambda x, y: x * y, arr1 * arr2 * arr3)",
 "import numpy as np\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i]\nresult *= arr3",
 "result = 0\nfor (a, b) in zip(arr1, arr2):\n    result += a * b\nresult *= arr3",
 "import functools\nresult = functools.reduce(lambda a, b: a + b, [a * b for (a, b) in zip(arr1, arr2)]) * arr3",
 "intermediate = [a * b for (a, b) in zip(arr1, arr2)]\nresult = [a * b for (a, b) in zip(intermediate, arr3)]",
 "from math import prod\nintermediate = [a * b for (a, b) in zip(arr1, arr2)]\nresult = prod(intermediate) * prod(arr3)",
 "intermediate = []\nfor i in range(len(arr1)):\n    intermediate.append(arr1[i] * arr2[i])\nresult = 1\nfor i in intermediate:\n    result *= i\nfor i in arr3:\n    result *= i",
 "from operator import mul\nfrom functools import reduce\nintermediate = list(map(mul, arr1, arr2))\nresult = reduce(mul, intermediate) * reduce(mul, arr3)",
 "result = sum((a * b for (a, b) in zip(arr1, [sum((a * b for (a, b) in zip(arr2, arr3))) for _ in arr2])))",
 "result = 0\nfor i in range(len(arr1)):\n    temp = 0\n    for j in range(len(arr2)):\n        temp += arr2[j] * arr3[j]\n    result += arr1[i] * temp",
 "result = arr1.dot(arr2.dot(arr3))",
 "temp1 = arr2 @ arr3\ntemp2 = arr1 @ temp1\nresult = temp2",
 "import numpy as np\nintermediate = arr1.dot(arr2)\nresult = arr3.dot(intermediate.T).T",
 "import functools\nintermediate1 = functools.reduce(lambda x, y: x * y, arr1 * arr2)\nresult = functools.reduce(lambda x, y: x * y, intermediate1 * arr3)",
 "temp = sum([arr1[i] * arr2[i] for i in range(len(arr1))])\ntemp2 = sum([temp * arr3[i] for i in range(len(arr3))])\nresult = temp2",
 "arr_mul = [a * b for (a, b) in zip(arr2, arr3)]\nsum_val = sum(arr_mul)\nresult = sum((i * sum_val for i in arr1))",
 "mul_list = [a * b for (a, b) in zip(arr2, arr3)]\nresult = 0\nfor a in arr1:\n    result += a * sum(mul_list)",
 "temp = 0\nfor i in range(len(arr2)):\n    temp += arr2[i] * arr3[i]\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * temp",
 "result = 0\nfor a in arr1:\n    result += a * sum((arr2[i] * arr3[i] for i in range(len(arr2))))",
 "temp = sum([a * b for (a, b) in zip(arr2, arr3)])\nresult = sum([a * temp for a in arr1])",
 "result = sum(map(lambda a: a * sum(map(lambda x, y: x * y, arr2, arr3)), arr1))",
 "result = 0\nfor i in arr1:\n    temp = sum((a * b for (a, b) in zip(arr2, arr3)))\n    result += i * temp",
 "temp = 0\nfor (a, b) in zip(arr2, arr3):\n    temp += a * b\nresult = sum((i * temp for i in arr1))",
 "from functools import reduce\nimport operator\nresult = reduce(operator.add, (a * reduce(operator.mul, (b * c for (b, c) in zip(arr2, arr3))) for a in arr1))",
 "result = sum([arr1[i] * sum([arr2[j] * arr3[j] for j in range(len(arr2))]) for i in range(len(arr1))])",
 "result = sum((arr1[i] * sum((arr2[j] * arr3[j] for j in range(len(arr2)))) for i in range(len(arr1))))",
 "result = 0\nfor ind in range(len(arr1)):\n    result += arr1[ind] * sum((arr2[ind] * arr3[ind] for ind in range(len(arr2))))",
 "result = sum((a * sum((b * c for (b, c) in zip(arr2, arr3))) for a in arr1))",
 "import operator\nresult = reduce(operator.mul, [arr1, arr2, arr3]).sum()",
 "import numpy as np\nresult = (arr1 * arr2).dot(arr3)",
 "import numpy as np\nresult = arr1.matmul(arr2.matmul(arr3))",
 "result = sum([a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "from functools import reduce\nresult = reduce(lambda x, y: x + y, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "import functools\nimport operator\nresult = sum((functools.reduce(operator.mul, data) for data in zip(arr1, arr2, arr3)))",
 "result = 0\nfor (i, _) in enumerate(arr1):\n    result += arr1[i] * arr2[i] * arr3[i]",
 "result = 0\nfor i in range(len(arr1)):\n    temp = arr1[i] * arr2[i]\n    result += temp * arr3[i]",
 "result = sum([i * j for (i, j) in zip(arr1, arr2)]) * arr3",
 "import functools\nresult = functools.reduce(lambda x, y: x + y, [i * j for (i, j) in zip(arr1, arr2)]) * arr3",
 "import functools\nimport operator\nresult = functools.reduce(operator.add, [a * b for (a, b) in zip(arr1, arr2)]) * arr3",
 "import functools\nimport operator\nresult = functools.reduce(operator.mul, [arr1, arr2, arr3])",
 "result = arr1\nfor arr in [arr2, arr3]:\n    result = result @ arr",
 "from functools import reduce\nimport operator\nresult = reduce(operator.add, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "result = sum(map(lambda a, b, c: a * b * c, arr1, arr2, arr3))",
 "result = sum(map(lambda x: x[0] * x[1] * x[2], zip(arr1, arr2, arr3)))",
 "result = 0\nfor (i, a) in enumerate(arr1):\n    result += a * arr2[i] * arr3[i]",
 "from operator import mul\nfrom functools import reduce\nresult = reduce(mul, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "result = 0\ni = 0\nwhile i < len(arr1):\n    result += arr1[i] * arr2[i] * arr3[i]\n    i += 1",
 "import functools\nresult = functools.reduce(lambda a, b: a + b, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "import operator\nresult = sum(map(operator.mul, arr1, arr2, arr3))",
 "import functools\nresult = functools.reduce(lambda x, y: x + y, [a * b * c for (a, b, c) in zip(arr1, arr2, arr3)])",
 "result = 0\nfor data in zip(arr1, arr2, arr3):\n    temp = 1\n    for num in data:\n        temp *= num\n    result += temp",
 "import math\nresult = math.fsum((math.prod(data) for data in zip(arr1, arr2, arr3)))",
 "from functools import reduce\nfrom operator import mul\nresult = reduce(mul, [reduce(mul, data) for data in zip(arr1, arr2, arr3)])",
 "result = sum((a * b for (a, b) in zip(arr1, [sum((a * b for (a, b) in zip(arr2, arr3))) for _ in range(len(arr1))])))",
 "import functools\nimport operator\nresult = functools.reduce(operator.add, (a * b for (a, b) in zip(arr1, [sum((a * b for (a, b) in zip(arr2, arr3))) for _ in range(len(arr1))])))",
 "temp = sum((a * b for (a, b) in zip(arr2, arr3)))\nresult = sum((a * temp for a in arr1))",
 "import numpy as np\nresult = sum((i * j for (i, j) in zip(arr1, arr2)))\nresult = sum((result * k for (result, k) in zip([result] * len(arr3), arr3)))",
 "import numpy as np\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * arr2[i]\nfor i in range(len(arr3)):\n    result *= arr3[i]",
 "result = arr1\nfor arr in [arr2, arr3]:\n    result = result.dot(arr)"
]