[
 "import numpy as np\nresult = np.dot(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.linalg.multi_dot([arr1, arr2, arr3])",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\ntemp = np.dot(arr1, arr2)\nresult = np.dot(temp, arr3)",
 "\ndef dot_product(arr1, arr2, arr3):\n    return np.dot(np.dot(arr1, arr2), arr3)\nresult = dot_product(arr1, arr2, arr3)",
 "\narr_mul = arr1 @ arr2\nresult = np.dot(arr_mul, arr3)",
 "\narr_mult = np.matmul(arr1, arr2)\nresult = np.dot(arr_mult, arr3)",
 "\nresult = np.dot(arr1, np.dot(arr2, arr3))",
 "from functools import reduce\nresult = reduce(np.dot, [arr1, arr2, arr3])",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->il', arr1, arr2, arr3)",
 "import numpy as np\nMatrixArray = [arr1, arr2, arr3]\nresult = np.linalg.multi_dot(MatrixArray)",
 "import numpy as np\ntemp1 = np.dot(arr1, arr2)\ntemp2 = np.dot(temp1, arr3)\nresult = temp2",
 "import numpy as np\nresult = np.einsum('i,i,i->', arr1, arr2, arr3)",
 "\ntemp = np.multiply(arr1, arr2)\nresult = np.dot(temp, arr3)",
 "import numpy as np\ninner_product = np.inner(arr1, arr2)\nresult = np.dot(inner_product, arr3)",
 "import numpy as np\nmultiplied_arr2_arr3 = arr2 * arr3\nresult = np.dot(arr1, multiplied_arr2_arr3)",
 "import numpy as np\narr_mul = np.dot(arr1, arr2)\nresult = np.matmul(arr_mul, arr3)",
 "import numpy as np\narr12 = np.dot(arr1, arr2)\nif arr12.size == 1:\n    result = np.array([el * arr12 for el in arr3])",
 "import numpy as np\narr_mul = np.dot(arr1, arr2)\nresult = arr_mul @ arr3",
 "import numpy as np\ndef mult_matrices(a, b, c):\n    temp1 = np.dot(a, b)\n    temp2 = np.dot(temp1, c)\n    return temp2\nresult = mult_matrices(arr1, arr2, arr3)",
 "import numpy as np\nresult = np.dot(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\narr_mult = np.matmul(arr1, arr2)\nresult = arr_mult.dot(arr3)",
 "import numpy as np\ndef multiply_by_dot(arr_lst):\n    result = np.identity(arr_lst[0].shape[0])\n    for arr in arr_lst:\n        result = result.dot(arr)\n    return result\nresult = multiply_by_dot([arr1, arr2, arr3])",
 "import functools\nimport numpy as np\nresult = functools.reduce(np.dot, [arr1, arr2, arr3])",
 "import functools\nreduce = lambda func, iterable: functools.reduce(func, iterable)\nresult = reduce(np.dot, [arr1, arr2, arr3])",
 "import numpy as np\nfrom functools import reduce\nresult = reduce(np.matmul, [arr1, arr2, arr3])",
 "import numpy as np\nresult = np.matmul(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.einsum('i,j,k->ik', arr1, arr2, arr3)",
 "import numpy as np\narr12 = np.full(arr1.shape, 0)\nfor i in range(arr1.shape[0]):\n    for j in range(arr2.shape[1]):\n        for k in range(arr1.shape[1]):\n            arr12[i][j] += arr1[i][k] * arr2[k][j]\nresult = np.full(arr12.shape, 0)\nfor i in range(arr12.shape[0]):\n    for j in range(arr3.shape[1]):\n        for k in range(arr12.shape[1]):\n            result[i][j] += arr12[i][k] * arr3[k][j]",
 "import functools\nimport numpy as np\ndot_product = functools.partial(np.dot)\nresult = dot_product(dot_product(arr1, arr2), arr3)",
 "import numpy as np\nresult = sum((a * b for (b, a) in zip(arr1, np.dot(arr2, arr3))))",
 "import numpy as np\ninner_product = np.dot(arr2, arr3)\nresult = int(np.sum((arr1[i] * inner_product[i] for i in range(len(inner_product)))))",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nsum = np.sum(np.fromiter((arr1[i] * inner_product[i] for i in range(len(inner_product))), dtype=int))\nresult = sum",
 "import numpy as np\nresult = 0\nfor i in range(len(arr1)):\n    result += np.sum(arr1[i] * np.sum(arr2 * arr3))",
 "import numpy as np\nresult = arr1\nfor arr in [arr2, arr3]:\n    result = np.dot(result, arr)",
 "import time\nstart_time = time.time()\nresult = np.matmul(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\nm1 = np.einsum('ij,jt->it', arr1, arr2)\nresult = np.einsum('it,tk->ik', m1, arr3)",
 "import numpy as np\nm1 = np.matmul(arr1, arr2)\nresult = np.matmul(m1, arr3)",
 "\nresult = MatrixArray[0]\nfor arr in MatrixArray[1:]:\n    result = np.dot(result, arr)",
 "\ndef matrix_mult(MatrixArray):\n    result = MatrixArray[0]\n    for matrix in MatrixArray[1:]:\n        result = np.matmul(result, matrix)\n    return result\nresult = matrix_mult(MatrixArray)",
 "import numpy as np\narr = np.array([arr1, arr2, arr3])\nresult = np.linalg.multi_dot(arr)",
 "import functools\nimport numpy as np\nfunctools.reduce(np.dot, [arr1, arr2, arr3])",
 "import numpy as np\ncomb = np.array([arr1, arr2, arr3])\nresult = comb[0]\nfor i in range(1, len(comb)):\n    result = np.dot(result, comb[i])",
 "import numpy as np\nresult = np.einsum('i,i->i', arr1, arr2)\nresult = np.einsum('i,i->i', result, arr3)",
 "import numpy as np\nresult = np.sum(arr1 * arr2 * arr3)",
 "import numpy as np\nresult = np.dot(np.multiply(arr1, arr2), arr3)",
 "import numpy as np\ntemp_arr = np.array(arr1) * np.array(arr2)\nresult = np.dot(temp_arr, arr3)",
 "import numpy as np\ntemp_arr = np.multiply(arr1, arr2)\nresult = 0\nfor (x, y) in zip(temp_arr, arr3):\n    result += x * y",
 "import numpy as np\ntemp_arr = np.array(arr1) * np.array(arr2)\nresult = np.sum(temp_arr * arr3)",
 "import numpy as np\nnp_multiply_result = np.multiply(arr1, arr2)\nresult = 0\nfor (x, y) in np.nditer([np_multiply_result, arr3]):\n    result += x * y",
 "import numpy as np\ntemp = np.empty(len(arr1))\nfor i in range(len(arr1)):\n    temp[i] = arr1[i] * arr2[i]\nresult = np.dot(temp, arr3)",
 "import numpy as np\nfrom functools import reduce\narr_product = np.multiply(arr1, arr2)\nproduct_calc = reduce(lambda x, y: x * y, arr_product)\nresult = np.dot(arr3, product_calc)",
 "import numpy as np\narr_product = np.array(arr1) * np.array(arr2)\nproduct_calc = 1\nfor i in arr_product:\n    product_calc *= i\nresult = np.dot(arr3, product_calc)",
 "import numpy as np\nfrom functools import reduce\nfrom operator import mul\narr_product = np.multiply(arr1, arr2)\nproduct_calc = reduce(mul, arr_product)\nresult = np.dot(arr3, product_calc)",
 "import numpy as np\nfrom operator import mul\nitem1 = np.product(arr1 * arr2)\nesult = np.dot(arr3, item1)",
 "import numpy as np\ntemps = np.multiply(arr1, arr2)\npre_result = np.product(temps)\nresult = np.dot(arr3, pre_result)",
 "import numpy as np\nitem1 = 1\nfor item in np.nditer(np.multiply(arr1, arr2)):\n    item1 *= item\nresult = np.dot(arr3, item1)",
 "import numpy as np\nmult = lambda x, y: x * y\nreduction = reduce(mult, np.multiply(arr1, arr2))\nresult = np.dot(arr3, reduction)",
 "import numpy as np\ndef dot_3(arr1, arr2, arr3):\n    arr12 = np.multiply(arr1, arr2)\n    return np.dot(arr12, arr3)\nresult = dot_3(arr1, arr2, arr3)",
 "\ninter = (np.array(arr1) * np.array(arr2)).tolist()\ninter2 = (np.array(inter) * np.array(arr3)).tolist()\nresult = sum(inter2)",
 "import numpy as np\ninter = np.multiply(arr1, arr2)\nresult = np.sum(np.multiply(inter, arr3))",
 "import numpy as np\ndim_constant = np.vdot(arr1, arr2)\nresult = np.absolute(dim_constant) * arr3",
 "import numpy as np\nmultiplied_array = arr1 * arr2\nmultiplied_result = np.sum(multiplied_array)\nresult = np.dot(multiplied_result, arr3)",
 "\nresult = np.sum(arr1 * arr2) * arr3",
 "import numpy as np\nresult = np.einsum('i,ij,jk->k', arr1, arr2, arr3)",
 "import numpy as np\ndef multiply_matrices(m1, m2):\n    return np.dot(m1, m2)\nresult = multiply_matrices(multiply_matrices(arr1, arr2), arr3)",
 "import numpy as np\nmulti_dot = np.linalg.multi_dot\nresult = multi_dot([arr1, arr2, arr3])",
 "import numpy as np\nresult = np.dot(np.dot(arr1, arr2), arr3)[-1]",
 "import numpy as np\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3, axes=1), axes=0)[-1]",
 "import numpy as np\nresult = sum((arr1[i] * np.dot(arr2[i], arr3) for i in range(len(arr1))))",
 "import numpy as np\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * np.dot(arr2[i], arr3)",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2, axes=1), arr3, axes=1)",
 "import numpy as np\nintermediate = np.sum(np.multiply(arr1, arr2))\nresult = np.sum(np.multiply(intermediate, arr3))",
 "import numpy as np\nintermediate = np.inner(arr1, arr2)\nresult = np.inner(intermediate, arr3)",
 "import numpy as np\nresult = np.inner(np.inner(arr1, arr2), arr3)",
 "import numpy as np\ndef multiply_matrices(m1, m2):\n    return np.matmul(m1, m2)\nresult = multiply_matrices(multiply_matrices(arr1, arr2), arr3)",
 "import numpy as np\ndef multiply_matrices(m1, m2):\n    return np.array(m1).dot(np.array(m2))\nresult = multiply_matrices(multiply_matrices(arr1, arr2), arr3)",
 "import numpy as np\nmatmul = np.matmul\nresult = matmul(matmul(arr1, arr2), arr3)",
 "import numpy as np\nmatmul = np.matmul\nresult = matmul(arr1, matmul(arr2, arr3))",
 "import numpy as np\ndef matrix_mult(arr1, arr2, arr3):\n    return np.matmul(arr1, np.matmul(arr2, arr3))\nresult = matrix_mult(arr1, arr2, arr3)",
 "import numpy as np\ntemp2 = np.dot(arr2, arr3)\nresult = arr1.dot(temp2)",
 "import numpy as np\ntemp1 = np.matmul(arr1, arr2)\ntemp2 = np.matmul(temp1, arr3)\nresult = temp2",
 "import numpy as np\nresult = np.matmul(np.matmul(arr1, arr2), arr3)[-1]",
 "import numpy as np\narr1_arr2 = np.dot(arr1, arr2)\nresult = np.dot(arr1_arr2, arr3)[-1]",
 "import numpy as np\narr1_arr2 = np.matmul(arr1, arr2)\nresult = np.matmul(arr1_arr2, arr3)[-1]",
 "import numpy as np\narr1_arr2 = np.matmul(arr1, arr2)\narr1_arr2_arr3 = np.matmul(arr1_arr2, arr3)\nresult = arr1_arr2_arr3[-1]",
 "import numpy as np\ndef matmul_dot_products(arr1, arr2, arr3):\n    arr1_arr2 = np.matmul(arr1, arr2)\n    arr1_arr2_arr3 = np.matmul(arr1_arr2, arr3)\n    return arr1_arr2_arr3[-1]\nresult = matmul_dot_products(arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,kl->l', arr1, arr2, arr3)[-1]",
 "import numpy as np\nresult = np.dot(arr1.dot(arr2), arr3)[-1]",
 "import numpy as np\nresult = np.einsum('i,jk->ijk', arr1, np.matmul(arr2, arr3))[-1]",
 "import numpy as np\nintermediate_result = np.outer(arr1, np.dot(arr2, arr3))\nresult = intermediate_result[-1]",
 "import numpy as np\nintermediate_result = np.tensordot(arr2, arr3, axes=1)\nresult = np.tensordot(arr1, intermediate_result, axes=0)[-1]",
 "import numpy as np\nresult = np.tensordot(arr1, arr2 @ arr3, axes=0)[-1]",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2, axes=0), arr3, axes=1)[-1]",
 "import numpy as np\nresult = np.tensordot(arr1, np.matmul(arr2, arr3), axes=0)[-1]",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))[-1]",
 "import numpy as np\nresult = np.sum([arr1[i] * np.dot(arr2[i], arr3) for i in range(len(arr1))])",
 "import numpy as np\nresult = sum(map(lambda i: arr1[i] * np.dot(arr2[i], arr3), range(len(arr1))))",
 "import numpy as np\nresult = np.sum(np.array(arr1) * np.einsum('ij,i->ij', arr2, arr3))",
 "import numpy as np\nresult = 0\nfor (a, b) in zip(arr1, arr2):\n    result += a * np.dot(b, arr3)",
 "import numpy as np\nresult = 0\nfor (i, val) in enumerate(arr1):\n    result += val * np.dot(arr2[i], arr3)",
 "import numpy as np\nresult = np.sum(np.array([arr1[i] * np.dot(arr2[i], arr3) for i in range(len(arr1))]))",
 "import numpy as np\nresult = np.dot(arr1, [np.dot(arr2[i], arr3) for i in range(len(arr1))])",
 "import numpy as np\nresult = np.sum(arr1 * np.array([np.dot(item, arr3) for item in arr2]))",
 "import numpy as np\nresult = np.dot(arr1, np.array([np.dot(item, arr3) for item in arr2]))",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.array([np.dot(item, arr3) for item in arr2])))",
 "import numpy as np\nresult = 0\ni = 0\nwhile i < len(arr1):\n    result += arr1[i] * np.dot(arr2[i], arr3)\n    i += 1",
 "import numpy as np\nresult = np.sum(np.array(arr1) * np.array([np.dot(arr2[i], arr3) for i in range(len(arr2))]))",
 "import numpy as np\nresult = np.tensordot(arr1, arr2, axes=1)\nresult = np.tensordot(result, arr3, axes=1)",
 "import numpy as np\nresult = np.tensordot(np.tensordot(np.tensordot(arr1, arr2, axes=1), arr3, axes=1), arr1, axes=1)\nresult = np.tensordot(result, arr2, axes=1)",
 "import numpy as np\narr1_arr2_product = np.tensordot(arr1, arr2, axes=1)\narr1_arr2_arr3_product = np.tensordot(arr1_arr2_product, arr3, axes=1)\nresult = arr1_arr2_arr3_product",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.tensordot(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.tensordot(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\nintermediate = np.dot(arr1, arr2)\nresult = np.tensordot(intermediate, arr3, axes=1)",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, arr2) * arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2 * arr3)",
 "import numpy as np\nresult = np.sum(np.sum(arr1 * arr2) * arr3)",
 "import numpy as np\nresult = np.sum(arr1 * arr2) * np.sum(arr3)",
 "import numpy as np\nintermediate = np.tensordot(arr1, arr2, axes=0)\nresult = np.tensordot(intermediate, arr3, axes=0)",
 "import numpy as np\nresult = np.inner(arr1, arr2).dot(arr3)",
 "import numpy as np\nresult = np.matmul(np.inner(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.einsum('i,i->', np.einsum('i,i->', arr1, arr2), arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2) * arr3",
 "import numpy as np\nresult = np.multiply(arr1, arr2)\nresult = np.sum(result)\nresult = np.multiply(result, arr3)",
 "import numpy as np\nresult = np.multiply(arr1, arr2).sum() * arr3",
 "import numpy as np\nresult = np.sum(np.array(arr1) * np.array(arr2)) * np.array(arr3)",
 "import numpy as np\nintermediate = np.multiply(arr1, arr2)\nresult = np.multiply(intermediate, arr3)",
 "import numpy as np\nintermediate_result = np.einsum('ij,jk->ik', arr1, arr2)\nresult = np.dot(intermediate_result, arr3)",
 "import numpy as np\nintermediate_result = np.einsum('ij,jk->ik', arr1, arr2)\nresult = np.einsum('ij,jk->ik', intermediate_result, arr3)",
 "import numpy as np\nresult2 = np.dot(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.sum(arr1 * np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.multiply(arr1, np.dot(arr2, arr3)).sum()",
 "import numpy as np\nresult = 0\nintermediate = np.dot(arr2, arr3)\nfor (a, b) in zip(arr1, intermediate):\n    result += a * b",
 "from functools import reduce\nintermediate_result = reduce(np.dot, [arr1, arr2])\nresult = np.dot(intermediate_result, arr3)",
 "\nintermediate = arr1.dot(arr2)\nresult = np.dot(intermediate, arr3)",
 "\nresult = arr1\nresult = np.dot(result, arr2)\nresult = np.dot(result, arr3)",
 "import numpy as np\nintermediate1 = np.multiply(arr1, arr2)\nresult = np.sum(intermediate1 * arr3)",
 "import numpy as np\nresult = np.multiply(np.multiply(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.einsum('i,i->', arr1, arr2)\nresult = np.einsum('i,i->', result, arr3)",
 "import numpy as np\nintermediate_result = np.einsum('ij,jk->ik', arr1, arr2)\nresult = np.matmul(intermediate_result, arr3)",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\narr3 = np.array(arr3)\narr_mul = arr2 * arr3\narr_sum = np.sum(arr_mul)\nresult = np.dot(arr1, np.full_like(arr1, arr_sum))",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\narr3 = np.array(arr3)\nmul_list = np.multiply(arr2, arr3)\nsum_val = sum(mul_list)\nresult = np.dot(arr1, [sum_val] * len(arr1))",
 "import numpy as np\nresult = np.dot(arr1, np.dot(np.array([1] * len(arr2)), np.array(arr2) * np.array(arr3)))",
 "import numpy as np\nresult = np.dot(arr1, np.array([np.dot(arr2, arr3)] * len(arr2)))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\narr3_np = np.array(arr3)\nresult = np.dot(arr1_np, np.sum(arr2_np * arr3_np))",
 "import numpy as np\nresult2 = np.einsum('i,ij->j', arr1, np.dot(arr2, arr3))",
 "import numpy as np\nintermediate = np.dot(arr2, arr3)\nresult2 = np.sum(arr1 * intermediate)",
 "import numpy as np\nresult2 = np.sum(np.multiply(arr1, np.dot(arr2, arr3)))",
 "import numpy as np\nresult2 = arr1.dot(np.matmul(arr2, arr3))",
 "import numpy as np\narr1 = np.array(arr1)\narr2 = np.array(arr2)\narr3 = np.array(arr3)\ntemp = np.dot(arr2, arr3)\nresult = np.dot(arr1, temp)",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.sum(np.multiply(arr2, arr3))))",
 "import numpy as np\ndef calc_result(arr1, arr2, arr3):\n    return np.sum(arr1 * np.dot(arr2, arr3))\nresult = calc_result(arr1, arr2, arr3)",
 "import numpy as np\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * np.dot(arr2, arr3)[i]",
 "import numpy as np\nresult = np.sum(arr1 * np.matmul(arr2, arr3))",
 "from functools import reduce\nimport operator\nimport numpy as np\nresult = reduce(operator.add, arr1 * np.dot(arr2, arr3))",
 "import numpy as np\nproduct = np.multiply(arr1, np.dot(arr2, arr3))\nresult = np.sum(product)",
 "import numpy as np\nresult = (arr1 * np.matmul(arr2, arr3)).sum()",
 "import numpy as np\ninner_product = np.dot(arr2, arr3)\nresult = np.inner(arr1, inner_product)",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = np.multiply(arr1, inner_product).sum()",
 "import numpy as np\nintermediate = np.dot(arr2, arr3)\nresult = np.multiply(arr1, intermediate).sum()",
 "import numpy as np\nresult1 = np.dot(arr2, arr3)\nresult2 = np.multiply(arr1, result1)\nresult = np.sum(result2)",
 "import numpy as np\nresult = (arr1 * np.dot(arr2, arr3)).sum()",
 "import numpy as np\nintermediate = np.dot(arr2, arr3)\nresult = np.sum(np.multiply(arr1, intermediate))",
 "import functools\nimport operator\nimport numpy as np\nintermediate = np.dot(arr2, arr3)\nresult = functools.reduce(operator.add, map(operator.mul, arr1, intermediate))",
 "import numpy as np\nresult = np.sum(arr1 * np.sum(arr2 * arr3))",
 "import numpy as np\ndef calculate_result(arr1, arr2, arr3):\n    temp1 = np.dot(arr2, arr3)\n    temp2 = np.dot(arr1, temp1)\n    return temp2\nresult = calculate_result(arr1, arr2, arr3)",
 "import numpy as np\ninter_result1 = np.dot(arr1, arr2)\ninter_result2 = arr3.dot(inter_result1)\nresult = inter_result2",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2, axes=0), arr3, axes=0)",
 "import numpy as np\nresult = np.einsum('i,i,j->j', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.einsum('i,i,->', np.einsum('i,i->', arr1, arr2), arr3)",
 "import numpy as np\nresult = np.dot(arr1 @ arr2, arr3)",
 "import numpy as np\nresult = np.einsum('ij,jk,k->', arr1, arr2, arr3)",
 "import numpy as np\nresult = np.inner(np.multiply(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.sum(np.multiply(np.multiply(arr1, arr2), arr3))",
 "from functools import reduce\nimport operator\nimport numpy as np\nresult = reduce(operator.mul, (np.einsum('i,i->', arr1, arr2), arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.inner(arr2, arr3))",
 "import numpy as np\nresult = np.tensordot(arr1, np.dot(arr2, arr3), axes=0)",
 "import numpy as np\nresult = np.inner(arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.tensordot(arr1, np.matmul(arr2, arr3), axes=0)",
 "import numpy as np\nresult = np.inner(arr1, np.matmul(arr2, arr3))",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\ndot_product = np.dot(arr1, inner_product)\nresult = dot_product",
 "import numpy as np\nresult = np.sum(arr1 * np.inner(arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.inner(arr2, arr3)))",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = np.sum(arr1 * inner_product)",
 "import numpy as np\nresult = np.sum([a * b for (a, b) in zip(arr1, np.inner(arr2, arr3))])",
 "import numpy as np\nresult = 0\nfor (a, b) in zip(arr1, np.inner(arr2, arr3)):\n    result += a * b",
 "import numpy as np\nintermediate_result = np.dot(arr2, arr3)\nresult = np.tensordot(arr1, intermediate_result, axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, np.einsum('ij,jk->ik', arr2, arr3), axes=0)",
 "import numpy as np\nintermediate_result = np.einsum('ij,jk->ik', arr2, arr3)\nresult = np.tensordot(arr1, intermediate_result, axes=0)",
 "import numpy as np\nresult = np.einsum('i,ij->j', arr1, np.einsum('i,ij->j', arr2, arr3))",
 "import numpy as np\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3, axes=0), axes=0)",
 "import numpy as np\nintermediate = np.matmul(arr2, arr3)\nresult = arr1 @ intermediate",
 "import numpy as np\nresult = np.einsum('i,i->i', np.einsum('i,i->i', arr1, arr2), arr3)",
 "import numpy as np\nintermediate1 = np.linalg.multi_dot([arr1, arr2])\nintermediate2 = np.dot(intermediate1, arr3)\nresult = intermediate2",
 "import numpy as np\nresult = np.einsum('i,i', arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = np.dot(arr1, np.einsum('ij,j->i', arr2, arr3))",
 "import numpy as np\nresult = np.sum([a * b for (a, b) in zip(arr1, np.dot(arr2, arr3))])",
 "import numpy as np\nmatmul_result = np.matmul(arr2, arr3)\nresult = np.tensordot(arr1, matmul_result, axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, np.inner(arr2, arr3), axes=0)",
 "import numpy as np\nresult = np.einsum('i,ij->i', arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nresult = np.tensordot(arr1, np.matmul(arr2, arr3), axes=1)",
 "import numpy as np\nintermediate = np.matmul(arr2, arr3)\nresult = np.inner(arr1, intermediate)",
 "import numpy as np\nresult = np.einsum('i,ij->j', arr1, np.matmul(arr2, arr3))",
 "import numpy as np\nmatmul_result = np.matmul(arr2, arr3)\nresult = np.einsum('i,ij->j', arr1, matmul_result)",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * inner_product[i]",
 "import numpy as np\nresult = np.einsum('i,i->', arr1, np.inner(arr2, arr3))",
 "import numpy as np\nresult = sum([arr1[i] * np.inner(arr2, arr3)[i] for i in range(len(arr1))])",
 "import numpy as np\nresult = np.einsum('i,i->', arr1, np.dot(arr2, arr3))",
 "import numpy as np\nresult = sum([arr1[i] * np.dot(arr2, arr3)[i] for i in range(len(arr1))])",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.matmul(arr2, arr3)))",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.tensordot(arr2, arr3, axes=0)))",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, np.outer(arr2, arr3)))",
 "import numpy as np\nresult = np.sum(np.array([arr1[i] * np.dot(arr2, arr3)[i] for i in range(len(arr1))]))",
 "import numpy as np\nresult = np.sum(np.array([arr1[i] * sum((arr2[j] * arr3[j] for j in range(len(arr2)))) for i in range(len(arr1))]))",
 "import numpy as np\ninner_product = np.matmul(arr2, arr3)\nresult = np.sum(arr1 * inner_product)",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * inner_product",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = sum([arr1[i] * inner_product for i in range(len(arr1))])",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = np.sum(np.multiply(arr1, inner_product))",
 "import numpy as np\nresult = 0\nfor i in range(len(arr1)):\n    result += arr1[i] * np.inner(arr2, arr3)[i]",
 "import numpy as np\nresult = sum(map(lambda x, y: x * y, arr1, np.inner(arr2, arr3)))",
 "import numpy as np\nresult = np.sum(np.array(arr1) * np.inner(arr2, arr3))",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = sum((a * b for (a, b) in zip(arr1, inner_product)))",
 "import numpy as np\nresult = sum((a * b for (a, b) in zip(arr1, np.inner(arr2, arr3))))",
 "import numpy as np\nresult = 0\ninner_product = np.inner(arr2, arr3)\nfor i in range(len(arr1)):\n    result += arr1[i] * inner_product[i]",
 "import numpy as np\ninner_product = np.inner(arr2, arr3)\nresult = 0\nfor (a, b) in zip(arr1, inner_product):\n    result += a * b",
 "import numpy as np\nintermediate_result = np.matmul(arr2, arr3)\nresult = np.outer(arr1, intermediate_result)",
 "import numpy as np\nintermediate_result = np.dot(arr2, arr3)\nresult = np.kron(arr1, intermediate_result)",
 "import numpy as np\nresult = np.einsum('i,jk->ijk', arr1, np.dot(arr2, arr3))",
 "import numpy as np\nintermediate_result = np.inner(arr2, arr3)\nresult = np.outer(arr1, intermediate_result)",
 "import numpy as np\nresult = np.tensordot(arr1, np.outer(arr2, arr3), axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, np.kron(arr2, arr3), axes=0)",
 "import numpy as np\nintermediate_result = np.inner(arr2, arr3)\nresult = np.tensordot(arr1, intermediate_result, axes=0)",
 "import numpy as np\nresult = np.inner(arr1, np.inner(arr2, arr3))",
 "import numpy as np\nresult = np.outer(arr1, np.outer(arr2, arr3)).sum(axis=0)",
 "import numpy as np\nintermediate_result = np.einsum('i,ij->j', arr2, arr3)\nresult = np.einsum('i,ij->j', arr1, intermediate_result)",
 "import numpy as np\nresult = np.tensordot(arr1, np.einsum('i,j->ij', arr2, arr3), axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, np.dot(arr2[:, None], arr3[None, :]), axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, np.multiply.outer(arr2, arr3), axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, np.array([[i * j for j in arr3] for i in arr2]), axes=0)",
 "import numpy as np\nintermediate_result = np.outer(arr2, arr3)\nresult = np.tensordot(arr1, intermediate_result, axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, arr2)\nresult = np.tensordot(result, arr3)",
 "import numpy as np\nresult = np.sum(np.multiply(arr1, arr2)) * arr3",
 "import numpy as np\nresult = np.tensordot(arr1, arr2)\nresult = np.tensordot(result, arr3, axes=0)",
 "import numpy as np\nintermediate_result1 = np.einsum('ij,jk->ik', arr1, arr2)\nresult = np.einsum('ik,kl->il', intermediate_result1, arr3)",
 "import numpy as np\nintermediate_result1 = np.inner(arr1, arr2)\nintermediate_result2 = np.inner(intermediate_result1, arr3)\nresult = intermediate_result2",
 "import numpy as np\nresult = np.dot(arr1, arr2) * arr3.sum()",
 "import numpy as np\nresult = np.sum(np.prod([arr1, arr2, arr3], axis=0))",
 "import numpy as np\nresult = np.sum(np.array(arr1) * np.array(arr2) * np.array(arr3))",
 "import numpy as np\narr1_np = np.array(arr1)\narr2_np = np.array(arr2)\narr3_np = np.array(arr3)\nresult = np.sum(arr1_np * arr2_np * arr3_np)",
 "import numpy as np\nresult = np.einsum('...i,...i', arr1, arr2)\nresult = np.einsum('...i,...i', result, arr3)",
 "import numpy as np\nresult = np.sum(np.array(arr1) * np.array(arr2)) * arr3",
 "import numpy as np\nintermediate_result1 = np.tensordot(arr1, arr2, axes=0)\nintermediate_result2 = np.tensordot(intermediate_result1, arr3, axes=0)\nresult = intermediate_result2",
 "import numpy as np\nresult = np.tensordot(np.tensordot(arr1, arr2), arr3, axes=0)",
 "import numpy as np\nresult = np.tensordot(arr1, arr2)\nresult = result.__array_wrap__(np.tensordot(result, arr3, axes=0))",
 "import numpy as np\nresult = np.tensordot(arr1, arr2)\nresult = np.asarray(np.tensordot(result, arr3, axes=0))",
 "import numpy as np\nresult = np.tensordot(arr1, arr2)\nresult = np.asanyarray(np.tensordot(result, arr3, axes=0))",
 "import numpy as np\nresult = np.tensordot(arr1, arr2)\nresult = np.ascontiguousarray(np.tensordot(result, arr3, axes=0))",
 "import numpy as np\nresult = np.tensordot(arr1, arr2)\nresult = np.tensordot(result, arr3, axes=0)\nresult = np.squeeze(result)",
 "import numpy as np\nintermediate_result1 = np.einsum('ij,jk->ik', arr1, arr2)\nintermediate_result2 = np.einsum('ik,kl->il', intermediate_result1, arr3)\nresult = intermediate_result2",
 "import functools\nimport operator\nresult = functools.reduce(np.inner, [arr1, arr2, arr3])",
 "import numpy as np\nresult = np.sum(arr1 * arr2 * np.sum(arr3))",
 "import numpy as np\nresult = np.multiply(np.dot(arr1, arr2), np.sum(arr3))",
 "import numpy as np\nsum_arr3 = np.sum(arr3)\nresult = np.dot(arr1, arr2) * sum_arr3",
 "import numpy as np\nsum_arr3 = np.sum(arr3)\ndot_product = np.dot(arr1, arr2)\nresult = dot_product * sum_arr3",
 "import numpy as np\nproduct = np.dot(arr1, arr2)\nresult = product * np.sum(arr3)",
 "import numpy as np\nresult = np.multiply(arr1, arr2).sum() * arr3.sum()",
 "import numpy as np\nsum_product = np.sum(np.multiply(arr1, arr2))\nresult = sum_product * np.sum(arr3)",
 "import numpy as np\nresult = np.dot(arr1, arr2, arr3)",
 "import numpy as np\nresult = np.sum(np.multiply.reduce([arr1, arr2, arr3]))",
 "import functools\nimport operator\nimport numpy as np\nresult = np.sum(functools.reduce(operator.mul, [arr1, arr2, arr3]))",
 "import numpy as np\nresult = np.sum(np.einsum('i,i,i->i', arr1, arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.prod(np.array([arr1, arr2, arr3]), axis=0))",
 "import numpy as np\nresult = np.einsum('...i,...i->...', np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.einsum('i,ij->', arr1, np.einsum('ij,j->i', arr2, arr3))",
 "import numpy as np\nresult = np.sum(np.dot(arr1, arr2) * arr3)",
 "import numpy as np\nresult = np.tensordot(np.dot(arr1, arr2), arr3, axes=0)",
 "import numpy as np\nresult = np.inner(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.matmul(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3) * len(arr1))",
 "import numpy as np\narr3_sum = np.dot(arr2, arr3)\nresult = np.dot(arr1, [arr3_sum for _ in range(len(arr1))])",
 "import numpy as np\nresult = np.tensordot(arr1, np.tensordot(arr2, arr3, axes=1), axes=0)",
 "import numpy as np\nintermediate_result = np.einsum('ij,j->i', arr2, arr3)\nresult = np.einsum('i,i->', arr1, intermediate_result)",
 "import numpy as np\nresult = np.multiply(arr1, arr2)\nresult = np.sum(result)\nresult = np.multiply(result, arr3)\nresult = np.sum(result)",
 "import numpy as np\nresult = sum(np.multiply(arr1, arr2))\nresult = sum(np.multiply(result, arr3))",
 "import numpy as np\nintermediate = np.dot(arr2, arr3)\nresult = np.einsum('i,ij->j', arr1, intermediate)",
 "import numpy as np\nresult = arr1 @ np.matmul(arr2, arr3)",
 "\ntemp1 = arr1 @ arr2\nresult = np.matmul(temp1, arr3)",
 "import numpy as np\nresult = np.sum(np.multiply(np.dot(arr1, arr2), arr3))",
 "import numpy as np\nresult = np.dot(arr1, arr2)\nresult = result * arr3\nresult = np.sum(result)",
 "import numpy as np\nresult = np.dot(arr1, arr2)\nresult *= arr3\nresult = np.sum(result)",
 "import numpy as np\nresult = np.sum(np.array([arr1[i] * arr2[i] * arr3[i] for i in range(len(arr1))]))",
 "import numpy as np\nresult = np.tensordot(arr1.dot(arr2), arr3, axes=0)",
 "import numpy as np\nintermediate = np.dot(arr1, arr2)\nresult = np.outer(intermediate, arr3)",
 "import numpy as np\nresult = np.inner(np.matmul(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.inner(arr1 @ arr2, arr3)",
 "import numpy as np\nresult = np.inner(np.tensordot(arr1, arr2, axes=0), arr3)",
 "import numpy as np\nresult = np.inner(np.einsum('ij,jk->ik', arr1, arr2), arr3)",
 "import numpy as np\nresult = np.inner(arr1.dot(arr2), arr3)",
 "import numpy as np\nmat_mul = np.matmul(arr1, arr2)\ninner_product = np.inner(mat_mul, arr3)\nresult = inner_product",
 "import numpy as np\nresult = np.einsum('ij,jk->ik', np.dot(arr1, arr2), arr3)",
 "import numpy as np\nintermediate1 = arr1 * arr2\nintermediate2 = np.sum(intermediate1)\nresult = intermediate2 * arr3",
 "import numpy as np\nintermediate = np.einsum('i,i->', arr1, arr2)\nresult = np.tensordot(intermediate, arr3, axes=0)",
 "import numpy as np\nresult = np.tensordot(np.einsum('i,i->', arr1, arr2), arr3, axes=0)",
 "import numpy as np\nresult = np.tensordot(np.inner(arr1, arr2), arr3, axes=0)",
 "import numpy as np\nintermediate = np.dot(arr1, arr2)\nresult = np.einsum('i,i', intermediate, arr3)",
 "import numpy as np\nresult = np.outer(np.dot(arr1, arr2), arr3)",
 "import numpy as np\nresult = np.matmul(arr1, np.multiply(np.matmul(arr2, arr3), len(arr1)))",
 "import numpy as np\nintermediate_result = np.dot(arr2, arr3)\nintermediate_result *= len(arr1)\nresult = np.dot(arr1, intermediate_result)",
 "import numpy as np\ndef dot_product(a, b):\n    return np.dot(a, b)\nresult = dot_product(arr1, dot_product(arr2, arr3) * len(arr1))",
 "import numpy as np\nresult = np.dot(arr1, np.dot(arr2, arr3))\nresult *= len(arr1)",
 "import numpy as np\nresult = np.einsum('i,i->', arr1, np.einsum('i,i->', arr2, arr3) * len(arr1))"
]